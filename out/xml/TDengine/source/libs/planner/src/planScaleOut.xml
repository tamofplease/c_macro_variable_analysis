<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/planner/src/planScaleOut.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planInt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SScaleOutContext</name> <block>{
  <decl_stmt><decl><type><name>SPlanContext</name><modifier>*</modifier></type> <name>pPlanCxt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>subplanId</name></decl>;</decl_stmt>
}</block></struct></type> <name>SScaleOutContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>SLogicSubplan</name><modifier>*</modifier></type> <name>singleCloneSubLogicPlan</name><parameter_list>(<parameter><decl><type><name>SScaleOutContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_LOGIC_SUBPLAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pSrc</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pDst</name><operator>-&gt;</operator><name>pNode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>subplanType</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>subplanType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>queryId</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>queryId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>subplanId</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>subplanId</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doSetScanVgroup</name><parameter_list>(<parameter><decl><type><name>SLogicNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pFound</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_LOGIC_PLAN_SCAN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScan</name> <init>= <expr><operator>(</operator><name>SScanLogicNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>pVgroupList</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupsInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pScan</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pScan</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pChild</argument>, <argument>pNode-&gt;pChildren</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doSetScanVgroup</name><argument_list>(<argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pChild</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pFound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name> <operator>||</operator> <operator>*</operator><name>pFound</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setScanVgroup</name><parameter_list>(<parameter><decl><type><name>SLogicNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>doSetScanVgroup</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scaleOutByVgroups</name><parameter_list>(<parameter><decl><type><name>SScaleOutContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSubplan</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pNewSubplan</name> <init>= <expr><call><name>singleCloneSubLogicPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNewSubplan</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setScanVgroup</name><argument_list>(<argument><expr><name><name>pNewSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name>pGroup</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pNewSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scaleOutForMerge</name><parameter_list>(<parameter><decl><type><name>SScaleOutContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name>pGroup</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><call><name>singleCloneSubLogicPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scaleOutForInsertValues</name><parameter_list>(<parameter><decl><type><name>SScaleOutContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>,
                                       <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SVnodeModifyLogicNode</name><operator>*</operator><operator>)</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>                 <name>numOfVgroups</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfVgroups</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pNewSubplan</name> <init>= <expr><call><name>singleCloneSubLogicPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNewSubplan</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SVnodeModifyLogicNode</name><operator>*</operator><operator>)</operator><name><name>pNewSubplan</name><operator>-&gt;</operator><name>pNode</name></name><operator>)</operator><operator>-&gt;</operator><name>pVgDataBlocks</name> <operator>=</operator> <operator>(</operator><name>SVgDataBlocks</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name>pGroup</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pNewSubplan</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scaleOutForInsert</name><parameter_list>(<parameter><decl><type><name>SScaleOutContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SVnodeModifyLogicNode</name><operator>*</operator><operator>)</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>scaleOutForInsertValues</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pGroup</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>scaleOutForMerge</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pGroup</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scaleOutForModify</name><parameter_list>(<parameter><decl><type><name>SScaleOutContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SVnodeModifyLogicNode</name><operator>*</operator><operator>)</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>MODIFY_TABLE_TYPE_DELETE</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>modifyType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>scaleOutByVgroups</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pGroup</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>scaleOutForInsert</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pGroup</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scaleOutForScan</name><parameter_list>(<parameter><decl><type><name>SScaleOutContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pVgroupList</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>streamQuery</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>scaleOutByVgroups</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pGroup</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>scaleOutForMerge</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pGroup</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scaleOutForCompute</name><parameter_list>(<parameter><decl><type><name>SScaleOutContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSubplan</name><operator>-&gt;</operator><name>numOfComputeNodes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pNewSubplan</name> <init>= <expr><call><name>singleCloneSubLogicPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNewSubplan</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name>pGroup</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pNewSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>pushHierarchicalPlanForCompute</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParentsGroup</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCurrentGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pParent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <macro><name>FORBOTH</name><argument_list>(<argument>pChild</argument>, <argument>pCurrentGroup</argument>, <argument>pParent</argument>, <argument>pParentsGroup</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pParent</name><operator>)</operator><operator>-&gt;</operator><name>pChildren</name><operator>)</operator></expr></argument>, <argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pChild</name><operator>)</operator><operator>-&gt;</operator><name>pParents</name><operator>)</operator></expr></argument>, <argument><expr><name>pParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isComputeGroup</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pGroup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SUBPLAN_TYPE_COMPUTE</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pGroup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>subplanType</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>pushHierarchicalPlanForNormal</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParentsGroup</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCurrentGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>topLevel</name> <init>= <expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pParentsGroup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pChild</argument>, <argument>pCurrentGroup</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>topLevel</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListAppend</name><argument_list>(<argument><expr><name>pParentsGroup</name></expr></argument>, <argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <macro><name>FOREACH</name><argument_list>(<argument>pParent</argument>, <argument>pParentsGroup</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pParent</name><operator>)</operator><operator>-&gt;</operator><name>pChildren</name><operator>)</operator></expr></argument>, <argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pChild</name><operator>)</operator><operator>-&gt;</operator><name>pParents</name><operator>)</operator></expr></argument>, <argument><expr><name>pParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>pushHierarchicalPlan</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParentsGroup</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCurrentGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isComputeGroup</name><argument_list>(<argument><expr><name>pParentsGroup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>pushHierarchicalPlanForCompute</name><argument_list>(<argument><expr><name>pParentsGroup</name></expr></argument>, <argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>pushHierarchicalPlanForNormal</name><argument_list>(<argument><expr><name>pParentsGroup</name></expr></argument>, <argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doScaleOut</name><parameter_list>(<parameter><decl><type><name>SScaleOutContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParentsGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCurrentGroup</name> <init>= <expr><call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCurrentGroup</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pSubplan</name><operator>-&gt;</operator><name>subplanType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SUBPLAN_TYPE_MERGE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scaleOutForMerge</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SUBPLAN_TYPE_SCAN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scaleOutForScan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SUBPLAN_TYPE_MODIFY</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scaleOutForModify</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SUBPLAN_TYPE_COMPUTE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scaleOutForCompute</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pushHierarchicalPlan</name><argument_list>(<argument><expr><name>pParentsGroup</name></expr></argument>, <argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pChild</name></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pChild</argument>, <argument>pSubplan-&gt;pChildren</argument>)</argument_list></macro> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doScaleOut</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pChild</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesClearList</name><argument_list>(<argument><expr><name>pCurrentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SQueryLogicPlan</name><modifier>*</modifier></type> <name>makeQueryLogicPlan</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryLogicPlan</name><modifier>*</modifier></type> <name>pLogicPlan</name> <init>= <expr><operator>(</operator><name>SQueryLogicPlan</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_LOGIC_PLAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pLogicPlan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pLogicPlan</name><operator>-&gt;</operator><name>pTopSubplans</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pLogicPlan</name><operator>-&gt;</operator><name>pTopSubplans</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pLogicPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pLogicPlan</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>scaleOutLogicPlan</name><parameter_list>(<parameter><decl><type><name>SPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pLogicSubplan</name></decl></parameter>, <parameter><decl><type><name>SQueryLogicPlan</name><modifier>*</modifier><modifier>*</modifier></type> <name>pLogicPlan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryLogicPlan</name><modifier>*</modifier></type> <name>pPlan</name> <init>= <expr><call><name>makeQueryLogicPlan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pPlan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScaleOutContext</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>pPlanCxt</name> <operator>=</operator> <name>pCxt</name></expr>, <expr><operator>.</operator><name>subplanId</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>doScaleOut</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>pLogicSubplan</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pTopSubplans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pLogicPlan</name> <operator>=</operator> <name>pPlan</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
