<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/planner/src/planner.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpQueryPlan</name><parameter_list>(<parameter><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pPlan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tsQueryPlannerTrace</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesNodeToString</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>planDebugL</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" Query Plan: %s"</literal></expr></argument>, <argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qCreateQueryPlan</name><parameter_list>(<parameter><decl><type><name>SPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQueryPlan</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPlan</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pExecNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type>   <name>pLogicSubplan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryLogicPlan</name><modifier>*</modifier></type> <name>pLogicPlan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodesAcquireAllocator</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>allocatorId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createLogicPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pLogicSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>optimizeLogicPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pLogicSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>splitLogicPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pLogicSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scaleOutLogicPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pLogicSubplan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pLogicPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createPhysiPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pLogicPlan</name></expr></argument>, <argument><expr><name>pPlan</name></expr></argument>, <argument><expr><name>pExecNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dumpQueryPlan</name><argument_list>(<argument><expr><operator>*</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesReleaseAllocator</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>allocatorId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pLogicSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pLogicPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setSubplanExecutionNode</name><parameter_list>(<parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pSource</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pExchange</name> <init>= <expr><operator>(</operator><name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>groupId</name> <operator>&gt;=</operator> <name><name>pExchange</name><operator>-&gt;</operator><name>srcStartGroupId</name></name> <operator>&amp;&amp;</operator> <name>groupId</name> <operator>&lt;=</operator> <name><name>pExchange</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExchange</name><operator>-&gt;</operator><name>pSrcEndPoints</name></name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMergePhysiNode</name><modifier>*</modifier></type> <name>pMerge</name> <init>= <expr><operator>(</operator><name>SMergePhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMerge</name><operator>-&gt;</operator><name>srcGroupId</name></name> <operator>==</operator> <name>groupId</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pExchange</name> <init>=
          <expr><operator>(</operator><name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr></argument>, <argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>numOfChannels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name><name>pMerge</name><operator>-&gt;</operator><name>numOfChannels</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pMerge</name><operator>-&gt;</operator><name>numOfChannels</name></name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>pMerge</name><operator>-&gt;</operator><name>numOfChannels</name></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <return>return <expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pExchange</name><operator>-&gt;</operator><name>pSrcEndPoints</name></name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pChild</argument>, <argument>pNode-&gt;pChildren</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>setSubplanExecutionNode</name><argument_list>(<argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pChild</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>pSource</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qSetSubplanExecutionNode</name><parameter_list>(<parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>subplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SDownstreamSourceNode</name><modifier>*</modifier></type> <name>pSource</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>planDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" set subplan execution node, groupId:%d"</literal></expr></argument>, <argument><expr><name><name>subplan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>queryId</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>setSubplanExecutionNode</name><argument_list>(<argument><expr><name><name>subplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>pSource</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearSubplanExecutionNode</name><parameter_list>(<parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pExchange</name> <init>= <expr><operator>(</operator><name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>NODES_DESTORY_LIST</name><argument_list>(<argument><expr><name><name>pExchange</name><operator>-&gt;</operator><name>pSrcEndPoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMergePhysiNode</name><modifier>*</modifier></type> <name>pMerge</name> <init>= <expr><operator>(</operator><name>SMergePhysiNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pMerge</name><operator>-&gt;</operator><name>numOfChannels</name></name> <operator>=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pChild</argument>, <argument>pMerge-&gt;node.pChildren</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>NODES_DESTORY_LIST</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><name>pChild</name><operator>)</operator><operator>-&gt;</operator><name>pSrcEndPoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pChild</argument>, <argument>pNode-&gt;pChildren</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>clearSubplanExecutionNode</name><argument_list>(<argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qClearSubplanExecutionNode</name><parameter_list>(<parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>planDebug</name><argument_list>(<argument><expr><literal type="string">"QID:0x%"</literal> <name>PRIx64</name> <literal type="string">" clear subplan execution node, groupId:%d"</literal></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>queryId</name></name></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>clearSubplanExecutionNode</name><argument_list>(<argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qSubPlanToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>SUBPLAN_TYPE_MODIFY</name> <operator>==</operator> <name><name>pSubplan</name><operator>-&gt;</operator><name>subplanType</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataInserterNode</name><modifier>*</modifier></type> <name>insert</name> <init>= <expr><operator>(</operator><name>SDataInserterNode</name><operator>*</operator><operator>)</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name><name>insert</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pStr</name> <operator>=</operator> <name><name>insert</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>insert</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>nodesNodeToString</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SNode</name><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>pLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qStringToSubplan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qSubPlanToMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>SUBPLAN_TYPE_MODIFY</name> <operator>==</operator> <name><name>pSubplan</name><operator>-&gt;</operator><name>subplanType</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataInserterNode</name><modifier>*</modifier></type> <name>insert</name> <init>= <expr><operator>(</operator><name>SDataInserterNode</name><operator>*</operator><operator>)</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name><name>insert</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pStr</name> <operator>=</operator> <name><name>insert</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>insert</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>nodesNodeToMsg</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>SNode</name><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>, <argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>pLen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qMsgToSubplan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>nodesMsgToNode</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>qStringToQueryPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pPlan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesStringToNode</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pPlan</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qDestroyQueryPlan</name><parameter_list>(<parameter><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pPlan</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</unit>
