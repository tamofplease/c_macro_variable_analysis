<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/planner/src/planPhysiCreater.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planInt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SSlotIdInfo</name> <block>{
  <decl_stmt><decl><type><name>int16_t</name></type> <name>slotId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>set</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSlotIdInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSlotIndex</name> <block>{
  <decl_stmt><decl><type><name>int16_t</name></type> <name>dataBlockId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pSlotIdsInfo</name></decl>;</decl_stmt>  <comment type="line">// duplicate name slot</comment>
}</block></struct></type> <name>SSlotIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SPhysiPlanContext</name> <block>{
  <decl_stmt><decl><type><name>SPlanContext</name><modifier>*</modifier></type> <name>pPlanCxt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>errCode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>       <name>nextDataBlockId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>       <name>pLocationHelper</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>hasScan</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>hasSysScan</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPhysiPlanContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getSlotKey</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStmtName</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pStmtName</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pStmtName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>pStmtName</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableAlias</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pStmtName</name> <operator>&amp;&amp;</operator> <literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pStmtName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>pStmtName</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>aliasName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createSlotDesc</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>slotId</name></decl></parameter>,
                             <parameter><decl><type><name>bool</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reserve</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSlotDescNode</name><modifier>*</modifier></type> <name>pSlot</name> <init>= <expr><operator>(</operator><name>SSlotDescNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_SLOT_DESC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSlot</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pSlot</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSlot</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSlot</name><operator>-&gt;</operator><name>slotId</name></name> <operator>=</operator> <name>slotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSlot</name><operator>-&gt;</operator><name>dataType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSlot</name><operator>-&gt;</operator><name>reserve</name></name> <operator>=</operator> <name>reserve</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSlot</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSlot</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTarget</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dataBlockId</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>slotId</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STargetNode</name><modifier>*</modifier></type> <name>pTarget</name> <init>= <expr><operator>(</operator><name>STargetNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_TARGET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTarget</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTarget</name><operator>-&gt;</operator><name>dataBlockId</name></name> <operator>=</operator> <name>dataBlockId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTarget</name><operator>-&gt;</operator><name>slotId</name></name> <operator>=</operator> <name>slotId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTarget</name><operator>-&gt;</operator><name>pExpr</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pTarget</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putSlotToHashImpl</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>dataBlockId</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>slotId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSlotIndex</name><modifier>*</modifier></type> <name>pIndex</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pIndex</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSlotIdInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><operator>.</operator><name>slotId</name> <operator>=</operator> <name>slotId</name></expr>, <expr><operator>.</operator><name>set</name> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pSlotIdsInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSlotIndex</name></type> <name>index</name> <init>= <expr><block>{<expr><operator>.</operator><name>dataBlockId</name> <operator>=</operator> <name>dataBlockId</name></expr>, <expr><operator>.</operator><name>pSlotIdsInfo</name> <operator>=</operator> <macro><name>taosArrayInit</name><argument_list>(<argument>TARRAY_MIN_SIZE</argument>, <argument>sizeof(SSlotIdInfo)</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>index</name><operator>.</operator><name>pSlotIdsInfo</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSlotIdInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><operator>.</operator><name>slotId</name> <operator>=</operator> <name>slotId</name></expr>, <expr><operator>.</operator><name>set</name> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>index</name><operator>.</operator><name>pSlotIdsInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSlotIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>putSlotToHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dataBlockId</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>slotId</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>putSlotToHashImpl</name><argument_list>(<argument><expr><name>dataBlockId</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createDataBlockDescHash</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dataBlockId</name></decl></parameter>,
                                       <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDescHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pHash</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pLocationHelper</name></name></expr></argument>, <argument><expr><name>dataBlockId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pHash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pDescHash</name> <operator>=</operator> <name>pHash</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildDataBlockSlots</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDataBlockDesc</name></decl></parameter>,
                                   <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>slotId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>TSDB_COL_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getSlotKey</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>, <argument><expr><call><name>createSlotDesc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putSlotToHash</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>slotId</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createDataBlockDesc</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBlockDesc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDesc</name> <init>= <expr><operator>(</operator><name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DATABLOCK_DESC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDesc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>nextDataBlockId</name></name><operator>++</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>createDataBlockDescHash</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pDesc</name></expr></argument>, <argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDataBlockDesc</name> <operator>=</operator> <name>pDesc</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>getUnsetSlotId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pSlotIdsInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pSlotIdsInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSlotIdInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pSlotIdsInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>set</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>slotId</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>(</operator><operator>(</operator><name>SSlotIdInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pSlotIdsInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addDataBlockSlotsImpl</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDataBlockDesc</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStmtName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reserve</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pLocationHelper</name></name></expr></argument>, <argument><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>   <name>nextSlotId</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>slotId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>    <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>      <name>pExpr</name> <init>= <expr><ternary><condition><expr><name>QUERY_NODE_ORDER_BY_EXPR</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>SOrderByExprNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pExpr</name></expr> </then><else>: <expr><name>pNode</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>name</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>TSDB_COL_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>len</name> <init>= <expr><call><name>getSlotKey</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pStmtName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSlotIndex</name><modifier>*</modifier></type> <name>pIndex</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator>
          <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>, <argument><expr><call><name>createSlotDesc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>nextSlotId</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>reserve</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>putSlotToHashImpl</name><argument_list>(<argument><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name>nextSlotId</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pExpr</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pExpr</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>slotId</name> <operator>=</operator> <name>nextSlotId</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>nextSlotId</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>slotId</name> <operator>=</operator> <call><name>getUnsetSlotId</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pSlotIdsInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pTarget</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createTarget</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name><name>pDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>REPLACE_NODE</name><argument_list>(<argument><expr><name>pTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addDataBlockSlots</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDataBlockDesc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>addDataBlockSlotsImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pDataBlockDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addDataBlockSlot</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDataBlockDesc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>*</operator><name>pNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>, <argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pDataBlockDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesClearList</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addDataBlockSlotsForProject</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStmtName</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>,
                                           <parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDataBlockDesc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>addDataBlockSlotsImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pDataBlockDesc</name></expr></argument>, <argument><expr><name>pStmtName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>pushdownDataBlockSlots</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pDataBlockDesc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>addDataBlockSlotsImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pDataBlockDesc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SSetSlotIdCxt</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>errCode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pLeftHash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pRightHash</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSetSlotIdCxt</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpSlots</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pHash</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>planDebug</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIt</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pIt</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>pKey</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>   <name><name>name</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>TSDB_COL_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>planDebug</name><argument_list>(<argument><expr><literal type="string">"\tslot name = %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIt</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>pIt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>doSetSlotId</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>!=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>colName</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSetSlotIdCxt</name><modifier>*</modifier></type> <name>pCxt</name> <init>= <expr><operator>(</operator><name>SSetSlotIdCxt</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>           <name><name>name</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>TSDB_COL_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>        <name>len</name> <init>= <expr><call><name>getSlotKey</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSlotIndex</name><modifier>*</modifier></type>    <name>pIndex</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pLeftHash</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pIndex</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pRightHash</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// pIndex is definitely not NULL, otherwise it is a bug</comment>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pIndex</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>planError</name><argument_list>(<argument><expr><literal type="string">"doSetSlotId failed, invalid slot name %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dumpSlots</name><argument_list>(<argument><expr><literal type="string">"left datablock desc"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pLeftHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dumpSlots</name><argument_list>(<argument><expr><literal type="string">"right datablock desc"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pRightHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_PLAN_INTERNAL_ERROR</name></expr>;</expr_stmt>
      <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>dataBlockId</name> <operator>=</operator> <name><name>pIndex</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>slotId</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SSlotIdInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pSlotIdsInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>slotId</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setNodeSlotId</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>leftDataBlockId</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>rightDataBlockId</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>,
                             <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRes</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSetSlotIdCxt</name></type> <name>cxt</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>errCode</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>,
      <expr><operator>.</operator><name>pLeftHash</name> <operator>=</operator> <call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pLocationHelper</name></name></expr></argument>, <argument><expr><name>leftDataBlockId</name></expr></argument>)</argument_list></call></expr>,
      <expr><operator>.</operator><name>pRightHash</name> <operator>=</operator> <operator>(</operator><name>rightDataBlockId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>?</operator> <name>NULL</name> <operator>:</operator> <call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pLocationHelper</name></name></expr></argument>, <argument><expr><name>rightDataBlockId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesWalkExpr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>doSetSlotId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>cxt</name><operator>.</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>cxt</name><operator>.</operator><name>errCode</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pRes</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setListSlotId</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>leftDataBlockId</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>rightDataBlockId</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>nodesCloneList</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRes</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSetSlotIdCxt</name></type> <name>cxt</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>errCode</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>,
      <expr><operator>.</operator><name>pLeftHash</name> <operator>=</operator> <call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pLocationHelper</name></name></expr></argument>, <argument><expr><name>leftDataBlockId</name></expr></argument>)</argument_list></call></expr>,
      <expr><operator>.</operator><name>pRightHash</name> <operator>=</operator> <operator>(</operator><name>rightDataBlockId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>?</operator> <name>NULL</name> <operator>:</operator> <call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pLocationHelper</name></name></expr></argument>, <argument><expr><name>rightDataBlockId</name></expr></argument>)</argument_list></call><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesWalkExprs</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>doSetSlotId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>cxt</name><operator>.</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>cxt</name><operator>.</operator><name>errCode</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pRes</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SPhysiNode</name><modifier>*</modifier></type> <name>makePhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicNode</name><modifier>*</modifier></type> <name>pLogicNode</name></decl></parameter>, <parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pPhysiNode</name> <init>= <expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pPhysiNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pPhysiNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>, <argument><expr><name><name>pLogicNode</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pPhysiNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>, <argument><expr><name><name>pLogicNode</name><operator>-&gt;</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createDataBlockDesc</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pLogicNode</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPhysiNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPhysiNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pPhysiNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pLogicNode</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <return>return <expr><name>pPhysiNode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setConditionsSlotId</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SLogicNode</name><modifier>*</modifier></type> <name>pLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pPhysiNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pLogicNode</name><operator>-&gt;</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pPhysiNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pLogicNode</name><operator>-&gt;</operator><name>pConditions</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>pPhysiNode</name><operator>-&gt;</operator><name>pConditions</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>colIdCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pLeftCol</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pLeft</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pRightCol</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pRight</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name><name>pLeftCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>&gt;</operator> <name><name>pRightCol</name><operator>-&gt;</operator><name>colId</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sortScanCols</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pScanCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pScanCols</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pCol</argument>, <argument>pScanCols</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>colIdCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pCol</argument>, <argument>pScanCols</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>REPLACE_NODE</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createScanCols</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pScanPhysiNode</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pScanCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pScanCols</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>pScanCols</name></name> <operator>=</operator> <call><name>nodesCloneList</name><argument_list>(<argument><expr><name>pScanCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sortScanCols</name><argument_list>(<argument><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createScanPhysiNodeFinalize</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScanLogicNode</name></decl></parameter>,
                                           <parameter><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pScanPhysiNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createScanCols</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pScanPhysiNode</name></expr></argument>, <argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>, <argument><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name> <operator>=</operator> <call><name>nodesCloneList</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr></argument>, <argument><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pScanLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pScanPhysiNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>tableId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>stableId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pScanPhysiNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pTagCond</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pTagCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSubplan</name><operator>-&gt;</operator><name>pTagCond</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pTagIndexCond</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pTagIndexCond</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pTagIndexCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pSubplan</name><operator>-&gt;</operator><name>pTagIndexCond</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pScanPhysiNode</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pScanPhysiNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vgroupInfoToNodeAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SVgroupInfo</name><modifier>*</modifier></type> <name>vg</name></decl></parameter>, <parameter><decl><type><name>SQueryNodeAddr</name><modifier>*</modifier></type> <name>pNodeAddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pNodeAddr</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>=</operator> <name><name>vg</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNodeAddr</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name><name>vg</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ENodeType</name></type> <name>getScanOperatorType</name><parameter_list>(<parameter><decl><type><name>EScanType</name></type> <name>scanType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>scanType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SCAN_TYPE_TAG</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_TABLE</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_STREAM</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_TABLE_MERGE</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_BLOCK_INFO</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_BLOCK_DIST_SCAN</name></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_TABLE_COUNT</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createSimpleScanPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScanLogicNode</name></decl></parameter>,
                                         <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pScan</name> <init>=
      <expr><operator>(</operator><name>SScanPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pScanLogicNode</name></expr></argument>, <argument><expr><call><name>getScanOperatorType</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>scanType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pScan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>vgroupInfoToNodeAddr</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>createScanPhysiNodeFinalize</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pScan</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createLastRowScanPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScanLogicNode</name></decl></parameter>,
                                          <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLastRowScanPhysiNode</name><modifier>*</modifier></type> <name>pScan</name> <init>=
      <expr><operator>(</operator><name>SLastRowScanPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_LAST_ROW_SCAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pScan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>pGroupTags</name></name> <operator>=</operator> <call><name>nodesCloneList</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pGroupTags</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pScan</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>groupSort</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>ignoreNull</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>igLastNull</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vgroupInfoToNodeAddr</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>createScanPhysiNodeFinalize</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pScan</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTableCountScanPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>,
                                             <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScanLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableCountScanPhysiNode</name><modifier>*</modifier></type> <name>pScan</name> <init>= <expr><operator>(</operator><name>STableCountScanPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pScanLogicNode</name></expr></argument>,
                                                                             <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pScan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>pGroupTags</name></name> <operator>=</operator> <call><name>nodesCloneList</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pGroupTags</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pScan</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>groupSort</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vgroupInfoToNodeAddr</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>createScanPhysiNodeFinalize</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pScan</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTableScanPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScanLogicNode</name></decl></parameter>,
                                        <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableScanPhysiNode</name><modifier>*</modifier></type> <name>pTableScan</name> <init>= <expr><operator>(</operator><name>STableScanPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pScanLogicNode</name></expr></argument>,
                                                                        <argument><expr><call><name>getScanOperatorType</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>scanType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTableScan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>scanSeq</name></name></expr></argument>, <argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>scanSeq</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>scanSeq</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>scanRange</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>scanRange</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>ratio</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>ratio</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pVgroupList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vgroupInfoToNodeAddr</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>execNodeStat</name><operator>.</operator><name>tableNum</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>numOfTable</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>dataRequired</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>dataRequired</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name> <operator>=</operator> <call><name>nodesCloneList</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>pGroupTags</name></name> <operator>=</operator> <call><name>nodesCloneList</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>!=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pTableScan</name><operator>-&gt;</operator><name>pDynamicScanFuncs</name></name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>NULL</name> <operator>!=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pGroupTags</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pTableScan</name><operator>-&gt;</operator><name>pGroupTags</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pTableScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>groupSort</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>sliding</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>sliding</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>slidingUnit</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>triggerType</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>watermark</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>watermark</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>igExpired</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>assignBlockUid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>rSmaQuery</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createScanPhysiNodeFinalize</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pTableScan</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>pTableScan</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pTableScan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>pTableScan</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createSystemTableScanPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>,
                                              <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScanLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSystemTableScanPhysiNode</name><modifier>*</modifier></type> <name>pScan</name> <init>= <expr><operator>(</operator><name>SSystemTableScanPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pScanLogicNode</name></expr></argument>,
                                                                               <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pScan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>showRewrite</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>showRewrite</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>accountId</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>acctId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>sysInfo</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>sysInfo</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>tableName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>tableName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TAGS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vgroupInfoToNodeAddr</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name>MNODE_HANDLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>tableName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_DNODE_VARIABLES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>mgmtEpSet</name></name> <operator>=</operator> <name><name>pScanLogicNode</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>mgmtEpSet</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasSysScan</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><call><name>createScanPhysiNodeFinalize</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SScanPhysiNode</name><operator>*</operator><operator>)</operator><name>pScan</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createStreamScanPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScanLogicNode</name></decl></parameter>,
                                         <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>createTableScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createTableMergeScanPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>,
                                             <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScanLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>createTableScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createScanPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>SScanLogicNode</name><modifier>*</modifier></type> <name>pScanLogicNode</name></decl></parameter>,
                                   <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasScan</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>pScanLogicNode</name><operator>-&gt;</operator><name>scanType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SCAN_TYPE_TAG</name></expr>:</case>
    <case>case <expr><name>SCAN_TYPE_BLOCK_INFO</name></expr>:</case>
      <return>return <expr><call><name>createSimpleScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_TABLE_COUNT</name></expr>:</case>
      <return>return <expr><call><name>createTableCountScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_LAST_ROW</name></expr>:</case>
      <return>return <expr><call><name>createLastRowScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_TABLE</name></expr>:</case>
      <return>return <expr><call><name>createTableScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_SYSTEM_TABLE</name></expr>:</case>
      <return>return <expr><call><name>createSystemTableScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_STREAM</name></expr>:</case>
      <return>return <expr><call><name>createStreamScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SCAN_TYPE_TABLE_MERGE</name></expr>:</case>
      <return>return <expr><call><name>createTableMergeScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pScanLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createJoinPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>, <parameter><decl><type><name>SJoinLogicNode</name><modifier>*</modifier></type> <name>pJoinLogicNode</name></decl></parameter>,
                                   <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortMergeJoinPhysiNode</name><modifier>*</modifier></type> <name>pJoin</name> <init>=
      <expr><operator>(</operator><name>SSortMergeJoinPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pJoinLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_JOIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pJoin</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pLeftDesc</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pRightDesc</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pJoin</name><operator>-&gt;</operator><name>joinType</name></name> <operator>=</operator> <name><name>pJoinLogicNode</name><operator>-&gt;</operator><name>joinType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJoin</name><operator>-&gt;</operator><name>inputTsOrder</name></name> <operator>=</operator> <name><name>pJoinLogicNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pLeftDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>pRightDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>pJoinLogicNode</name><operator>-&gt;</operator><name>pMergeCondition</name></name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name><name>pJoin</name><operator>-&gt;</operator><name>pMergeCondition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pLeftDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>pRightDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><name><name>pJoinLogicNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pTargets</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>pJoin</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pJoin</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name><name>pJoin</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pJoinLogicNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pCondCols</name> <init>= <expr><call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCondCols</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesCollectColumnsFromNode</name><argument_list>(<argument><expr><name><name>pJoinLogicNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COLLECT_COL_TYPE_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCondCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pCondCols</name></expr></argument>, <argument><expr><name><name>pJoin</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pCondCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pJoinLogicNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pJoin</name><operator>)</operator><operator>-&gt;</operator><name><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                         <argument><expr><name><name>pJoinLogicNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pJoin</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pJoinLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pJoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pJoin</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pJoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SRewritePrecalcExprsCxt</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>errCode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>planNodeId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>rewriteId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPrecalcExprs</name></decl>;</decl_stmt>
}</block></struct></type> <name>SRewritePrecalcExprsCxt</name>;</typedef>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>collectAndRewrite</name><parameter_list>(<parameter><decl><type><name>SRewritePrecalcExprsCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pExpr</name> <init>= <expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pExpr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPrecalcExprs</name></name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pRewrittenExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pRewrittenExpr</name><operator>-&gt;</operator><name>resType</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pRewrittenExpr</name><operator>-&gt;</operator><name>aliasName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pRewrittenExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pRewrittenExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRewrittenExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"#expr_%d_%d"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>planNodeId</name></name></expr></argument>,
             <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>rewriteId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pRewrittenExpr</name><operator>-&gt;</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</expr_stmt>
  <return>return <expr><name>DEAL_RES_IGNORE_CHILD</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewriteValueToOperator</name><parameter_list>(<parameter><decl><type><name>SRewritePrecalcExprsCxt</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SOperatorNode</name><modifier>*</modifier></type> <name>pOper</name> <init>= <expr><operator>(</operator><name>SOperatorNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_OPERATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pOper</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name> <operator>=</operator> <call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_LEFT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pOper</name><operator>-&gt;</operator><name>pLeft</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOper</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pOper</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOper</name><operator>-&gt;</operator><name>opType</name></name> <operator>=</operator> <name>OP_TYPE_ASSIGN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOper</name><operator>-&gt;</operator><name>pRight</name></name> <operator>=</operator> <operator>*</operator><name>pNode</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pOper</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EDealRes</name></type> <name>doRewritePrecalcExprs</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRewritePrecalcExprsCxt</name><modifier>*</modifier></type> <name>pCxt</name> <init>= <expr><operator>(</operator><name>SRewritePrecalcExprsCxt</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_VALUE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>notReserved</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <call><name>rewriteValueToOperator</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>DEAL_RES_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>collectAndRewrite</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_OPERATOR</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_LOGIC_CONDITION</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_CASE_WHEN</name></expr>:</case> <block>{<block_content>
      <return>return <expr><call><name>collectAndRewrite</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_FUNCTION</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>fmIsScalarFunc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pNode</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>funcId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>collectAndRewrite</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>DEAL_RES_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewritePrecalcExprs</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPrecalcExprs</name></decl></parameter>,
                                   <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRewrittenList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pPrecalcExprs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPrecalcExprs</name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pPrecalcExprs</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pRewrittenList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pRewrittenList</name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pRewrittenList</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pList</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_GROUPING_SET</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SGroupingSetNode</name><operator>*</operator><operator>)</operator><name>pNode</name><operator>)</operator><operator>-&gt;</operator><name>pParameterList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNew</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListAppend</name><argument_list>(<argument><expr><operator>*</operator><name>pRewrittenList</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <decl_stmt><decl><type><name>SRewritePrecalcExprsCxt</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>errCode</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>, <expr><operator>.</operator><name>pPrecalcExprs</name> <operator>=</operator> <operator>*</operator><name>pPrecalcExprs</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesRewriteExprs</name><argument_list>(<argument><expr><operator>*</operator><name>pRewrittenList</name></expr></argument>, <argument><expr><name>doRewritePrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>pPrecalcExprs</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name><name>cxt</name><operator>.</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>NODES_DESTORY_LIST</name><argument_list>(<argument><expr><operator>*</operator><name>pPrecalcExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>cxt</name><operator>.</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rewritePrecalcExpr</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pNode</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPrecalcExprs</name></decl></parameter>,
                                  <parameter><decl><type><name>SNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRewritten</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pRewrittenList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewritePrecalcExprs</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRewrittenList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pRewritten</name> <operator>=</operator> <call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pRewrittenList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesClearList</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesClearList</name><argument_list>(<argument><expr><name>pRewrittenList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createAggPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>, <parameter><decl><type><name>SAggLogicNode</name><modifier>*</modifier></type> <name>pAggLogicNode</name></decl></parameter>,
                                  <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAggPhysiNode</name><modifier>*</modifier></type> <name>pAgg</name> <init>=
      <expr><operator>(</operator><name>SAggPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pAggLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_AGG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pAgg</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pAgg</name><operator>-&gt;</operator><name>mergeDataBlock</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>GROUP_ACTION_KEEP</name> <operator>==</operator> <name><name>pAggLogicNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>groupAction</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPrecalcExprs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pGroupKeys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pAggFuncs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>rewritePrecalcExprs</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pAggLogicNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pGroupKeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewritePrecalcExprs</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pAggLogicNode</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAggFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pChildTupe</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <comment type="line">// push down expression to pOutputDataBlockDesc of child node</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pPrecalcExprs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pushdownDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>pChildTupe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pGroupKeys</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pGroupKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pAggFuncs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pAggFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pAggLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pAgg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pAgg</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pAgg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pPrecalcExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pGroupKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pAggFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createIndefRowsFuncPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>,
                                            <parameter><decl><type><name>SIndefRowsFuncLogicNode</name><modifier>*</modifier></type> <name>pFuncLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIndefRowsFuncPhysiNode</name><modifier>*</modifier></type> <name>pIdfRowsFunc</name> <init>= <expr><operator>(</operator><name>SIndefRowsFuncPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(
      <argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pFuncLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_INDEF_ROWS_FUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pIdfRowsFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPrecalcExprs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pFuncs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>rewritePrecalcExprs</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pFuncLogicNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pChildTupe</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <comment type="line">// push down expression to pOutputDataBlockDesc of child node</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pPrecalcExprs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIdfRowsFunc</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pushdownDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pIdfRowsFunc</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>pChildTupe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIdfRowsFunc</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pIdfRowsFunc</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name><name>pIdfRowsFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pFuncLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pIdfRowsFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pIdfRowsFunc</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pIdfRowsFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pPrecalcExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createInterpFuncPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>,
                                         <parameter><decl><type><name>SInterpFuncLogicNode</name><modifier>*</modifier></type> <name>pFuncLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInterpFuncPhysiNode</name><modifier>*</modifier></type> <name>pInterpFunc</name> <init>=
      <expr><operator>(</operator><name>SInterpFuncPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pFuncLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_INTERP_FUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInterpFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPrecalcExprs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pFuncs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>rewritePrecalcExprs</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pFuncLogicNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pChildTupe</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <comment type="line">// push down expression to pOutputDataBlockDesc of child node</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pPrecalcExprs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInterpFunc</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pushdownDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pInterpFunc</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>pChildTupe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInterpFunc</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pInterpFunc</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name><name>pInterpFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInterpFunc</name><operator>-&gt;</operator><name>timeRange</name></name> <operator>=</operator> <name><name>pFuncLogicNode</name><operator>-&gt;</operator><name>timeRange</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInterpFunc</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <name><name>pFuncLogicNode</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInterpFunc</name><operator>-&gt;</operator><name>fillMode</name></name> <operator>=</operator> <name><name>pFuncLogicNode</name><operator>-&gt;</operator><name>fillMode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInterpFunc</name><operator>-&gt;</operator><name>pFillValues</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pFuncLogicNode</name><operator>-&gt;</operator><name>pFillValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pFuncLogicNode</name><operator>-&gt;</operator><name>pFillValues</name></name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pInterpFunc</name><operator>-&gt;</operator><name>pFillValues</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pFuncLogicNode</name><operator>-&gt;</operator><name>pTimeSeries</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInterpFunc</name><operator>-&gt;</operator><name>pTimeSeries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pFuncLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pInterpFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pInterpFunc</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pInterpFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pPrecalcExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>projectCanMergeDataBlock</name><parameter_list>(<parameter><decl><type><name>SProjectLogicNode</name><modifier>*</modifier></type> <name>pProject</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>GROUP_ACTION_KEEP</name> <operator>==</operator> <name><name>pProject</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>groupAction</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>DATA_ORDER_LEVEL_NONE</name> <operator>==</operator> <name><name>pProject</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resultDataOrder</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pProject</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SLogicNode</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pProject</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>DATA_ORDER_LEVEL_GLOBAL</name> <operator>==</operator> <name><name>pChild</name><operator>-&gt;</operator><name>resultDataOrder</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createProjectPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>,
                                      <parameter><decl><type><name>SProjectLogicNode</name><modifier>*</modifier></type> <name>pProjectLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SProjectPhysiNode</name><modifier>*</modifier></type> <name>pProject</name> <init>=
      <expr><operator>(</operator><name>SProjectPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pProjectLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_PROJECT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pProject</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pProject</name><operator>-&gt;</operator><name>mergeDataBlock</name></name> <operator>=</operator> <call><name>projectCanMergeDataBlock</name><argument_list>(<argument><expr><name>pProjectLogicNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pProject</name><operator>-&gt;</operator><name>ignoreGroupId</name></name> <operator>=</operator> <name><name>pProjectLogicNode</name><operator>-&gt;</operator><name>ignoreGroupId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pProject</name><operator>-&gt;</operator><name>pProjections</name></name> <operator>=</operator> <call><name>nodesCloneList</name><argument_list>(<argument><expr><name><name>pProjectLogicNode</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pProject</name><operator>-&gt;</operator><name>pProjections</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                         <argument><expr><name><name>pProjectLogicNode</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pProject</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlotsForProject</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pProjectLogicNode</name><operator>-&gt;</operator><name>stmtName</name></name></expr></argument>, <argument><expr><name><name>pProject</name><operator>-&gt;</operator><name>pProjections</name></name></expr></argument>,
                                       <argument><expr><name><name>pProject</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pProjectLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pProject</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doCreateExchangePhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SExchangeLogicNode</name><modifier>*</modifier></type> <name>pExchangeLogicNode</name></decl></parameter>,
                                         <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pExchange</name> <init>=
      <expr><operator>(</operator><name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pExchangeLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pExchange</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pExchange</name><operator>-&gt;</operator><name>srcStartGroupId</name></name> <operator>=</operator> <name><name>pExchangeLogicNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExchange</name><operator>-&gt;</operator><name>srcEndGroupId</name></name> <operator>=</operator> <name><name>pExchangeLogicNode</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExchange</name><operator>-&gt;</operator><name>seqRecvData</name></name> <operator>=</operator> <name><name>pExchangeLogicNode</name><operator>-&gt;</operator><name>seqRecvData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pExchange</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createStreamScanPhysiNodeByExchange</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SExchangeLogicNode</name><modifier>*</modifier></type> <name>pExchangeLogicNode</name></decl></parameter>,
                                                   <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScanPhysiNode</name><modifier>*</modifier></type> <name>pScan</name> <init>=
      <expr><operator>(</operator><name>SScanPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pExchangeLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SCAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pScan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pScan</name><operator>-&gt;</operator><name>pScanCols</name></name> <operator>=</operator> <call><name>nodesCloneList</name><argument_list>(<argument><expr><name><name>pExchangeLogicNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pScan</name><operator>-&gt;</operator><name>pScanCols</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sortScanCols</name><argument_list>(<argument><expr><name><name>pScan</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sortScanCols</name><argument_list>(<argument><expr><name><name>pScan</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pScan</name><operator>-&gt;</operator><name>pScanCols</name></name></expr></argument>, <argument><expr><name><name>pScan</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pScan</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createExchangePhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SExchangeLogicNode</name><modifier>*</modifier></type> <name>pExchangeLogicNode</name></decl></parameter>,
                                       <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>streamQuery</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>createStreamScanPhysiNodeByExchange</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pExchangeLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>doCreateExchangePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pExchangeLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createWindowPhysiNodeFinalize</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>, <parameter><decl><type><name>SWinodwPhysiNode</name><modifier>*</modifier></type> <name>pWindow</name></decl></parameter>,
                                             <parameter><decl><type><name>SWindowLogicNode</name><modifier>*</modifier></type> <name>pWindowLogicNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pWindow</name><operator>-&gt;</operator><name>triggerType</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>triggerType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWindow</name><operator>-&gt;</operator><name>watermark</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>watermark</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWindow</name><operator>-&gt;</operator><name>deleteMark</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>deleteMark</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWindow</name><operator>-&gt;</operator><name>igExpired</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>igExpired</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWindow</name><operator>-&gt;</operator><name>inputTsOrder</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWindow</name><operator>-&gt;</operator><name>outputTsOrder</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>outputTsOrder</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWindow</name><operator>-&gt;</operator><name>mergeDataBlock</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>GROUP_ACTION_KEEP</name> <operator>==</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>groupAction</name></name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPrecalcExprs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pFuncs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>rewritePrecalcExprs</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pChildTupe</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <comment type="line">// push down expression to pOutputDataBlockDesc of child node</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pPrecalcExprs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWindow</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pWindow</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>pChildTupe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>pTspk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWindow</name><operator>-&gt;</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>pTsEnd</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>pTsEnd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWindow</name><operator>-&gt;</operator><name>pTsEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pFuncs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pFuncs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWindow</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pWindow</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name><name>pWindow</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pWindowLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pPrecalcExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ENodeType</name></type> <name>getIntervalOperatorType</name><parameter_list>(<parameter><decl><type><name>EWindowAlgorithm</name></type> <name>windowAlgo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>windowAlgo</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>INTERVAL_ALGO_HASH</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>;</return>
    <case>case <expr><name>INTERVAL_ALGO_MERGE</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr>;</return>
    <case>case <expr><name>INTERVAL_ALGO_STREAM_FINAL</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_INTERVAL</name></expr>;</return>
    <case>case <expr><name>INTERVAL_ALGO_STREAM_SEMI</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_INTERVAL</name></expr>;</return>
    <case>case <expr><name>INTERVAL_ALGO_STREAM_SINGLE</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_INTERVAL</name></expr>;</return>
    <case>case <expr><name>SESSION_ALGO_STREAM_FINAL</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FINAL_SESSION</name></expr>;</return>
    <case>case <expr><name>SESSION_ALGO_STREAM_SEMI</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SEMI_SESSION</name></expr>;</return>
    <case>case <expr><name>SESSION_ALGO_STREAM_SINGLE</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_SESSION</name></expr>;</return>
    <case>case <expr><name>SESSION_ALGO_MERGE</name></expr>:</case>
      <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_SESSION</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createIntervalPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>,
                                       <parameter><decl><type><name>SWindowLogicNode</name><modifier>*</modifier></type> <name>pWindowLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SIntervalPhysiNode</name><modifier>*</modifier></type> <name>pInterval</name> <init>= <expr><operator>(</operator><name>SIntervalPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(
      <argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pWindowLogicNode</name></expr></argument>, <argument><expr><call><name>getIntervalOperatorType</name><argument_list>(<argument><expr><name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>windowAlgo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInterval</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInterval</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>sliding</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createWindowPhysiNodeFinalize</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInterval</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>pWindowLogicNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pInterval</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createSessionWindowPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>,
                                            <parameter><decl><type><name>SWindowLogicNode</name><modifier>*</modifier></type> <name>pWindowLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSessionWinodwPhysiNode</name><modifier>*</modifier></type> <name>pSession</name> <init>= <expr><operator>(</operator><name>SSessionWinodwPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(
      <argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pWindowLogicNode</name></expr></argument>, <argument><expr><call><name>getIntervalOperatorType</name><argument_list>(<argument><expr><name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>windowAlgo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSession</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSession</name><operator>-&gt;</operator><name>gap</name></name> <operator>=</operator> <name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>sessionGap</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createWindowPhysiNodeFinalize</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSession</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>pWindowLogicNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pSession</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createStateWindowPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>,
                                          <parameter><decl><type><name>SWindowLogicNode</name><modifier>*</modifier></type> <name>pWindowLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStateWinodwPhysiNode</name><modifier>*</modifier></type> <name>pState</name> <init>= <expr><operator>(</operator><name>SStateWinodwPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(
      <argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pWindowLogicNode</name></expr></argument>,
      <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>streamQuery</name></name></expr> ?</condition><then> <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_STATE</name></expr> </then><else>: <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_STATE</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pState</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPrecalcExprs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>     <name>pStateKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>rewritePrecalcExpr</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>pStateExpr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStateKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pChildTupe</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <comment type="line">// push down expression to pOutputDataBlockDesc of child node</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pPrecalcExprs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>pChildTupe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pStateKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pStateKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlot</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>pStateKey</name></name></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createWindowPhysiNodeFinalize</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pState</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>pWindowLogicNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pState</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pPrecalcExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pStateKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createWindowPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>, <parameter><decl><type><name>SWindowLogicNode</name><modifier>*</modifier></type> <name>pWindowLogicNode</name></decl></parameter>,
                                     <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>pWindowLogicNode</name><operator>-&gt;</operator><name>winType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>WINDOW_TYPE_INTERVAL</name></expr>:</case>
      <return>return <expr><call><name>createIntervalPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><name>pWindowLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>WINDOW_TYPE_SESSION</name></expr>:</case>
      <return>return <expr><call><name>createSessionWindowPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><name>pWindowLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>WINDOW_TYPE_STATE</name></expr>:</case>
      <return>return <expr><call><name>createStateWindowPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><name>pWindowLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createSortPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>, <parameter><decl><type><name>SSortLogicNode</name><modifier>*</modifier></type> <name>pSortLogicNode</name></decl></parameter>,
                                   <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSortPhysiNode</name><modifier>*</modifier></type> <name>pSort</name> <init>= <expr><operator>(</operator><name>SSortPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(
      <argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pSortLogicNode</name></expr></argument>,
      <argument><expr><ternary><condition><expr><name><name>pSortLogicNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr> ?</condition><then> <expr><name>QUERY_NODE_PHYSICAL_PLAN_GROUP_SORT</name></expr> </then><else>: <expr><name>QUERY_NODE_PHYSICAL_PLAN_SORT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSort</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPrecalcExprs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pSortKeys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>rewritePrecalcExprs</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSortLogicNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSortKeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pChildTupe</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <comment type="line">// push down expression to pOutputDataBlockDesc of child node</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pPrecalcExprs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSort</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pushdownDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSort</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>pChildTupe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pSortKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSort</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pSortLogicNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pTargets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSort</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSort</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name><name>pSort</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pSortLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pSort</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pPrecalcExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pSortKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createPartitionPhysiNodeImpl</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>,
                                            <parameter><decl><type><name>SPartitionLogicNode</name><modifier>*</modifier></type> <name>pPartLogicNode</name></decl></parameter>, <parameter><decl><type><name>ENodeType</name></type> <name>type</name></decl></parameter>,
                                            <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPartitionPhysiNode</name><modifier>*</modifier></type> <name>pPart</name> <init>= <expr><operator>(</operator><name>SPartitionPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pPartLogicNode</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pPart</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPrecalcExprs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pPartitionKeys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>rewritePrecalcExprs</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pPartLogicNode</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPartitionKeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pChildTupe</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <comment type="line">// push down expression to pOutputDataBlockDesc of child node</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pPrecalcExprs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pPrecalcExprs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPart</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pushdownDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pPart</name><operator>-&gt;</operator><name>pExprs</name></name></expr></argument>, <argument><expr><name>pChildTupe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pPartitionKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPart</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pPartLogicNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pTargets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPart</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pPart</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name><name>pPart</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pPartLogicNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pPart</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pPrecalcExprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pPartitionKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createStreamPartitionPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>,
                                              <parameter><decl><type><name>SPartitionLogicNode</name><modifier>*</modifier></type> <name>pPartLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamPartitionPhysiNode</name><modifier>*</modifier></type> <name>pPart</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>                    <name>code</name> <init>= <expr><call><name>createPartitionPhysiNodeImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><name>pPartLogicNode</name></expr></argument>,
                                                                 <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_PARTITION</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pPart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type>        <name>pChildTupe</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pPartLogicNode</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPart</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pPartLogicNode</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPart</name><operator>-&gt;</operator><name>pSubtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pPart</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createPartitionPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>,
                                        <parameter><decl><type><name>SPartitionLogicNode</name><modifier>*</modifier></type> <name>pPartLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>streamQuery</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>createStreamPartitionPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><name>pPartLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>createPartitionPhysiNodeImpl</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><name>pPartLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createFillPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>, <parameter><decl><type><name>SFillLogicNode</name><modifier>*</modifier></type> <name>pFillNode</name></decl></parameter>,
                                   <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFillPhysiNode</name><modifier>*</modifier></type> <name>pFill</name> <init>= <expr><operator>(</operator><name>SFillPhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(
      <argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pFillNode</name></expr></argument>,
      <argument><expr><ternary><condition><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>streamQuery</name></name></expr> ?</condition><then> <expr><name>QUERY_NODE_PHYSICAL_PLAN_STREAM_FILL</name></expr> </then><else>: <expr><name>QUERY_NODE_PHYSICAL_PLAN_FILL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFill</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFill</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>pFillNode</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFill</name><operator>-&gt;</operator><name>timeRange</name></name> <operator>=</operator> <name><name>pFillNode</name><operator>-&gt;</operator><name>timeRange</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFill</name><operator>-&gt;</operator><name>inputTsOrder</name></name> <operator>=</operator> <name><name>pFillNode</name><operator>-&gt;</operator><name>inputTsOrder</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataBlockDescNode</name><modifier>*</modifier></type> <name>pChildTupe</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFill</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pFill</name><operator>-&gt;</operator><name>pFillExprs</name></name></expr></argument>, <argument><expr><name><name>pFill</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFill</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pFill</name><operator>-&gt;</operator><name>pNotFillExprs</name></name></expr></argument>, <argument><expr><name><name>pFill</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pChildTupe</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFill</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlot</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFill</name><operator>-&gt;</operator><name>pWStartTs</name></name></expr></argument>, <argument><expr><name><name>pFill</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pFillNode</name><operator>-&gt;</operator><name>pValues</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFill</name><operator>-&gt;</operator><name>pValues</name></name> <operator>=</operator> <call><name>nodesCloneNode</name><argument_list>(<argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pFill</name><operator>-&gt;</operator><name>pValues</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setConditionsSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pFillNode</name></expr></argument>, <argument><expr><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pFill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pFill</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createExchangePhysiNodeByMerge</name><parameter_list>(<parameter><decl><type><name>SMergePhysiNode</name><modifier>*</modifier></type> <name>pMerge</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExchangePhysiNode</name><modifier>*</modifier></type> <name>pExchange</name> <init>= <expr><operator>(</operator><name>SExchangePhysiNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pExchange</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pExchange</name><operator>-&gt;</operator><name>srcStartGroupId</name></name> <operator>=</operator> <name><name>pMerge</name><operator>-&gt;</operator><name>srcGroupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExchange</name><operator>-&gt;</operator><name>srcEndGroupId</name></name> <operator>=</operator> <name><name>pMerge</name><operator>-&gt;</operator><name>srcGroupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExchange</name><operator>-&gt;</operator><name>singleChannel</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExchange</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pParent</name></name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pMerge</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pExchange</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name> <operator>=</operator> <operator>(</operator><name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pMerge</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pExchange</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pExchange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSlot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pSlot</argument>, <argument>pExchange-&gt;node.pOutputDataBlockDesc-&gt;pSlots</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SSlotDescNode</name><operator>*</operator><operator>)</operator><name>pSlot</name><operator>)</operator><operator>-&gt;</operator><name>output</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block>
  <return>return <expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMerge</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pExchange</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createMergePhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SMergeLogicNode</name><modifier>*</modifier></type> <name>pMergeLogicNode</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMergePhysiNode</name><modifier>*</modifier></type> <name>pMerge</name> <init>=
      <expr><operator>(</operator><name>SMergePhysiNode</name><operator>*</operator><operator>)</operator><call><name>makePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pMergeLogicNode</name></expr></argument>, <argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMerge</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMerge</name><operator>-&gt;</operator><name>numOfChannels</name></name> <operator>=</operator> <name><name>pMergeLogicNode</name><operator>-&gt;</operator><name>numOfChannels</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMerge</name><operator>-&gt;</operator><name>srcGroupId</name></name> <operator>=</operator> <name><name>pMergeLogicNode</name><operator>-&gt;</operator><name>srcGroupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMerge</name><operator>-&gt;</operator><name>groupSort</name></name> <operator>=</operator> <name><name>pMergeLogicNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pMergeLogicNode</name><operator>-&gt;</operator><name>pInputs</name></name></expr></argument>, <argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMerge</name><operator>-&gt;</operator><name>numOfChannels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createExchangePhysiNodeByMerge</name><argument_list>(<argument><expr><name>pMerge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pMergeLogicNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMergeLogicNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>pMerge</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMergeLogicNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pTargets</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>pMerge</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addDataBlockSlots</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>pTargets</name></name></expr></argument>, <argument><expr><name><name>pMerge</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhyNode</name> <operator>=</operator> <operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pMerge</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pMerge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doCreatePhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicNode</name><modifier>*</modifier></type> <name>pLogicNode</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>,
                                 <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name></decl></parameter>, <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pLogicNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SCAN</name></expr>:</case>
      <return>return <expr><call><name>createScanPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><operator>(</operator><name>SScanLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_JOIN</name></expr>:</case>
      <return>return <expr><call><name>createJoinPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SJoinLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_AGG</name></expr>:</case>
      <return>return <expr><call><name>createAggPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SAggLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PROJECT</name></expr>:</case>
      <return>return <expr><call><name>createProjectPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SProjectLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_EXCHANGE</name></expr>:</case>
      <return>return <expr><call><name>createExchangePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SExchangeLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_WINDOW</name></expr>:</case>
      <return>return <expr><call><name>createWindowPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SWindowLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_SORT</name></expr>:</case>
      <return>return <expr><call><name>createSortPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SSortLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_PARTITION</name></expr>:</case>
      <return>return <expr><call><name>createPartitionPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SPartitionLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_FILL</name></expr>:</case>
      <return>return <expr><call><name>createFillPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SFillLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INDEF_ROWS_FUNC</name></expr>:</case>
      <return>return <expr><call><name>createIndefRowsFuncPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SIndefRowsFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_INTERP_FUNC</name></expr>:</case>
      <return>return <expr><call><name>createInterpFuncPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SInterpFuncLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_LOGIC_PLAN_MERGE</name></expr>:</case>
      <return>return <expr><call><name>createMergePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SMergeLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicNode</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createPhysiNode</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicNode</name><modifier>*</modifier></type> <name>pLogicNode</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>,
                               <parameter><decl><type><name>SPhysiNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhyNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pChildren</name> <init>= <expr><call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pChildren</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pLogicChild</name></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pLogicChild</argument>, <argument>pLogicNode-&gt;pChildren</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SPhysiNode</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><name>pLogicChild</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doCreatePhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pLogicNode</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pChildren</name></expr></argument>, <argument><expr><name>pPhyNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pPhyNode</name><operator>)</operator><operator>-&gt;</operator><name>pChildren</name></name> <operator>=</operator> <name>pChildren</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pChild</name></decl>;</decl_stmt>
      <macro><name>FOREACH</name><argument_list>(<argument>pChild</argument>, <argument>(*pPhyNode)-&gt;pChildren</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SPhysiNode</name><operator>*</operator><operator>)</operator><name>pChild</name><operator>)</operator><operator>-&gt;</operator><name>pParent</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pPhyNode</name><operator>)</operator></expr>;</expr_stmt> </block_content>}</block>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pChildren</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createDataInserter</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>pBlocks</name></decl></parameter>, <parameter><decl><type><name>SDataSinkNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSink</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataInserterNode</name><modifier>*</modifier></type> <name>pInserter</name> <init>= <expr><operator>(</operator><name>SDataInserterNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_INSERT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInserter</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>numOfTables</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pBlocks</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pBlocks</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pSink</name> <operator>=</operator> <operator>(</operator><name>SDataSinkNode</name><operator>*</operator><operator>)</operator><name>pInserter</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createDataDispatcher</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPhysiNode</name><modifier>*</modifier></type> <name>pRoot</name></decl></parameter>, <parameter><decl><type><name>SDataSinkNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSink</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDispatcherNode</name><modifier>*</modifier></type> <name>pDispatcher</name> <init>= <expr><operator>(</operator><name>SDataDispatcherNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_DISPATCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDispatcher</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDispatcher</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>pInputDataBlockDesc</name></name> <operator>=</operator> <operator>(</operator><name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pRoot</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pDispatcher</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>pInputDataBlockDesc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pDispatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pSink</name> <operator>=</operator> <operator>(</operator><name>SDataSinkNode</name><operator>*</operator><operator>)</operator><name>pDispatcher</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSubplan</name><modifier>*</modifier></type> <name>makeSubplan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pLogicSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name> <init>= <expr><operator>(</operator><name>SSubplan</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_PHYSICAL_SUBPLAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSubplan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>pLogicSubplan</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>subplanType</name></name> <operator>=</operator> <name><name>pLogicSubplan</name><operator>-&gt;</operator><name>subplanType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>pLogicSubplan</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>pUser</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pSubplan</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildInsertValuesSubplan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pModify</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>pVgDataBlocks</name><operator>-&gt;</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>pVgDataBlocks</name><operator>-&gt;</operator><name>vg</name><operator>.</operator><name>epSet</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>createDataInserter</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>pVgDataBlocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createQueryInserter</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pModify</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>,
                                   <parameter><decl><type><name>SDataSinkNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSink</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryInserterNode</name><modifier>*</modifier></type> <name>pInserter</name> <init>= <expr><operator>(</operator><name>SQueryInserterNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_QUERY_INSERT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInserter</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>tableId</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>tableId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>stableId</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>stableId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pInserter</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vgId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>epSet</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vgroupInfoToNodeAddr</name><argument_list>(<argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>pVgroupList</name><operator>-&gt;</operator><name>vgroups</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>execNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>setListSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>pInsertCols</name></name></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name><name>pInserter</name><operator>-&gt;</operator><name>pCols</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInserter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>pInputDataBlockDesc</name></name> <operator>=</operator>
        <operator>(</operator><name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pInserter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>pInputDataBlockDesc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pSink</name> <operator>=</operator> <operator>(</operator><name>SDataSinkNode</name><operator>*</operator><operator>)</operator><name>pInserter</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pInserter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildInsertSelectSubplan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pModify</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>createPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createQueryInserter</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pModify</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SCH_MERGE_QUERY</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildInsertSubplan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pModify</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pModify</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildInsertValuesSubplan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pModify</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>buildInsertSelectSubplan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pModify</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createDataDeleter</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pModify</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPhysiNode</name><modifier>*</modifier></type> <name>pRoot</name></decl></parameter>,
                                 <parameter><decl><type><name>SDataSinkNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSink</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataDeleterNode</name><modifier>*</modifier></type> <name>pDeleter</name> <init>= <expr><operator>(</operator><name>SDataDeleterNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_PHYSICAL_PLAN_DELETE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDeleter</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>tableId</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>tableId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>tableFName</name></name></expr></argument>, <argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>, <argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>tsColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>deleteTimeRange</name></name> <operator>=</operator> <name><name>pModify</name><operator>-&gt;</operator><name>deleteTimeRange</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pRoot</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>pAffectedRows</name></name></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>pAffectedRows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pRoot</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>pStartTs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>pStartTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setNodeSlotId</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pRoot</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>dataBlockId</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>pEndTs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDeleter</name><operator>-&gt;</operator><name>pEndTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDeleter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>pInputDataBlockDesc</name></name> <operator>=</operator> <operator>(</operator><name>SDataBlockDescNode</name><operator>*</operator><operator>)</operator><call><name>nodesCloneNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name><name>pRoot</name><operator>-&gt;</operator><name>pOutputDataBlockDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pDeleter</name><operator>-&gt;</operator><name>sink</name><operator>.</operator><name>pInputDataBlockDesc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pSink</name> <operator>=</operator> <operator>(</operator><name>SDataSinkNode</name><operator>*</operator><operator>)</operator><name>pDeleter</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pDeleter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildDeleteSubplan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pModify</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>createPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pModify</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createDataDeleter</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pModify</name></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_DELETE</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildVnodeModifySubplan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pLogicSubplan</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>                <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeModifyLogicNode</name><modifier>*</modifier></type> <name>pModify</name> <init>= <expr><operator>(</operator><name>SVnodeModifyLogicNode</name><operator>*</operator><operator>)</operator><name><name>pLogicSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pModify</name><operator>-&gt;</operator><name>modifyType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MODIFY_TABLE_TYPE_INSERT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildInsertSubplan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pModify</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>MODIFY_TABLE_TYPE_DELETE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildDeleteSubplan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pModify</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FAILED</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createPhysiSubplan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pLogicSubplan</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhysiSubplan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name> <init>= <expr><call><name>makeSubplan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pLogicSubplan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSubplan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>SUBPLAN_TYPE_MODIFY</name> <operator>==</operator> <name><name>pLogicSubplan</name><operator>-&gt;</operator><name>subplanType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildVnodeModifySubplan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pLogicSubplan</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>SUBPLAN_TYPE_SCAN</name> <operator>==</operator> <name><name>pSubplan</name><operator>-&gt;</operator><name>subplanType</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SCH_QUERY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_SCH_MERGE_QUERY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createPhysiNode</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pLogicSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>streamQuery</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>topicQuery</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createDataDispatcher</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name><name>pSubplan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pDataSink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhysiSubplan</name> <operator>=</operator> <name>pSubplan</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SQueryPlan</name><modifier>*</modifier></type> <name>makeQueryPhysiPlan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pPlan</name> <init>= <expr><operator>(</operator><name>SQueryPlan</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_PHYSICAL_PLAN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pPlan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pPlan</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>queryId</name></name></expr>;</expr_stmt>
  <return>return <expr><name>pPlan</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>pushSubplan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSubplan</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pSubplans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>pGroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name>pSubplans</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pGroup</name> <operator>=</operator> <operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_NODE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pGroup</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><name>pSubplans</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pGroup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pGroup</name> <operator>=</operator> <operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pSubplans</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pGroup</name><operator>-&gt;</operator><name>pNodeList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pGroup</name><operator>-&gt;</operator><name>pNodeList</name></name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pGroup</name><operator>-&gt;</operator><name>pNodeList</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name><name>pGroup</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildPhysiPlan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SLogicSubplan</name><modifier>*</modifier></type> <name>pLogicSubplan</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pParent</name></decl></parameter>,
                              <parameter><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pQueryPlan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>pSubplan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>createPhysiSubplan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><name>pLogicSubplan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSubplan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pushSubplan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>, <argument><expr><name><name>pLogicSubplan</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>pQueryPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pQueryPlan</name><operator>-&gt;</operator><name>numOfSubplans</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pParent</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParent</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSubplan</name><operator>-&gt;</operator><name>pParents</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pChild</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pChild</argument>, <argument>pLogicSubplan-&gt;pChildren</argument>)</argument_list></macro> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildPhysiPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pChild</name></expr></argument>, <argument><expr><name>pSubplan</name></expr></argument>, <argument><expr><name>pQueryPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doCreatePhysiPlan</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQueryLogicPlan</name><modifier>*</modifier></type> <name>pLogicPlan</name></decl></parameter>, <parameter><decl><type><name>SQueryPlan</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPhysiPlan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pPlan</name> <init>= <expr><operator>(</operator><name>SQueryPlan</name><operator>*</operator><operator>)</operator><call><name>makeQueryPhysiPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pPlan</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pSubplan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pSubplan</argument>, <argument>pLogicPlan-&gt;pTopSubplans</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildPhysiPlan</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>(</operator><name>SLogicSubplan</name><operator>*</operator><operator>)</operator><name>pSubplan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pPhysiPlan</name> <operator>=</operator> <name>pPlan</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destoryLocationHash</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>   <name>pHash</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SHashObj</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSlotIndex</name><modifier>*</modifier></type> <name>pIndex</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pSlotIdsInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIndex</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destoryPhysiPlanContext</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pLocationHelper</name></name></expr></argument>, <argument><expr><name>destoryLocationHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setExplainInfo</name><parameter_list>(<parameter><decl><type><name>SPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pPlan</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_EXPLAIN_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pCxt</name><operator>-&gt;</operator><name>pAstRoot</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExplainStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>SExplainStmt</name><operator>*</operator><operator>)</operator><name><name>pCxt</name><operator>-&gt;</operator><name>pAstRoot</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pPlan</name><operator>-&gt;</operator><name>explainInfo</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pStmt</name><operator>-&gt;</operator><name>analyze</name></name></expr> ?</condition><then> <expr><name>EXPLAIN_MODE_ANALYZE</name></expr> </then><else>: <expr><name>EXPLAIN_MODE_STATIC</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPlan</name><operator>-&gt;</operator><name>explainInfo</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>verbose</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPlan</name><operator>-&gt;</operator><name>explainInfo</name><operator>.</operator><name>ratio</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pOptions</name><operator>-&gt;</operator><name>ratio</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pPlan</name><operator>-&gt;</operator><name>explainInfo</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>EXPLAIN_MODE_DISABLE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setExecNodeList</name><parameter_list>(<parameter><decl><type><name>SPhysiPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pExecNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pExecNodeList</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCxt</name><operator>-&gt;</operator><name>hasSysScan</name></name> <operator>||</operator> <operator>!</operator><name><name>pCxt</name><operator>-&gt;</operator><name>hasScan</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SQueryNodeLoad</name></type> <name>node</name> <init>= <expr><block>{<expr><operator>.</operator><name>addr</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>nodeId</name> <operator>=</operator> <name>MNODE_HANDLE</name></expr>, <expr><operator>.</operator><name>epSet</name> <operator>=</operator> <name><name>pCxt</name><operator>-&gt;</operator><name>pPlanCxt</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr>, <expr><operator>.</operator><name>load</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pExecNodeList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>createPhysiPlan</name><parameter_list>(<parameter><decl><type><name>SPlanContext</name><modifier>*</modifier></type> <name>pCxt</name></decl></parameter>, <parameter><decl><type><name>SQueryLogicPlan</name><modifier>*</modifier></type> <name>pLogicPlan</name></decl></parameter>, <parameter><decl><type><name>SQueryPlan</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPlan</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pExecNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SPhysiPlanContext</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>pPlanCxt</name> <operator>=</operator> <name>pCxt</name></expr>,
                           <expr><operator>.</operator><name>errCode</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>,
                           <expr><operator>.</operator><name>nextDataBlockId</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                           <expr><operator>.</operator><name>pLocationHelper</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>,
                           <expr><operator>.</operator><name>hasScan</name> <operator>=</operator> <name>false</name></expr>,
                           <expr><operator>.</operator><name>hasSysScan</name> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>cxt</name><operator>.</operator><name>pLocationHelper</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doCreatePhysiPlan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>pLogicPlan</name></expr></argument>, <argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setExplainInfo</name><argument_list>(<argument><expr><name>pCxt</name></expr></argument>, <argument><expr><operator>*</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setExecNodeList</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>pExecNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>destoryPhysiPlanContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
