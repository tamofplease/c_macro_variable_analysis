<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/test/udf2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosudf.h"</cpp:file></cpp:include>

<function><type><name>DLL_EXPORT</name> <name>int32_t</name></type> <name>udf2_init</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>DLL_EXPORT</name> <name>int32_t</name></type> <name>udf2_destroy</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>DLL_EXPORT</name> <name>int32_t</name></type> <name>udf2_start</name><parameter_list>(<parameter><decl><type><name>SUdfInterBuf</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bufLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>numOfResult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>DLL_EXPORT</name> <name>int32_t</name></type> <name>udf2</name><parameter_list>(<parameter><decl><type><name>SUdfDataBlock</name><modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name><modifier>*</modifier></type> <name>interBuf</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name><modifier>*</modifier></type> <name>newInterBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>sumSquares</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>interBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>numNotNull</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SUdfColumn</name><modifier>*</modifier></type> <name>col</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>udfCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>col</name><operator>-&gt;</operator><name>colMeta</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name> <operator>||</operator> <name><name>col</name><operator>-&gt;</operator><name>colMeta</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_UDF_INVALID_INPUT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SUdfColumn</name><modifier>*</modifier></type> <name>col</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>udfCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>udfColDataIsNull</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <switch>switch <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>colMeta</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>cell</name> <init>= <expr><call><name>udfColDataGetData</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>cell</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>sumSquares</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>num</name> <operator>*</operator> <name>num</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>cell</name> <init>= <expr><call><name>udfColDataGetData</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>double</name></type> <name>num</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>cell</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>sumSquares</name> <operator>+=</operator> <name>num</name> <operator>*</operator> <name>num</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>
      <expr_stmt><expr><operator>++</operator><name>numNotNull</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>newInterBuf</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>=</operator> <name>sumSquares</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newInterBuf</name><operator>-&gt;</operator><name>bufLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>interBuf</name><operator>-&gt;</operator><name>numOfResult</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>numNotNull</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>newInterBuf</name><operator>-&gt;</operator><name>numOfResult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>newInterBuf</name><operator>-&gt;</operator><name>numOfResult</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>DLL_EXPORT</name> <name>int32_t</name></type> <name>udf2_finish</name><parameter_list>(<parameter><decl><type><name>SUdfInterBuf</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name><modifier>*</modifier></type> <name>resultData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>numOfResult</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>resultData</name><operator>-&gt;</operator><name>numOfResult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>sumSquares</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>resultData</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>sumSquares</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>resultData</name><operator>-&gt;</operator><name>bufLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>resultData</name><operator>-&gt;</operator><name>numOfResult</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
