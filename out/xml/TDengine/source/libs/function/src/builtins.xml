<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/src/builtins.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtinsimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildFuncErrMsg</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errCode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>vArgList</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vArgList</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>vArgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vArgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>errCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>invaildFuncParaNumErrMsg</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFuncName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_PARA_NUM</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of parameters : %s"</literal></expr></argument>, <argument><expr><name>pFuncName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>invaildFuncParaTypeErrMsg</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFuncName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_PARA_TYPE</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter data type : %s"</literal></expr></argument>, <argument><expr><name>pFuncName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>invaildFuncParaValueErrMsg</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFuncName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_PARA_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter value : %s"</literal></expr></argument>, <argument><expr><name>pFuncName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_UNIT_INVALID</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_UNIT_TOO_SMALL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>validateTimeUnitParam</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>dbPrec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pVal</name><operator>-&gt;</operator><name>isDuration</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TIME_UNIT_INVALID</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_TIME_PRECISION_MILLI</name> <operator>==</operator> <name>dbPrec</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><literal type="string">"1u"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><literal type="string">"1b"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TIME_UNIT_TOO_SMALL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_TIME_PRECISION_MICRO</name> <operator>==</operator> <name>dbPrec</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><literal type="string">"1b"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TIME_UNIT_TOO_SMALL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'1'</literal> <operator>||</operator>
      <operator>(</operator><name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator>
       <name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'h'</literal> <operator>&amp;&amp;</operator> <name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'w'</literal> <operator>&amp;&amp;</operator> <name><name>pVal</name><operator>-&gt;</operator><name>literal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'b'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TIME_UNIT_INVALID</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Following are valid ISO-8601 timezone format:
 * 1 z/Z
 * 2 Â±hh:mm
 * 3 Â±hhmm
 * 4 Â±hh
 *
 */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validateHourRange</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>hour</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>hour</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>hour</name></expr></argument> &gt;</argument_list></name> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validateMinuteRange</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>hour</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>minute</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>sign</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>minute</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>minute</name> <operator>==</operator> <literal type="number">30</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>hour</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>hour</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>sign</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validateTimestampDigits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsVal</name> <init>= <expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fraction</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>NUM_TO_STRING</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsVal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fraction</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tsDigits</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>fraction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsDigits</name> <operator>&gt;</operator> <name>TSDB_TIME_PRECISION_SEC_DIGITS</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>tsDigits</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI_DIGITS</name> <operator>||</operator> <name>tsDigits</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO_DIGITS</name> <operator>||</operator>
        <name>tsDigits</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO_DIGITS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validateTimezoneFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>tz</name> <init>= <expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type>   <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>hour</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>minute</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal> <operator>||</operator> <name><name>tz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>tz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>tz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">3</literal></expr>:</case>
      <case>case <expr><literal type="number">5</literal></expr>:</case> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>tz</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tz</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>hour</name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateHourRange</name><argument_list>(<argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tz</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>minute</name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateMinuteRange</name><argument_list>(<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name><name>tz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="number">6</literal></expr>:</case> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>tz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
              <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>tz</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tz</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>hour</name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateHourRange</name><argument_list>(<argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tz</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>minute</name> <operator>=</operator> <call><name>taosStr2Int8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateMinuteRange</name><argument_list>(<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name><name>tz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>countTrailingSpaces</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isLtrim</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfSpaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>str</name> <init>= <expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>startPos</name> <init>= <expr><ternary><condition><expr><name>isLtrim</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>isLtrim</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>startPos</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>numOfSpaces</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>numOfSpaces</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addTimezoneParam</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type>    <name>t</name> <init>= <expr><call><name>taosTime</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tmInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>isDuration</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>addDbPrecisonParam</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pList</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VALUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>literal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>isDuration</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>translate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>precision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>typeData</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>precision</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// There is only one parameter of numeric type, and the return type is parameter type</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInOutNum</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>paraType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>paraType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>paraType</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// There is only one parameter of numeric type, and the return type is double type</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInNumOutDou</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// There are two parameters of numeric type, and the return type is double type</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateIn2NumOutDou</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para1Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para2Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>(</operator><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// There is only one parameter of string type, and the return type is parameter type</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInOutStr</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pPara1</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pPara1</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pPara1</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pPara1</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTrimStr</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isLtrim</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pPara1</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pPara1</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfSpaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// for select trim functions with constant value from table,</comment>
  <comment type="line">// need to set the proper result result schema bytes to avoid</comment>
  <comment type="line">// trailing garbage characters</comment>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>numOfSpaces</name> <operator>=</operator> <call><name>countTrailingSpaces</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>, <argument><expr><name>isLtrim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>resBytes</name> <init>= <expr><name><name>pPara1</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>numOfSpaces</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>resBytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pPara1</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateLtrim</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateTrimStr</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateRtrim</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateTrimStr</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateLogarithm</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para1Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>para2Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCount</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSum</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>resType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>==</operator> <name>paraType</name> <operator>||</operator> <call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>resType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>resType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>resType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>resType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>resType</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateAvgPartial</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <call><name>getAvgInfoSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateAvgMerge</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name>paraType</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateStddevPartial</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <call><name>getStddevInfoSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateStddevMerge</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name>paraType</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateWduration</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// pseudo column do not need to check parameters</comment>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateNowToday</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// pseudo column do not need to check parameters</comment>

  <comment type="line">// add database precision as param</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>dbPrec</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addDbPrecisonParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>dbPrec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTimePseudoColumn</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// pseudo column do not need to check parameters</comment>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTimezone</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TD_TIMEZONE_LEN</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translatePercentile</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param1</comment>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para1Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para2Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set result type</comment>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validateApercentileAlgo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
          <literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"t-digest"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateApercentile</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param1</comment>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para1Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para2Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param2</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>==</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>para3Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>para3Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode2</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>validateApercentileAlgo</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"Third parameter algorithm of apercentile must be 'default' or 't-digest'"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pValue</name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateApercentileImpl</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isPartial</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>isPartial</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// param1</comment>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>para1Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>para2Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// param2</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>==</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>para3Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>para3Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode2</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>validateApercentileAlgo</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                               <argument><expr><literal type="string">"Third parameter algorithm of apercentile must be 'default' or 't-digest'"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pValue</name> <operator>=</operator> <operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator>
        <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <call><name>getApercentileMaxSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// original percent param is reserved</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>para1Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>para2Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name>para1Type</name> <operator>||</operator> <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateApercentilePartial</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateApercentileImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateApercentileMerge</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateApercentileImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTbnameColumn</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// pseudo column do not need to check parameters</comment>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator>
      <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_TABLE_FNAME_LEN</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTopBot</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para1Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para2Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param1</comment>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <name>TOP_BOTTOM_QUERY_LIMIT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <comment type="line">// set result type</comment>
  <decl_stmt><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pType</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pType</name><operator>-&gt;</operator><name>type</name></name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>reserveFirstMergeParam</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pRawParameters</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPartialRes</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pParameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>nodesListMakeAppend</name><argument_list>(<argument><expr><name>pParameters</name></expr></argument>, <argument><expr><name>pPartialRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesListStrictAppend</name><argument_list>(<argument><expr><operator>*</operator><name>pParameters</name></expr></argument>, <argument><expr><call><name>nodesCloneNode</name><argument_list>(<argument><expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name>pRawParameters</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>topBotCreateMergeParam</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pRawParameters</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPartialRes</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pParameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveFirstMergeParam</name><argument_list>(<argument><expr><name>pRawParameters</name></expr></argument>, <argument><expr><name>pPartialRes</name></expr></argument>, <argument><expr><name>pParameters</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>apercentileCreateMergeParam</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pRawParameters</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPartialRes</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pParameters</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>reserveFirstMergeParam</name><argument_list>(<argument><expr><name>pRawParameters</name></expr></argument>, <argument><expr><name>pPartialRes</name></expr></argument>, <argument><expr><name>pParameters</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSpread</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSpreadImpl</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isPartial</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>isPartial</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <call><name>getSpreadInfoSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name>paraType</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSpreadPartial</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateSpreadImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSpreadMerge</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateSpreadImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateElapsed</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPara1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pPara1</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pPara1</name><operator>)</operator><operator>-&gt;</operator><name>colId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                           <argument><expr><literal type="string">"The first parameter of the ELAPSED function can only be the timestamp primary key"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param1</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>dbPrec</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>validateTimeUnitParam</name><argument_list>(<argument><expr><name>dbPrec</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TIME_UNIT_TOO_SMALL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"ELAPSED function time unit parameter should be greater than db precision"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TIME_UNIT_INVALID</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(
          <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
          <argument><expr><literal type="string">"ELAPSED function time unit parameter should be one of the following: [1b, 1u, 1a, 1s, 1m, 1h, 1d, 1w]"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateElapsedImpl</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isPartial</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>isPartial</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// param1</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>paraType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                               <argument><expr><literal type="string">"ELAPSED function time unit parameter should be greater than db precision"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator>
        <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <call><name>getElapsedInfoSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name>paraType</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateElapsedPartial</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  return translateElapsedImpl(pFunc, pErrBuf, len, true);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateElapsedMerge</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  return translateElapsedImpl(pFunc, pErrBuf, len, false);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateLeastSQR</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// param1 &amp; param2</comment>
      <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <literal type="number">64</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{ <decl><name>UNKNOWN_BIN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>USER_INPUT_BIN</name></decl>, <decl><name>LINEAR_BIN</name></decl>, <decl><name>LOG_BIN</name></decl> }</block></enum></type> <name>EHistoBinType</name>;</typedef>

<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>validateHistogramBinType</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>binTypeStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>binType</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>binTypeStr</name></expr></argument>, <argument><expr><literal type="string">"user_input"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>binType</name> <operator>=</operator> <name>USER_INPUT_BIN</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>binTypeStr</name></expr></argument>, <argument><expr><literal type="string">"linear_bin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>binType</name> <operator>=</operator> <name>LINEAR_BIN</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>binTypeStr</name></expr></argument>, <argument><expr><literal type="string">"log_bin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>binType</name> <operator>=</operator> <name>LOG_BIN</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>binType</name> <operator>=</operator> <name>UNKNOWN_BIN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>binType</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validateHistogramBinDesc</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>binDescStr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>binType</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>errMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg1</name> <init>= <expr><literal type="string">"HISTOGRAM function requires four parameters"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg3</name> <init>= <expr><literal type="string">"HISTOGRAM function invalid format for binDesc parameter"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg4</name> <init>= <expr><literal type="string">"HISTOGRAM function binDesc parameter \"count\" should be in range [1, 1000]"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg5</name> <init>= <expr><literal type="string">"HISTOGRAM function bin/parameter should be in range [-DBL_MAX, DBL_MAX]"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg6</name> <init>= <expr><literal type="string">"HISTOGRAM function binDesc parameter \"width\" cannot be 0"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg7</name> <init>= <expr><literal type="string">"HISTOGRAM function binDesc parameter \"start\" cannot be 0 with \"log_bin\" type"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg8</name> <init>= <expr><literal type="string">"HISTOGRAM function binDesc parameter \"factor\" cannot be negative or equal to 0/1"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>binDesc</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>binDescStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfBins</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>intervals</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cJSON_IsObject</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="block">/* linaer/log bins */</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>startIndex</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfParams</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>factor</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"factor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>width</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>count</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>infinity</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"infinity"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>cJSON_IsBool</name><argument_list>(<argument><expr><name>infinity</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>count</name><operator>-&gt;</operator><name>valueint</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>count</name><operator>-&gt;</operator><name>valueint</name></name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// limit count to 1000</comment>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>start</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>width</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>width</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>factor</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>count</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>count</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>counter</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>count</name><operator>-&gt;</operator><name>valueint</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>infinity</name><operator>-&gt;</operator><name>valueint</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfBins</name> <operator>=</operator> <name>counter</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfBins</name> <operator>=</operator> <name>counter</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>intervals</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfBins</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>factor</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>binType</name> <operator>==</operator> <name>LINEAR_BIN</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// linear bin process</comment>
      <if_stmt><if>if <condition>(<expr><name><name>width</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>counter</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>intervals</name><index>[<expr><name>startIndex</name></expr>]</index></name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>width</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>intervals</name><index>[<expr><name>startIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>startIndex</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>width</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>binType</name> <operator>==</operator> <name>LOG_BIN</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// log bin process</comment>
      <if_stmt><if>if <condition>(<expr><name><name>start</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>counter</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>intervals</name><index>[<expr><name>startIndex</name></expr>]</index></name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>intervals</name><index>[<expr><name>startIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>startIndex</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>infinity</name><operator>-&gt;</operator><name>valueint</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>intervals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>INFINITY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>intervals</name><index>[<expr><name>numOfBins</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>
      <comment type="line">// in case of desc bin orders, -inf/inf should be swapped</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfBins</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>intervals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>intervals</name><index>[<expr><name>numOfBins</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>intervals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>intervals</name><index>[<expr><name>numOfBins</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cJSON_IsArray</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="block">/* user input bins */</comment>
    <if_stmt><if>if <condition>(<expr><name>binType</name> <operator>!=</operator> <name>USER_INPUT_BIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>numOfBins</name> <operator>=</operator> <call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>intervals</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfBins</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>bin</name> <init>= <expr><name><name>binDesc</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>intervals</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateHistogram</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param1 ~ param3</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator>
      <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator>
      <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>binType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>binDesc</name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>binType</name> <operator>=</operator> <call><name>validateHistogramBinType</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>binType</name> <operator>==</operator> <name>UNKNOWN_BIN</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                               <argument><expr><literal type="string">"HISTOGRAM function binType parameter should be "</literal>
                               <literal type="string">"\"user_input\", \"log_bin\" or \"linear_bin\""</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>errMsg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>binDesc</name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateHistogramBinDesc</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><name>binType</name></expr></argument>, <argument><expr><name>errMsg</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>, <argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"HISTOGRAM function normalized parameter should be 0/1"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <literal type="number">512</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateHistogramImpl</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isPartial</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>isPartial</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// param1 ~ param3</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator>
        <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator>
        <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int8_t</name></type> <name>binType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>binDesc</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>binType</name> <operator>=</operator> <call><name>validateHistogramBinType</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>binType</name> <operator>==</operator> <name>UNKNOWN_BIN</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                                 <argument><expr><literal type="string">"HISTOGRAM function binType parameter should be "</literal>
                                 <literal type="string">"\"user_input\", \"log_bin\" or \"linear_bin\""</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>errMsg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>binDesc</name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateHistogramBinDesc</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><name>binType</name></expr></argument>, <argument><expr><name>errMsg</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>, <argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                               <argument><expr><literal type="string">"HISTOGRAM function normalized parameter should be 0/1"</literal></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator>
        <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <call><name>getHistogramInfoSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <literal type="number">512</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateHistogramPartial</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateHistogramImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateHistogramMerge</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateHistogramImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateHLL</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateHLLImpl</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isPartial</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>isPartial</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator>
        <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <call><name>getHistogramInfoSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateHLLPartial</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateHLLImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateHLLMerge</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateHLLImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validateStateOper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SValueNode</name><modifier>*</modifier></type> <name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name><name>pVal</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator>
      <literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"GT"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"GE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>
      <literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"LT"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"LE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>
      <literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"EQ"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"NE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateStateCount</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param1 &amp; param2</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>validateStateOper</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"Second parameter of STATECOUNT function"</literal>
                             <literal type="string">"must be one of the following: 'GE', 'GT', 'LE', 'LT', 'EQ', 'NE'"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator>
      <operator>(</operator><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BIGINT</name> <operator>&amp;&amp;</operator>
       <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set result type</comment>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateStateDuration</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">4</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param1, param2 &amp; param3</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>validateStateOper</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"Second parameter of STATEDURATION function"</literal>
                             <literal type="string">"must be one of the following: 'GE', 'GT', 'LE', 'LT', 'EQ', 'NE'"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"STATEDURATION function time unit parameter should be greater than db precision"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator>
      <operator>(</operator><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BIGINT</name> <operator>&amp;&amp;</operator>
       <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfParams</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
      <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfParams</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>dbPrec</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>validateTimeUnitParam</name><argument_list>(<argument><expr><name>dbPrec</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TIME_UNIT_TOO_SMALL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"STATEDURATION function time unit parameter should be greater than db precision"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TIME_UNIT_INVALID</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"STATEDURATION function time unit parameter should be one of the following: [1b, 1u, 1a, "</literal>
                             <literal type="string">"1s, 1m, 1h, 1d, 1w]"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set result type</comment>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCsum</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>resType</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>resType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>resType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>resType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>resType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>resType</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EFuncReturnRows</name></type> <name>csumEstReturnRows</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>FUNC_RETURN_ROWS_N</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateMavg</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// param1</comment>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSample</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>    <name>colType</name> <init>= <expr><name><name>pCol</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// param1</comment>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set result type</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>colType</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>colType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>colType</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTail</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>    <name>colType</name> <init>= <expr><name><name>pCol</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// param1 &amp; param2</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr> </then><else>: <expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></else></ternary><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>||</operator>
        <operator>(</operator><ternary><condition><expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pValue</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr> </then><else>: <expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>u</name></name></expr></else></ternary><operator>)</operator> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"TAIL function second parameter should be in range [1, 100], "</literal>
                             <literal type="string">"third parameter should be in range [0, 100]"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// set result type</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>colType</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>colType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>colType</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDerivative</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// param1</comment>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>      <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue1</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pValue1</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>      <name>pParamNode2</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue2</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode2</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pValue2</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pValue2</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pValue2</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EFuncReturnRows</name></type> <name>derivativeEstReturnRows</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name></expr> ?</condition><then> <expr><name>FUNC_RETURN_ROWS_INDEFINITE</name></expr>
                                                                                 </then><else>: <expr><name>FUNC_RETURN_ROWS_N_MINUS_1</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateIrate</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add database precision as param</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>dbPrec</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addDbPrecisonParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>dbPrec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateInterp</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>dbPrec</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// if (1 != numOfParams &amp;&amp; 3 != numOfParams &amp;&amp; 4 != numOfParams) {</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>nodeType</name> <init>= <expr><call><name>nodeType</name><argument_list>(<argument><expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>QUERY_NODE_VALUE</name> <operator>==</operator> <name>nodeType</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (3 &lt;= numOfParams) {
    int64_t timeVal[2] = {0};
    for (int32_t i = 1; i &lt; 3; ++i) {
      nodeType = nodeType(nodesListGetNode(pFunc-&gt;pParameterList, i));
      paraType = ((SExprNode*)nodesListGetNode(pFunc-&gt;pParameterList, i))-&gt;resType.type;
      if (!IS_STR_DATA_TYPE(paraType) || QUERY_NODE_VALUE != nodeType) {
        return invaildFuncParaTypeErrMsg(pErrBuf, len, pFunc-&gt;functionName);
      }

      SValueNode* pValue = (SValueNode*)nodesListGetNode(pFunc-&gt;pParameterList, i);
      int32_t     ret = convertStringToTimestamp(paraType, pValue-&gt;datum.p, dbPrec, &amp;timeVal[i - 1]);
      if (ret != TSDB_CODE_SUCCESS) {
        return invaildFuncParaValueErrMsg(pErrBuf, len, pFunc-&gt;functionName);
      }
    }

    if (timeVal[0] &gt; timeVal[1]) {
      return buildFuncErrMsg(pErrBuf, len, TSDB_CODE_FUNC_FUNTION_ERROR, "INTERP function invalid time range");
    }
  }

  if (4 == numOfParams) {
    nodeType = nodeType(nodesListGetNode(pFunc-&gt;pParameterList, 3));
    paraType = ((SExprNode*)nodesListGetNode(pFunc-&gt;pParameterList, 3))-&gt;resType.type;
    if (!IS_INTEGER_TYPE(paraType) || QUERY_NODE_VALUE != nodeType) {
      return invaildFuncParaTypeErrMsg(pErrBuf, len, pFunc-&gt;functionName);
    }

    int32_t ret = validateTimeUnitParam(dbPrec, (SValueNode*)nodesListGetNode(pFunc-&gt;pParameterList, 3));
    if (ret == TIME_UNIT_TOO_SMALL) {
      return buildFuncErrMsg(pErrBuf, len, TSDB_CODE_FUNC_FUNTION_ERROR,
                             "INTERP function time interval parameter should be greater than db precision");
    } else if (ret == TIME_UNIT_INVALID) {
      return buildFuncErrMsg(
          pErrBuf, len, TSDB_CODE_FUNC_FUNTION_ERROR,
          "INTERP function time interval parameter should be one of the following: [1b, 1u, 1a, 1s, 1m, 1h, 1d, 1w]");
    }
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateFirstLast</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// forbid null as first/last input, since first(c0, null, 1) may have different number of input</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>nodeType</name> <init>= <expr><call><name>nodeType</name><argument_list>(<argument><expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>QUERY_NODE_VALUE</name> <operator>==</operator> <name>nodeType</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateFirstLastImpl</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isPartial</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// first(col_list) will be rewritten as first(col)</comment>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pPara</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>paraBytes</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>isPartial</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>nodeType</name> <init>= <expr><call><name>nodeType</name><argument_list>(<argument><expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>pType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>pType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>QUERY_NODE_VALUE</name> <operator>==</operator> <name>nodeType</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator>
        <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <call><name>getFirstLastInfoSize</name><argument_list>(<argument><expr><name>paraBytes</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_BINARY</name> <operator>!=</operator> <name>paraType</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateFirstLastPartial</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateFirstLastImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateFirstLastMerge</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateFirstLastImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateUniqueMode</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isUnique</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPara</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nodesExprHasColumn</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The parameters of %s must contain columns"</literal></expr></argument>,
                           <argument><expr><ternary><condition><expr><name>isUnique</name></expr> ?</condition><then> <expr><literal type="string">"UNIQUE"</literal></expr> </then><else>: <expr><literal type="string">"MODE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateUnique</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateUniqueMode</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateMode</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateUniqueMode</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDiff</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfParams</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>!=</operator> <name>colType</name> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param1</comment>
  <if_stmt><if>if <condition>(<expr><name>numOfParams</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParamNode1</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParamNode1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pParamNode1</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"Second parameter of DIFF function should be only 0 or 1"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pValue</name><operator>-&gt;</operator><name>notReserved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>resType</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>TSDB_DATA_TYPE_BOOL</name> <operator>==</operator> <name>colType</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>resType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>resType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>resType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>resType</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EFuncReturnRows</name></type> <name>diffEstReturnRows</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_RETURN_ROWS_N_MINUS_1</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><literal type="number">1</literal> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name></expr> ?</condition><then> <expr><name>FUNC_RETURN_ROWS_INDEFINITE</name></expr>
                                                                                 </then><else>: <expr><name>FUNC_RETURN_ROWS_N_MINUS_1</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateLength</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateConcatImpl</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>minParaNum</name></decl></parameter>,
                                   <parameter><decl><type><name>int32_t</name></type> <name>maxParaNum</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>hasSep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>numOfParams</name> <argument_list type="generic">&lt; <argument><expr><name>minParaNum</name> <operator>||</operator> <name>numOfParams</name></expr></argument> &gt;</argument_list></name> <name>maxParaNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>resultType</name> <init>= <expr><name>TSDB_DATA_TYPE_BINARY</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>resultBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sepBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// concat_ws separator should be constant string</comment>
  <if_stmt><if>if <condition>(<expr><name>hasSep</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPara</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY_NODE_VALUE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"The first parameter of CONCAT_WS function can only be constant string"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* For concat/concat_ws function, if params have NCHAR type, promote the final result to NCHAR */</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pPara</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name>paraType</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>resultType</name> <operator>=</operator> <name>paraType</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfParams</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pPara</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>paraBytes</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>factor</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>resultType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>resultBytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>sepBytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name>resultType</name> <operator>&amp;&amp;</operator> <name>TSDB_DATA_TYPE_VARCHAR</name> <operator>==</operator> <name>paraType</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>factor</name> <operator>*=</operator> <name>TSDB_NCHAR_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>resultBytes</name> <operator>+=</operator> <name>paraBytes</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sepBytes</name> <operator>=</operator> <name>paraBytes</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>hasSep</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>resultBytes</name> <operator>+=</operator> <name>sepBytes</name> <operator>*</operator> <operator>(</operator><name>numOfParams</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>resultBytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>resultType</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateConcat</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateConcatImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateConcatWs</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>translateConcatImpl</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSubstr</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pPara0</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pPara1</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para0Type</name> <init>= <expr><name><name>pPara0</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para1Type</name> <init>= <expr><name><name>pPara1</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>para0Type</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pPara1</name><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>==</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pPara2</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type>    <name>para2Type</name> <init>= <expr><name><name>pPara2</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pPara2</name><operator>)</operator><operator>-&gt;</operator><name><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pPara0</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pPara0</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCast</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// The number of parameters has been limited by the syntax definition</comment>

  <comment type="line">// The function return type has been set during syntax parsing</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para2Type</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>para2Bytes</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>para2Bytes</name> <operator>-=</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>para2Bytes</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>para2Bytes</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// cast dst var type length limits to 4096 bytes</comment>
    <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                           <argument><expr><literal type="string">"CAST function converted length should be in range [0, 4096] bytes"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add database precision as param</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>dbPrec</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addDbPrecisonParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>dbPrec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateToIso8601</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param0</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateTimestampDigits</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param1</comment>
  <if_stmt><if>if <condition>(<expr><name>numOfParams</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateTimezoneFormat</name><argument_list>(<argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid timzone format"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// add default client timezone</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addTimezoneParam</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// set result type</comment>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <literal type="number">64</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateToUnixtimestamp</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add database precision as param</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>dbPrec</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addDbPrecisonParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>dbPrec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTimeTruncate</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para1Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>para2Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name>para1Type</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>para2Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>dbPrec</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>validateTimeUnitParam</name><argument_list>(<argument><expr><name>dbPrec</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TIME_UNIT_TOO_SMALL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                           <argument><expr><literal type="string">"TIMETRUNCATE function time unit parameter should be greater than db precision"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TIME_UNIT_INVALID</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(
        <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
        <argument><expr><literal type="string">"TIMETRUNCATE function time unit parameter should be one of the following: [1b, 1u, 1a, 1s, 1m, 1h, 1d, 1w]"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>==</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>para3Type</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>para3Type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pValue</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaValueErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add database precision as param</comment>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addDbPrecisonParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>dbPrec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add client timezone as param</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>addTimezoneParam</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator>
      <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTimeDiff</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>!=</operator> <name>numOfParams</name> <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>!=</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>paraType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name>paraType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>==</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add database precision as param</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>dbPrec</name> <init>= <expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>==</operator> <name>numOfParams</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>validateTimeUnitParam</name><argument_list>(<argument><expr><name>dbPrec</name></expr></argument>, <argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TIME_UNIT_TOO_SMALL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
                             <argument><expr><literal type="string">"TIMEDIFF function time unit parameter should be greater than db precision"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TIME_UNIT_INVALID</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>buildFuncErrMsg</name><argument_list>(
          <argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TSDB_CODE_FUNC_FUNTION_ERROR</name></expr></argument>,
          <argument><expr><literal type="string">"TIMEDIFF function time unit parameter should be one of the following: [1b, 1u, 1a, 1s, 1m, 1h, 1d, 1w]"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>addDbPrecisonParam</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>dbPrec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateToJson</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaNumErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type> <name>pPara</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pPara</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pPara</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>invaildFuncParaTypeErrMsg</name><argument_list>(<argument><expr><name>pErrBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_JSON</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateSelectValue</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateBlockDistFunc</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <literal type="number">128</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateBlockDistInfoFunc</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <literal type="number">128</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>getBlockDistFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STableBlockDistInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateGroupKey</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pPara</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pPara</name><operator>)</operator><operator>-&gt;</operator><name>resType</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateDatabaseFunc</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_DB_NAME_LEN</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateClientVersionFunc</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_VERSION_LEN</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateServerVersionFunc</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_VERSION_LEN</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateServerStatusFunc</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_INT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateCurrentUserFunc</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_USER_LEN</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateUserFunc</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_USER_LEN</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTagsPseudoColumn</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// The _tags pseudo-column will be expanded to the actual tags on the client side</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>translateTableCountPseudoColumn</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pErrBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <operator>(</operator><name>SDataType</name><operator>)</operator><block>{<expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// clang-format off</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>SBuiltinFuncDefinition</name></type> <name><name>funcMgtBuiltins</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"count"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_COUNT</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SPECIAL_DATA_REQUIRED</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateCount</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>countDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getCountFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>countFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>countScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>functionFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>countInvertFunction</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>combineFunction</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"count"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"sum"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sum"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SUM</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SPECIAL_DATA_REQUIRED</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateSum</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getSumFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>sumFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>sumScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>functionFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>sumInvertFunction</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>sumCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"sum"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"sum"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"min"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_MIN</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SPECIAL_DATA_REQUIRED</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInOutNum</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getMinmaxFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>minmaxFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>minFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>minScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>minmaxFunctionFinalize</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>minCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"min"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"min"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"max"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_MAX</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SPECIAL_DATA_REQUIRED</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInOutNum</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getMinmaxFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>minmaxFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>maxFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>maxScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>minmaxFunctionFinalize</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>maxCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"max"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"max"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"stddev"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_STDDEV</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getStddevFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>stddevFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>stddevFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>stddevScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>stddevFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>stddevInvertFunction</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>stddevCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_stddev_partial"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_stddev_merge"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_stddev_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_STDDEV_PARTIAL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateStddevPartial</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getStddevFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>stddevFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>stddevFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>stddevPartialFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>stddevInvertFunction</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>stddevCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_stddev_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_STDDEV_MERGE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateStddevMerge</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getStddevFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>stddevFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>stddevFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>stddevFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>stddevInvertFunction</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>stddevCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"leastsquares"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LEASTSQUARES</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateLeastSQR</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getLeastSQRFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>leastSQRFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>leastSQRFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>leastSQRScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>leastSQRFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>leastSQRCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"avg"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_AVG</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SPECIAL_DATA_REQUIRED</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getAvgFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>avgFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>avgFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>avgScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>avgFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>avgInvertFunction</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>avgCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_avg_partial"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_avg_merge"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_avg_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_AVG_PARTIAL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateAvgPartial</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getAvgFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>avgFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>avgFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>avgPartialFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>avgInvertFunction</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>avgCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_avg_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_AVG_MERGE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateAvgMerge</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getAvgFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>avgFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>avgFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>avgFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>avgInvertFunction</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>avgCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"percentile"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_PERCENTILE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_REPEAT_SCAN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translatePercentile</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getPercentileFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>percentileFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>percentileFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>percentileScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>percentileFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>NULL</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"apercentile"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_APERCENTILE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateApercentile</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getApercentileFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>apercentileFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>apercentileFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>apercentileScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>apercentileFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>apercentileCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_apercentile_partial"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_apercentile_merge"</literal></expr>,
    <expr><operator>.</operator><name>createMergeParaFuc</name> <operator>=</operator> <name>apercentileCreateMergeParam</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_apercentile_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_APERCENTILE_PARTIAL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateApercentilePartial</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getApercentileFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>apercentileFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>apercentileFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>apercentilePartialFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name> <operator>=</operator> <name>apercentileCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_apercentile_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_APERCENTILE_MERGE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateApercentileMerge</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getApercentileFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>apercentileFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>apercentileFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>apercentileFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name> <operator>=</operator> <name>apercentileCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"top"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TOP</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_FILL_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTopBot</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getTopBotFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>topBotFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>topFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>topBotScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>topBotFinalize</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>topCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"top"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"top"</literal></expr>,
    <expr><operator>.</operator><name>createMergeParaFuc</name> <operator>=</operator> <name>topBotCreateMergeParam</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bottom"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_BOTTOM</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_FILL_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTopBot</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getTopBotFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>topBotFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>bottomFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>topBotScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>topBotFinalize</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>bottomCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"bottom"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"bottom"</literal></expr>,
    <expr><operator>.</operator><name>createMergeParaFuc</name> <operator>=</operator> <name>topBotCreateMergeParam</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"spread"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SPREAD</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateSpread</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getSpreadFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>spreadFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>spreadFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>spreadScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>spreadFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>spreadCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_spread_partial"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_spread_merge"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_spread_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SPREAD_PARTIAL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateSpreadPartial</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getSpreadFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>spreadFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>spreadFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>spreadPartialFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>spreadCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_spread_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SPREAD_MERGE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateSpreadMerge</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getSpreadFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>spreadFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>spreadFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>spreadFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>spreadCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"elapsed"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_ELAPSED</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_INTERVAL_INTERPO_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateElapsed</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getElapsedFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>elapsedFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>elapsedFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>elapsedFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>elapsedCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_elapsed_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_ELAPSED</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateElapsedPartial</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getElapsedFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>elapsedFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>elapsedFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>elapsedPartialFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>elapsedCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_elapsed_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_ELAPSED</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateElapsedMerge</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getElapsedFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>elapsedFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>elapsedFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>elapsedFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>elapsedCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"interp"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_INTERP</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_INTERVAL_INTERPO_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator>
                      <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInterp</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>    <operator>=</operator> <name>getSelectivityFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>      <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name>  <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"derivative"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_DERIVATIVE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_INDEFINITE_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator>
                      <name>FUNC_MGT_KEEP_ORDER_FUNC</name> <operator>|</operator> <name>FUNC_MGT_CUMULATIVE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateDerivative</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getDerivativeFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>derivativeFuncSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>derivativeFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>derivativeScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>functionFinalize</name></expr>,
    <expr><operator>.</operator><name>estimateReturnRowsFunc</name> <operator>=</operator> <name>derivativeEstReturnRows</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"irate"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_IRATE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateIrate</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getIrateFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>irateFuncSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>irateFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>irateScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>irateFinalize</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"last_row"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LAST_ROW</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLast</name></expr>,
    <expr><operator>.</operator><name>dynDataRequiredFunc</name> <operator>=</operator> <name>lastDynDataReq</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>lastRowFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>firstLastScalarFunction</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_last_row_partial"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_last_row_merge"</literal></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastFinalize</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_cache_last_row"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CACHE_LAST_ROW</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLast</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>cachedLastRowFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastFinalize</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_cache_last"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CACHE_LAST</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLast</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>lastFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastFinalize</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_last_row_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LAST_PARTIAL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLastPartial</name></expr>,
    <expr><operator>.</operator><name>dynDataRequiredFunc</name> <operator>=</operator> <name>lastDynDataReq</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>lastRowFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastPartialFinalize</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_last_row_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LAST_MERGE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLastMerge</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>lastFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastFinalize</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"first"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_FIRST</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLast</name></expr>,
    <expr><operator>.</operator><name>dynDataRequiredFunc</name> <operator>=</operator> <name>firstDynDataReq</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>firstFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>firstLastScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastFinalize</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_first_partial"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_first_merge"</literal></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>firstCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_first_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_FIRST_PARTIAL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLastPartial</name></expr>,
    <expr><operator>.</operator><name>dynDataRequiredFunc</name> <operator>=</operator> <name>firstDynDataReq</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>firstFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastPartialFinalize</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>firstCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_first_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_FIRST_MERGE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLastMerge</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>firstFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastFinalize</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>firstCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"last"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LAST</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLast</name></expr>,
    <expr><operator>.</operator><name>dynDataRequiredFunc</name> <operator>=</operator> <name>lastDynDataReq</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>lastFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>firstLastScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastFinalize</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_last_partial"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_last_merge"</literal></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>lastCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_last_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LAST_PARTIAL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLastPartial</name></expr>,
    <expr><operator>.</operator><name>dynDataRequiredFunc</name> <operator>=</operator> <name>lastDynDataReq</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>lastFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastPartialFinalize</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>lastCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_last_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LAST_MERGE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateFirstLastMerge</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getFirstLastFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>lastFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>firstLastFinalize</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>lastCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"twa"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TWA</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_INTERVAL_INTERPO_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>dataRequiredFunc</name> <operator>=</operator> <name>statisDataRequired</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>    <operator>=</operator> <name>getTwaFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>      <operator>=</operator> <name>twaFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>   <operator>=</operator> <name>twaFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name>  <operator>=</operator> <name>twaScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name>  <operator>=</operator> <name>twaFinalize</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"histogram"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_HISTOGRAM</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_FILL_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateHistogram</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getHistogramFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>histogramFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>histogramFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>histogramScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>histogramFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>histogramCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_histogram_partial"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_histogram_merge"</literal></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_histogram_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_HISTOGRAM_PARTIAL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_FILL_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateHistogramPartial</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getHistogramFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>histogramFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>histogramFunctionPartial</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>histogramPartialFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>histogramCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_histogram_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_HISTOGRAM_MERGE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_FILL_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateHistogramMerge</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getHistogramFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>histogramFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>histogramFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>histogramCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hyperloglog"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_HYPERLOGLOG</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateHLL</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getHLLFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>hllFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>hllScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>hllFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>hllCombine</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_hyperloglog_partial"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_hyperloglog_merge"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_hyperloglog_partial"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_HYPERLOGLOG_PARTIAL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateHLLPartial</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getHLLFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>hllFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>hllPartialFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>hllCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_hyperloglog_merge"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_HYPERLOGLOG_MERGE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateHLLMerge</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getHLLFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>hllFunctionMerge</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>hllFinalize</name></expr>,
    <expr><operator>.</operator><name>invertFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>combineFunc</name>  <operator>=</operator> <name>hllCombine</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"diff"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_DIFF</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_INDEFINITE_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator>
                      <name>FUNC_MGT_KEEP_ORDER_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name> <operator>|</operator> <name>FUNC_MGT_CUMULATIVE_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateDiff</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getDiffFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>diffFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>diffFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>diffScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>functionFinalize</name></expr>,
    <expr><operator>.</operator><name>estimateReturnRowsFunc</name> <operator>=</operator> <name>diffEstReturnRows</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"statecount"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_STATE_COUNT</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_INDEFINITE_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator>
                      <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateStateCount</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getStateFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>stateCountFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>stateCountScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"stateduration"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_STATE_DURATION</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_INDEFINITE_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator>
                      <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateStateDuration</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getStateFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>stateDurationFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>stateDurationScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"csum"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CSUM</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_INDEFINITE_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator>
                      <name>FUNC_MGT_FORBID_STREAM_FUNC</name> <operator>|</operator> <name>FUNC_MGT_CUMULATIVE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateCsum</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getCsumFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>csumFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>csumScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>estimateReturnRowsFunc</name> <operator>=</operator> <name>csumEstReturnRows</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mavg"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_MAVG</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_INDEFINITE_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name> <operator>|</operator>
                      <name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateMavg</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getMavgFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>mavgFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>mavgFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>mavgScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sample"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SAMPLE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_STREAM_FUNC</name> <operator>|</operator> <name>FUNC_MGT_FORBID_FILL_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateSample</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getSampleFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>sampleFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>sampleFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>sampleScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>sampleFinalize</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tail"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TAIL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_INDEFINITE_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator>
                      <name>FUNC_MGT_FORBID_STREAM_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTail</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getTailFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>tailFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>tailFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>tailScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"unique"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_UNIQUE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_INDEFINITE_ROWS_FUNC</name> <operator>|</operator> <name>FUNC_MGT_TIMELINE_FUNC</name> <operator>|</operator>
                      <name>FUNC_MGT_FORBID_STREAM_FUNC</name> <operator>|</operator> <name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateUnique</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getUniqueFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>uniqueFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>uniqueFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>uniqueScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mode"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_MODE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateMode</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getModeFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>modeFunctionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>modeFunction</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>modeScalarFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>modeFinalize</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"abs"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_ABS</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInOutNum</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>absFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"log"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LOG</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateLogarithm</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>logFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pow"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_POW</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateIn2NumOutDou</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>powFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sqrt"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SQRT</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>sqrtFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ceil"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CEIL</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInOutNum</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>ceilFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"floor"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_FLOOR</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInOutNum</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>floorFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"round"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_ROUND</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInOutNum</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>roundFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sin"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SIN</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>sinFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cos"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_COS</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>cosFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tan"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TAN</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>tanFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"asin"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_ASIN</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>asinFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"acos"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_ACOS</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>acosFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"atan"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_ATAN</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInNumOutDou</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>atanFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"length"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LENGTH</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_STRING_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateLength</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>lengthFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"char_length"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CHAR_LENGTH</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_STRING_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateLength</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>charLengthFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"concat"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CONCAT</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_STRING_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateConcat</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>concatFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"concat_ws"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CONCAT_WS</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_STRING_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateConcatWs</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>concatWsFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"lower"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LOWER</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_STRING_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInOutStr</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>lowerFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"upper"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_UPPER</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_STRING_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateInOutStr</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>upperFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ltrim"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_LTRIM</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_STRING_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateLtrim</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>ltrimFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rtrim"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_RTRIM</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_STRING_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateRtrim</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>rtrimFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"substr"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SUBSTR</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_STRING_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateSubstr</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>substrFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"cast"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CAST</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateCast</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>castFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"to_iso8601"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TO_ISO8601</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateToIso8601</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>toISO8601Function</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"to_unixtimestamp"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TO_UNIXTIMESTAMP</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateToUnixtimestamp</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>toUnixtimestampFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"timetruncate"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TIMETRUNCATE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTimeTruncate</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>timeTruncateFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"timediff"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TIMEDIFF</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTimeDiff</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>timeDiffFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"now"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_NOW</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_DATETIME_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateNowToday</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>nowFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"today"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TODAY</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name> <operator>|</operator> <name>FUNC_MGT_DATETIME_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateNowToday</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>todayFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"timezone"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TIMEZONE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTimezone</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>timezoneFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tbname"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TBNAME</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SCAN_PC_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTbnameColumn</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>qTbnameFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_qstart"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_QSTART</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_CLIENT_PC_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTimePseudoColumn</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_qend"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_QEND</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_CLIENT_PC_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTimePseudoColumn</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_qduration"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_QDURATION</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_CLIENT_PC_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateWduration</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_wstart"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_WSTART</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_WINDOW_PC_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTimePseudoColumn</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getTimePseudoFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>winStartTsFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_wend"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_WEND</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_WINDOW_PC_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTimePseudoColumn</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getTimePseudoFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>winEndTsFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_wduration"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_WDURATION</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_WINDOW_PC_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateWduration</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getTimePseudoFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>winDurFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"to_json"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TO_JSON</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateToJson</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>toJsonFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_select_value"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SELECT_VALUE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateSelectValue</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getSelectivityFuncEnv</name></expr>,  <comment type="line">// todo remove this function later.</comment>
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_select_value"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_select_value"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_block_dist"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_BLOCK_DIST</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateBlockDistFunc</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getBlockDistFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>blockDistSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>blockDistFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>blockDistFinalize</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_block_dist_info"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_BLOCK_DIST_INFO</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SCAN_PC_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateBlockDistInfoFunc</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_group_key"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_GROUP_KEY</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_AGG_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SELECT_FUNC</name> <operator>|</operator> <name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateGroupKey</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getGroupKeyFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>functionSetup</name></expr>,
    <expr><operator>.</operator><name>processFunc</name>  <operator>=</operator> <name>groupKeyFunction</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>groupKeyFinalize</name></expr>,
    <expr><operator>.</operator><name>pPartialFunc</name> <operator>=</operator> <literal type="string">"_group_key"</literal></expr>,
    <expr><operator>.</operator><name>pMergeFunc</name>   <operator>=</operator> <literal type="string">"_group_key"</literal></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"database"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_DATABASE</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SYSTEM_INFO_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateDatabaseFunc</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"client_version"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CLIENT_VERSION</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SYSTEM_INFO_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateClientVersionFunc</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"server_version"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SERVER_VERSION</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SYSTEM_INFO_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateServerVersionFunc</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"server_status"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_SERVER_STATUS</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SYSTEM_INFO_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateServerStatusFunc</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"current_user"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_CURRENT_USER</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SYSTEM_INFO_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateCurrentUserFunc</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"user"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_USER</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_SYSTEM_INFO_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SCALAR_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateUserFunc</name></expr>,
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_irowts"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_IROWTS</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_INTERP_PC_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTimePseudoColumn</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>getTimePseudoFuncEnv</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_tags"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TAGS</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_MULTI_RES_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTagsPseudoColumn</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"_table_count"</literal></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>FUNCTION_TYPE_TABLE_COUNT</name></expr>,
    <expr><operator>.</operator><name>classification</name> <operator>=</operator> <name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name> <operator>|</operator> <name>FUNC_MGT_SCAN_PC_FUNC</name></expr>,
    <expr><operator>.</operator><name>translateFunc</name> <operator>=</operator> <name>translateTableCountPseudoColumn</name></expr>,
    <expr><operator>.</operator><name>getEnvFunc</name>   <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>initFunc</name>     <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>sprocessFunc</name> <operator>=</operator> <name>NULL</name></expr>,
    <expr><operator>.</operator><name>finalizeFunc</name> <operator>=</operator> <name>NULL</name></expr>
  }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// clang-format on</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>funcMgtBuiltinsNum</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>funcMgtBuiltins</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SBuiltinFuncDefinition</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
</unit>
