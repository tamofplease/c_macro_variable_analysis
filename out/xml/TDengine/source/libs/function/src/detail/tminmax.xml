<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/src/detail/tminmax.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtinsimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tfunctionInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__COMPARE_ACQUIRED_MAX</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>end</name></type></parameter>, <parameter><type><name>bm</name></type></parameter>, <parameter><type><name>_data</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>for (; i &lt; (end); ++i) {                                       \
    if (colDataIsNull_f(bm, i)) {                                \
      continue;                                                  \
    }                                                            \
                                                                 \
    if ((val) &lt; (_data)[i]) {                                    \
      (val) = (_data)[i];                                        \
      if ((ctx)-&gt;subsidiaries.num &gt; 0) {                         \
        updateTupleData((ctx), i, (ctx)-&gt;pSrcBlock, pos);        \
      }                                                          \
    }                                                            \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__COMPARE_ACQUIRED_MIN</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>end</name></type></parameter>, <parameter><type><name>bm</name></type></parameter>, <parameter><type><name>_data</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>for (; i &lt; (end); ++i) {                                       \
    if (colDataIsNull_f(bm, i)) {                                \
      continue;                                                  \
    }                                                            \
                                                                 \
    if ((val) &gt; (_data)[i]) {                                    \
      (val) = (_data)[i];                                        \
      if ((ctx)-&gt;subsidiaries.num &gt; 0) {                         \
        updateTupleData((ctx), i, (ctx)-&gt;pSrcBlock, pos);        \
      }                                                          \
    }                                                            \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__COMPARE_EXTRACT_MIN</name><parameter_list>(<parameter><type><name>start</name></type></parameter>, <parameter><type><name>end</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>_data</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>for (int32_t i = (start); i &lt; (end); ++i) {         \
    if ((val) &gt; (_data)[i]) {                         \
      (val) = (_data)[i];                             \
    }                                                 \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__COMPARE_EXTRACT_MAX</name><parameter_list>(<parameter><type><name>start</name></type></parameter>, <parameter><type><name>end</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>_data</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>for (int32_t i = (start); i &lt; (end); ++i) {         \
    if ((val) &lt; (_data)[i]) {                         \
      (val) = (_data)[i];                             \
    }                                                 \
  }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calculateRounds</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>remainder</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rounds</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>width</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>bitWidth</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <operator>(</operator><name>bitWidth</name><operator>&gt;&gt;</operator><literal type="number">3u</literal><operator>)</operator> <operator>/</operator> <name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>remainder</name> <operator>=</operator> <name>numOfRows</name> <operator>%</operator> <operator>(</operator><operator>*</operator><name>width</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>rounds</name> <operator>=</operator> <name>numOfRows</name> <operator>/</operator> <operator>(</operator><operator>*</operator><name>width</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_MAX_VAL</name><parameter_list>(<parameter><type><name>_first</name></type></parameter>, <parameter><type><name>_sec</name></type></parameter>, <parameter><type><name>_width</name></type></parameter>, <parameter><type><name>_remain</name></type></parameter>, <parameter><type><name>_v</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(_v) = TMAX((_first)[0], (_first)[1]);                   \
  for (int32_t k = 1; k &lt; (_width); ++k) {                 \
    (_v) = TMAX((_v), (_first)[k]);                        \
  }                                                        \
                                                           \
  for (int32_t j = 0; j &lt; (_remain); ++j) {                \
    if ((_v) &lt; (_sec)[j]) {                                \
      (_v) = (_sec)[j];                                    \
    }                                                      \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRACT_MIN_VAL</name><parameter_list>(<parameter><type><name>_first</name></type></parameter>, <parameter><type><name>_sec</name></type></parameter>, <parameter><type><name>_width</name></type></parameter>, <parameter><type><name>_remain</name></type></parameter>, <parameter><type><name>_v</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(_v) = TMIN((_first)[0], (_first)[1]);                   \
  for (int32_t k = 1; k &lt; (_width); ++k) {                 \
    (_v) = TMIN((_v), (_first)[k]);                        \
  }                                                        \
                                                           \
  for (int32_t j = 0; j &lt; (_remain); ++j) {                \
    if ((_v) &gt; (_sec)[j]) {                                \
      (_v) = (_sec)[j];                                    \
    }                                                      \
  }</cpp:value></cpp:define>
  
  
<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>i8VectorCmpAVX2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>signVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>        <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>remain</name></decl>, <decl><type ref="prev"/><name>rounds</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>calculateRounds</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>remain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX2__</name></expr></cpp:if>
  <decl_stmt><decl><type><name>__m256i</name></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__m256i</name></type> <name>initVal</name> <init>= <expr><call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMinFunc</name></expr>)</condition> <block>{<block_content>  <comment type="line">// max function</comment>
    <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_max_epi8</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MAX_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// unsigned value </comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_max_epu8</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MAX_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></else></if_stmt>
    
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// min function</comment>
    <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_min_epi8</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let sum up the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MIN_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_min_epu8</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let sum up the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MIN_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>i16VectorCmpAVX2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>signVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int16_t</name></type>        <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>remain</name></decl>, <decl><type ref="prev"/><name>rounds</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>calculateRounds</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>remain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX2__</name></expr></cpp:if>
  <decl_stmt><decl><type><name>__m256i</name></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__m256i</name></type> <name>initVal</name> <init>= <expr><call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMinFunc</name></expr>)</condition> <block>{<block_content>  <comment type="line">// max function</comment>
    <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_max_epi16</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let sum up the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MAX_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_max_epu16</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let sum up the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MAX_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></else></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// min function</comment>
    <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_min_epi16</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let sum up the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MIN_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_min_epi16</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let sum up the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MIN_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>i32VectorCmpAVX2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>signVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>remain</name></decl>, <decl><type ref="prev"/><name>rounds</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>calculateRounds</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>remain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX2__</name></expr></cpp:if>
  <decl_stmt><decl><type><name>__m256i</name></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__m256i</name></type> <name>initVal</name> <init>= <expr><call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMinFunc</name></expr>)</condition> <block>{<block_content>  <comment type="line">// max function</comment>
    <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_max_epi32</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let compare  the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MAX_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// unsigned value</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_max_epi32</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let compare  the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MAX_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// min function</comment>
    <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_min_epi32</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let sum up the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MIN_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_min_epu32</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="line">// let sum up the final results</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
      <macro><name>EXTRACT_MIN_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>floatVectorCmpAVX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>remain</name></decl>, <decl><type ref="prev"/><name>rounds</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>calculateRounds</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>remain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX__</name></expr></cpp:if>

  <decl_stmt><decl><type><name>__m256</name></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__m256</name></type> <name>initVal</name> <init>= <expr><call><name>_mm256_loadu_ps</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMinFunc</name></expr>)</condition> <block>{<block_content>  <comment type="line">// max function</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_loadu_ps</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_max_ps</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
    <macro><name>EXTRACT_MAX_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// min function</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_loadu_ps</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_min_ps</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
    <macro><name>EXTRACT_MIN_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>doubleVectorCmpAVX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type>        <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>remain</name></decl>, <decl><type ref="prev"/><name>rounds</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>calculateRounds</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>remain</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX__</name></expr></cpp:if>

  <decl_stmt><decl><type><name>__m256d</name></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__m256d</name></type> <name>initVal</name> <init>= <expr><call><name>_mm256_loadu_pd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMinFunc</name></expr>)</condition> <block>{<block_content>  <comment type="line">// max function</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_loadu_pd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_max_pd</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// let sum up the final results</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
    <macro><name>EXTRACT_MAX_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// min function</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>_mm256_loadu_pd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>initVal</name> <operator>=</operator> <call><name>_mm256_min_pd</name><argument_list>(<argument><expr><name>initVal</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// let sum up the final results</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>initVal</name></expr></init></decl>;</decl_stmt>
    <macro><name>EXTRACT_MIN_VAL</name><argument_list>(<argument>q</argument>, <argument>p</argument>, <argument>width</argument>, <argument>remain</argument>, <argument>v</argument>)</argument_list></macro>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>findFirstValPosition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>start</name> <operator>+</operator> <name>numOfRows</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleInt8Col</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>,
                          <parameter><decl><type><name>bool</name></type> <name>signVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// AVX2 version to speedup the loop</comment>
  <if_stmt><if>if <condition>(<expr><name>tsAVX2Enable</name> <operator>&amp;&amp;</operator> <name>tsSIMDEnable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <call><name>i8VectorCmpAVX2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>signVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type>       <name>v</name> <init>= <expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MIN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MAX</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>       <name>v</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MIN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MAX</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleInt16Col</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>,
                           <parameter><decl><type><name>bool</name></type> <name>signVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// AVX2 version to speedup the loop</comment>
  <if_stmt><if>if <condition>(<expr><name>tsAVX2Enable</name> <operator>&amp;&amp;</operator> <name>tsSIMDEnable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <call><name>i16VectorCmpAVX2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>signVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type>       <name>v</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MIN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MAX</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type>       <name>v</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MIN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MAX</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleInt32Col</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>,
                           <parameter><decl><type><name>bool</name></type> <name>signVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// AVX2 version to speedup the loop</comment>
  <if_stmt><if>if <condition>(<expr><name>tsAVX2Enable</name> <operator>&amp;&amp;</operator> <name>tsSIMDEnable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <call><name>i32VectorCmpAVX2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>signVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>       <name>v</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MIN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MAX</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type>       <name>v</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MIN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MAX</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleInt64Col</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>,
                           <parameter><decl><type><name>bool</name></type> <name>signVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>signVal</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type>       <name>v</name> <init>= <expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MIN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MAX</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>       <name>v</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MIN</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>__COMPARE_EXTRACT_MAX</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></argument>, <argument><expr><operator>*</operator><name>v</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleFloatCol</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// AVX version to speedup the loop</comment>
  <if_stmt><if>if <condition>(<expr><name>tsAVXEnable</name> <operator>&amp;&amp;</operator> <name>tsSIMDEnable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>floatVectorCmpAVX</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>  <comment type="line">// min</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>val</name> <operator>&gt;</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// max</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>val</name> <operator>&lt;</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handleDoubleCol</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// AVX version to speedup the loop</comment>
  <if_stmt><if>if <condition>(<expr><name>tsAVXEnable</name> <operator>&amp;&amp;</operator> <name>tsSIMDEnable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>doubleVectorCmpAVX</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>  <comment type="line">// min</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>val</name> <operator>&gt;</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// max</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>val</name> <operator>&lt;</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>findRowIndex</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// the data is loaded, not only the block SMA value</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>tval</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// if reach here means real data of block SMA is not set in pCtx-&gt;input.</comment>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doExtractVal</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>,
                         <parameter><decl><type><name>bool</name></type> <name>isMinFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(int8_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(int16_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(int32_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(uint8_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(uint16_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(uint32_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(uint64_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(float*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MIN</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(double*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(int8_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(int16_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(int32_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(uint8_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(uint16_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(uint32_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(uint64_t*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(float*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <macro><name>__COMPARE_ACQUIRED_MAX</name><argument_list>(<argument>i</argument>, <argument>end</argument>, <argument>pCol-&gt;nullbitmap</argument>, <argument>pData</argument>, <argument>pCtx</argument>, <argument>*(double*)&amp;(pBuf-&gt;v)</argument>, <argument>&amp;pBuf-&gt;tuplePos</argument>)</argument_list></macro>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doMinMaxHelper</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>isMinFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type>       <name>pAgg</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>type</name> <init>= <expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type>      <name>pBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElems</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// data in current data block are qualified to the query</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElems</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>numOfNull</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>&amp;&amp;</operator> <name>numOfElems</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_over</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>tval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>isMinFunc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>&amp;</operator><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>min</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>tval</name> <operator>=</operator> <operator>&amp;</operator><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>max</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>tval</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>findRowIndex</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>val</name> <init>= <expr><call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>&lt;</operator> <name>val</name><operator>)</operator> <operator>^</operator> <name>isMinFunc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>findRowIndex</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><call><name>GET_UINT64_VAL</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>&lt;</operator> <name>val</name><operator>)</operator> <operator>^</operator> <name>isMinFunc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>findRowIndex</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>&lt;</operator> <name>val</name><operator>)</operator> <operator>^</operator> <name>isMinFunc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>findRowIndex</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>&lt;</operator> <name>val</name><operator>)</operator> <operator>^</operator> <name>isMinFunc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>findRowIndex</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>tval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>numOfElems</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <name>numOfRows</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>||</operator> <name><name>numOfRows</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">32</literal> <operator>||</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><call><name>findFirstValPosition</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>end</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <operator>(</operator><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfElems</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_over</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doExtractVal</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>numOfElems</name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleInt8Col</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleInt16Col</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleInt32Col</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleInt64Col</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleInt8Col</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleInt16Col</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleInt32Col</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleInt64Col</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleFloatCol</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>handleDoubleCol</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>isMinFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_over</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pBuf</name><operator>-&gt;</operator><name>nullTupleSaved</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>nullTuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>nullTupleSaved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>numOfElems</name></expr>;</return>
</block_content>}</block></function></unit>
