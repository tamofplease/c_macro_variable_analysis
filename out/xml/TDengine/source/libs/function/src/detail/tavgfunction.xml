<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/src/detail/tavgfunction.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtinsimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tfunctionInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_VAL</name><parameter_list>(<parameter><type><name>_info</name></type></parameter>, <parameter><type><name>numOfElem</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                 \
    if ((numOfElem) &lt;= 0) {            \
      break;                           \
    }                                  \
    (_info)-&gt;numOfRes = (res);         \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_AVG_N</name><parameter_list>(<parameter><type><name>sumT</name></type></parameter>, <parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>                                               \
  <cpp:value>do {                                                                    \
    T* plist = (T*)pCol-&gt;pData;                                           \
    for (int32_t i = start; i &lt; numOfRows + pInput-&gt;startRowIndex; ++i) { \
      if (colDataIsNull_f(pCol-&gt;nullbitmap, i)) {                         \
        continue;                                                         \
      }                                                                   \
                                                                          \
      numOfElem += 1;                                                     \
      pAvgRes-&gt;count -= 1;                                                \
      sumT -= plist[i];                                                   \
    }                                                                     \
  } while (0)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SAvgRes</name> <block>{
  <decl_stmt><decl><type><name>double</name></type>  <name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSumRes</name></type> <name>sum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>type</name></decl>;</decl_stmt>  <comment type="line">// store the original input type, used in merge function</comment>
}</block></struct></type> <name>SAvgRes</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>floatVectorSumAVX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>plist</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>bitWidth</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX__</name></expr></cpp:if>
  <comment type="line">// find the start position that are aligned to 32bytes address in memory</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>bitWidth</name><operator>&gt;&gt;</operator><literal type="number">3u</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>remainder</name> <init>= <expr><name>numOfRows</name> <operator>%</operator> <name>width</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rounds</name> <init>= <expr><name>numOfRows</name> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>plist</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__m256</name></type> <name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__m256</name></type> <name>sum</name> <init>= <expr><call><name>_mm256_setzero_ps</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>_mm256_loadu_ps</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>_mm256_add_ps</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// let sum up the final results</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sum</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>startIndex</name> <init>= <expr><name>rounds</name> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>j</name> <operator>+</operator> <name>startIndex</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doubleVectorSumAVX</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>plist</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>bitWidth</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX__</name></expr></cpp:if>
  <comment type="line">// find the start position that are aligned to 32bytes address in memory</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>bitWidth</name><operator>&gt;&gt;</operator><literal type="number">3u</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>remainder</name> <init>= <expr><name>numOfRows</name> <operator>%</operator> <name>width</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rounds</name> <init>= <expr><name>numOfRows</name> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>plist</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__m256d</name></type> <name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>__m256d</name></type> <name>sum</name> <init>= <expr><call><name>_mm256_setzero_pd</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>_mm256_loadu_pd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>_mm256_add_pd</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// let sum up the final results</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sum</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>startIndex</name> <init>= <expr><name>rounds</name> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>j</name> <operator>+</operator> <name>startIndex</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>i8VectorSumAVX2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>*</modifier></type> <name>plist</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>bitWidth</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX2__</name></expr></cpp:if>
  <comment type="line">// find the start position that are aligned to 32bytes address in memory</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>bitWidth</name><operator>&gt;&gt;</operator><literal type="number">3u</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>remainder</name> <init>= <expr><name>numOfRows</name> <operator>%</operator> <name>width</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rounds</name> <init>= <expr><name>numOfRows</name> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__m256i</name></type> <name>sum</name> <init>= <expr><call><name>_mm256_setzero_si256</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>plist</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>__m128i</name></type> <name>val</name> <init>= <expr><call><name>_mm_lddqu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>__m256i</name></type> <name>extVal</name> <init>= <expr><call><name>_mm256_cvtepi8_epi64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// only four items will be converted into __m256i</comment>
      <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>_mm256_add_epi64</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>extVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// let sum up the final results</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sum</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>j</name> <operator>+</operator> <name>rounds</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>plist</name></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>__m128i</name></type> <name>val</name> <init>= <expr><call><name>_mm_lddqu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>__m256i</name></type> <name>extVal</name> <init>= <expr><call><name>_mm256_cvtepu8_epi64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// only four items will be converted into __m256i</comment>
      <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>_mm256_add_epi64</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>extVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// let sum up the final results</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sum</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>plist</name><index>[<expr><name>j</name> <operator>+</operator> <name>rounds</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>i16VectorSumAVX2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>plist</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>bitWidth</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX2__</name></expr></cpp:if>
  <comment type="line">// find the start position that are aligned to 32bytes address in memory</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>bitWidth</name><operator>&gt;&gt;</operator><literal type="number">3u</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>remainder</name> <init>= <expr><name>numOfRows</name> <operator>%</operator> <name>width</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rounds</name> <init>= <expr><name>numOfRows</name> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__m256i</name></type> <name>sum</name> <init>= <expr><call><name>_mm256_setzero_si256</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>plist</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>__m128i</name></type> <name>val</name> <init>= <expr><call><name>_mm_lddqu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>__m256i</name></type> <name>extVal</name> <init>= <expr><call><name>_mm256_cvtepi16_epi64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// only four items will be converted into __m256i</comment>
      <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>_mm256_add_epi64</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>extVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// let sum up the final results</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sum</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>j</name> <operator>+</operator> <name>rounds</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator><name>plist</name></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>__m128i</name></type> <name>val</name> <init>= <expr><call><name>_mm_lddqu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>__m256i</name></type> <name>extVal</name> <init>= <expr><call><name>_mm256_cvtepu16_epi64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// only four items will be converted into __m256i</comment>
      <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>_mm256_add_epi64</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>extVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// let sum up the final results</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sum</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>plist</name><index>[<expr><name>j</name> <operator>+</operator> <name>rounds</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>i32VectorSumAVX2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>plist</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>bitWidth</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX2__</name></expr></cpp:if>
  <comment type="line">// find the start position that are aligned to 32bytes address in memory</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>bitWidth</name><operator>&gt;&gt;</operator><literal type="number">3u</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>remainder</name> <init>= <expr><name>numOfRows</name> <operator>%</operator> <name>width</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rounds</name> <init>= <expr><name>numOfRows</name> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__m256i</name></type> <name>sum</name> <init>= <expr><call><name>_mm256_setzero_si256</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>plist</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>__m128i</name></type> <name>val</name> <init>= <expr><call><name>_mm_lddqu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>__m256i</name></type> <name>extVal</name> <init>= <expr><call><name>_mm256_cvtepi32_epi64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// only four items will be converted into __m256i</comment>
      <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>_mm256_add_epi64</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>extVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// let sum up the final results</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sum</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>j</name> <operator>+</operator> <name>rounds</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>plist</name></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>__m128i</name></type> <name>val</name> <init>= <expr><call><name>_mm_lddqu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>__m256i</name></type> <name>extVal</name> <init>= <expr><call><name>_mm256_cvtepu32_epi64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// only four items will be converted into __m256i</comment>
      <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>_mm256_add_epi64</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>extVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// let sum up the final results</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sum</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>plist</name><index>[<expr><name>j</name> <operator>+</operator> <name>rounds</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>i64VectorSumAVX2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>plist</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>bitWidth</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX2__</name></expr></cpp:if>
  <comment type="line">// find the start position that are aligned to 32bytes address in memory</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>bitWidth</name> <operator>&gt;&gt;</operator> <literal type="number">3u</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>remainder</name> <init>= <expr><name>numOfRows</name> <operator>%</operator> <name>width</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rounds</name> <init>= <expr><name>numOfRows</name> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>__m256i</name></type> <name>sum</name> <init>= <expr><call><name>_mm256_setzero_si256</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>plist</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>__m256i</name></type> <name>val</name> <init>= <expr><call><name>_mm256_lddqu_si256</name><argument_list>(<argument><expr><operator>(</operator><name>__m256i</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>_mm256_add_epi64</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// let sum up the final results</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sum</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>remainder</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>j</name> <operator>+</operator> <name>rounds</name> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getAvgInfoSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SAvgRes</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>getAvgFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SAvgRes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>avgFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SAvgRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>calculateAvgBySMAInfo</name><parameter_list>(<parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SColumnDataAgg</name><modifier>*</modifier></type> <name>pAgg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><name>numOfRows</name> <operator>-</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>numOfNull</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfElem</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>numOfElem</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>sum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>sum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>pAgg</name><operator>-&gt;</operator><name>sum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>numOfElem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doAddNumericVector</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>SInputColumnInfoData</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>numOfElems</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>avgFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>numOfElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>THRESHOLD_SIZE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type>       <name>pAgg</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>type</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pAvgRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// computing based on the true data block</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// try to use SMA if available</comment>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <call><name>calculateAvgBySMAInfo</name><argument_list>(<argument><expr><name>pAvgRes</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pAgg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// try to employ the simd instructions to speed up the loop</comment>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>simdAvailable</name> <init>= <expr><name>tsAVXEnable</name> <operator>&amp;&amp;</operator> <name>tsSIMDEnable</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;</operator> <name>THRESHOLD_SIZE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator> <name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// 1. If the CPU supports AVX, let's employ AVX instructions to speedup this loop</comment>
        <if_stmt><if>if <condition>(<expr><name>simdAvailable</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>i8VectorSumAVX2</name><argument_list>(<argument><expr><name>plist</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pAvgRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// 1. If the CPU supports AVX, let's employ AVX instructions to speedup this loop</comment>
        <if_stmt><if>if <condition>(<expr><name>simdAvailable</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>i16VectorSumAVX2</name><argument_list>(<argument><expr><name>plist</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pAvgRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name><operator>*</operator><operator>)</operator> <name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// 1. If the CPU supports AVX, let's employ AVX instructions to speedup this loop</comment>
        <if_stmt><if>if <condition>(<expr><name>simdAvailable</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>i32VectorSumAVX2</name><argument_list>(<argument><expr><name>plist</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pAvgRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>*</operator><operator>)</operator> <name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// 1. If the CPU supports AVX, let's employ AVX instructions to speedup this loop</comment>
        <if_stmt><if>if <condition>(<expr><name>simdAvailable</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>i64VectorSumAVX2</name><argument_list>(<argument><expr><name>plist</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pAvgRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator> <name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// 1. If the CPU supports AVX, let's employ AVX instructions to speedup this loop</comment>
        <if_stmt><if>if <condition>(<expr><name>simdAvailable</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>floatVectorSumAVX</name><argument_list>(<argument><expr><name>plist</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pAvgRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>double</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// 1. If the CPU supports AVX, let's employ AVX instructions to speedup this loop</comment>
        <if_stmt><if>if <condition>(<expr><name>simdAvailable</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>doubleVectorSumAVX</name><argument_list>(<argument><expr><name>plist</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>pAvgRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <call><name>doAddNumericVector</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pInput</name></expr></argument>, <argument><expr><name>pAvgRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_over</name>:</label>
  <comment type="line">// data in the check operation are all null, not output</comment>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avgTransferInfo</name><parameter_list>(<parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>avgFunctionMerge</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pInputInfo</name> <init>= <expr><operator>(</operator><name>SAvgRes</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>avgTransferInfo</name><argument_list>(<argument><expr><name>pInputInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>avgInvertFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Only the pre-computing information loaded and actual data does not loaded</comment>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pAvgRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// computing based on the true data block</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_AVG_N</name><argument_list>(<argument><expr><name><name>pAvgRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="line">// data in the check operation are all null, not output</comment>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>avgCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAvgRes</name><modifier>*</modifier></type>             <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAvgRes</name><modifier>*</modifier></type>             <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>              <name>type</name> <init>= <expr><ternary><condition><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr> ?</condition><then> <expr><name><name>pSBuf</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name><name>pDBuf</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>+=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>+=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>+=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>avgFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SAvgRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pEntryInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>type</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>isum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>usum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>sum</name><operator>.</operator><name>dsum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><call><name>functionFinalize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>avgPartialFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAvgRes</name><modifier>*</modifier></type>             <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>resultBytes</name> <init>= <expr><call><name>getAvgInfoSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>res</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>resultBytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
