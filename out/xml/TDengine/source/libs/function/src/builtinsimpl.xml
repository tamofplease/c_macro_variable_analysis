<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/src/builtinsimpl.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtinsimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streamState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdigest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tfunctionInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thistogram.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpercentile.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HISTOGRAM_MAX_BINS_NUM</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAVG_MAX_POINTS_NUM</name></cpp:macro>    <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAIL_MAX_POINTS_NUM</name></cpp:macro>    <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAIL_MAX_OFFSET</name></cpp:macro>        <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQUE_MAX_RESULT_SIZE</name></cpp:macro> <cpp:value>(1024 * 1024 * 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_MAX_RESULT_SIZE</name></cpp:macro>   <cpp:value>UNIQUE_MAX_RESULT_SIZE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLL_BUCKET_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>  <comment type="line">// The bits of the bucket</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLL_DATA_BITS</name></cpp:macro>   <cpp:value>(64 - HLL_BUCKET_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLL_BUCKETS</name></cpp:macro>     <cpp:value>(1 &lt;&lt; HLL_BUCKET_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLL_BUCKET_MASK</name></cpp:macro> <cpp:value>(HLL_BUCKETS - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLL_ALPHA_INF</name></cpp:macro>   <cpp:value>0.721347520444481703680</cpp:value></cpp:define>  <comment type="line">// constant for 0.5/ln(2)</comment>

<comment type="line">//typedef struct SMinmaxResInfo {</comment>
<comment type="line">//  bool      assign;  // assign the first value or not</comment>
<comment type="line">//  int64_t   v;</comment>
<comment type="line">//  STuplePos tuplePos;</comment>
<comment type="line">//</comment>
<comment type="line">//  STuplePos nullTuplePos;</comment>
<comment type="line">//  bool      nullTupleSaved;</comment>
<comment type="line">//  int16_t   type;</comment>
<comment type="line">//} SMinmaxResInfo;</comment>

<typedef>typedef <type><struct>struct <name>STopBotResItem</name> <block>{
  <decl_stmt><decl><type><name>SVariant</name></type>  <name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>uid</name></decl>;</decl_stmt>  <comment type="line">// it is a table uid, used to extract tag data during building of the final result for the tag data</comment>
  <decl_stmt><decl><type><name>STuplePos</name></type> <name>tuplePos</name></decl>;</decl_stmt>  <comment type="line">// tuple data of this chosen row</comment>
}</block></struct></type> <name>STopBotResItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>STopBotRes</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>type</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STuplePos</name></type> <name>nullTuplePos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>nullTupleSaved</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>pItems</name></decl>;</decl_stmt>
}</block></struct></type> <name>STopBotRes</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SStddevRes</name> <block>{
  <decl_stmt><decl><type><name>double</name></type>  <name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>count</name></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name>double</name></type>   <name>quadraticDSum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>  <name>quadraticISum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>quadraticUSum</name></decl>;</decl_stmt>
  }</block>;</union>
  <union>union <block>{
    <decl_stmt><decl><type><name>double</name></type>   <name>dsum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>  <name>isum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>usum</name></decl>;</decl_stmt>
  }</block>;</union>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>SStddevRes</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SLeastSQRInfo</name> <block>{
  <decl_stmt><decl><type><name>double</name></type>  <name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>startVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>stepVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>num</name></decl>;</decl_stmt>
}</block></struct></type> <name>SLeastSQRInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SPercentileInfo</name> <block>{
  <decl_stmt><decl><type><name>double</name></type>      <name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tMemBucket</name><modifier>*</modifier></type> <name>pMemBucket</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>stage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>      <name>minval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>      <name>maxval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>numOfElems</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPercentileInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SAPercentileInfo</name> <block>{
  <decl_stmt><decl><type><name>double</name></type>          <name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>          <name>percent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>          <name>algo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TDigest</name><modifier>*</modifier></type>        <name>pTDigest</name></decl>;</decl_stmt>
}</block></struct></type> <name>SAPercentileInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>APERCT_ALGO_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <decl><name>APERCT_ALGO_DEFAULT</name></decl>,
  <decl><name>APERCT_ALGO_TDIGEST</name></decl>,
}</block></enum></type> <name>EAPerctAlgoType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SDiffInfo</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type> <name>hasPrev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>includeNull</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ignoreNegative</name></decl>;</decl_stmt>  <comment type="line">// replace the ignore with case when</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>firstOutput</name></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>  <name>d64</name></decl>;</decl_stmt>
  }</block> <decl><name>prev</name></decl>;</union>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>prevTs</name></decl>;</decl_stmt>
}</block></struct></type> <name>SDiffInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSpreadInfo</name> <block>{
  <decl_stmt><decl><type><name>double</name></type> <name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>   <name>hasResult</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>min</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>max</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSpreadInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SElapsedInfo</name> <block>{
  <decl_stmt><decl><type><name>double</name></type>  <name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>min</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>max</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timeUnit</name></decl>;</decl_stmt>
}</block></struct></type> <name>SElapsedInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>STwaInfo</name> <block>{
  <decl_stmt><decl><type><name>double</name></type>      <name>dOutput</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>isNull</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPoint1</name></type>     <name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name></decl>;</decl_stmt>
}</block></struct></type> <name>STwaInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SHistoFuncBin</name> <block>{
  <decl_stmt><decl><type><name>double</name></type>  <name>lower</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>upper</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>percentage</name></decl>;</decl_stmt>
}</block></struct></type> <name>SHistoFuncBin</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SHistoFuncInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>numOfBins</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>totalCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>normalized</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHistoFuncBin</name></type> <name><name>bins</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SHistoFuncInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>UNKNOWN_BIN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>USER_INPUT_BIN</name></decl>, <decl><name>LINEAR_BIN</name></decl>, <decl><name>LOG_BIN</name></decl> }</block></enum></type> <name>EHistoBinType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SHLLFuncInfo</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>totalCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name><name>buckets</name><index>[<expr><name>HLL_BUCKETS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SHLLInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SStateInfo</name> <block>{
  <union>union <block>{
    <decl_stmt><decl><type><name>int64_t</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>durationStart</name></decl>;</decl_stmt>
  }</block>;</union>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>prevTs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>isPrevTsSet</name></decl>;</decl_stmt>
}</block></struct></type> <name>SStateInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>STATE_OPER_INVALID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <decl><name>STATE_OPER_LT</name></decl>,
  <decl><name>STATE_OPER_GT</name></decl>,
  <decl><name>STATE_OPER_LE</name></decl>,
  <decl><name>STATE_OPER_GE</name></decl>,
  <decl><name>STATE_OPER_NE</name></decl>,
  <decl><name>STATE_OPER_EQ</name></decl>,
}</block></enum></type> <name>EStateOperType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SMavgInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>sum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>prevTs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>isPrevTsSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfPoints</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>pointsMeet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name><name>points</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SMavgInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSampleInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>samples</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalPoints</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numSampled</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>colType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>colBytes</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STuplePos</name></type> <name>nullTuplePos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>nullTupleSaved</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>      <name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STuplePos</name><modifier>*</modifier></type> <name>tuplePos</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSampleInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>STailItem</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>isNull</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>STailItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>STailInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfPoints</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numAdded</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>     <name>colType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>     <name>colBytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STailItem</name><modifier>*</modifier><modifier>*</modifier></type> <name>pItems</name></decl>;</decl_stmt>
}</block></struct></type> <name>STailInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SUniqueItem</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>isNull</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SUniqueItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SUniqueInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfPoints</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>   <name>colType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>   <name>colBytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>hasNull</name></decl>;</decl_stmt>  <comment type="line">// null is not hashable, handle separately</comment>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>pItems</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SUniqueInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SModeItem</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STuplePos</name></type> <name>tuplePos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SModeItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SModeInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfPoints</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>   <name>colType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>   <name>colBytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STuplePos</name></type> <name>nullTuplePos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>nullTupleSaved</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>pItems</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SModeInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SDerivInfo</name> <block>{
  <decl_stmt><decl><type><name>double</name></type>  <name>prevValue</name></decl>;</decl_stmt>       <comment type="line">// previous value</comment>
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>prevTs</name></decl>;</decl_stmt>          <comment type="line">// previous timestamp</comment>
  <decl_stmt><decl><type><name>bool</name></type>    <name>ignoreNegative</name></decl>;</decl_stmt>  <comment type="line">// ignore the negative value</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsWindow</name></decl>;</decl_stmt>        <comment type="line">// time window for derivative</comment>
  <decl_stmt><decl><type><name>bool</name></type>    <name>valueSet</name></decl>;</decl_stmt>        <comment type="line">// the value has been set already</comment>
}</block></struct></type> <name>SDerivInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SRateInfo</name> <block>{
  <decl_stmt><decl><type><name>double</name></type> <name>firstValue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>  <name>firstKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>lastValue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>  <name>lastKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>hasResult</name></decl>;</decl_stmt>  <comment type="line">// flag to denote has value</comment>
}</block></struct></type> <name>SRateInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SGroupKeyInfo</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type> <name>hasResult</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SGroupKeyInfo</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_VAL</name><parameter_list>(<parameter><type><name>_info</name></type></parameter>, <parameter><type><name>numOfElem</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                 \
    if ((numOfElem) &lt;= 0) {            \
      break;                           \
    }                                  \
    (_info)-&gt;numOfRes = (res);         \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TS_LIST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>((TSKEY*)((x)-&gt;ptsList))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_TS_DATA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GET_TS_LIST(x)[(y)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_UPDATE_SUBSID_RES</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>ts</name></type></parameter>)</parameter_list></cpp:macro>                          \
  <cpp:value>do {                                                         \
    for (int32_t _i = 0; _i &lt; (ctx)-&gt;subsidiaries.num; ++_i) { \
      SqlFunctionCtx* __ctx = (ctx)-&gt;subsidiaries.pCtx[_i];    \
      if (__ctx-&gt;functionId == FUNCTION_TS_DUMMY) {            \
        __ctx-&gt;tag.i = (ts);                                   \
        __ctx-&gt;tag.nType = TSDB_DATA_TYPE_BIGINT;              \
      }                                                        \
      __ctx-&gt;fpSet.process(__ctx);                             \
    }                                                          \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_DATA</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>left</name></type></parameter>, <parameter><type><name>right</name></type></parameter>, <parameter><type><name>num</name></type></parameter>, <parameter><type><name>sign</name></type></parameter>, <parameter><type><name>_ts</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                                \
    if (((left) &lt; (right)) ^ (sign)) {                \
      (left) = (right);                               \
      DO_UPDATE_SUBSID_RES(ctx, _ts);                 \
      (num) += 1;                                     \
    }                                                 \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOPCHECK_N</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>_col</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>_t</name></type></parameter>, <parameter><type><name>_nrow</name></type></parameter>, <parameter><type><name>_start</name></type></parameter>, <parameter><type><name>sign</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro>        \
  <cpp:value>do {                                                                   \
    _t* d = (_t*)((_col)-&gt;pData);                                        \
    for (int32_t i = (_start); i &lt; (_nrow) + (_start); ++i) {            \
      if (((_col)-&gt;hasNull) &amp;&amp; colDataIsNull_f((_col)-&gt;nullbitmap, i)) { \
        continue;                                                        \
      }                                                                  \
      TSKEY ts = (ctx)-&gt;ptsList != NULL ? GET_TS_DATA(ctx, i) : 0;       \
      UPDATE_DATA(ctx, val, d[i], num, sign, ts);                        \
    }                                                                    \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_ADD_N</name><parameter_list>(<parameter><type><name>_res</name></type></parameter>, <parameter><type><name>_col</name></type></parameter>, <parameter><type><name>_start</name></type></parameter>, <parameter><type><name>_rows</name></type></parameter>, <parameter><type><name>_t</name></type></parameter>, <parameter><type><name>numOfElem</name></type></parameter>)</parameter_list></cpp:macro>             \
  <cpp:value>do {                                                                   \
    _t* d = (_t*)(_col-&gt;pData);                                          \
    for (int32_t i = (_start); i &lt; (_rows) + (_start); ++i) {            \
      if (((_col)-&gt;hasNull) &amp;&amp; colDataIsNull_f((_col)-&gt;nullbitmap, i)) { \
        continue;                                                        \
      };                                                                 \
      (_res) += (d)[i];                                                  \
      (numOfElem)++;                                                     \
    }                                                                    \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_SUB_N</name><parameter_list>(<parameter><type><name>_res</name></type></parameter>, <parameter><type><name>_col</name></type></parameter>, <parameter><type><name>_start</name></type></parameter>, <parameter><type><name>_rows</name></type></parameter>, <parameter><type><name>_t</name></type></parameter>, <parameter><type><name>numOfElem</name></type></parameter>)</parameter_list></cpp:macro>             \
  <cpp:value>do {                                                                   \
    _t* d = (_t*)(_col-&gt;pData);                                          \
    for (int32_t i = (_start); i &lt; (_rows) + (_start); ++i) {            \
      if (((_col)-&gt;hasNull) &amp;&amp; colDataIsNull_f((_col)-&gt;nullbitmap, i)) { \
        continue;                                                        \
      };                                                                 \
      (_res) -= (d)[i];                                                  \
      (numOfElem)++;                                                     \
    }                                                                    \
  } while (0)</cpp:value></cpp:define>

<comment type="line">//#define LIST_AVG_N(sumT, T)                                               \</comment>
<comment type="line">//  do {                                                                    \</comment>
<comment type="line">//    T* plist = (T*)pCol-&gt;pData;                                           \</comment>
<comment type="line">//    for (int32_t i = start; i &lt; numOfRows + pInput-&gt;startRowIndex; ++i) { \</comment>
<comment type="line">//      if (pCol-&gt;hasNull &amp;&amp; colDataIsNull_f(pCol-&gt;nullbitmap, i)) {        \</comment>
<comment type="line">//        continue;                                                         \</comment>
<comment type="line">//      }                                                                   \</comment>
<comment type="line">//                                                                          \</comment>
<comment type="line">//      numOfElem += 1;                                                     \</comment>
<comment type="line">//      pAvgRes-&gt;count -= 1;                                                \</comment>
<comment type="line">//      sumT -= plist[i];                                                   \</comment>
<comment type="line">//    }                                                                     \</comment>
<comment type="line">//  } while (0)</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_STDDEV_SUB_N</name><parameter_list>(<parameter><type><name>sumT</name></type></parameter>, <parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>                                 \
  <cpp:value>do {                                                             \
    T* plist = (T*)pCol-&gt;pData;                                    \
    for (int32_t i = start; i &lt; numOfRows + start; ++i) {          \
      if (pCol-&gt;hasNull &amp;&amp; colDataIsNull_f(pCol-&gt;nullbitmap, i)) { \
        continue;                                                  \
      }                                                            \
      numOfElem += 1;                                              \
      pStddevRes-&gt;count -= 1;                                      \
      sumT -= plist[i];                                            \
      pStddevRes-&gt;quadraticISum -= (int64_t)(plist[i] * plist[i]); \
    }                                                              \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEASTSQR_CAL</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>step</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                     \
    (p)[0][0] += (double)(x) * (x);        \
    (p)[0][1] += (double)(x);              \
    (p)[0][2] += (double)(x) * (y)[index]; \
    (p)[1][2] += (y)[index];               \
    (x) += step;                           \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_COMP</name><parameter_list>(<parameter><type><name>_op</name></type></parameter>, <parameter><type><name>_lval</name></type></parameter>, <parameter><type><name>_param</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STATE_COMP_IMPL(_op, _lval, GET_STATE_VAL(_param))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STATE_VAL</name><parameter_list>(<parameter><type><name>param</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((param.nType == TSDB_DATA_TYPE_BIGINT) ? (param.i) : (param.d))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_COMP_IMPL</name><parameter_list>(<parameter><type><name>_op</name></type></parameter>, <parameter><type><name>_lval</name></type></parameter>, <parameter><type><name>_rval</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                     \
    switch (_op) {                         \
      case STATE_OPER_LT:                  \
        return ((_lval) &lt; (_rval));        \
        break;                             \
      case STATE_OPER_GT:                  \
        return ((_lval) &gt; (_rval));        \
        break;                             \
      case STATE_OPER_LE:                  \
        return ((_lval) &lt;= (_rval));       \
        break;                             \
      case STATE_OPER_GE:                  \
        return ((_lval) &gt;= (_rval));       \
        break;                             \
      case STATE_OPER_NE:                  \
        return ((_lval) != (_rval));       \
        break;                             \
      case STATE_OPER_EQ:                  \
        return ((_lval) == (_rval));       \
        break;                             \
      default:                             \
        break;                             \
    }                                      \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_INTP_POINT</name><parameter_list>(<parameter><type><name>_p</name></type></parameter>, <parameter><type><name>_k</name></type></parameter>, <parameter><type><name>_v</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                              \
    (_p).key = (_k);                \
    (_p).val = (_v);                \
  } while (0)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>firstLastTransferInfoImpl</name><parameter_list>(<parameter><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isFirst</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>functionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initResultRowEntry</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>interBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>functionFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>in</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>firstCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>bytes</name> <init>= <expr><name><name>pDBuf</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <call><name>firstLastTransferInfoImpl</name><argument_list>(<argument><expr><name>pSBuf</name></expr></argument>, <argument><expr><name>pDBuf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>functionFinalizeWithResultBuf</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>finalResult</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>in</name> <init>= <expr><name>finalResult</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EFuncDataRequired</name></type> <name>countDataRequired</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pTimeWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_COLUMN</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><name>pParam</name><operator>)</operator><operator>-&gt;</operator><name>colId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_NOT_LOAD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FUNC_DATA_REQUIRED_SMA_LOAD</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getCountFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getNumOfElems</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/*
   * 1. column data missing (schema modified) causes pInputCol-&gt;hasNull == true. pInput-&gt;colDataSMAIsSet == true;
   * 2. for general non-primary key columns, pInputCol-&gt;hasNull may be true or false, pInput-&gt;colDataSMAIsSet == true;
   * 3. for primary key column, pInputCol-&gt;hasNull always be false, pInput-&gt;colDataSMAIsSet == false;
   */</comment>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name> <operator>&amp;&amp;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>==</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>numOfNull</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfElem</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInputCol</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// when counting on the primary time stamp column and no statistics data is presented, use the size value</comment>
      <comment type="line">// directly.</comment>
      <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>numOfElem</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * count function does need the finalize, if data is missing, the default value, which is 0, is used
 * count function does not use the pCtx-&gt;interResBuf to keep the intermediate buffer
 */</comment>
<function><type><name>int32_t</name></type> <name>countFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type>  <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// select count(NULL) returns 0</comment>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <call><name>getNumOfElems</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator> <operator>+=</operator> <name>numOfElem</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsCountAlwaysReturnValue</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>countInvertFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><call><name>getNumOfElems</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>buf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator> <operator>-=</operator> <name>numOfElem</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>combineFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>pDBuf</name><operator>)</operator> <operator>+=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>pSBuf</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>pDBuf</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sumFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Only the pre-computing information loaded and actual data does not loaded</comment>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type>       <name>pAgg</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>type</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSumRes</name><modifier>*</modifier></type> <name>pSumRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_sum_over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>numOfNull</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfElem</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name> <operator>+=</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>sum</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name> <operator>+=</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>sum</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name> <operator>+=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>pAgg</name><operator>-&gt;</operator><name>sum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// computing based on the true data block</comment>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_TINYINT</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_USMALLINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_UINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_ADD_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// check for overflow</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isinf</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_sum_over</name>:</label>
  <comment type="line">// data in the check operation are all null, not output</comment>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sumInvertFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Only the pre-computing information loaded and actual data does not loaded</comment>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type>       <name>pAgg</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>type</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSumRes</name><modifier>*</modifier></type> <name>pSumRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>numOfNull</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfElem</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name> <operator>-=</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>sum</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name> <operator>-=</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>sum</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name> <operator>-=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>pAgg</name><operator>-&gt;</operator><name>sum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// computing based on the true data block</comment>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_TINYINT</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_USMALLINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_UINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_SUB_N</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// data in the check operation are all null, not output</comment>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sumCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSumRes</name><modifier>*</modifier></type>             <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSumRes</name><modifier>*</modifier></type>             <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>              <name>type</name> <init>= <expr><ternary><condition><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr> ?</condition><then> <expr><name><name>pSBuf</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name><name>pDBuf</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>isum</name></name> <operator>+=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>isum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>usum</name></name> <operator>+=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>usum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>dsum</name></name> <operator>+=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>dsum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getSumFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSumRes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EFuncDataRequired</name></type> <name>statisDataRequired</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pTimeWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>FUNC_DATA_REQUIRED_SMA_LOAD</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>minmaxFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>  <comment type="line">// not initialized since it has been initialized</comment>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>tuplePos</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>nullTupleSaved</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>nullTuplePos</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getMinmaxFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMinmaxResInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>minFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><call><name>doMinMaxHelper</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>maxFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><call><name>doMinMaxHelper</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setNullSelectivityValue</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setSelectivityValue</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STuplePos</name><modifier>*</modifier></type> <name>pTuplePos</name></decl></parameter>,
                                <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>minmaxFunctionFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pEntryInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>currentRow</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>v</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>nullTuplePos</name></name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setNullSelectivityValue</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pc</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>         <name>dstSlotId</name> <init>= <expr><name><name>pc</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setSelectivityValue</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STuplePos</name><modifier>*</modifier></type> <name>pTuplePos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>saveHandle</name><operator>.</operator><name>pBuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTuplePos</name><operator>-&gt;</operator><name>pageId</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfCols</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>loadTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pTuplePos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type> <name>nullList</name> <init>= <expr><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>nullList</name> <operator>+</operator> <name>numOfCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

      <comment type="line">// todo set the offset value to optimize the performance.</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pc</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>         <name>dstSlotId</name> <init>= <expr><name><name>pc</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>pDstCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>nullList</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name><name>pDstCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>releaseSource</name><parameter_list>(<parameter><decl><type><name>STuplePos</name><modifier>*</modifier></type> <name>pPos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pPos</name><operator>-&gt;</operator><name>pageId</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// Todo(liuyao) relase row</comment>
</block_content>}</block></function>

<comment type="line">// This function append the selectivity to subsidiaries function context directly, without fetching data</comment>
<comment type="line">// from intermediate disk based buf page</comment>
<function><type><name>void</name></type> <name>appendSelectivityValue</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pc</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// get data from source col</comment>
    <decl_stmt><decl><type><name>SFunctParam</name><modifier>*</modifier></type> <name>pFuncParam</name> <init>= <expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>      <name>srcSlotId</name> <init>= <expr><name><name>pFuncParam</name><operator>-&gt;</operator><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>srcSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrcCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// append to dest col</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>dstSlotId</name> <init>= <expr><name><name>pc</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pDstBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>dstSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <name><name>pDstCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pSrcCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>replaceTupleData</name><parameter_list>(<parameter><decl><type><name>STuplePos</name><modifier>*</modifier></type> <name>pDestPos</name></decl></parameter>, <parameter><decl><type><name>STuplePos</name><modifier>*</modifier></type> <name>pSourcePos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>releaseSource</name><argument_list>(<argument><expr><name>pDestPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pDestPos</name> <operator>=</operator> <operator>*</operator><name>pSourcePos</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>minMaxCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>isMinFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type>      <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMinmaxResInfo</name><modifier>*</modifier></type>      <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>              <name>type</name> <init>= <expr><ternary><condition><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr> ?</condition><then> <expr><name><name>pSBuf</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name><name>pDBuf</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pDBuf</name><operator>-&gt;</operator><name>v</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSBuf</name><operator>-&gt;</operator><name>v</name></name><operator>)</operator><operator>)</operator> <operator>^</operator> <name>isMinFunc</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>pDBuf</name><operator>-&gt;</operator><name>assign</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pDBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSBuf</name><operator>-&gt;</operator><name>v</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>replaceTupleData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDBuf</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSBuf</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>pDBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>&lt;</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>v</name></name><operator>)</operator> <operator>^</operator> <name>isMinFunc</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>pDBuf</name><operator>-&gt;</operator><name>assign</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>v</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>replaceTupleData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDBuf</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSBuf</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>assign</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>minCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>minMaxCombine</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>, <argument><expr><name>pSourceCtx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>maxCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>minMaxCombine</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>, <argument><expr><name>pSourceCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getStddevInfoSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SStddevRes</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>getStddevFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStddevRes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>stddevFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStddevRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStddevRes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stddevFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Only the pre-computing information loaded and actual data does not loaded</comment>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>type</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStddevRes</name><modifier>*</modifier></type> <name>pStddevRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <comment type="line">// computing based on the true data block</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_stddev_over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticISum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticISum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticISum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticISum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>usum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticUSum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>usum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticUSum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>usum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticUSum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>usum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticUSum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>dsum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticDSum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>dsum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticDSum</name></name> <operator>+=</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>plist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

<label><name>_stddev_over</name>:</label>
  <comment type="line">// data in the check operation are all null, not output</comment>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stddevTransferInfo</name><parameter_list>(<parameter><decl><type><name>SStddevRes</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SStddevRes</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>quadraticISum</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>quadraticISum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>isum</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>isum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>quadraticUSum</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>quadraticUSum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>usum</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>usum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>quadraticDSum</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>quadraticDSum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>dsum</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>dsum</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stddevFunctionMerge</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SStddevRes</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>       <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStddevRes</name><modifier>*</modifier></type> <name>pInputInfo</name> <init>= <expr><operator>(</operator><name>SStddevRes</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>stddevTransferInfo</name><argument_list>(<argument><expr><name>pInputInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stddevInvertFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Only the pre-computing information loaded and actual data does not loaded</comment>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>type</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStddevRes</name><modifier>*</modifier></type> <name>pStddevRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// computing based on the true data block</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>LIST_STDDEV_SUB_N</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="line">// data in the check operation are all null, not output</comment>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stddevFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStddevRes</name><modifier>*</modifier></type>           <name>pStddevRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>type</name> <init>= <expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>                <name>avg</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>numOfRes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>functionFinalize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>avg</name> <operator>=</operator> <name><name>pStddevRes</name><operator>-&gt;</operator><name>isum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticISum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator> <operator>-</operator> <name>avg</name> <operator>*</operator> <name>avg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>avg</name> <operator>=</operator> <name><name>pStddevRes</name><operator>-&gt;</operator><name>usum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticUSum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator> <operator>-</operator> <name>avg</name> <operator>*</operator> <name>avg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>avg</name> <operator>=</operator> <name><name>pStddevRes</name><operator>-&gt;</operator><name>dsum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>quadraticDSum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pStddevRes</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator> <operator>-</operator> <name>avg</name> <operator>*</operator> <name>avg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// check for overflow</comment>
  <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>pStddevRes</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>numOfRes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>functionFinalize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stddevPartialFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStddevRes</name><modifier>*</modifier></type>          <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>resultBytes</name> <init>= <expr><call><name>getStddevInfoSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>res</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>resultBytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stddevCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStddevRes</name><modifier>*</modifier></type>          <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStddevRes</name><modifier>*</modifier></type>          <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>              <name>type</name> <init>= <expr><ternary><condition><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr> ?</condition><then> <expr><name><name>pSBuf</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name><name>pDBuf</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>stddevTransferInfo</name><argument_list>(<argument><expr><name>pSBuf</name></expr></argument>, <argument><expr><name>pDBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getLeastSQRFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SLeastSQRInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>leastSQRFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SLeastSQRInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>startVal</name></name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>leastSQRFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>type</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SLeastSQRInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>double</name><argument_list>(<argument><expr><operator>*</operator><name>param</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>matrix</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>startVal</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElem</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LEASTSQR_CAL</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>plist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stepVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>isNullRes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfElem</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>startVal</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <name>numOfElem</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>leastSQRFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLeastSQRInfo</name><modifier>*</modifier></type>       <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>     <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>currentRow</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>double</name><argument_list>(<argument><expr><operator>*</operator><name>param</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>matrix</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>param00</name> <init>= <expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>param02</name> <init>= <expr><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>param</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>param00</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// param[0][1] = 0;</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>param12</name> <init>= <expr><name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name>param02</name> <operator>*</operator> <operator>(</operator><name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>param00</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <comment type="line">// param[1][0] = 0;</comment>
  <expr_stmt><expr><name>param02</name> <operator>/=</operator> <name>param00</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>param12</name> <operator>/=</operator> <name><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>   <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>=
      <expr><call><name>snprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"{slop:%.6lf, intercept:%.6lf}"</literal></expr></argument>, <argument><expr><name>param02</name></expr></argument>, <argument><expr><name>param12</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>leastSQRInvertFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>leastSQRCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLeastSQRInfo</name><modifier>*</modifier></type>       <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>type</name> <init>= <expr><name><name>pDestCtx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>double</name><argument_list>(<argument><expr><operator>*</operator><name>pDparam</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>pDBuf</name><operator>-&gt;</operator><name>matrix</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLeastSQRInfo</name><modifier>*</modifier></type>       <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>double</name><argument_list>(<argument><expr><operator>*</operator><name>pSparam</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>matrix</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pDparam</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>pDBuf</name><operator>-&gt;</operator><name>startVal</name></name> <operator>*</operator> <name><name>pDBuf</name><operator>-&gt;</operator><name>startVal</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDparam</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>pDBuf</name><operator>-&gt;</operator><name>startVal</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>startVal</name></name> <operator>+=</operator> <name><name>pDBuf</name><operator>-&gt;</operator><name>stepVal</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pDparam</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>pSparam</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>pDBuf</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name><name>pDBuf</name><operator>-&gt;</operator><name>stepVal</name></name> <operator>*</operator> <name><name>pSparam</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDparam</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>pSparam</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <name><name>pSBuf</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getPercentileFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SPercentileInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>percentileFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// in the first round, get the min-max value of all involved data</comment>
  <decl_stmt><decl><type><name>SPercentileInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>minval</name></name></expr></argument>, <argument><expr><name>DBL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>, <argument><expr><operator>-</operator><name>DBL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>percentileFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type>       <name>pAgg</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>type</name> <init>= <expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SPercentileInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>scanFlag</name></name> <operator>==</operator> <name>REPEAT_SCAN</name> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>stage</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// all data are null, set it completed</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>complete</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMemBucket</name></name> <operator>=</operator> <call><name>tMemBucketCreate</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>minval</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// the first stage, only acquire the min/max value</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>colDataSMAIsSet</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>tmin</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmax</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tmin</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmax</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tmin</name> <operator>=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmax</name> <operator>=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tmin</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>GET_UINT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmax</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>GET_UINT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>minval</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>tmin</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>minval</name></name></expr></argument>, <argument><expr><name>tmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tmax</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>, <argument><expr><name>tmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>+=</operator> <operator>(</operator><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>numOfNull</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// check the valid data one by one</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>minval</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>minval</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// the second stage, calculate the true percentile value</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tMemBucketPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pMemBucket</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>percentileFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>    <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPercentileInfo</name><modifier>*</modifier></type>     <name>ppInfo</name> <init>= <expr><operator>(</operator><name>SPercentileInfo</name><operator>*</operator><operator>)</operator><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tMemBucket</name><modifier>*</modifier></type> <name>pMemBucket</name> <init>= <expr><name><name>ppInfo</name><operator>-&gt;</operator><name>pMemBucket</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMemBucket</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>total</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// check for null</comment>
    <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ppInfo</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><call><name>getPercentile</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tMemBucketDestroy</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>functionFinalize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getApercentileFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytesHist</name> <init>=
      <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SAPercentileInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAX_HISTOGRAM_BIN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytesDigest</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SAPercentileInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>TDIGEST_SIZE</name><argument_list>(<argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>bytesHist</name></expr></argument>, <argument><expr><name>bytesDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getApercentileMaxSize</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytesHist</name> <init>=
      <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SAPercentileInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAX_HISTOGRAM_BIN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytesDigest</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SAPercentileInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>TDIGEST_SIZE</name><argument_list>(<argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><name>bytesHist</name></expr></argument>, <argument><expr><name>bytesDigest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>getApercentileAlgo</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>algoStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>algoType</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>algoStr</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>algoType</name> <operator>=</operator> <name>APERCT_ALGO_DEFAULT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>algoStr</name></expr></argument>, <argument><expr><literal type="string">"t-digest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>algoType</name> <operator>=</operator> <name>APERCT_ALGO_TDIGEST</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>algoType</name> <operator>=</operator> <name>APERCT_ALGO_UNKNOWN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>algoType</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildHistogramInfo</name><parameter_list>(<parameter><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name> <operator>=</operator> <operator>(</operator><name>SHistogramInfo</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pInfo</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SAPercentileInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildTDigestInfo</name><parameter_list>(<parameter><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTDigest</name></name> <operator>=</operator> <operator>(</operator><name>TDigest</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pInfo</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SAPercentileInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>apercentileFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>percent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>percent</name></name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>numOfParams</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>APERCT_ALGO_DEFAULT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>numOfParams</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <call><name>getApercentileAlgo</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>APERCT_ALGO_UNKNOWN</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pInfo</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SAPercentileInfo</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>APERCT_ALGO_TDIGEST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTDigest</name></name> <operator>=</operator> <call><name>tdigestNewFrom</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>buildHistogramInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name> <operator>=</operator> <call><name>tHistogramCreateFrom</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAX_HISTOGRAM_BIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s set up histogram, numOfElems:%"</literal> <name>PRId64</name> <literal type="string">", numOfEntry:%d, pHisto:%p, elems:%p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
           <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>apercentileFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type>  <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>type</name> <init>= <expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>APERCT_ALGO_TDIGEST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildTDigestInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdigestAutoFill</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTDigest</name></name></expr></argument>, <argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>double</name></type>  <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// value</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>w</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// weigth</comment>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdigestAdd</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTDigest</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// might be a race condition here that pHisto can be overwritten or setup function</comment>
    <comment type="line">// has not been called, need to relink the buffer pHisto points to.</comment>
    <expr_stmt><expr><call><name>buildHistogramInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s before add %d elements into histogram, total:%"</literal> <name>PRId64</name> <literal type="string">", numOfEntry:%d, pHisto:%p, elems: %p"</literal></expr></argument>,
           <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>,
           <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tHistogramAdd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s after add %d elements into histogram, total:%"</literal> <name>PRId64</name> <literal type="string">", numOfEntry:%d, pHisto:%p, elems: %p"</literal></expr></argument>,
           <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>,
           <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apercentileTransferInfo</name><parameter_list>(<parameter><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>percent</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>percent</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>algo</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOutput</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>APERCT_ALGO_TDIGEST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildTDigestInfo</name><argument_list>(<argument><expr><name>pInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdigestAutoFill</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pTDigest</name></name></expr></argument>, <argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>pTDigest</name><operator>-&gt;</operator><name>num_centroids</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pTDigest</name><operator>-&gt;</operator><name>num_buffered_pts</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>buildTDigestInfo</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TDigest</name><modifier>*</modifier></type> <name>pTDigest</name> <init>= <expr><name><name>pOutput</name><operator>-&gt;</operator><name>pTDigest</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdigestAutoFill</name><argument_list>(<argument><expr><name>pTDigest</name></expr></argument>, <argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTDigest</name><operator>-&gt;</operator><name>num_centroids</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pTDigest</name><operator>-&gt;</operator><name>num_buffered_pts</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTDigest</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pTDigest</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>TDIGEST_SIZE</name><argument_list>(<argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdigestAutoFill</name><argument_list>(<argument><expr><name>pTDigest</name></expr></argument>, <argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tdigestMerge</name><argument_list>(<argument><expr><name>pTDigest</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pTDigest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>buildHistogramInfo</name><argument_list>(<argument><expr><name>pInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>buildHistogramInfo</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto</name> <init>= <expr><name><name>pOutput</name><operator>-&gt;</operator><name>pHisto</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pHisto</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAX_HISTOGRAM_BIN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHisto</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s merge histo, total:%"</literal> <name>PRId64</name> <literal type="string">", entry:%d, %p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>,
             <argument><expr><name>pHisto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHisto</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s input histogram, elem:%"</literal> <name>PRId64</name> <literal type="string">", entry:%d, %p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>,
             <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>tHistogramMerge</name><argument_list>(<argument><expr><name>pHisto</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>, <argument><expr><name>MAX_HISTOGRAM_BIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pHisto</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_HISTOGRAM_BIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHisto</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s merge histo, total:%"</literal> <name>PRId64</name> <literal type="string">", entry:%d, %p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>,
             <argument><expr><name>pHisto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tHistogramDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>apercentileFunctionMerge</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s total %d rows will merge, %p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type> <name>pInputInfo</name> <init>= <expr><operator>(</operator><name>SAPercentileInfo</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>apercentileTransferInfo</name><argument_list>(<argument><expr><name>pInputInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>algo</name></name> <operator>!=</operator> <name>APERCT_ALGO_TDIGEST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s after merge, total:%"</literal> <name>PRId64</name> <literal type="string">", numOfEntry:%d, %p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>,
           <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>apercentileFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type>    <name>pInfo</name> <init>= <expr><operator>(</operator><name>SAPercentileInfo</name><operator>*</operator><operator>)</operator><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>APERCT_ALGO_TDIGEST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>buildTDigestInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdigestAutoFill</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTDigest</name></name></expr></argument>, <argument><expr><name>COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTDigest</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>tdigestQuantile</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTDigest</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>percent</name></name> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// no need to free</comment>
      <comment type="line">// setNull(pCtx-&gt;pOutput, pCtx-&gt;outputType, pCtx-&gt;outputBytes);</comment>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>buildHistogramInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s get the final res, elements:%"</literal> <name>PRId64</name> <literal type="string">", numOfEntry:%d, pHisto:%p, elems:%p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>double</name></type>  <name><name>ratio</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>pInfo</name><operator>-&gt;</operator><name>percent</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>tHistogramUniform</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>, <argument><expr><name>ratio</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <operator>*</operator><name>res</name></expr>;</expr_stmt>
      <comment type="line">// memcpy(pCtx-&gt;pOutput, res, sizeof(double));</comment>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// no need to free</comment>
      <comment type="line">// setNull(pCtx-&gt;pOutput, pCtx-&gt;outputType, pCtx-&gt;outputBytes);</comment>
      <comment type="line">// return TSDB_CODE_SUCCESS;</comment>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s get the final res, elements:%"</literal> <name>PRId64</name> <literal type="string">", numOfEntry:%d. result is null"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><call><name>functionFinalize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>apercentilePartialFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type>    <name>pInfo</name> <init>= <expr><operator>(</operator><name>SAPercentileInfo</name><operator>*</operator><operator>)</operator><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>resultBytes</name> <init>= <expr><call><name>getApercentileMaxSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>res</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>resultBytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>algo</name></name> <operator>==</operator> <name>APERCT_ALGO_TDIGEST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>apercentileCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type>    <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAPercentileInfo</name><modifier>*</modifier></type>    <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"%s start to combine apercentile, %p"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>pHisto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>apercentileTransferInfo</name><argument_list>(<argument><expr><name>pSBuf</name></expr></argument>, <argument><expr><name>pDBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EFuncDataRequired</name></type> <name>firstDynDataReq</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pTimeWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SResultRowEntryInfo</name><operator>*</operator><operator>)</operator><name>pRes</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// not initialized yet, data is required</comment>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>&amp;&amp;</operator> <name><name>pResult</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pTimeWindow</name><operator>-&gt;</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_NOT_LOAD</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>EFuncDataRequired</name></type> <name>lastDynDataReq</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pTimeWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SResultRowEntryInfo</name><operator>*</operator><operator>)</operator><name>pRes</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// not initialized yet, data is required</comment>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pResult</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResult</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>&amp;&amp;</operator> <name><name>pResult</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pTimeWindow</name><operator>-&gt;</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_NOT_LOAD</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getFirstLastInfoSize</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>resBytes</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFirstLastRes</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>resBytes</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>getFirstLastFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <call><name>getFirstLastInfoSize</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getSelectivityFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getGroupKeyFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SGroupKeyInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>TSKEY</name></type> <name>getRowPTs</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTsColInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTsColInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pTsColInfo</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>firstlastSaveTupleData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>,
                                   <parameter><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>buf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>rowLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>updateTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doSaveCurrentVal</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>currentTs</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name>currentTs</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>firstlastSaveTupleData</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// This ordinary first function does not care if current scan is ascending order or descending order scan</comment>
<comment type="line">// the OPTIMIZED version of first function will only handle the ascending order scan</comment>
<function><type><name>int32_t</name></type> <name>firstFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// All null data column, return directly.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>numOfNull</name> <operator>==</operator> <name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// save selectivity value for column consisted of all null values</comment>
    <expr_stmt><expr><call><name>firstlastSaveTupleData</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type> <name>pColAgg</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>startKey</name> <init>= <expr><call><name>getRowPTs</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>endKey</name> <init>= <expr><call><name>getRowPTs</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockDataOrder</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>startKey</name> <operator>&lt;=</operator> <name>endKey</name><operator>)</operator></expr> ?</condition><then> <expr><name>TSDB_ORDER_ASC</name></expr> </then><else>: <expr><name>TSDB_ORDER_DESC</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <comment type="line">//  please ref. to the comment in lastRowFunction for the reason why disabling the opt version of last/first function.</comment>
  <comment type="line">//  we will use this opt implementation in an new version that is only available in scan subplan</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (blockDataOrder == TSDB_ORDER_ASC) {
    <comment type="line">// filter according to current result firstly</comment>
    if (pResInfo-&gt;numOfRes &gt; 0) {
      if (pInfo-&gt;ts &lt; startKey) {
        return TSDB_CODE_SUCCESS;
      }
    }

    for (int32_t i = pInput-&gt;startRowIndex; i &lt; pInput-&gt;startRowIndex + pInput-&gt;numOfRows; ++i) {
      if (pInputCol-&gt;hasNull &amp;&amp; colDataIsNull(pInputCol, pInput-&gt;totalRows, i, pColAgg)) {
        continue;
      }

      numOfElems++;

      char* data = colDataGetData(pInputCol, i);
      TSKEY cts = getRowPTs(pInput-&gt;pPTS, i);
      if (pResInfo-&gt;numOfRes == 0 || pInfo-&gt;ts &gt; cts) {
        doSaveCurrentVal(pCtx, i, cts, pInputCol-&gt;info.type, data);
        break;
      }
    }
  } else {
    <comment type="line">// in case of descending order time stamp serial, which usually happens as the results of the nest query,</comment>
    <comment type="line">// all data needs to be check.</comment>
    if (pResInfo-&gt;numOfRes &gt; 0) {
      if (pInfo-&gt;ts &lt; endKey) {
        return TSDB_CODE_SUCCESS;
      }
    }

    for (int32_t i = pInput-&gt;numOfRows + pInput-&gt;startRowIndex - 1; i &gt;= pInput-&gt;startRowIndex; --i) {
      if (pInputCol-&gt;hasNull &amp;&amp; colDataIsNull(pInputCol, pInput-&gt;totalRows, i, pColAgg)) {
        continue;
      }

      numOfElems++;

      char* data = colDataGetData(pInputCol, i);
      TSKEY cts = getRowPTs(pInput-&gt;pPTS, i);

      if (pResInfo-&gt;numOfRes == 0 || pInfo-&gt;ts &gt; cts) {
        doSaveCurrentVal(pCtx, i, cts, pInputCol-&gt;info.type, data);
        break;
      }
    }
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pts</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInputCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pColAgg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>cts</name> <init>= <expr><name><name>pts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name>cts</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doSaveCurrentVal</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cts</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// save selectivity value for column consisted of all null values</comment>
    <expr_stmt><expr><call><name>firstlastSaveTupleData</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>lastFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// All null data column, return directly.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>numOfNull</name> <operator>==</operator> <name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// save selectivity value for column consisted of all null values</comment>
    <expr_stmt><expr><call><name>firstlastSaveTupleData</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type> <name>pColAgg</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>startKey</name> <init>= <expr><call><name>getRowPTs</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>endKey</name> <init>= <expr><call><name>getRowPTs</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockDataOrder</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>startKey</name> <operator>&lt;=</operator> <name>endKey</name><operator>)</operator></expr> ?</condition><then> <expr><name>TSDB_ORDER_ASC</name></expr> </then><else>: <expr><name>TSDB_ORDER_DESC</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <comment type="line">//  please ref. to the comment in lastRowFunction for the reason why disabling the opt version of last/first function.</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (blockDataOrder == TSDB_ORDER_ASC) {
    for (int32_t i = pInput-&gt;numOfRows + pInput-&gt;startRowIndex - 1; i &gt;= pInput-&gt;startRowIndex; --i) {
      if (pInputCol-&gt;hasNull &amp;&amp; colDataIsNull(pInputCol, pInput-&gt;totalRows, i, pColAgg)) {
        continue;
      }

      numOfElems++;

      char* data = colDataGetData(pInputCol, i);
      TSKEY cts = getRowPTs(pInput-&gt;pPTS, i);
      if (pResInfo-&gt;numOfRes == 0 || pInfo-&gt;ts &lt; cts) {
        doSaveCurrentVal(pCtx, i, cts, type, data);
      }

      break;
    }
  } else {  <comment type="line">// descending order</comment>
    for (int32_t i = pInput-&gt;startRowIndex; i &lt; pInput-&gt;numOfRows + pInput-&gt;startRowIndex; ++i) {
      if (pInputCol-&gt;hasNull &amp;&amp; colDataIsNull(pInputCol, pInput-&gt;totalRows, i, pColAgg)) {
        continue;
      }

      numOfElems++;

      char* data = colDataGetData(pInputCol, i);
      TSKEY cts = getRowPTs(pInput-&gt;pPTS, i);
      if (pResInfo-&gt;numOfRes == 0 || pInfo-&gt;ts &lt; cts) {
        doSaveCurrentVal(pCtx, i, cts, type, data);
      }
      break;
    }
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pts</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    for (int32_t i = pInput-&gt;startRowIndex; i &lt; pInput-&gt;numOfRows + pInput-&gt;startRowIndex; ++i) {
      if (pInputCol-&gt;hasNull &amp;&amp; colDataIsNull(pInputCol, pInput-&gt;totalRows, i, pColAgg)) {
        continue;
      }

      numOfElems++;
      if (pResInfo-&gt;numOfRes == 0 || pInfo-&gt;ts &lt; pts[i]) {
        char* data = colDataGetData(pInputCol, i);
        doSaveCurrentVal(pCtx, i, pts[i], type, data);
        pResInfo-&gt;numOfRes = 1;
      }
    }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInputCol</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElems</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>round</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>reminder</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>, <decl><type ref="prev"/><name>tick</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tick</name> <operator>&lt;</operator> <name>round</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>tick</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>cts</name> <init>= <expr><name><name>pts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>chosen</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>cts</name> <operator>&lt;</operator> <name><name>pts</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cts</name> <operator>=</operator> <name><name>pts</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>cts</name> <operator>&lt;</operator> <name><name>pts</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cts</name> <operator>=</operator> <name><name>pts</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>cts</name> <operator>&lt;</operator> <name><name>pts</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cts</name> <operator>=</operator> <name><name>pts</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>chosen</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name>cts</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>chosen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doSaveCurrentVal</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cts</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>+</operator> <name>round</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>doSaveCurrentVal</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pColAgg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doSaveCurrentVal</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// save selectivity value for column consisted of all null values</comment>
  <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>firstlastSaveTupleData</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  SET_VAL(pResInfo, numOfElems, 1);</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>firstLastTransferInfoImpl</name><parameter_list>(<parameter><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isFirst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOutput</name><operator>-&gt;</operator><name>hasResult</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>isFirst</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pOutput</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pOutput</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>isNull</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>firstLastTransferInfo</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isFirst</name></decl></parameter>,
                                  <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <call><name>firstLastTransferInfoImpl</name><argument_list>(<argument><expr><name>pInput</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>isFirst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>firstlastSaveTupleData</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>firstLastFunctionMergeImpl</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isFirstQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pInputInfo</name> <init>= <expr><operator>(</operator><name>SFirstLastRes</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>firstLastTransferInfo</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pInputInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>isFirstQuery</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>numOfElems</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfElems</name> <operator>=</operator> <ternary><condition><expr><name><name>pInputInfo</name><operator>-&gt;</operator><name>hasResult</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>firstFunctionMerge</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>firstLastFunctionMergeImpl</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>lastFunctionMerge</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>firstLastFunctionMergeImpl</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>firstLastFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>isNull</name></name> <operator>||</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// handle selectivity</comment>
  <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>firstLastPartialFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pEntryInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>resultBytes</name> <init>= <expr><call><name>getFirstLastInfoSize</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// todo check for failure</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>resultBytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>lastCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>bytes</name> <init>= <expr><name><name>pDBuf</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <call><name>firstLastTransferInfoImpl</name><argument_list>(<argument><expr><name>pSBuf</name></expr></argument>, <argument><expr><name>pDBuf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDBuf</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doSaveLastrow</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>cts</name></decl></parameter>, <parameter><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name>cts</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>firstlastSaveTupleData</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>lastRowFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name>  <init>= <expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>startKey</name> <init>= <expr><call><name>getRowPTs</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>endKey</name> <init>= <expr><call><name>getRowPTs</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int32_t blockDataOrder = (startKey &lt;= endKey) ? TSDB_ORDER_ASC : TSDB_ORDER_DESC;

  <comment type="line">// the optimized version only valid if all tuples in one block are monotonious increasing or descreasing.</comment>
  <comment type="line">// this assumption is NOT always works if project operator exists in downstream.</comment>
  if (blockDataOrder == TSDB_ORDER_ASC) {
    for (int32_t i = pInput-&gt;numOfRows + pInput-&gt;startRowIndex - 1; i &gt;= pInput-&gt;startRowIndex; --i) {
      char* data = colDataGetData(pInputCol, i);
      TSKEY cts = getRowPTs(pInput-&gt;pPTS, i);
      numOfElems++;

      if (pResInfo-&gt;numOfRes == 0 || pInfo-&gt;ts &lt; cts) {
        doSaveLastrow(pCtx, data, i, cts, pInfo);
      }

      break;
    }
  } else {  <comment type="line">// descending order</comment>
    for (int32_t i = pInput-&gt;startRowIndex; i &lt; pInput-&gt;numOfRows + pInput-&gt;startRowIndex; ++i) {
      char* data = colDataGetData(pInputCol, i);
      TSKEY cts = getRowPTs(pInput-&gt;pPTS, i);
      numOfElems++;

      if (pResInfo-&gt;numOfRes == 0 || pInfo-&gt;ts &lt; cts) {
        doSaveLastrow(pCtx, data, i, cts, pInfo);
      }
      break;
    }
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pts</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>  <name>isNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><ternary><condition><expr><name>isNull</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type> <name>cts</name> <init>= <expr><name><name>pts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name>cts</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doSaveLastrow</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cts</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getDiffFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SDiffInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>diffFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDiffInfo</name><modifier>*</modifier></type> <name>pDiffInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>hasPrev</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>numOfParams</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>  <comment type="line">// TODO set correct param</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>includeNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>firstOutput</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doSetPrevVal</name><parameter_list>(<parameter><decl><type><name>SDiffInfo</name><modifier>*</modifier></type> <name>pDiffInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pv</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name>pv</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>pv</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pv</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>pv</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>pv</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>d64</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>pv</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>d64</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>pv</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doHandleDiff</name><parameter_list>(<parameter><decl><type><name>SDiffInfo</name><modifier>*</modifier></type> <name>pDiffInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pv</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos</name></decl></parameter>,
                         <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>factor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pv</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>factor</name> <operator>*</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// direct previous may be null</comment>
      <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendInt64</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int8_t</name></type>  <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>pv</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>factor</name> <operator>*</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// direct previous may be null</comment>
      <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendInt64</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>pv</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>factor</name> <operator>*</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// direct previous may be null</comment>
      <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendInt64</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>pv</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>factor</name> <operator>*</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// direct previous may be null</comment>
      <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendInt64</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>i64</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type>  <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>pv</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><name>factor</name> <operator>*</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>d64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>                               <comment type="line">// direct previous may be null</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name><operator>)</operator> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// check for overflow</comment>
        <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendDouble</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>d64</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>pv</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><name>factor</name> <operator>*</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>d64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>                               <comment type="line">// direct previous may be null</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name><operator>)</operator> <operator>||</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// check for overflow</comment>
        <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendDouble</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>d64</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>diffFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDiffInfo</name><modifier>*</modifier></type>           <name>pDiffInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>startOffset</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><name>startOffset</name> <operator>+</operator> <name>numOfElems</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>includeNull</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pv</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>hasPrev</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>prevTs</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>doHandleDiff</name><argument_list>(<argument><expr><name>pDiffInfo</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// handle selectivity</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>doSetPrevVal</name><argument_list>(<argument><expr><name>pDiffInfo</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>hasPrev</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><name>startOffset</name> <operator>+</operator> <name>numOfElems</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>includeNull</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pOutput</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pv</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// there is a row of previous data block to be handled in the first place.</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>hasPrev</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pDiffInfo</name><operator>-&gt;</operator><name>prevTs</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>doHandleDiff</name><argument_list>(<argument><expr><name>pDiffInfo</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// handle selectivity</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>doSetPrevVal</name><argument_list>(<argument><expr><name>pDiffInfo</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pDiffInfo</name><operator>-&gt;</operator><name>hasPrev</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <name>numOfElems</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getTopBotInfoSize</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>numOfItems</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STopBotRes</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>numOfItems</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STopBotResItem</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>getTopBotFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type> <name>pkNode</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STopBotRes</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pkNode</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STopBotResItem</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>topBotFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STopBotRes</name><modifier>*</modifier></type>           <name>pRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>maxSize</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>nullTupleSaved</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>nullTuplePos</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STopBotRes</name><modifier>*</modifier></type> <name>getTopBotOutputInfo</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STopBotRes</name><modifier>*</modifier></type>          <name>pRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>pItems</name></name> <operator>=</operator> <operator>(</operator><name>STopBotResItem</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pRes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STopBotRes</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>pRes</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>doAddIntoResult</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTopQuery</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>addResult</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>pSourceItem</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTopQuery</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>topFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STopBotRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>getTopBotOutputInfo</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doAddIntoResult</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pRes</name><operator>-&gt;</operator><name>nullTupleSaved</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>nullTuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>nullTupleSaved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>bottomFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STopBotRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>getTopBotOutputInfo</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doAddIntoResult</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pRes</name><operator>-&gt;</operator><name>nullTupleSaved</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>nullTuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>nullTupleSaved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>topBotResComparFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>val1</name> <init>= <expr><operator>(</operator><name>STopBotResItem</name><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>val2</name> <init>= <expr><operator>(</operator><name>STopBotResItem</name><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>val1</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>i</name></name> <operator>==</operator> <name><name>val2</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>val1</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <name><name>val2</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>i</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>val1</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>u</name></name> <operator>==</operator> <name><name>val2</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>u</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>val1</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>u</name></name> <operator>&gt;</operator> <name><name>val2</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>u</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_DATA_TYPE_FLOAT</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>val1</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>f</name></name> <operator>==</operator> <name><name>val2</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>f</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>val1</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>f</name></name> <operator>&gt;</operator> <name><name>val2</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>f</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>val1</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>d</name></name> <operator>==</operator> <name><name>val2</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>val1</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>d</name></name> <operator>&gt;</operator> <name><name>val2</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>d</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doAddIntoResult</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>type</name></decl></parameter>,
                     <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTopQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STopBotRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>getTopBotOutputInfo</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SVariant</name></type> <name>val</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosVariantCreateFromBinary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>pItems</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>pItems</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pItems</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// not full yet</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>&lt;</operator> <name><name>pRes</name><operator>-&gt;</operator><name>maxSize</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>pItems</name><index>[<expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>

    <comment type="line">// save the data of this tuple</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUF_PAGE_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"page_saveTuple i:%d, item:%p,pageId:%d, offset:%d\n"</literal></expr></argument>, <argument><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name><operator>.</operator><name>pageId</name></name></expr></argument>,
           <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="line">// allocate the buffer and keep the data of this row into the new allocated buffer</comment>
    <expr_stmt><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosheapsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pItems</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STopBotResItem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>topBotResComparFn</name></expr></argument>,
                 <argument><expr><operator>!</operator><name>isTopQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// replace the minimum value in the result</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isTopQuery</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>i</name></name><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>u</name></name> <operator>&gt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>u</name></name><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><name>TSDB_DATA_TYPE_FLOAT</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>f</name></name> <operator>&gt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>f</name></name><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><name>TSDB_DATA_TYPE_DOUBLE</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>d</name></name> <operator>&gt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>d</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
        <operator>(</operator><operator>!</operator><name>isTopQuery</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>i</name></name><operator>)</operator> <operator>||</operator>
                         <operator>(</operator><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>u</name></name> <operator>&lt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>u</name></name><operator>)</operator> <operator>||</operator>
                         <operator>(</operator><name>TSDB_DATA_TYPE_FLOAT</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>f</name></name> <operator>&lt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>f</name></name><operator>)</operator> <operator>||</operator>
                         <operator>(</operator><name>TSDB_DATA_TYPE_DOUBLE</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>val</name><operator>.</operator><name>d</name></name> <operator>&lt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>d</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// replace the old data and the coresponding tuple data</comment>
      <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>

      <comment type="line">// save the data of this tuple by over writing the old data</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>updateTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUF_PAGE_DEBUG</name></cpp:ifdef>
      <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"page_copyTuple pageId:%d, offset:%d"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name><operator>.</operator><name>pageId</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>taosheapadjust</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pItems</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STopBotResItem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>,
                     <argument><expr><name>topBotResComparFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>!</operator><name>isTopQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * +------------------------------------+--------------+--------------+
 * |            null bitmap             |              |              |
 * |(n columns, one bit for each column)| src column #1| src column #2|
 * +------------------------------------+--------------+--------------+
 */</comment>
<function><type><name>void</name><modifier>*</modifier></type> <name>serializeTupleData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>SSubsidiaryResInfo</name><modifier>*</modifier></type> <name>pSubsidiaryies</name></decl></parameter>,
                         <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>nullList</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>nullList</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pSubsidiaryies</name><operator>-&gt;</operator><name>num</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSubsidiaryies</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pc</name> <init>= <expr><name><name>pSubsidiaryies</name><operator>-&gt;</operator><name>pCtx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SFunctParam</name><modifier>*</modifier></type> <name>pFuncParam</name> <init>= <expr><operator>&amp;</operator><name><name>pc</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>      <name>srcSlotId</name> <init>= <expr><name><name>pFuncParam</name><operator>-&gt;</operator><name>pCol</name><operator>-&gt;</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>srcSlotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>nullList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STuplePos</name></type> <name>doSaveTupleData</name><parameter_list>(<parameter><decl><type><name>SSerializeDataHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>STupleKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STuplePos</name></type> <name>p</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>pPage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>currentPage</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pPage</name> <operator>=</operator> <call><name>getNewBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>currentPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pPage</name> <operator>=</operator> <call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>currentPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pPage</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name>length</name> <operator>&gt;</operator> <call><name>getBufPageSize</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// current page is all used, let's prepare a new buffer page</comment>
        <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pPage</name> <operator>=</operator> <call><name>getNewBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>currentPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>STuplePos</name><operator>)</operator><block>{<expr><operator>.</operator><name>pageId</name> <operator>=</operator> <name><name>pHandle</name><operator>-&gt;</operator><name>currentPage</name></name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>num</name></name></expr>}</block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pPage</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// other tuple save policy</comment>
    <if_stmt><if>if <condition>(<expr><call><name>streamStateFuncPut</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>streamTupleKey</name></name> <operator>=</operator> <operator>*</operator><name>pKey</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STuplePos</name></type> <name>saveTupleData</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STupleKey</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>rowLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pc</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>pCtx</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rowLen</name> <operator>+=</operator> <name><name>pc</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>rowLen</name></name> <operator>=</operator> <name>rowLen</name> <operator>+</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>rowLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>serializeTupleData</name><argument_list>(<argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>doSaveTupleData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>saveHandle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>rowLen</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doUpdateTupleData</name><parameter_list>(<parameter><decl><type><name>SSerializeDataHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>STuplePos</name><modifier>*</modifier></type> <name>pPos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>pPage</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pPos</name><operator>-&gt;</operator><name>pageId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pPos</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setBufPageDirty</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>streamStateFuncPut</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPos</name><operator>-&gt;</operator><name>streamTupleKey</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>updateTupleData</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>, <parameter><decl><type><name>STuplePos</name><modifier>*</modifier></type> <name>pPos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>serializeTupleData</name><argument_list>(<argument><expr><name>pSrcBlock</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>doUpdateTupleData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>saveHandle</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>rowLen</name></name></expr></argument>, <argument><expr><name>pPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>doLoadTupleData</name><parameter_list>(<parameter><decl><type><name>SSerializeDataHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STuplePos</name><modifier>*</modifier></type> <name>pPos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFilePage</name><modifier>*</modifier></type> <name>pPage</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pPos</name><operator>-&gt;</operator><name>pageId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>      <name>p</name> <init>= <expr><name><name>pPage</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pPos</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>vLen</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamStateFuncGet</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pState</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPos</name><operator>-&gt;</operator><name>streamTupleKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>value</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>loadTupleData</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STuplePos</name><modifier>*</modifier></type> <name>pPos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>doLoadTupleData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>saveHandle</name></name></expr></argument>, <argument><expr><name>pPos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>topBotFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STopBotRes</name><modifier>*</modifier></type>          <name>pRes</name> <init>= <expr><call><name>getTopBotOutputInfo</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int16_t</name></type> <name>type</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// todo assign the tag value and the corresponding row data</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>currentRow</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>nullTuplePos</name></name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pItems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUF_PAGE_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"page_finalize i:%d,item:%p,pageId:%d, offset:%d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name><operator>.</operator><name>pageId</name></name></expr></argument>,
           <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pItems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tuplePos</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>currentRow</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addResult</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>pSourceItem</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTopQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STopBotRes</name><modifier>*</modifier></type>          <name>pRes</name> <init>= <expr><call><name>getTopBotOutputInfo</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type>      <name>pItems</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>pItems</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pItems</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// not full yet</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>&lt;</operator> <name><name>pRes</name><operator>-&gt;</operator><name>maxSize</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>pItems</name><index>[<expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>replaceTupleData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSourceItem</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosheapsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pItems</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STopBotResItem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>topBotResComparFn</name></expr></argument>,
                 <argument><expr><operator>!</operator><name>isTopQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// replace the minimum value in the result</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isTopQuery</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>i</name></name><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>u</name></name> <operator>&gt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>u</name></name><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><name>TSDB_DATA_TYPE_FLOAT</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>f</name></name> <operator>&gt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>f</name></name><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><name>TSDB_DATA_TYPE_DOUBLE</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>d</name></name> <operator>&gt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>d</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
        <operator>(</operator><operator>!</operator><name>isTopQuery</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>i</name></name><operator>)</operator> <operator>||</operator>
                         <operator>(</operator><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>u</name></name> <operator>&lt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>u</name></name><operator>)</operator> <operator>||</operator>
                         <operator>(</operator><name>TSDB_DATA_TYPE_FLOAT</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>f</name></name> <operator>&lt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>f</name></name><operator>)</operator> <operator>||</operator>
                         <operator>(</operator><name>TSDB_DATA_TYPE_DOUBLE</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name><operator>.</operator><name>d</name></name> <operator>&lt;</operator> <name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>v</name><operator>.</operator><name>d</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// replace the old data and the coresponding tuple data</comment>
      <decl_stmt><decl><type><name>STopBotResItem</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>pItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>v</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pSourceItem</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

      <comment type="line">// save the data of this tuple by over writing the old data</comment>
      <expr_stmt><expr><call><name>replaceTupleData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSourceItem</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosheapadjust</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pItems</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STopBotResItem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>type</name></expr></argument>,
                     <argument><expr><name>topBotResComparFn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>!</operator><name>isTopQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>topCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STopBotRes</name><modifier>*</modifier></type>          <name>pSBuf</name> <init>= <expr><call><name>getTopBotOutputInfo</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>              <name>type</name> <init>= <expr><name><name>pSBuf</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>addResult</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>, <argument><expr><name><name>pSBuf</name><operator>-&gt;</operator><name>pItems</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>bottomCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STopBotRes</name><modifier>*</modifier></type>          <name>pSBuf</name> <init>= <expr><call><name>getTopBotOutputInfo</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>              <name>type</name> <init>= <expr><name><name>pSBuf</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>addResult</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>, <argument><expr><name><name>pSBuf</name><operator>-&gt;</operator><name>pItems</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getSpreadInfoSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SSpreadInfo</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>getSpreadFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSpreadInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>spreadFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name>DBL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><operator>-</operator><name>DBL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>spreadFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Only the pre-computing information loaded and actual data does not loaded</comment>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type>       <name>pAgg</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>type</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfElems</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>numOfNull</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_spread_over</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>tmin</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmax</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tmin</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmax</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tmin</name> <operator>=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmax</name> <operator>=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tmin</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>GET_UINT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmax</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><call><name>GET_UINT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>tmin</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name>tmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tmax</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>tmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// computing based on the true data block</comment>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// check the valid data one by one</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

<label><name>_spread_over</name>:</label>
  <comment type="line">// data in the check operation are all null, not output</comment>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spreadTransferInfo</name><parameter_list>(<parameter><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>hasResult</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>max</name></name> <operator>&gt;</operator> <name><name>pOutput</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>min</name></name> <operator>&lt;</operator> <name><name>pOutput</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>spreadFunctionMerge</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>        <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type> <name>pInputInfo</name> <init>= <expr><operator>(</operator><name>SSpreadInfo</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInputInfo</name><operator>-&gt;</operator><name>hasResult</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>spreadTransferInfo</name><argument_list>(<argument><expr><name>pInputInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>numOfRes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>spreadFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>isNullRes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><call><name>functionFinalize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>spreadPartialFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type>         <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>resultBytes</name> <init>= <expr><call><name>getSpreadInfoSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>res</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>resultBytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>spreadCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type>         <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSpreadInfo</name><modifier>*</modifier></type>         <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>spreadTransferInfo</name><argument_list>(<argument><expr><name>pSBuf</name></expr></argument>, <argument><expr><name>pDBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getElapsedInfoSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SElapsedInfo</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>getElapsedFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SElapsedInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>elapsedFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>TSKEY_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>numOfParams</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>timeUnit</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>timeUnit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>elapsedFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Only the pre-computing information loaded and actual data does not loaded</comment>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type>       <name>pAgg</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pColumnDataAgg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>numOfElems</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>  <comment type="line">// since this is the primary timestamp, no need to exclude NULL values</comment>
  <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_elapsed_over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>colDataSMAIsSet</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <name>TSKEY_MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// computing based on the true data block</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <goto>goto <name>_elapsed_over</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>  <name>ptsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>&lt;</operator> <name><name>ptsList</name><index>[<expr><name>start</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ptsList</name><index>[<expr><name>start</name></expr>]</index></name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>key</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator>
            <ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>&gt;</operator> <name><name>ptsList</name><index>[<expr><name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ptsList</name><index>[<expr><name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>&gt;</operator> <name><name>ptsList</name><index>[<expr><name>start</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ptsList</name><index>[<expr><name>start</name></expr>]</index></name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator>
            <ternary><condition><expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>&lt;</operator> <name><name>ptsList</name><index>[<expr><name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ptsList</name><index>[<expr><name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_elapsed_over</name>:</label>
  <comment type="line">// data in the check operation are all null, not output</comment>
  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>elapsedTransferInfo</name><parameter_list>(<parameter><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>timeUnit</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>timeUnit</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOutput</name><operator>-&gt;</operator><name>min</name></name> <operator>&gt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOutput</name><operator>-&gt;</operator><name>max</name></name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>elapsedFunctionMerge</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>         <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type> <name>pInputInfo</name> <init>= <expr><operator>(</operator><name>SElapsedInfo</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>elapsedTransferInfo</name><argument_list>(<argument><expr><name>pInputInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>elapsedFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>        <name>result</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>max</name></name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>min</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><operator>-</operator><name>result</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>result</name> <operator>/</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>timeUnit</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>functionFinalize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>elapsedPartialFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type>        <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>resultBytes</name> <init>= <expr><call><name>getElapsedInfoSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>res</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>resultBytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>elapsedCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type>        <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SElapsedInfo</name><modifier>*</modifier></type>        <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>elapsedTransferInfo</name><argument_list>(<argument><expr><name>pSBuf</name></expr></argument>, <argument><expr><name>pDBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getHistogramInfoSize</name><parameter_list>()</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SHistoFuncInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>HISTOGRAM_MAX_BINS_NUM</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistoFuncBin</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getHistogramFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistoFuncInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>HISTOGRAM_MAX_BINS_NUM</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistoFuncBin</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>getHistogramBinType</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>binTypeStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>binType</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>binTypeStr</name></expr></argument>, <argument><expr><literal type="string">"user_input"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>binType</name> <operator>=</operator> <name>USER_INPUT_BIN</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>binTypeStr</name></expr></argument>, <argument><expr><literal type="string">"linear_bin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>binType</name> <operator>=</operator> <name>LINEAR_BIN</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>binTypeStr</name></expr></argument>, <argument><expr><literal type="string">"log_bin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>binType</name> <operator>=</operator> <name>LOG_BIN</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>binType</name> <operator>=</operator> <name>UNKNOWN_BIN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>binType</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>getHistogramBinDesc</name><parameter_list>(<parameter><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>binDescStr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>binType</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>normalized</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>binDesc</name> <init>= <expr><call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>binDescStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfBins</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>intervals</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cJSON_IsObject</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="block">/* linaer/log bins */</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfParams</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>startIndex</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfParams</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>factor</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"factor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>width</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>count</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>infinity</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>, <argument><expr><literal type="string">"infinity"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>cJSON_IsBool</name><argument_list>(<argument><expr><name>infinity</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>count</name><operator>-&gt;</operator><name>valueint</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>count</name><operator>-&gt;</operator><name>valueint</name></name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// limit count to 1000</comment>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>start</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>width</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>width</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>factor</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>count</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>count</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>counter</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>count</name><operator>-&gt;</operator><name>valueint</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>infinity</name><operator>-&gt;</operator><name>valueint</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfBins</name> <operator>=</operator> <name>counter</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfBins</name> <operator>=</operator> <name>counter</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>intervals</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfBins</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>factor</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>binType</name> <operator>==</operator> <name>LINEAR_BIN</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// linear bin process</comment>
      <if_stmt><if>if <condition>(<expr><name><name>width</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>counter</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>intervals</name><index>[<expr><name>startIndex</name></expr>]</index></name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>width</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>intervals</name><index>[<expr><name>startIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>startIndex</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>width</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>binType</name> <operator>==</operator> <name>LOG_BIN</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// log bin process</comment>
      <if_stmt><if>if <condition>(<expr><name><name>start</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>counter</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>intervals</name><index>[<expr><name>startIndex</name></expr>]</index></name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>factor</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>intervals</name><index>[<expr><name>startIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>startIndex</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>infinity</name><operator>-&gt;</operator><name>valueint</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>intervals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>INFINITY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>intervals</name><index>[<expr><name>numOfBins</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INFINITY</name></expr>;</expr_stmt>
      <comment type="line">// in case of desc bin orders, -inf/inf should be swapped</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfBins</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>intervals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>intervals</name><index>[<expr><name>numOfBins</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>intervals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>intervals</name><index>[<expr><name>numOfBins</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cJSON_IsArray</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="block">/* user input bins */</comment>
    <if_stmt><if>if <condition>(<expr><name>binType</name> <operator>!=</operator> <name>USER_INPUT_BIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>numOfBins</name> <operator>=</operator> <call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>intervals</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfBins</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>bin</name> <init>= <expr><name><name>binDesc</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bin</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>bin</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>intervals</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>bin</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfBins</name></name> <operator>=</operator> <name>numOfBins</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <name>normalized</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfBins</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lower</name> <operator>=</operator> <ternary><condition><expr><name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>intervals</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>intervals</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>upper</name> <operator>=</operator> <ternary><condition><expr><name><name>intervals</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>intervals</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>histogramFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfBins</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>binTypeStr</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>binType</name> <init>= <expr><call><name>getHistogramBinType</name><argument_list>(<argument><expr><name>binTypeStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>binTypeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>binType</name> <operator>==</operator> <name>UNKNOWN_BIN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>binDesc</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>normalized</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>normalized</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>normalized</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getHistogramBinDesc</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>binDesc</name></expr></argument>, <argument><expr><name>binType</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator><name>normalized</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>binDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>histogramFunctionImpl</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isPartial</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfBins</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lower</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>upper</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>count</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalCount</name></name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isPartial</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>numOfRes</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfBins</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>numOfRes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>histogramFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>histogramFunctionImpl</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>histogramFunctionPartial</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>histogramFunctionImpl</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>histogramTransferInfo</name><parameter_list>(<parameter><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>normalized</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>numOfBins</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfBins</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>totalCount</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>totalCount</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pOutput</name><operator>-&gt;</operator><name>numOfBins</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lower</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lower</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>upper</name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>upper</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>histogramFunctionMerge</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>           <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type> <name>pInputInfo</name> <init>= <expr><operator>(</operator><name>SHistoFuncInfo</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>histogramTransferInfo</name><argument_list>(<argument><expr><name>pInputInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfBins</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfBins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>histogramFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type>      <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>     <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>currentRow</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>normalized</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalCount</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>percentage</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>totalCount</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>percentage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>normalized</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"lower_bin\":%g, \"upper_bin\":%g, \"count\":%"</literal> <name>PRId64</name> <literal type="string">"}"</literal></expr></argument>,
                    <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lower</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>upper</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"lower_bin\":%g, \"upper_bin\":%g, \"count\":%lf}"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lower</name></expr></argument>,
                    <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>upper</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>percentage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>currentRow</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>histogramPartialFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type>      <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>resultBytes</name> <init>= <expr><call><name>getHistogramInfoSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>res</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>resultBytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>histogramCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type>      <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHistoFuncInfo</name><modifier>*</modifier></type>      <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>histogramTransferInfo</name><argument_list>(<argument><expr><name>pSBuf</name></expr></argument>, <argument><expr><name>pDBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getHLLInfoSize</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SHLLInfo</name></expr></argument>)</argument_list></sizeof></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>getHLLFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHLLInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>hllCountNum</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>buk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash</name> <init>= <expr><call><name>MurmurHash3_64</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>index</name> <init>= <expr><name>hash</name> <operator>&amp;</operator> <name>HLL_BUCKET_MASK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>hash</name> <operator>&gt;&gt;=</operator> <name>HLL_BUCKET_BITS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>hash</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>HLL_DATA_BITS</name><operator>)</operator></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>bit</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>hash</name> <operator>&amp;</operator> <name>bit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bit</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>buk</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hllBucketHisto</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buckets</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>bucketHisto</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>word</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>buckets</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>  <name>bytes</name></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name>HLL_BUCKETS</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>word</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>bucketHisto</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>bytes</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>word</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bucketHisto</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bucketHisto</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bucketHisto</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bucketHisto</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bucketHisto</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bucketHisto</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bucketHisto</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bucketHisto</name><index>[<expr><name><name>bytes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>word</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>double</name></type> <name>hllTau</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0.</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <literal type="number">1.</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0.</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>zPrime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>z</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>x</name></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zPrime</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>-=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>zPrime</name> <operator>!=</operator> <name>z</name></expr>)</condition>;</do>
  <return>return <expr><name>z</name> <operator>/</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>hllSigma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INFINITY</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>zPrime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>z</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zPrime</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>zPrime</name> <operator>!=</operator> <name>z</name></expr>)</condition>;</do>
  <return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// estimate the cardinality, the algorithm refer this paper: "New cardinality estimation algorithms for HyperLogLog</comment>
<comment type="line">// sketches"</comment>
<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>hllCountCnt</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buckets</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type>  <name>m</name> <init>= <expr><name>HLL_BUCKETS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>buckethisto</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>hllBucketHisto</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>buckethisto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>z</name> <init>= <expr><name>m</name> <operator>*</operator> <call><name>hllTau</name><argument_list>(<argument><expr><operator>(</operator><name>m</name> <operator>-</operator> <name><name>buckethisto</name><index>[<expr><name>HLL_DATA_BITS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>HLL_DATA_BITS</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>z</name> <operator>+=</operator> <name><name>buckethisto</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>z</name> <operator>+=</operator> <name>m</name> <operator>*</operator> <call><name>hllSigma</name><argument_list>(<argument><expr><name><name>buckethisto</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>E</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><call><name>llroundl</name><argument_list>(<argument><expr><name>HLL_ALPHA_INF</name> <operator>*</operator> <name>m</name> <operator>*</operator> <name>m</name> <operator>/</operator> <name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>E</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hllFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHLLInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_hll_over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name> <operator>+</operator> <name>start</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>count</name> <init>= <expr><call><name>hllCountNum</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>oldcount</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>oldcount</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>_hll_over</name>:</label>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalCount</name></name> <operator>+=</operator> <name>numOfElems</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalCount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>tsCountAlwaysReturnValue</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hllTransferInfo</name><parameter_list>(<parameter><decl><type><name>SHLLInfo</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>, <parameter><decl><type><name>SHLLInfo</name><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>HLL_BUCKETS</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pOutput</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>totalCount</name></name> <operator>+=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>totalCount</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hllFunctionMerge</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHLLInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>


  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>     <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHLLInfo</name><modifier>*</modifier></type> <name>pInputInfo</name> <init>= <expr><operator>(</operator><name>SHLLInfo</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>hllTransferInfo</name><argument_list>(<argument><expr><name>pInputInfo</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalCount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>tsCountAlwaysReturnValue</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hllFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHLLInfo</name><modifier>*</modifier></type> <name>pHllInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHllInfo</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>hllCountCnt</name><argument_list>(<argument><expr><name><name>pHllInfo</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsCountAlwaysReturnValue</name> <operator>&amp;&amp;</operator> <name><name>pHllInfo</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>functionFinalize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hllPartialFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHLLInfo</name><modifier>*</modifier></type>            <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>resultBytes</name> <init>= <expr><call><name>getHLLInfoSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>                <name>res</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>resultBytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>resultBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hllCombine</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pDestCtx</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pSourceCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pDResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pDestCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHLLInfo</name><modifier>*</modifier></type>            <name>pDBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pDResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pSResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pSourceCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHLLInfo</name><modifier>*</modifier></type>            <name>pSBuf</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pSResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>hllTransferInfo</name><argument_list>(<argument><expr><name>pSBuf</name></expr></argument>, <argument><expr><name>pDBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>, <argument><expr><name><name>pSResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>&amp;=</operator> <name><name>pSResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getStateFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStateInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>getStateOpType</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>opStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>opType</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opStr</name></expr></argument>, <argument><expr><literal type="string">"LT"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>opType</name> <operator>=</operator> <name>STATE_OPER_LT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opStr</name></expr></argument>, <argument><expr><literal type="string">"GT"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>opType</name> <operator>=</operator> <name>STATE_OPER_GT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opStr</name></expr></argument>, <argument><expr><literal type="string">"LE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>opType</name> <operator>=</operator> <name>STATE_OPER_LE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opStr</name></expr></argument>, <argument><expr><literal type="string">"GE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>opType</name> <operator>=</operator> <name>STATE_OPER_GE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opStr</name></expr></argument>, <argument><expr><literal type="string">"NE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>opType</name> <operator>=</operator> <name>STATE_OPER_NE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>opStr</name></expr></argument>, <argument><expr><literal type="string">"EQ"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>opType</name> <operator>=</operator> <name>STATE_OPER_EQ</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>opType</name> <operator>=</operator> <name>STATE_OPER_INVALID</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>opType</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>checkStateOp</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>SVariant</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int8_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STATE_COMP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stateCountFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStateInfo</name><modifier>*</modifier></type>          <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>                <name>tsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>op</name> <init>= <expr><call><name>getStateOpType</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>STATE_OPER_INVALID</name> <operator>==</operator> <name>op</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>isPrevTsSet</name></name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>prevTs</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isPrevTsSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// handle selectivity</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>numOfElems</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>checkStateOp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>output</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>output</name> <operator>=</operator> <operator>++</operator><name><name>pInfo</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>numOfElems</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// handle selectivity</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>numOfElems</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <name>numOfElems</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stateDurationFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStateInfo</name><modifier>*</modifier></type>          <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>                <name>tsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// TODO: process timeUnit for different db precisions</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>timeUnit</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>numOfParams</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// TODO: param number incorrect</comment>
    <expr_stmt><expr><name>timeUnit</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>op</name> <init>= <expr><call><name>getStateOpType</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>STATE_OPER_INVALID</name> <operator>==</operator> <name>op</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>isPrevTsSet</name></name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>prevTs</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isPrevTsSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// handle selectivity</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>numOfElems</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type>    <name>ret</name> <init>= <expr><call><name>checkStateOp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>output</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>durationStart</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>durationStart</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>durationStart</name></name><operator>)</operator> <operator>/</operator> <name>timeUnit</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>durationStart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>numOfElems</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// handle selectivity</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>numOfElems</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <name>numOfElems</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getCsumFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSumRes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>csumFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSumRes</name><modifier>*</modifier></type>             <name>pSumRes</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>                <name>tsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>startOffset</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isPrevTsSet</name></name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pSumRes</name><operator>-&gt;</operator><name>prevTs</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isPrevTsSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><name>startOffset</name> <operator>+</operator> <name>numOfElems</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// colDataAppendNULL(pOutput, i);</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSumRes</name><operator>-&gt;</operator><name>isum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSumRes</name><operator>-&gt;</operator><name>usum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
      <comment type="line">// check for overflow</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSumRes</name><operator>-&gt;</operator><name>dsum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// handle selectivity</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <name>numOfElems</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getMavgFuncEnv</name><parameter_list>(<parameter><function_decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>UNUSED_PARAM</name><parameter_list>(<parameter><decl><type><name>pFunc</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMavgInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>MAVG_MAX_POINTS_NUM</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mavgFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMavgInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isPrevTsSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name> <operator>&gt;</operator> <name>MAVG_MAX_POINTS_NUM</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pointsMeet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mavgFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMavgInfo</name><modifier>*</modifier></type>           <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>                <name>tsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTsOutput</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pTsOutput</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>startOffset</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>isPrevTsSet</name></name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>prevTs</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isPrevTsSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><name>startOffset</name> <operator>+</operator> <name>numOfElems</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// colDataAppendNULL(pOutput, i);</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pointsMeet</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sum</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pointsMeet</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sum</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pointsMeet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>sum</name></name> <operator>+</operator> <name>v</name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>result</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>sum</name></name> <operator>/</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name></expr></init></decl>;</decl_stmt>
      <comment type="line">// check for overflow</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// handle selectivity</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <name>numOfElems</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSampleInfo</name><modifier>*</modifier></type> <name>getSampleOutputInfo</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSampleInfo</name><modifier>*</modifier></type>         <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pInfo</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSampleInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <operator>(</operator><name>STuplePos</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pInfo</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSampleInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>pInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getSampleFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValueNode</name><modifier>*</modifier></type>  <name>pVal</name> <init>= <expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfSamples</name> <init>= <expr><name><name>pVal</name><operator>-&gt;</operator><name>datum</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSampleInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>numOfSamples</name> <operator>*</operator> <operator>(</operator><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STuplePos</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>sampleFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosSeedRand</name><argument_list>(<argument><expr><call><name>taosSafeRand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSampleInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalPoints</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>colType</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nullTuplePos</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nullTupleSaved</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pInfo</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSampleInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <operator>(</operator><name>STuplePos</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pInfo</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSampleInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>samples</name></name> <operator>*</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sampleAssignResult</name><parameter_list>(<parameter><decl><type><name>SSampleInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assignVal</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>index</name> <operator>*</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doReservoirSample</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSampleInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalPoints</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sampleAssignResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tuplePos</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name></expr>]</index></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>totalPoints</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sampleAssignResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>updateTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tuplePos</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sampleFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSampleInfo</name><modifier>*</modifier></type>         <name>pInfo</name> <init>= <expr><call><name>getSampleOutputInfo</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doReservoirSample</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nullTupleSaved</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nullTuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nullTupleSaved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sampleFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pEntryInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSampleInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>getSampleOutputInfo</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEntryInfo</name><operator>-&gt;</operator><name>complete</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>currentRow</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nullTuplePos</name></name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tuplePos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>currentRow</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name><name>pInfo</name><operator>-&gt;</operator><name>numSampled</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getTailFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  SColumnNode* pCol = (SColumnNode*)nodesListGetNode(pFunc-&gt;pParameterList, 0);
  SValueNode*  pVal = (SValueNode*)nodesListGetNode(pFunc-&gt;pParameterList, 1);
  int32_t      numOfPoints = pVal-&gt;datum.i;
  pEnv-&gt;calcMemSize = sizeof(STailInfo) + numOfPoints * (POINTER_BYTES + sizeof(STailItem) + pCol-&gt;node.resType.bytes);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tailFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (!functionSetup(pCtx, pResultInfo)) {
    return false;
  }

  STailInfo* pInfo = GET_ROWCELL_INTERBUF(pResultInfo);
  pInfo-&gt;numAdded = 0;
  pInfo-&gt;numOfPoints = pCtx-&gt;param[1].param.i;
  if (pCtx-&gt;numOfParams == 4) {
    pInfo-&gt;offset = pCtx-&gt;param[2].param.i;
  } else {
    pInfo-&gt;offset = 0;
  }
  pInfo-&gt;colType = pCtx-&gt;resDataInfo.type;
  pInfo-&gt;colBytes = pCtx-&gt;resDataInfo.bytes;
  if ((pInfo-&gt;numOfPoints &lt; 1 || pInfo-&gt;numOfPoints &gt; TAIL_MAX_POINTS_NUM) ||
      (pInfo-&gt;numOfPoints &lt; 0 || pInfo-&gt;numOfPoints &gt; TAIL_MAX_OFFSET)) {
    return false;
  }

  pInfo-&gt;pItems = (STailItem**)((char*)pInfo + sizeof(STailInfo));
  char* pItem = (char*)pInfo-&gt;pItems + pInfo-&gt;numOfPoints * POINTER_BYTES;

  size_t unitSize = sizeof(STailItem) + pInfo-&gt;colBytes;
  for (int32_t i = 0; i &lt; pInfo-&gt;numOfPoints; ++i) {
    pInfo-&gt;pItems[i] = (STailItem*)(pItem + i * unitSize);
    pInfo-&gt;pItems[i]-&gt;isNull = false;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tailAssignResult</name><parameter_list>(<parameter><decl><type><name>STailItem</name><modifier>*</modifier></type> <name>pItem</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colBytes</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  pItem-&gt;timestamp = ts;
  if (isNull) {
    pItem-&gt;isNull = true;
  } else {
    pItem-&gt;isNull = false;
    memcpy(pItem-&gt;data, data, colBytes);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int32_t tailCompFn(const void* p1, const void* p2, const void* param) {
  STailItem* d1 = *(STailItem**)p1;
  STailItem* d2 = *(STailItem**)p2;
  return compareInt64Val(&amp;d1-&gt;timestamp, &amp;d2-&gt;timestamp);
}

static void doTailAdd(STailInfo* pInfo, char* data, TSKEY ts, bool isNull) {
  STailItem** pList = pInfo-&gt;pItems;
  if (pInfo-&gt;numAdded &lt; pInfo-&gt;numOfPoints) {
    tailAssignResult(pList[pInfo-&gt;numAdded], data, pInfo-&gt;colBytes, ts, isNull);
    taosheapsort((void*)pList, sizeof(STailItem**), pInfo-&gt;numAdded + 1, NULL, tailCompFn, 0);
    pInfo-&gt;numAdded++;
  } else if (pList[0]-&gt;timestamp &lt; ts) {
    tailAssignResult(pList[0], data, pInfo-&gt;colBytes, ts, isNull);
    taosheapadjust((void*)pList, sizeof(STailItem**), 0, pInfo-&gt;numOfPoints - 1, NULL, tailCompFn, NULL, 0);
  }
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>tailFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  SResultRowEntryInfo* pResInfo = GET_RES_INFO(pCtx);
  STailInfo*           pInfo = GET_ROWCELL_INTERBUF(pResInfo);

  SInputColumnInfoData* pInput = &amp;pCtx-&gt;input;
  TSKEY*                tsList = (int64_t*)pInput-&gt;pPTS-&gt;pData;

  SColumnInfoData* pInputCol = pInput-&gt;pData[0];
  SColumnInfoData* pOutput = (SColumnInfoData*)pCtx-&gt;pOutput;

  int32_t startOffset = pCtx-&gt;offset;
  if (pInfo-&gt;offset &gt;= pInput-&gt;numOfRows) {
    return 0;
  } else {
    pInfo-&gt;numOfPoints = TMIN(pInfo-&gt;numOfPoints, pInput-&gt;numOfRows - pInfo-&gt;offset);
  }
  for (int32_t i = pInput-&gt;startRowIndex; i &lt; pInput-&gt;numOfRows + pInput-&gt;startRowIndex - pInfo-&gt;offset; i += 1) {
    char* data = colDataGetData(pInputCol, i);
    doTailAdd(pInfo, data, tsList[i], colDataIsNull_s(pInputCol, i));
  }

  taosqsort(pInfo-&gt;pItems, pInfo-&gt;numOfPoints, POINTER_BYTES, NULL, tailCompFn);

  for (int32_t i = 0; i &lt; pInfo-&gt;numOfPoints; ++i) {
    int32_t    pos = startOffset + i;
    STailItem* pItem = pInfo-&gt;pItems[i];
    if (pItem-&gt;isNull) {
      colDataAppendNULL(pOutput, pos);
    } else {
      colDataAppend(pOutput, pos, pItem-&gt;data, false);
    }
  }

  return pInfo-&gt;numOfPoints;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tailFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  SResultRowEntryInfo* pEntryInfo = GET_RES_INFO(pCtx);
  STailInfo*           pInfo = GET_ROWCELL_INTERBUF(pEntryInfo);
  pEntryInfo-&gt;complete = true;

  int32_t type = pCtx-&gt;input.pData[0]-&gt;info.type;
  int32_t slotId = pCtx-&gt;pExpr-&gt;base.resSchema.slotId;

  SColumnInfoData* pCol = taosArrayGet(pBlock-&gt;pDataBlock, slotId);

  <comment type="line">// todo assign the tag value and the corresponding row data</comment>
  int32_t currentRow = pBlock-&gt;info.rows;
  for (int32_t i = 0; i &lt; pEntryInfo-&gt;numOfRes; ++i) {
    STailItem* pItem = pInfo-&gt;pItems[i];
    colDataAppend(pCol, currentRow, pItem-&gt;data, false);
    currentRow += 1;
  }

  return pEntryInfo-&gt;numOfRes;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getUniqueFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  pEnv-&gt;calcMemSize = sizeof(SUniqueInfo) + UNIQUE_MAX_RESULT_SIZE;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>uniqueFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (!functionSetup(pCtx, pResInfo)) {
    return false;
  }

  SUniqueInfo* pInfo = GET_ROWCELL_INTERBUF(pResInfo);
  pInfo-&gt;numOfPoints = 0;
  pInfo-&gt;colType = pCtx-&gt;resDataInfo.type;
  pInfo-&gt;colBytes = pCtx-&gt;resDataInfo.bytes;
  if (pInfo-&gt;pHash != NULL) {
    taosHashClear(pInfo-&gt;pHash);
  } else {
    pInfo-&gt;pHash = taosHashInit(64, taosGetDefaultHashFunction(TSDB_DATA_TYPE_BINARY), true, HASH_NO_LOCK);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void doUniqueAdd(SUniqueInfo* pInfo, char* data, TSKEY ts, bool isNull) {
  <comment type="line">// handle null elements</comment>
  if (isNull == true) {
    int32_t      size = sizeof(SUniqueItem) + pInfo-&gt;colBytes;
    SUniqueItem* pItem = (SUniqueItem*)(pInfo-&gt;pItems + pInfo-&gt;numOfPoints * size);
    if (pInfo-&gt;hasNull == false &amp;&amp; pItem-&gt;isNull == false) {
      pItem-&gt;timestamp = ts;
      pItem-&gt;isNull = true;
      pInfo-&gt;numOfPoints++;
      pInfo-&gt;hasNull = true;
    } else if (pItem-&gt;timestamp &gt; ts &amp;&amp; pItem-&gt;isNull == true) {
      pItem-&gt;timestamp = ts;
    }
    return;
  }

  int32_t      hashKeyBytes = IS_VAR_DATA_TYPE(pInfo-&gt;colType) ? varDataTLen(data) : pInfo-&gt;colBytes;
  SUniqueItem* pHashItem = taosHashGet(pInfo-&gt;pHash, data, hashKeyBytes);
  if (pHashItem == NULL) {
    int32_t      size = sizeof(SUniqueItem) + pInfo-&gt;colBytes;
    SUniqueItem* pItem = (SUniqueItem*)(pInfo-&gt;pItems + pInfo-&gt;numOfPoints * size);
    pItem-&gt;timestamp = ts;
    memcpy(pItem-&gt;data, data, pInfo-&gt;colBytes);

    taosHashPut(pInfo-&gt;pHash, data, hashKeyBytes, (char*)pItem, sizeof(SUniqueItem*));
    pInfo-&gt;numOfPoints++;
  } else if (pHashItem-&gt;timestamp &gt; ts) {
    pHashItem-&gt;timestamp = ts;
  }
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>uniqueFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  SResultRowEntryInfo* pResInfo = GET_RES_INFO(pCtx);
  SUniqueInfo*         pInfo = GET_ROWCELL_INTERBUF(pResInfo);

  SInputColumnInfoData* pInput = &amp;pCtx-&gt;input;
  TSKEY*                tsList = (int64_t*)pInput-&gt;pPTS-&gt;pData;

  SColumnInfoData* pInputCol = pInput-&gt;pData[0];
  SColumnInfoData* pTsOutput = pCtx-&gt;pTsOutput;
  SColumnInfoData* pOutput = (SColumnInfoData*)pCtx-&gt;pOutput;

  int32_t startOffset = pCtx-&gt;offset;
  for (int32_t i = pInput-&gt;startRowIndex; i &lt; pInput-&gt;numOfRows + pInput-&gt;startRowIndex; ++i) {
    char* data = colDataGetData(pInputCol, i);
    doUniqueAdd(pInfo, data, tsList[i], colDataIsNull_s(pInputCol, i));

    if (sizeof(SUniqueInfo) + pInfo-&gt;numOfPoints * (sizeof(SUniqueItem) + pInfo-&gt;colBytes) &gt;= UNIQUE_MAX_RESULT_SIZE) {
      taosHashCleanup(pInfo-&gt;pHash);
      return 0;
    }
  }

  for (int32_t i = 0; i &lt; pInfo-&gt;numOfPoints; ++i) {
    SUniqueItem* pItem = (SUniqueItem*)(pInfo-&gt;pItems + i * (sizeof(SUniqueItem) + pInfo-&gt;colBytes));
    if (pItem-&gt;isNull == true) {
      colDataAppendNULL(pOutput, i);
    } else {
      colDataAppend(pOutput, i, pItem-&gt;data, false);
    }
    if (pTsOutput != NULL) {
      colDataAppendInt64(pTsOutput, i, &amp;pItem-&gt;timestamp);
    }
  }

  return pInfo-&gt;numOfPoints;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getModeFuncEnv</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SModeInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>MODE_MAX_RESULT_SIZE</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>modeFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SModeInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>colType</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>resDataInfo</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHash</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nullTupleSaved</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nullTuplePos</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doModeAdd</name><parameter_list>(<parameter><decl><type><name>SModeInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>hashKeyBytes</name> <init>= <expr><ternary><condition><expr><call><name>IS_STR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>colType</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SModeItem</name><modifier>*</modifier><modifier>*</modifier></type> <name>pHashItem</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>hashKeyBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHashItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SModeItem</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SModeItem</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><operator>(</operator><name>SModeItem</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pItems</name></name> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name> <operator>*</operator> <name>size</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>hashKeyBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>tuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>hashKeyBytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pItem</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SModeItem</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHashItem</name><operator>)</operator><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>updateTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pHashItem</name><operator>)</operator><operator>-&gt;</operator><name>tuplePos</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>modeFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SModeInfo</name><modifier>*</modifier></type>           <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>startOffset</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doModeAdd</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SModeInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SModeItem</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name><operator>)</operator> <operator>&gt;=</operator> <name>MODE_MAX_RESULT_SIZE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nullTupleSaved</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nullTuplePos</name></name> <operator>=</operator> <call><name>saveTupleData</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSrcBlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>nullTupleSaved</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>modeFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SModeInfo</name><modifier>*</modifier></type>           <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>     <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>currentRow</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>resIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfPoints</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SModeItem</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><operator>(</operator><name>SModeItem</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pItems</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SModeItem</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name>maxCount</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>maxCount</name> <operator>=</operator> <name><name>pItem</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>resIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>maxCount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SModeItem</name><modifier>*</modifier></type> <name>pResItem</name> <init>= <expr><operator>(</operator><name>SModeItem</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pItems</name></name> <operator>+</operator> <name>resIndex</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SModeItem</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>colBytes</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>, <argument><expr><name><name>pResItem</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pResItem</name><operator>-&gt;</operator><name>tuplePos</name></name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nullTuplePos</name></name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getTwaFuncEnv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SFunctionNode</name></name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STwaInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>twaFunctionSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STwaInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name></name> <operator>=</operator> <name>TSWINDOW_INITIALIZER</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>twa_get_area</name><parameter_list>(<parameter><decl><type><name>SPoint1</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>SPoint1</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>INT64_MAX</name> <operator>||</operator> <name><name>s</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>e</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>e</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>s</name><operator>.</operator><name>val</name></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>e</name><operator>.</operator><name>key</name></name> <operator>-</operator> <name><name>s</name><operator>.</operator><name>key</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>.</operator><name>key</name></name> <operator>*</operator> <name><name>e</name><operator>.</operator><name>val</name></name> <operator>-</operator> <name><name>e</name><operator>.</operator><name>key</name></name> <operator>*</operator> <name><name>s</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>e</name><operator>.</operator><name>val</name></name> <operator>-</operator> <name><name>s</name><operator>.</operator><name>val</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>.</operator><name>val</name></name> <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <name><name>s</name><operator>.</operator><name>key</name></name><operator>)</operator> <operator>+</operator> <name><name>e</name><operator>.</operator><name>val</name></name> <operator>*</operator> <operator>(</operator><name><name>e</name><operator>.</operator><name>key</name></name> <operator>-</operator> <name>x</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>twaFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STwaInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPoint1</name><modifier>*</modifier></type>  <name>last</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_NULL_TYPE</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <goto>goto <name>_twa_over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// ASSERT((pCtx-&gt;start.key &lt; tsList[i] &amp;&amp; pCtx-&gt;order == TSDB_ORDER_ASC) ||</comment>
    <comment type="line">//        (pCtx-&gt;start.key &gt; tsList[i] &amp;&amp; pCtx-&gt;order == TSDB_ORDER_DESC));</comment>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>last</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>INT64_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name><name>last</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><operator>*</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name><name>last</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SPoint1</name></type> <name>st</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// calculate the value of</comment>
  <switch>switch <condition>(<expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>val</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>INIT_INTP_POINT</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <comment type="line">// the last interpolated time window value</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>+=</operator> <call><name>twa_get_area</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfElems</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>

<label><name>_twa_over</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>numOfElems</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * To copy the input to interResBuf to avoid the input buffer space be over writen
 * by next input data. The TWA function only applies to each table, so no merge procedure
 * is required, we simply copy to the resut ot interResBuffer.
 */</comment>
<comment type="line">// void twa_function_copy(SQLFunctionCtx *pCtx) {</comment>
<comment type="line">//   assert(pCtx-&gt;inputType == TSDB_DATA_TYPE_BINARY);</comment>
<comment type="line">//   SResultRowEntryInfo *pResInfo = GET_RES_INFO(pCtx);</comment>
<comment type="line">//</comment>
<comment type="line">//   memcpy(GET_ROWCELL_INTERBUF(pResInfo), pCtx-&gt;pInput, (size_t)pCtx-&gt;inputBytes);</comment>
<comment type="line">//   pResInfo-&gt;hasResult = ((STwaInfo *)pCtx-&gt;pInput)-&gt;hasResult;</comment>
<comment type="line">// }</comment>

<function><type><name>int32_t</name></type> <name>twaFinalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SqlFunctionCtx</name></name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STwaInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>STwaInfo</name><operator>*</operator><operator>)</operator><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>isNull</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>==</operator> <name>INT64_MAX</name> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>  <comment type="line">// no data in timewindow</comment>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>dOutput</name></name> <operator>/</operator> <operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>ekey</name></name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>win</name><operator>.</operator><name>skey</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><call><name>functionFinalize</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>blockDistSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableBlockDistInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>minRows</name></name> <operator>=</operator> <name>INT32_MAX</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDistFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>BLOCK_DIST_RESULT_ROWS</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableBlockDistInfo</name><modifier>*</modifier></type> <name>pDistInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableBlockDistInfo</name></type> <name>p1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDeserializeBlockDistInfo</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>+=</operator> <name><name>p1</name><operator>.</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>+=</operator> <name><name>p1</name><operator>.</operator><name>numOfTables</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>numOfInmemRows</name></name> <operator>+=</operator> <name><name>p1</name><operator>.</operator><name>numOfInmemRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>totalSize</name></name> <operator>+=</operator> <name><name>p1</name><operator>.</operator><name>totalSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>p1</name><operator>.</operator><name>totalRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>numOfFiles</name></name> <operator>+=</operator> <name><name>p1</name><operator>.</operator><name>numOfFiles</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>defMinRows</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>defMinRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>defMaxRows</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>defMaxRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>rowSize</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>rowSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>numOfSmallBlocks</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>numOfSmallBlocks</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>minRows</name></name> <operator>&gt;</operator> <name><name>p1</name><operator>.</operator><name>minRows</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>minRows</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>minRows</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>maxRows</name></name> <operator>&lt;</operator> <name><name>p1</name><operator>.</operator><name>maxRows</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>maxRows</name></name> <operator>=</operator> <name><name>p1</name><operator>.</operator><name>maxRows</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>blockRowsHisto</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pDistInfo</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>p1</name><operator>.</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <name>BLOCK_DIST_RESULT_ROWS</name></expr>;</expr_stmt>  <comment type="line">// default output rows</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tSerializeBlockDistInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STableBlockDistInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tStartEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfFiles</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfTables</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalSize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>maxRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>minRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>defMaxRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>defMinRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfInmemRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfSmallBlocks</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockRowsHisto</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tEndEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><name><name>encoder</name><operator>.</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDeserializeBlockDistInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>, <parameter><decl><type><name>STableBlockDistInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>rowSize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>numOfFiles</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>numOfTables</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>totalSize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>maxRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>minRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>defMaxRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>defMinRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>numOfInmemRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeU32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>numOfSmallBlocks</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockRowsHisto</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDistFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableBlockDistInfo</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>minRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>st</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>averageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>averageSize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pData</name><operator>-&gt;</operator><name>totalSize</name></name><operator>)</operator> <operator>/</operator> <name><name>pData</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>totalRawSize</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>*</operator> <name><name>pData</name><operator>-&gt;</operator><name>rowSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>   <name>compRatio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>totalRawSize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>compRatio</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>totalSize</name></name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>totalRawSize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>st</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                        <argument><expr><literal type="string">"Total_Blocks=[%d] Total_Size=[%.2f Kb] Average_size=[%.2f Kb] Compression_Ratio=[%.2f %c]"</literal></expr></argument>,
                        <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>totalSize</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name>averageSize</name></expr></argument>, <argument><expr><name>compRatio</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>row</name><operator>++</operator></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>avgRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>avgRows</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>/</operator> <name><name>pData</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>st</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                <argument><expr><literal type="string">"Total_Rows=[%"</literal> <name>PRId64</name> <literal type="string">"] Inmem_Rows=[%d] MinRows=[%d] MaxRows=[%d] Average_Rows=[%"</literal> <name>PRId64</name> <literal type="string">"]"</literal></expr></argument>,
                <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>numOfInmemRows</name></name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>minRows</name></name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>maxRows</name></name></expr></argument>, <argument><expr><name>avgRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>row</name><operator>++</operator></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>st</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Total_Tables=[%d] Total_Files=[%d] Total_Vgroups=[%d]"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>numOfTables</name></name></expr></argument>,
                <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>numOfFiles</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>row</name><operator>++</operator></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>st</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                <argument><expr><literal type="string">"--------------------------------------------------------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>row</name><operator>++</operator></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>minVal</name> <init>= <expr><name>INT32_MAX</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>maxVal</name> <operator>&lt;</operator> <name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>maxVal</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minVal</name> <operator>&gt;</operator> <name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minVal</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// maximum number of step is 80</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>factor</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>/</operator> <literal type="number">80.0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfBuckets</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bucketRange</name> <init>= <expr><operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>defMaxRows</name></name> <operator>-</operator> <name><name>pData</name><operator>-&gt;</operator><name>defMinRows</name></name><operator>)</operator> <operator>/</operator> <name>numOfBuckets</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>st</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%04d |"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>defMinRows</name></name> <operator>+</operator> <name>bucketRange</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>factor</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>x</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>st</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">100.0</literal> <operator>/</operator> <name><name>pData</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>st</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"  %d (%.2f%c)"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>row</name><operator>++</operator></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getDerivativeFuncEnv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SFunctionNode</name></name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SDerivInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>derivativeFuncSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>  <comment type="line">// not initialized since it has been initialized</comment>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDerivInfo</name><modifier>*</modifier></type> <name>pDerivInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>tsWindow</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>valueSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>derivativeFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDerivInfo</name><modifier>*</modifier></type>          <name>pDerivInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>          <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTsOutput</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pTsOutput</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>  <name>tsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>d</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pInputCol</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>numOfElems</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pDerivInfo</name><operator>-&gt;</operator><name>valueSet</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// initial value is not set yet</comment>
        <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>valueSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevTs</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name>v</name> <operator>-</operator> <name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevValue</name></name><operator>)</operator> <operator>*</operator> <name><name>pDerivInfo</name><operator>-&gt;</operator><name>tsWindow</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevTs</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>pTsOutput</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppendInt64</name><argument_list>(<argument><expr><name>pTsOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="line">// handle selectivity</comment>
          <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevValue</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>d</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pInputCol</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>numOfElems</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pDerivInfo</name><operator>-&gt;</operator><name>valueSet</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// initial value is not set yet</comment>
        <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>valueSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevTs</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevValue</name></name> <operator>-</operator> <name>v</name><operator>)</operator> <operator>*</operator> <name><name>pDerivInfo</name><operator>-&gt;</operator><name>tsWindow</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>-</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>ignoreNegative</name></name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>pTsOutput</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppendInt64</name><argument_list>(<argument><expr><name>pTsOutput</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="line">// handle selectivity</comment>
          <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>subsidiaries</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>appendSelectivityValue</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevValue</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDerivInfo</name><operator>-&gt;</operator><name>prevTs</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <name>numOfElems</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>getIrateFuncEnv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SFunctionNode</name></name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name><modifier>*</modifier></type> <name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRateInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>irateFuncSetup</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>  <comment type="line">// not initialized since it has been initialized</comment>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRateInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>firstKey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>firstValue</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastValue</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MIN</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>irateFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRateInfo</name><modifier>*</modifier></type>           <name>pRateInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pOutput</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pOutput</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>tsList</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>INT64_MIN</name> <operator>==</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pRateInfo</name><operator>-&gt;</operator><name>lastValue</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>INT64_MIN</name> <operator>==</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name><operator>)</operator> <operator>||</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>&gt;</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pRateInfo</name><operator>-&gt;</operator><name>firstValue</name></name> <operator>=</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>lastValue</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name> <operator>=</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pRateInfo</name><operator>-&gt;</operator><name>lastValue</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>INT64_MIN</name> <operator>==</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name><operator>)</operator> <operator>||</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pRateInfo</name><operator>-&gt;</operator><name>firstValue</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name> <operator>=</operator> <name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tsList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FUNC_DUP_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>doCalcRate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRateInfo</name><modifier>*</modifier></type> <name>pRateInfo</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>tickPerSec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>INT64_MIN</name> <operator>==</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>INT64_MIN</name> <operator>==</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name> <operator>&gt;=</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0.0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// If the previous value of the last is greater than the last value, only keep the last point instead of the delta</comment>
  <comment type="line">// value between two values.</comment>
  <expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>lastValue</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>firstValue</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>diff</name> <operator>-=</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>firstValue</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><name><name>pRateInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>-</operator> <name><name>pRateInfo</name><operator>-&gt;</operator><name>firstKey</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>duration</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name>duration</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>diff</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>duration</name> <operator>/</operator> <name>tickPerSec</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>irateFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRateInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>     <name>result</name> <init>= <expr><call><name>doCalcRate</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>param</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>param</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>isNullRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>groupKeyFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGroupKeyInfo</name><modifier>*</modifier></type>       <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>startIndex</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// escape rest of data blocks to avoid first entry to be overwritten.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_group_key_over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>startIndex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <goto>goto <name>_group_key_over</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>startIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
           <argument><expr><ternary><condition><expr><operator>(</operator><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>_group_key_over</name>:</label>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>groupKeyFinalize</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>slotId</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pExpr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>resSchema</name><operator>.</operator><name>slotId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SGroupKeyInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasResult</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>currentRow</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>currentRow</name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>currentRow</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pInfo</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cachedLastRowFunction</name><parameter_list>(<parameter><decl><type><name>SqlFunctionCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfElems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SResultRowEntryInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>       <name>pInfo</name> <init>= <expr><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name><modifier>*</modifier></type> <name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type>      <name>pInputCol</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pInputCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

  <comment type="line">// last_row function does not ignore the null value</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>numOfElems</name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type>  <name>isNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><ternary><condition><expr><name>isNull</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pInputCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TSKEY</name></type> <name>cts</name> <init>= <expr><call><name>getRowPTs</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pPTS</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name>cts</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doSaveLastrow</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cts</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>SET_VAL</name><argument_list>(<argument><expr><name>pResInfo</name></expr></argument>, <argument><expr><name>numOfElems</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
