<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/src/tudf.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtinsimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fnLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"querynodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tudf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tudfInt.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SUdfdData</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type>         <name>startCalled</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>         <name>needCleanUp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_loop_t</name></type>    <name>loop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_thread_t</name></type>  <name>thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_barrier_t</name></type> <name>barrier</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_process_t</name></type> <name>process</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>jobHandle</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type>        <name>spawnErr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_pipe_t</name></type>  <name>ctrlPipe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_async_t</name></type> <name>stopAsync</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>stopCalled</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdfdData</name>;</typedef>

<decl_stmt><decl><type><name>SUdfdData</name></type> <name>udfdGlobal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int32_t</name></type> <name>udfStartUdfd</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>startDnodeId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>udfStopUdfd</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfSpawnUdfd</name><parameter_list>(<parameter><decl><type><name>SUdfdData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>           <name>udfUdfdExit</name><parameter_list>(<parameter><decl><type><name>uv_process_t</name> <modifier>*</modifier></type><name>process</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>exitStatus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>termSignal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfSpawnUdfd</name><parameter_list>(<parameter><decl><type><name>SUdfdData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfUdfdCloseWalkCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfUdfdStopAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfWatchUdfd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>udfUdfdExit</name><parameter_list>(<parameter><decl><type><name>uv_process_t</name> <modifier>*</modifier></type><name>process</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>exitStatus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>termSignal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd process exited with status %"</literal> <name>PRId64</name> <literal type="string">", signal %d"</literal></expr></argument>, <argument><expr><name>exitStatus</name></expr></argument>, <argument><expr><name>termSignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfdData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name><name>process</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>exitStatus</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>termSignal</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>stopCalled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd process exit due to SIGINT or dnode-mgmt called stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd process restart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>udfSpawnUdfd</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfSpawnUdfd</name><parameter_list>(<parameter><decl><type><name>SUdfdData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"start to init udfd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uv_process_options_t</name></type> <name>options</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsProcPath</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosDirName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>pathSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>_NSGetExecutablePath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pathSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosDirName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>tsProcPath</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosDirName</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"C:\\TDengine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"\\udfd.exe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/usr/bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/udfd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argsUdfd</name><index>[]</index></name> <init>= <expr><block>{<expr><name>path</name></expr>, <expr><literal type="string">"-c"</literal></expr>, <expr><name>configDir</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>options</name><operator>.</operator><name>args</name></name> <operator>=</operator> <name>argsUdfd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>options</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>options</name><operator>.</operator><name>exit_cb</name></name> <operator>=</operator> <name>udfUdfdExit</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>ctrlPipe</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uv_stdio_container_t</name></type> <name><name>child_stdio</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>child_stdio</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>UV_CREATE_PIPE</name> <operator>|</operator> <name>UV_READABLE_PIPE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child_stdio</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>ctrlPipe</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child_stdio</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>UV_IGNORE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child_stdio</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>UV_INHERIT_FD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child_stdio</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>options</name><operator>.</operator><name>stdio_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>options</name><operator>.</operator><name>stdio</name></name> <operator>=</operator> <name>child_stdio</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>UV_PROCESS_DETACHED</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>dnodeIdEnvItem</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>thrdPoolSizeEnvItem</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dnodeIdEnvItem</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%s=%d"</literal></expr></argument>, <argument><expr><literal type="string">"DNODE_ID"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>float</name></type> <name>numCpuCores</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosGetCpuCores</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numCpuCores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>thrdPoolSizeEnvItem</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%s=%d"</literal></expr></argument>, <argument><expr><literal type="string">"UV_THREADPOOL_SIZE"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>numCpuCores</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>   <name><name>pathTaosdLdLib</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>taosdLdLibPathLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathTaosdLdLib</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>uv_os_getenv</name><argument_list>(<argument><expr><literal type="string">"LD_LIBRARY_PATH"</literal></expr></argument>, <argument><expr><name>pathTaosdLdLib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taosdLdLibPathLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>UV_ENOBUFS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>taosdLdLibPathLen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pathTaosdLdLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>   <name><name>udfdPathLdLib</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>udfdLdLibPathLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tsUdfdLdLibPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>udfdPathLdLib</name></expr></argument>, <argument><expr><name>tsUdfdLdLibPath</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>udfdPathLdLib</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>udfdPathLdLib</name><index>[<expr><name>udfdLdLibPathLen</name></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>udfdPathLdLib</name> <operator>+</operator> <name>udfdLdLibPathLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pathTaosdLdLib</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>udfdPathLdLib</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>udfdLdLibPathLen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>udfdLdLibPathLen</name> <operator>+</operator> <name>taosdLdLibPathLen</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd LD_LIBRARY_PATH: %s"</literal></expr></argument>, <argument><expr><name>udfdPathLdLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"can not set correct udfd LD_LIBRARY_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>ldLibPathEnvItem</name><index>[<expr><literal type="number">1024</literal> <operator>+</operator> <literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ldLibPathEnvItem</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><literal type="string">"LD_LIBRARY_PATH"</literal></expr></argument>, <argument><expr><name>udfdPathLdLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>envUdfd</name><index>[]</index></name> <init>= <expr><block>{<expr><name>dnodeIdEnvItem</name></expr>, <expr><name>thrdPoolSizeEnvItem</name></expr>, <expr><name>ldLibPathEnvItem</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>options</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name>envUdfd</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>uv_spawn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>process</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>process</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <comment type="line">// End udfd.exe by Job.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>jobHandle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>jobHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>jobHandle</name></name> <operator>=</operator> <call><name>CreateJobObject</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>add_job_ok</name> <init>= <expr><call><name>AssignProcessToJobObject</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>jobHandle</name></name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>process</name><operator>.</operator><name>process_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>add_job_ok</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"Assign udfd to job failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>JOBOBJECT_EXTENDED_LIMIT_INFORMATION</name></type> <name>limit_info</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>limit_info</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>limit_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>limit_info</name><operator>.</operator><name>BasicLimitInformation</name><operator>.</operator><name>LimitFlags</name></name> <operator>=</operator> <name>JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>set_auto_kill_ok</name> <init>=
        <expr><call><name>SetInformationJobObject</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>jobHandle</name></name></expr></argument>, <argument><expr><name>JobObjectExtendedLimitInformation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>limit_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>set_auto_kill_ok</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"Set job auto kill udfd failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"can not spawn udfd. path: %s, error: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd is initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>udfUdfdCloseWalkCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>udfUdfdStopAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfdData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>udfWatchUdfd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfdData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>args</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_async_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>stopAsync</name></name></expr></argument>, <argument><expr><name>udfUdfdStopAsyncCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>stopAsync</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>udfSpawnUdfd</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>spawnErr</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_walk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>udfUdfdCloseWalkCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfStartUdfd</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>startDnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tsStartUdfd</name></expr>)</condition> <block>{<block_content>
    <macro><name>fnInfo</name><argument_list>(<argument><literal type="string">"start udfd is disabled."</literal></argument>)</argument_list></macro> <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SUdfdData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>&amp;</operator><name>udfdGlobal</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>startCalled</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"dnode start udfd already called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>startCalled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dnodeId</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dnodeId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dnodeId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>startDnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_os_setenv</name><argument_list>(<argument><expr><literal type="string">"DNODE_ID"</literal></expr></argument>, <argument><expr><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name>startDnodeId</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_barrier_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>udfWatchUdfd</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>spawnErr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_barrier_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_async_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>stopAsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_thread_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>needCleanUp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd is cleaned up after spawn err"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>needCleanUp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfStopUdfd</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfdData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>&amp;</operator><name>udfdGlobal</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd start to stop, need cleanup:%d, spawn err:%d"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>needCleanUp</name></name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>spawnErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pData</name><operator>-&gt;</operator><name>needCleanUp</name></name> <operator>||</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>stopCalled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>stopCalled</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>needCleanUp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_barrier_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>barrier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_async_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>stopAsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_thread_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>jobHandle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>jobHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd is cleaned up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">//==============================================================================================</comment>
<comment type="block">/* Copyright (c) 2013, Ben Noordhuis &lt;info@bnoordhuis.nl&gt;
 * The QUEUE is copied from queue.h under libuv
 * */</comment>

<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name><name>QUEUE</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>;</typedef>

<comment type="block">/* Private macros. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_NEXT</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(*(QUEUE **)&amp;((*(q))[0]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_PREV</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(*(QUEUE **)&amp;((*(q))[1]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_PREV_NEXT</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(QUEUE_NEXT(QUEUE_PREV(q)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_NEXT_PREV</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(QUEUE_PREV(QUEUE_NEXT(q)))</cpp:value></cpp:define>

<comment type="block">/* Public macros. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_DATA</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)((char *)(ptr)-offsetof(type, field)))</cpp:value></cpp:define>

<comment type="block">/* Important note: mutating the list while QUEUE_FOREACH is
 * iterating over its elements results in undefined behavior.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_FOREACH</name><parameter_list>(<parameter><type><name>q</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((q) = QUEUE_NEXT(h); (q) != (h); (q) = QUEUE_NEXT(q))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_EMPTY</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((const QUEUE *)(q) == (const QUEUE *)QUEUE_NEXT(q))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_HEAD</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(QUEUE_NEXT(q))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_INIT</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro>    \
  <cpp:value>do {                   \
    QUEUE_NEXT(q) = (q); \
    QUEUE_PREV(q) = (q); \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_ADD</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>                 \
  <cpp:value>do {                                  \
    QUEUE_PREV_NEXT(h) = QUEUE_NEXT(n); \
    QUEUE_NEXT_PREV(n) = QUEUE_PREV(h); \
    QUEUE_PREV(h) = QUEUE_PREV(n);      \
    QUEUE_PREV_NEXT(h) = (h);           \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_SPLIT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>q</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>       \
  <cpp:value>do {                             \
    QUEUE_PREV(n) = QUEUE_PREV(h); \
    QUEUE_PREV_NEXT(n) = (n);      \
    QUEUE_NEXT(n) = (q);           \
    QUEUE_PREV(h) = QUEUE_PREV(q); \
    QUEUE_PREV_NEXT(h) = (h);      \
    QUEUE_PREV(q) = (n);           \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_MOVE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>        \
  <cpp:value>do {                          \
    if (QUEUE_EMPTY(h))         \
      QUEUE_INIT(n);            \
    else {                      \
      QUEUE *q = QUEUE_HEAD(h); \
      QUEUE_SPLIT(h, q, n);     \
    }                           \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_INSERT_HEAD</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro>    \
  <cpp:value>do {                             \
    QUEUE_NEXT(q) = QUEUE_NEXT(h); \
    QUEUE_PREV(q) = (h);           \
    QUEUE_NEXT_PREV(q) = (q);      \
    QUEUE_NEXT(h) = (q);           \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_INSERT_TAIL</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro>    \
  <cpp:value>do {                             \
    QUEUE_NEXT(q) = (h);           \
    QUEUE_PREV(q) = QUEUE_PREV(h); \
    QUEUE_PREV_NEXT(q) = (q);      \
    QUEUE_PREV(h) = (q);           \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_REMOVE</name><parameter_list>(<parameter><type><name>q</name></type></parameter>)</parameter_list></cpp:macro>                 \
  <cpp:value>do {                                  \
    QUEUE_PREV_NEXT(q) = QUEUE_NEXT(q); \
    QUEUE_NEXT_PREV(q) = QUEUE_PREV(q); \
  } while (0)</cpp:value></cpp:define>

<enum>enum <block>{ <decl><name>UV_TASK_CONNECT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>UV_TASK_REQ_RSP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>UV_TASK_DISCONNECT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> }</block>;</enum>

<decl_stmt><decl><type><name>int64_t</name></type> <name>gUdfTaskSeqNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>SUdfcFuncStub</name> <block>{
  <decl_stmt><decl><type><name>char</name></type>           <name><name>udfName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>refCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>lastRefTime</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdfcFuncStub</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SUdfcProxy</name> <block>{
  <decl_stmt><decl><type><name>char</name></type>         <name><name>udfdPipeName</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <name>UDF_LISTEN_PIPE_NAME_LEN</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_barrier_t</name></type> <name>initBarrier</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_loop_t</name></type>   <name>uvLoop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_thread_t</name></type> <name>loopThread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_async_t</name></type>  <name>loopTaskAync</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_async_t</name></type> <name>loopStopAsync</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_mutex_t</name></type> <name>taskQueueMutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>     <name>udfcState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>QUEUE</name></type>      <name>taskQueue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>QUEUE</name></type>      <name>uvProcTaskQueue</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_mutex_t</name></type> <name>udfStubsMutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>    <modifier>*</modifier></type><name>udfStubs</name></decl>;</decl_stmt>  <comment type="line">// SUdfcFuncStub</comment>

  <decl_stmt><decl><type><name>uv_mutex_t</name></type> <name>udfcUvMutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>     <name>initialized</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdfcProxy</name>;</typedef>

<decl_stmt><decl><type><name>SUdfcProxy</name></type> <name>gUdfcProxy</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>SUdfcUvSession</name> <block>{
  <decl_stmt><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>udfc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>severHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_pipe_t</name>  <modifier>*</modifier></type><name>udfUvPipe</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type>  <name>outputType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>outputLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufSize</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>udfName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdfcUvSession</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SClientUvTaskNode</name> <block>{
  <decl_stmt><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>udfc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>      <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>errCode</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_pipe_t</name> <modifier>*</modifier></type><name>pipe</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>seqNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_buf_t</name></type> <name>reqBuf</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_sem_t</name></type> <name>taskSem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_buf_t</name></type> <name>rspBuf</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>QUEUE</name></type> <name>recvTaskQueue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>QUEUE</name></type> <name>procTaskQueue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>QUEUE</name></type> <name>connTaskQueue</name></decl>;</decl_stmt>
}</block></struct></type> <name>SClientUvTaskNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SClientUdfTask</name> <block>{
  <decl_stmt><decl><type><name>int8_t</name></type> <name>type</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SUdfcUvSession</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>errCode</name></decl>;</decl_stmt>

  <union>union <block>{
    <struct>struct <block>{
      <decl_stmt><decl><type><name>SUdfSetupRequest</name></type>  <name>req</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SUdfSetupResponse</name></type> <name>rsp</name></decl>;</decl_stmt>
    }</block> <decl><name>_setup</name></decl>;</struct>
    <struct>struct <block>{
      <decl_stmt><decl><type><name>SUdfCallRequest</name></type>  <name>req</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SUdfCallResponse</name></type> <name>rsp</name></decl>;</decl_stmt>
    }</block> <decl><name>_call</name></decl>;</struct>
    <struct>struct <block>{
      <decl_stmt><decl><type><name>SUdfTeardownRequest</name></type>  <name>req</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SUdfTeardownResponse</name></type> <name>rsp</name></decl>;</decl_stmt>
    }</block> <decl><name>_teardown</name></decl>;</struct>
  }</block>;</union>

}</block></struct></type> <name>SClientUdfTask</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SClientConnBuf</name> <block>{
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name></decl>;</decl_stmt>
}</block></struct></type> <name>SClientConnBuf</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SClientUvConn</name> <block>{
  <decl_stmt><decl><type><name>uv_pipe_t</name>      <modifier>*</modifier></type><name>pipe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>QUEUE</name></type>           <name>taskQueue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SClientConnBuf</name></type>  <name>readBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfcUvSession</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>
}</block></struct></type> <name>SClientUvConn</name>;</typedef>

<enum>enum <block>{
  <decl><name>UDFC_STATE_INITAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,  <comment type="line">// initial state</comment>
  <decl><name>UDFC_STATE_STARTNG</name></decl>,     <comment type="line">// starting after udfcOpen</comment>
  <decl><name>UDFC_STATE_READY</name></decl>,       <comment type="line">// started and begin to receive quests</comment>
  <decl><name>UDFC_STATE_STOPPING</name></decl>,    <comment type="line">// stopping after udfcClose</comment>
}</block>;</enum>

<function_decl><type><name>int32_t</name></type> <name>getUdfdPipeName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pipeName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>encodeUdfSetupRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfSetupRequest</name> <modifier>*</modifier></type><name>setup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>   <modifier>*</modifier></type><name>decodeUdfSetupRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfSetupRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>encodeUdfInterBuf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>   <modifier>*</modifier></type><name>decodeUdfInterBuf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>encodeUdfCallRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfCallRequest</name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>   <modifier>*</modifier></type><name>decodeUdfCallRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfCallRequest</name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>encodeUdfTeardownRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfTeardownRequest</name> <modifier>*</modifier></type><name>teardown</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>   <modifier>*</modifier></type><name>decodeUdfTeardownRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfTeardownRequest</name> <modifier>*</modifier></type><name>teardown</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>encodeUdfRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>   <modifier>*</modifier></type><name>decodeUdfRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>encodeUdfSetupResponse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfSetupResponse</name> <modifier>*</modifier></type><name>setupRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>   <modifier>*</modifier></type><name>decodeUdfSetupResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfSetupResponse</name> <modifier>*</modifier></type><name>setupRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>encodeUdfCallResponse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfCallResponse</name> <modifier>*</modifier></type><name>callRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>   <modifier>*</modifier></type><name>decodeUdfCallResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfCallResponse</name> <modifier>*</modifier></type><name>callRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>encodeUdfTeardownResponse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfTeardownResponse</name> <modifier>*</modifier></type><name>teardownRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>   <modifier>*</modifier></type><name>decodeUdfTeardownResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfTeardownResponse</name> <modifier>*</modifier></type><name>teardownResponse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>encodeUdfResponse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfResponse</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name>   <modifier>*</modifier></type><name>decodeUdfResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfResponse</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>freeUdfColumnData</name><parameter_list>(<parameter><decl><type><name>SUdfColumnData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>SUdfColumnMeta</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>freeUdfColumn</name><parameter_list>(<parameter><decl><type><name>SUdfColumn</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>freeUdfDataDataBlock</name><parameter_list>(<parameter><decl><type><name>SUdfDataBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>freeUdfInterBuf</name><parameter_list>(<parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>convertDataBlockToUdfDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>SUdfDataBlock</name> <modifier>*</modifier></type><name>udfBlock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>convertUdfColumnToDataBlock</name><parameter_list>(<parameter><decl><type><name>SUdfColumn</name> <modifier>*</modifier></type><name>udfCol</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>convertScalarParamToDataBlock</name><parameter_list>(<parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>convertDataBlockToScalarParm</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>getUdfdPipeName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pipeName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>dnodeId</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>dnodeIdSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>dnodeId</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>uv_os_getenv</name><argument_list>(<argument><expr><name>UDF_DNODE_ID_ENV_NAME</name></expr></argument>, <argument><expr><name>dnodeId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeIdSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"failed to get dnodeId from env since %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dnodeId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pipeName</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s.%x.%s"</literal></expr></argument>, <argument><expr><name>UDF_LISTEN_PIPE_NAME_PREFIX</name></expr></argument>, <argument><expr><call><name>MurmurHash3_32</name><argument_list>(<argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tsDataDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pipeName</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s/%s%s"</literal></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><name>UDF_LISTEN_PIPE_NAME_PREFIX</name></expr></argument>, <argument><expr><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"get dnodeId:%s from env, pipe path:%s"</literal></expr></argument>, <argument><expr><name>dnodeId</name></expr></argument>, <argument><expr><name>pipeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>encodeUdfSetupRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfSetupRequest</name> <modifier>*</modifier></type><name>setup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>setup</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decodeUdfSetupRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfSetupRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeBinaryTo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>encodeUdfInterBuf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>numOfResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>bufLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>bufLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decodeUdfInterBuf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>numOfResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>bufLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>bufLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>encodeUdfCallRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfCallRequest</name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>call</name><operator>-&gt;</operator><name>udfHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name> <operator>==</operator> <name>TSDB_UDF_CALL_SCALA_PROC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>tEncodeDataBlock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name> <operator>==</operator> <name>TSDB_UDF_CALL_AGG_INIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>call</name><operator>-&gt;</operator><name>initFirst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name> <operator>==</operator> <name>TSDB_UDF_CALL_AGG_PROC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>tEncodeDataBlock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name> <operator>==</operator> <name>TSDB_UDF_CALL_AGG_MERGE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name> <operator>==</operator> <name>TSDB_UDF_CALL_AGG_FIN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decodeUdfCallRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfCallRequest</name> <modifier>*</modifier></type><name>call</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>udfHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>callType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_UDF_CALL_SCALA_PROC</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tDecodeDataBlock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_INIT</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>initFirst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_PROC</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tDecodeDataBlock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_MERGE</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_FIN</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>encodeUdfTeardownRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfTeardownRequest</name> <modifier>*</modifier></type><name>teardown</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>teardown</name><operator>-&gt;</operator><name>udfHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decodeUdfTeardownRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfTeardownRequest</name> <modifier>*</modifier></type><name>teardown</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>teardown</name><operator>-&gt;</operator><name>udfHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>encodeUdfRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UDF_TASK_SETUP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfSetupRequest</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UDF_TASK_CALL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfCallRequest</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>call</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UDF_TASK_TEARDOWN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfTeardownRequest</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>teardown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decodeUdfRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UDF_TASK_SETUP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfSetupRequest</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>setup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UDF_TASK_CALL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfCallRequest</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>call</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UDF_TASK_TEARDOWN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfTeardownRequest</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>teardown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>encodeUdfSetupResponse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfSetupResponse</name> <modifier>*</modifier></type><name>setupRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>setupRsp</name><operator>-&gt;</operator><name>udfHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>setupRsp</name><operator>-&gt;</operator><name>outputType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>setupRsp</name><operator>-&gt;</operator><name>outputLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>setupRsp</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decodeUdfSetupResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfSetupResponse</name> <modifier>*</modifier></type><name>setupRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>setupRsp</name><operator>-&gt;</operator><name>udfHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>setupRsp</name><operator>-&gt;</operator><name>outputType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>setupRsp</name><operator>-&gt;</operator><name>outputLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>setupRsp</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>encodeUdfCallResponse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfCallResponse</name> <modifier>*</modifier></type><name>callRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>callRsp</name><operator>-&gt;</operator><name>callType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>callRsp</name><operator>-&gt;</operator><name>callType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_UDF_CALL_SCALA_PROC</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>tEncodeDataBlock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_INIT</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_PROC</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_MERGE</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_FIN</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decodeUdfCallResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfCallResponse</name> <modifier>*</modifier></type><name>callRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>callType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>callRsp</name><operator>-&gt;</operator><name>callType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_UDF_CALL_SCALA_PROC</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tDecodeDataBlock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_INIT</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_PROC</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_MERGE</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_FIN</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfInterBuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>callRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>encodeUdfTeardownResponse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfTeardownResponse</name> <modifier>*</modifier></type><name>teardownRsp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decodeUdfTeardownResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfTeardownResponse</name> <modifier>*</modifier></type><name>teardownResponse</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>encodeUdfResponse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SUdfResponse</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>seqNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>UDF_TASK_SETUP</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfSetupResponse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>setupRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>UDF_TASK_CALL</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfCallResponse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>callRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>UDF_TASK_TEARDOWN</name></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>encodeUdfTeardownResponse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>teardownRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"encode udf response, invalid udf response type %d"</literal></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>decodeUdfResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUdfResponse</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>UDF_TASK_SETUP</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfSetupResponse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>setupRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>UDF_TASK_CALL</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfCallResponse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>callRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>UDF_TASK_TEARDOWN</name></expr>:</case>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decodeUdfTeardownResponse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>teardownRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"decode udf response, invalid udf response type %d"</literal></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>freeUdfColumnData</name><parameter_list>(<parameter><decl><type><name>SUdfColumnData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>SUdfColumnMeta</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>varOffsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>varOffsets</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>payload</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>freeUdfColumn</name><parameter_list>(<parameter><decl><type><name>SUdfColumn</name> <modifier>*</modifier></type><name>col</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>freeUdfColumnData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>colData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>colMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>freeUdfDataDataBlock</name><parameter_list>(<parameter><decl><type><name>SUdfDataBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>freeUdfColumn</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>udfCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>udfCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>udfCols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>udfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>udfCols</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>freeUdfInterBuf</name><parameter_list>(<parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>convertDataBlockToUdfDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>SUdfDataBlock</name> <modifier>*</modifier></type><name>udfBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>udfBlock</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udfBlock</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udfBlock</name><operator>-&gt;</operator><name>udfCols</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfColumn</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>udfBlock</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>udfBlock</name><operator>-&gt;</operator><name>udfCols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SUdfColumn</name>      <modifier>*</modifier></type><name>udfCol</name> <init>= <expr><name><name>udfBlock</name><operator>-&gt;</operator><name>udfCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colMeta</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colMeta</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colMeta</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>scale</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colMeta</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>udfBlock</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>hasNull</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colMeta</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>varOffsetsLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>udfBlock</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>varOffsets</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>varOffsetsLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>varOffsets</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>varOffsetsLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>payloadLen</name></name> <operator>=</operator> <call><name>colDataGetLength</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>udfBlock</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>payload</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>payloadLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>payload</name></name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>varLenCol</name><operator>.</operator><name>payloadLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmapLen</name></name> <operator>=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>bitmapLen</name> <init>= <expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmapLen</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmap</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmapLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmap</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>bitmapLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>dataLen</name></name> <operator>=</operator> <call><name>colDataGetLength</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>udfBlock</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>dataLen</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>fixLenCol</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>col</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>convertUdfColumnToDataBlock</name><parameter_list>(<parameter><decl><type><name>SUdfColumn</name> <modifier>*</modifier></type><name>udfCol</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>udfCol</name><operator>-&gt;</operator><name>colData</name><operator>.</operator><name>numOfRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name> <operator>=</operator> <call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>udfCol</name><operator>-&gt;</operator><name>colMeta</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfColumnMeta</name>  <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>&amp;</operator><name><name>udfCol</name><operator>-&gt;</operator><name>colMeta</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>scale</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name><name>udfCol</name><operator>-&gt;</operator><name>hasNull</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfColumnData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>udfCol</name><operator>-&gt;</operator><name>colData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>nullbitmap</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmapLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmap</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>nullBitmapLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fixLenCol</name><operator>.</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>varOffsetsLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>varOffsets</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>varOffsetsLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>payloadLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>payload</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>varLenCol</name><operator>.</operator><name>payloadLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>convertScalarParamToDataBlock</name><parameter_list>(<parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>(</operator><name>input</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name>columnData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><operator>(</operator><name>input</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>-&gt;</operator><name><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>convertDataBlockToScalarParm</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"scalar function only support one column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>input</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>colAlloced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// memory layout |---SUdfAggRes----|-----final result-----|---inter result----|</comment>
<typedef>typedef <type><struct>struct <name>SUdfAggRes</name> <block>{
  <decl_stmt><decl><type><name>int8_t</name></type> <name>finalResNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>interResNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>finalResBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>interResBuf</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdfAggRes</name>;</typedef>
<function_decl><type><name>void</name></type>    <name>onUdfcPipeClose</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>udfcGetUdfTaskResultFromUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUdfTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>udfcAllocateBuffer</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggestedSize</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type>    <name>isUdfcUvMsgComplete</name><parameter_list>(<parameter><decl><type><name>SClientConnBuf</name> <modifier>*</modifier></type><name>connBuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>udfcUvHandleRsp</name><parameter_list>(<parameter><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>udfcUvHandleError</name><parameter_list>(<parameter><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>onUdfcPipeRead</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>onUdfcPipeWrite</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>onUdfcPipeConnect</name><parameter_list>(<parameter><decl><type><name>uv_connect_t</name> <modifier>*</modifier></type><name>connect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>udfcInitializeUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUdfTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>uvTaskType</name></decl></parameter>, <parameter><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>udfcQueueUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>udfcStartUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>udfcAsyncTaskCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>cleanUpUvTasks</name><parameter_list>(<parameter><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>udfc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>udfStopAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>constructUdfService</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argsThread</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>udfcRunUdfUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUdfTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>uvTaskType</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>doSetupUdf</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>udfName</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>UdfcFuncHandle</name> <modifier>*</modifier></type><name>funcHandle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>     <name>compareUdfcFuncSub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>doTeardownUdf</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int32_t</name></type> <name>callUdf</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>callType</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state2</name></decl></parameter>,
                <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>newState</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>doCallUdfAggInit</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>interBuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>doCallUdfAggProcess</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>newState</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>doCallUdfAggMerge</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>interBuf1</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>interBuf2</name></decl></parameter>,
                          <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>resultBuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>doCallUdfAggFinalize</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>interBuf</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>resultData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>doCallUdfScalarFunc</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>callUdfScalarFunc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int32_t</name></type> <name>udfcOpen</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>udfcClose</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>int32_t</name></type> <name>acquireUdfFuncHandle</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>, <parameter><decl><type><name>UdfcFuncHandle</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>    <name>releaseUdfFuncHandle</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>cleanUpUdfs</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type>    <name>udfAggGetEnv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SFunctionNode</name></name> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type>    <name>udfAggInit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SqlFunctionCtx</name></name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SResultRowEntryInfo</name></name> <modifier>*</modifier></type><name>pResultCellInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>udfAggProcess</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SqlFunctionCtx</name></name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>udfAggFinalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SqlFunctionCtx</name></name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>compareUdfcFuncSub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfcFuncStub</name> <modifier>*</modifier></type><name>stub1</name> <init>= <expr><operator>(</operator><name>SUdfcFuncStub</name> <operator>*</operator><operator>)</operator><name>elem1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfcFuncStub</name> <modifier>*</modifier></type><name>stub2</name> <init>= <expr><operator>(</operator><name>SUdfcFuncStub</name> <operator>*</operator><operator>)</operator><name>elem2</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>stub1</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name><name>stub2</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>acquireUdfFuncHandle</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>, <parameter><decl><type><name>UdfcFuncHandle</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfcFuncStub</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>stubIndex</name> <init>= <expr><call><name>taosArraySearchIdx</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>compareUdfcFuncSub</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>stubIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SUdfcFuncStub</name> <modifier>*</modifier></type><name>foundStub</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>, <argument><expr><name>stubIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name> <init>= <expr><name><name>foundStub</name><operator>-&gt;</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>SUdfcUvSession</name> <operator>*</operator><operator>)</operator><name>handle</name><operator>)</operator><operator>-&gt;</operator><name>udfUvPipe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pHandle</name> <operator>=</operator> <name><name>foundStub</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>foundStub</name><operator>-&gt;</operator><name>refCount</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>foundStub</name><operator>-&gt;</operator><name>lastRefTime</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"invalid handle for %s, refCount: %d, last ref time: %"</literal> <name>PRId64</name> <literal type="string">". remove it from cache"</literal></expr></argument>, <argument><expr><name>udfName</name></expr></argument>,
             <argument><expr><name><name>foundStub</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><name><name>foundStub</name><operator>-&gt;</operator><name>lastRefTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>, <argument><expr><name>stubIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pHandle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doSetupUdf</name><argument_list>(<argument><expr><name>udfName</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SUdfcFuncStub</name></type> <name>stub</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>stub</name><operator>.</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stub</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>*</operator><name>pHandle</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>stub</name><operator>.</operator><name>refCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stub</name><operator>.</operator><name>lastRefTime</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>, <argument><expr><name>compareUdfcFuncSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pHandle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>releaseUdfFuncHandle</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfcFuncStub</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfcFuncStub</name> <modifier>*</modifier></type><name>foundStub</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>compareUdfcFuncSub</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundStub</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>foundStub</name><operator>-&gt;</operator><name>refCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>--</operator><name><name>foundStub</name><operator>-&gt;</operator><name>refCount</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cleanUpUdfs</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>initialized</name> <init>= <expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>initialized</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>udfStubs</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfcFuncStub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SUdfcFuncStub</name> <modifier>*</modifier></type><name>stub</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>stub</name><operator>-&gt;</operator><name>refCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"tear down udf. udf name: %s, handle: %p, ref count: %d"</literal></expr></argument>, <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doTeardownUdf</name><argument_list>(<argument><expr><name><name>stub</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udf still in use. udf name: %s, ref count: %d, last ref time: %"</literal> <name>PRId64</name> <literal type="string">", handle: %p"</literal></expr></argument>, <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>,
             <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>lastRefTime</name></name></expr></argument>, <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name> <init>= <expr><name><name>stub</name><operator>-&gt;</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>SUdfcUvSession</name> <operator>*</operator><operator>)</operator><name>handle</name><operator>)</operator><operator>-&gt;</operator><name>udfUvPipe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>udfStubs</name></expr></argument>, <argument><expr><name>stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udf invalid handle for %s, refCount: %d, last ref time: %"</literal> <name>PRId64</name> <literal type="string">". remove it from cache"</literal></expr></argument>,
               <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><name><name>stub</name><operator>-&gt;</operator><name>lastRefTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubs</name></name> <operator>=</operator> <name>udfStubs</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>callUdfScalarFunc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><call><name>acquireUdfFuncHandle</name><argument_list>(<argument><expr><name>udfName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SUdfcUvSession</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name>handle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doCallUdfScalarFunc</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc scalar function calculate error. no column data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_UDF_INVALID_OUTPUT_TYPE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>outputType</name></name> <operator>!=</operator> <name><name>output</name><operator>-&gt;</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>||</operator> <name><name>session</name><operator>-&gt;</operator><name>outputLen</name></name> <operator>!=</operator> <name><name>output</name><operator>-&gt;</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc scalar function calculate error. type mismatch. session type: %d(%d), output type: %d(%d)"</literal></expr></argument>,
              <argument><expr><name><name>session</name><operator>-&gt;</operator><name>outputType</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>outputLen</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>columnData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_UDF_INVALID_OUTPUT_TYPE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>releaseUdfFuncHandle</name><argument_list>(<argument><expr><name>udfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>udfAggGetEnv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SFunctionNode</name></name> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFuncExecEnv</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsScalarFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>calcMemSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SUdfAggRes</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>bytes</name></name> <operator>+</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>udfBufSize</name></name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>udfAggInit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SqlFunctionCtx</name></name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SResultRowEntryInfo</name></name> <modifier>*</modifier></type><name>pResultCellInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>functionSetup</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResultCellInfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>udfCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>udfCode</name> <operator>=</operator> <call><name>acquireUdfFuncHandle</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfAggInit error. step doSetupUdf. udf code: %d"</literal></expr></argument>, <argument><expr><name>udfCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SUdfcUvSession</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><operator>(</operator><name>SUdfcUvSession</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfAggRes</name>     <modifier>*</modifier></type><name>udfRes</name> <init>= <expr><operator>(</operator><name>SUdfAggRes</name> <operator>*</operator><operator>)</operator><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><name>pResultCellInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>envSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfAggRes</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>session</name><operator>-&gt;</operator><name>outputLen</name></name> <operator>+</operator> <name><name>session</name><operator>-&gt;</operator><name>bufSize</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>udfRes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>envSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>udfRes</name><operator>-&gt;</operator><name>finalResBuf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>udfRes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SUdfAggRes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udfRes</name><operator>-&gt;</operator><name>interResBuf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>udfRes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SUdfAggRes</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>session</name><operator>-&gt;</operator><name>outputLen</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfInterBuf</name></type> <name>buf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>udfCode</name> <operator>=</operator> <call><name>doCallUdfAggInit</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfAggInit error. step doCallUdfAggInit. udf code: %d"</literal></expr></argument>, <argument><expr><name>udfCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseUdfFuncHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>udfRes</name><operator>-&gt;</operator><name>interResNum</name></name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>numOfResult</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>bufLen</name></name> <operator>&lt;=</operator> <name><name>session</name><operator>-&gt;</operator><name>bufSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>udfRes</name><operator>-&gt;</operator><name>interResBuf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>bufLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc inter buf size %d is greater than function bufSize %d"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>bufLen</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseUdfFuncHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>releaseUdfFuncHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfAggProcess</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SqlFunctionCtx</name></name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>udfCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>udfCode</name> <operator>=</operator> <call><name>acquireUdfFuncHandle</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfAggProcess  error. step acquireUdfFuncHandle. udf code: %d"</literal></expr></argument>, <argument><expr><name>udfCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>udfCode</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SUdfcUvSession</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name>handle</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfAggRes</name>     <modifier>*</modifier></type><name>udfRes</name> <init>= <expr><operator>(</operator><name>SUdfAggRes</name> <operator>*</operator><operator>)</operator><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>udfRes</name><operator>-&gt;</operator><name>finalResBuf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>udfRes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SUdfAggRes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udfRes</name><operator>-&gt;</operator><name>interResBuf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>udfRes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SUdfAggRes</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>session</name><operator>-&gt;</operator><name>outputLen</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SInputColumnInfoData</name> <modifier>*</modifier></type><name>pInput</name> <init>= <expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>numOfCols</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfInputCols</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>start</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>startRowIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>               <name>numOfRows</name> <init>= <expr><name><name>pInput</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pTempBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTempBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>totalRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTempBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pTempBlock</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>inputBlock</name> <init>= <expr><call><name>blockDataExtractBlock</name><argument_list>(<argument><expr><name>pTempBlock</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SUdfInterBuf</name></type> <name>state</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <name><name>udfRes</name><operator>-&gt;</operator><name>interResBuf</name></name></expr>, <expr><operator>.</operator><name>bufLen</name> <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>bufSize</name></name></expr>, <expr><operator>.</operator><name>numOfResult</name> <operator>=</operator> <name><name>udfRes</name><operator>-&gt;</operator><name>interResNum</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfInterBuf</name></type> <name>newState</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>udfCode</name> <operator>=</operator> <call><name>doCallUdfAggProcess</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>inputBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>udfCode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfAggProcess error. code: %d"</literal></expr></argument>, <argument><expr><name>udfCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newState</name><operator>.</operator><name>numOfResult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>udfRes</name><operator>-&gt;</operator><name>interResNum</name></name> <operator>=</operator> <name><name>newState</name><operator>.</operator><name>numOfResult</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>newState</name><operator>.</operator><name>bufLen</name></name> <operator>&lt;=</operator> <name><name>session</name><operator>-&gt;</operator><name>bufSize</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>udfRes</name><operator>-&gt;</operator><name>interResBuf</name></name></expr></argument>, <argument><expr><name><name>newState</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>newState</name><operator>.</operator><name>bufLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc inter buf size %d is greater than function bufSize %d"</literal></expr></argument>, <argument><expr><name><name>newState</name><operator>.</operator><name>bufLen</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>udfCode</name> <operator>=</operator> <name>TSDB_CODE_UDF_INVALID_BUFSIZE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>newState</name><operator>.</operator><name>numOfResult</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>state</name><operator>.</operator><name>numOfResult</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>numOfRes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>inputBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTempBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTempBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>releaseUdfFuncHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>udfCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfAggFinalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SqlFunctionCtx</name></name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>udfCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>udfCode</name> <operator>=</operator> <call><name>acquireUdfFuncHandle</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfAggProcess  error. step acquireUdfFuncHandle. udf code: %d"</literal></expr></argument>, <argument><expr><name>udfCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>udfCode</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SUdfcUvSession</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name>handle</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfAggRes</name>     <modifier>*</modifier></type><name>udfRes</name> <init>= <expr><operator>(</operator><name>SUdfAggRes</name> <operator>*</operator><operator>)</operator><call><name>GET_ROWCELL_INTERBUF</name><argument_list>(<argument><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>udfRes</name><operator>-&gt;</operator><name>finalResBuf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>udfRes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SUdfAggRes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udfRes</name><operator>-&gt;</operator><name>interResBuf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>udfRes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SUdfAggRes</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>session</name><operator>-&gt;</operator><name>outputLen</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfInterBuf</name></type> <name>resultBuf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfInterBuf</name></type> <name>state</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <name><name>udfRes</name><operator>-&gt;</operator><name>interResBuf</name></name></expr>, <expr><operator>.</operator><name>bufLen</name> <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>bufSize</name></name></expr>, <expr><operator>.</operator><name>numOfResult</name> <operator>=</operator> <name><name>udfRes</name><operator>-&gt;</operator><name>interResNum</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>udfCallCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>udfCallCode</name> <operator>=</operator> <call><name>doCallUdfAggFinalize</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resultBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>udfCallCode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfAggFinalize error. doCallUdfAggFinalize step. udf code:%d"</literal></expr></argument>, <argument><expr><name>udfCallCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>numOfRes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>resultBuf</name><operator>.</operator><name>bufLen</name></name> <operator>&lt;=</operator> <name><name>session</name><operator>-&gt;</operator><name>outputLen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>udfRes</name><operator>-&gt;</operator><name>finalResBuf</name></name></expr></argument>, <argument><expr><name><name>resultBuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>outputLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>udfRes</name><operator>-&gt;</operator><name>finalResNum</name></name> <operator>=</operator> <name><name>resultBuf</name><operator>.</operator><name>numOfResult</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>numOfRes</name> <operator>=</operator> <name><name>udfRes</name><operator>-&gt;</operator><name>finalResNum</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc inter buf size %d is greater than function output size %d"</literal></expr></argument>, <argument><expr><name><name>resultBuf</name><operator>.</operator><name>bufLen</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>outputLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GET_RES_INFO</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>numOfRes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>udfCallCode</name> <operator>=</operator> <name>TSDB_CODE_UDF_INVALID_OUTPUT_TYPE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resultBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfResults</name> <init>= <expr><call><name>functionFinalizeWithResultBuf</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>udfRes</name><operator>-&gt;</operator><name>finalResBuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>releaseUdfFuncHandle</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>udfCallCode</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>numOfResults</name></expr> </then><else>: <expr><name>udfCallCode</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>onUdfcPipeClose</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>QUEUE</name>             <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SClientUvTaskNode</name></expr></argument>, <argument><expr><name>connTaskQueue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>procTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfcUvMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfcUvMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><name>uv_pipe_t</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfcGetUdfTaskResultFromUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUdfTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udfc get uv task result. task: %p, uvTask: %p"</literal></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>uvTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>uvTask</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UV_TASK_REQ_RSP</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>uvTask</name><operator>-&gt;</operator><name>rspBuf</name><operator>.</operator><name>base</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SUdfResponse</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>decodeUdfResponse</name><argument_list>(<argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>rspBuf</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>rspBuf</name><operator>.</operator><name>len</name></name> <operator>==</operator> <call><name>POINTER_DISTANCE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>rspBuf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name><name>rsp</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>

      <switch>switch <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>UDF_TASK_SETUP</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>_setup</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name><name>rsp</name><operator>.</operator><name>setupRsp</name></name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>UDF_TASK_CALL</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>_call</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name><name>rsp</name><operator>.</operator><name>callRsp</name></name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>UDF_TASK_TEARDOWN</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>_teardown</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name><name>rsp</name><operator>.</operator><name>teardownRsp</name></name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <default>default:</default> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>

      <comment type="line">// TODO: the call buffer is setup and freed by udf invocation</comment>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>rspBuf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name><name>uvTask</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>uvTask</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UV_TASK_CONNECT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name><name>uvTask</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>uvTask</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UV_TASK_DISCONNECT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name><name>uvTask</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfcAllocateBuffer</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggestedSize</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientUvConn</name>  <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SClientConnBuf</name> <modifier>*</modifier></type><name>connBuf</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgHeadSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>msgHeadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>msgHeadSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc allocate buffer failure. size: %d"</literal></expr></argument>, <argument><expr><name>msgHeadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>connBuf</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>msgHeadSize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>msgHeadSize</name> <operator>-</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <ternary><condition><expr><name><name>connBuf</name><operator>-&gt;</operator><name>total</name></name> <operator>&gt;</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name></expr> ?</condition><then> <expr><name><name>connBuf</name><operator>-&gt;</operator><name>total</name></name></expr> </then><else>: <expr><name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name></expr></else></ternary></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>resultBuf</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>resultBuf</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>resultBuf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name> <operator>-</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc re-allocate buffer failure. size: %d"</literal></expr></argument>, <argument><expr><name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udfc uv alloc buffer: cap - len - total : %d - %d - %d"</literal></expr></argument>, <argument><expr><name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>, <argument><expr><name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>connBuf</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isUdfcUvMsgComplete</name><parameter_list>(<parameter><decl><type><name>SClientConnBuf</name> <modifier>*</modifier></type><name>connBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>connBuf</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name> <operator>&amp;&amp;</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udfc complete message is received, now handle it"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfcUvHandleRsp</name><parameter_list>(<parameter><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientConnBuf</name> <modifier>*</modifier></type><name>connBuf</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>seqNum</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="line">// msglen then seqnum</comment>

  <if_stmt><if>if <condition>(<expr><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc no task waiting on connection. response seqnum:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>seqNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>taskFound</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>QUEUE</name>             <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>QUEUE_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SClientUvTaskNode</name></expr></argument>, <argument><expr><name>connTaskQueue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>h</name> <operator>!=</operator> <operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>taskQueue</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udfc handle response iterate through queue. uvTask:%"</literal> <name>PRId64</name> <literal type="string">"-%p"</literal></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>==</operator> <name>seqNum</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>found</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>taskFound</name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc more than one task waiting for the same response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>QUEUE_NEXT</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SClientUvTaskNode</name></expr></argument>, <argument><expr><name>connTaskQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>taskFound</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>taskFound</name><operator>-&gt;</operator><name>rspBuf</name></name> <operator>=</operator> <call><name>uv_buf_init</name><argument_list>(<argument><expr><name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskFound</name><operator>-&gt;</operator><name>connTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskFound</name><operator>-&gt;</operator><name>procTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskFound</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"no task is waiting for the response."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfcUvHandleError</name><parameter_list>(<parameter><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"handle error on conn: %p, pipe: %p"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>QUEUE</name>             <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SClientUvTaskNode</name></expr></argument>, <argument><expr><name>connTaskQueue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_UDF_PIPE_READ_ERR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>connTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>procTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>onUdfcPipeClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>onUdfcPipeRead</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udfc client %p, client read from pipe. nread: %zd"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SClientUvConn</name>  <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SClientConnBuf</name> <modifier>*</modifier></type><name>connBuf</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>connBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isUdfcUvMsgComplete</name><argument_list>(<argument><expr><name>connBuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>udfcUvHandleRsp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc client pipe %p read error: %zd(%s)."</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <name>UV_EOF</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"\tudfc client pipe %p closed"</literal></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>udfcUvHandleError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>onUdfcPipeWrite</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>write</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc client connection %p write failed. status: %d(%s)"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>udfcUvHandleError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udfc client connection %p write succeed"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>onUdfcPipeConnect</name><parameter_list>(<parameter><decl><type><name>uv_connect_t</name> <modifier>*</modifier></type><name>connect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name> <init>= <expr><name><name>connect</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"client connect error, task seq: %"</literal> <name>PRId64</name> <literal type="string">", code: %s"</literal></expr></argument>, <argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>uvTask</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name><name>uvTask</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>udfcAllocateBuffer</name></expr></argument>, <argument><expr><name>onUdfcPipeRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>connect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>procTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfcInitializeUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUdfTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>uvTaskType</name></decl></parameter>, <parameter><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>uvTask</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>uvTaskType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uvTask</name><operator>-&gt;</operator><name>udfc</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>udfc</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>uvTaskType</name> <operator>==</operator> <name>UV_TASK_CONNECT</name></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uvTaskType</name> <operator>==</operator> <name>UV_TASK_REQ_RSP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>uvTask</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SUdfRequest</name></type> <name>request</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>request</name><operator>.</operator><name>seqNum</name></name> <operator>=</operator> <call><name>atomic_fetch_add_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gUdfTaskSeqNum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UDF_TASK_SETUP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>request</name><operator>.</operator><name>setup</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>_setup</name><operator>.</operator><name>req</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>UDF_TASK_SETUP</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UDF_TASK_CALL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>request</name><operator>.</operator><name>call</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>_call</name><operator>.</operator><name>req</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>UDF_TASK_CALL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UDF_TASK_TEARDOWN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>request</name><operator>.</operator><name>teardown</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>_teardown</name><operator>.</operator><name>req</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>request</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>UDF_TASK_TEARDOWN</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc create uv task, invalid task type : %d"</literal></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>encodeUdfRequest</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>request</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bufBegin</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>bufBegin</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>encodeUdfRequest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>uvTask</name><operator>-&gt;</operator><name>reqBuf</name></name> <operator>=</operator> <call><name>uv_buf_init</name><argument_list>(<argument><expr><name>bufBegin</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>uvTask</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>seqNum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uvTaskType</name> <operator>==</operator> <name>UV_TASK_DISCONNECT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>uvTask</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uv_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfcQueueUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"queue uv task to event loop, uvTask: %d-%p"</literal></expr></argument>, <argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>uvTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>udfc</name> <init>= <expr><name><name>uvTask</name><operator>-&gt;</operator><name>udfc</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>recvTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_async_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>loopTaskAync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfc uvTask finished. uvTask:%"</literal> <name>PRId64</name> <literal type="string">"-%d-%p"</literal></expr></argument>, <argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>, <argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>uvTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_sem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfcStartUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"event loop start uv task. uvTask: %"</literal> <name>PRId64</name> <literal type="string">"-%d-%p"</literal></expr></argument>, <argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>, <argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>uvTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>uvTask</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>UV_TASK_CONNECT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uv_pipe_t</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_pipe_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>, <argument><expr><name>pipe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>uvTask</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <name>pipe</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientUvConn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <name>pipe</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name><operator>.</operator><name>cap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name><operator>.</operator><name>total</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>uv_connect_t</name> <modifier>*</modifier></type><name>connReq</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_connect_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>connReq</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>uvTask</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uv_pipe_connect</name><argument_list>(<argument><expr><name>connReq</name></expr></argument>, <argument><expr><name>pipe</name></expr></argument>, <argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>udfc</name><operator>-&gt;</operator><name>udfdPipeName</name></name></expr></argument>, <argument><expr><name>onUdfcPipeConnect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>UV_TASK_REQ_RSP</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uv_pipe_t</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><name><name>uvTask</name><operator>-&gt;</operator><name>pipe</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pipe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_UDF_PIPE_NO_PIPE</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_write_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>write</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pipe</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>QUEUE</name> <modifier>*</modifier></type><name>connTaskQueue</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SClientUvConn</name> <operator>*</operator><operator>)</operator><name><name>pipe</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>taskQueue</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>QUEUE_INSERT_TAIL</name><argument_list>(<argument><expr><name>connTaskQueue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>connTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>uv_write</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name>pipe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>reqBuf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>onUdfcPipeWrite</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfc event loop start req_rsp task uv_write failed. uvtask: %p, code: %s"</literal></expr></argument>, <argument><expr><name>uvTask</name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>UV_TASK_DISCONNECT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>uv_pipe_t</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><name><name>uvTask</name><operator>-&gt;</operator><name>pipe</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pipe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_UDF_PIPE_NO_PIPE</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>pipe</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>QUEUE_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uvTask</name><operator>-&gt;</operator><name>connTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name><name>uvTask</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>onUdfcPipeClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <macro><name>fnError</name><argument_list>(<argument><literal type="string">"udfc event loop unknown task type."</literal></argument>)</argument_list></macro> <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfcAsyncTaskCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>udfc</name> <init>= <expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>QUEUE</name></type>       <name>wq</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_MOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>QUEUE</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SClientUvTaskNode</name></expr></argument>, <argument><expr><name>recvTaskQueue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><call><name>udfcStartUvTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QUEUE_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvProcTaskQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>procTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uv_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanUpUvTasks</name><parameter_list>(<parameter><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>udfc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <macro><name>fnDebug</name><argument_list>(<argument><literal type="string">"clean up uv tasks"</literal></argument>)</argument_list></macro> <decl_stmt><decl><type><name>QUEUE</name></type> <name>wq</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_MOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>QUEUE</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SClientUvTaskNode</name></expr></argument>, <argument><expr><name>recvTaskQueue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>udfc</name><operator>-&gt;</operator><name>udfcState</name></name> <operator>==</operator> <name>UDFC_STATE_STOPPING</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_UDF_STOPPING</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>uv_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvProcTaskQueue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>QUEUE</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvProcTaskQueue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SClientUvTaskNode</name></expr></argument>, <argument><expr><name>procTaskQueue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>udfc</name><operator>-&gt;</operator><name>udfcState</name></name> <operator>==</operator> <name>UDFC_STATE_STOPPING</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_UDF_STOPPING</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>uv_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>taskSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfStopAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>udfc</name> <init>= <expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanUpUvTasks</name><argument_list>(<argument><expr><name>udfc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>udfc</name><operator>-&gt;</operator><name>udfcState</name></name> <operator>==</operator> <name>UDFC_STATE_STOPPING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>constructUdfService</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argsThread</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>udfc</name> <init>= <expr><operator>(</operator><name>SUdfcProxy</name> <operator>*</operator><operator>)</operator><name>argsThread</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_async_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>loopTaskAync</name></name></expr></argument>, <argument><expr><name>udfcAsyncTaskCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udfc</name><operator>-&gt;</operator><name>loopTaskAync</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>udfc</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_async_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>loopStopAsync</name></name></expr></argument>, <argument><expr><name>udfStopAsyncCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udfc</name><operator>-&gt;</operator><name>loopStopAsync</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>udfc</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvProcTaskQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>initBarrier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO return value of uv_run</comment>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_walk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>, <argument><expr><name>udfUdfdCloseWalkCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>uvLoop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfcOpen</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>initialized</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><operator>&amp;</operator><name>gUdfcProxy</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getUdfdPipeName</name><argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>udfdPipeName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>proxy</name><operator>-&gt;</operator><name>udfdPipeName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>udfcState</name></name> <operator>=</operator> <name>UDFC_STATE_STARTNG</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_barrier_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>initBarrier</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>loopThread</name></name></expr></argument>, <argument><expr><name>constructUdfService</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>udfcState</name></name></expr></argument>, <argument><expr><name>UDFC_STATE_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>udfcState</name></name> <operator>=</operator> <name>UDFC_STATE_READY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_barrier_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>initBarrier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>udfStubs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfcFuncStub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proxy</name><operator>-&gt;</operator><name>udfcUvMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>fnInfo</name><argument_list>(<argument><literal type="string">"udfc initialized"</literal></argument>)</argument_list></macro> <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfcClose</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>initialized</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SUdfcProxy</name> <modifier>*</modifier></type><name>udfc</name> <init>= <expr><operator>&amp;</operator><name>gUdfcProxy</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>udfc</name><operator>-&gt;</operator><name>udfcState</name></name> <operator>=</operator> <name>UDFC_STATE_STOPPING</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_async_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>loopStopAsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_thread_join</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>loopThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>taskQueueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_barrier_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>initBarrier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>udfc</name><operator>-&gt;</operator><name>udfStubs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>udfStubsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfc</name><operator>-&gt;</operator><name>udfcUvMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udfc</name><operator>-&gt;</operator><name>udfcState</name></name> <operator>=</operator> <name>UDFC_STATE_INITAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfc is cleaned up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfcRunUdfUvTask</name><parameter_list>(<parameter><decl><type><name>SClientUdfTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>uvTaskType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientUvTaskNode</name> <modifier>*</modifier></type><name>uvTask</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientUvTaskNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udfc client task: %p created uvTask: %p. pipe: %p"</literal></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>uvTask</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>udfcInitializeUvTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>uvTaskType</name></expr></argument>, <argument><expr><name>uvTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>udfcQueueUvTask</name><argument_list>(<argument><expr><name>uvTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>udfcGetUdfTaskResultFromUvTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>uvTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>uvTaskType</name> <operator>==</operator> <name>UV_TASK_CONNECT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name></name> <operator>=</operator> <name><name>uvTask</name><operator>-&gt;</operator><name>pipe</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>uvTask</name><operator>-&gt;</operator><name>pipe</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>uvTask</name><operator>-&gt;</operator><name>reqBuf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uvTask</name><operator>-&gt;</operator><name>reqBuf</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>uvTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udfc freed uvTask: %p"</literal></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>uvTask</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doSetupUdf</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>udfName</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>UdfcFuncHandle</name> <modifier>*</modifier></type><name>funcHandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>gUdfcProxy</name><operator>.</operator><name>udfcState</name></name> <operator>!=</operator> <name>UDFC_STATE_READY</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_UDF_INVALID_STATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SClientUdfTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientUdfTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfcUvSession</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>udfc</name></name> <operator>=</operator> <operator>&amp;</operator><name>gUdfcProxy</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UDF_TASK_SETUP</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfSetupRequest</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>_setup</name><operator>.</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>errCode</name> <init>= <expr><call><name>udfcRunUdfUvTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>UV_TASK_CONNECT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>errCode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"failed to connect to pipe. udfName: %s, pipe: %s"</literal></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>&amp;</operator><name>gUdfcProxy</name><operator>)</operator><operator>-&gt;</operator><name>udfdPipeName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_UDF_PIPE_CONNECT_ERR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>udfcRunUdfUvTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>UV_TASK_REQ_RSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfSetupResponse</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>_setup</name><operator>.</operator><name>rsp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>severHandle</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>udfHandle</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>outputType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>outputLen</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>outputLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>bufSize</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>bufSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <macro><name>fnError</name><argument_list>(<argument><literal type="string">"failed to setup udf. udfname: %s, err: %d"</literal></argument>, <argument>udfName</argument>, <argument>task-&gt;errCode</argument>)</argument_list></macro>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"sucessfully setup udf func handle. udfName: %s, handle: %p"</literal></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>funcHandle</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>callUdf</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>callType</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state2</name></decl></parameter>,
                <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>newState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udfc call udf. callType: %d, funcHandle: %p"</literal></expr></argument>, <argument><expr><name>callType</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfcUvSession</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><operator>(</operator><name>SUdfcUvSession</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"No pipe to udfd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_UDF_PIPE_NO_PIPE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SClientUdfTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientUdfTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <operator>(</operator><name>SUdfcUvSession</name> <operator>*</operator><operator>)</operator><name>handle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UDF_TASK_CALL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfCallRequest</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>_call</name><operator>.</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>udfHandle</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>severHandle</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>callType</name></name> <operator>=</operator> <name>callType</name></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>callType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_INIT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>initFirst</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_PROC</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <operator>*</operator><name>input</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>interBuf</name></name> <operator>=</operator> <operator>*</operator><name>state</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_MERGE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>interBuf</name></name> <operator>=</operator> <operator>*</operator><name>state</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>interBuf2</name></name> <operator>=</operator> <operator>*</operator><name>state2</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_FIN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>interBuf</name></name> <operator>=</operator> <operator>*</operator><name>state</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_SCALA_PROC</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <operator>*</operator><name>input</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>udfcRunUdfUvTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>UV_TASK_REQ_RSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"call udf failure. err: %d"</literal></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SUdfCallResponse</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>_call</name><operator>.</operator><name>rsp</name></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>callType</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_UDF_CALL_AGG_INIT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>newState</name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_UDF_CALL_AGG_PROC</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>newState</name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_UDF_CALL_AGG_MERGE</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>newState</name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_UDF_CALL_AGG_FIN</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>newState</name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_UDF_CALL_SCALA_PROC</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>resultData</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt><empty_stmt>;</empty_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doCallUdfAggInit</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>interBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>callType</name> <init>= <expr><name>TSDB_UDF_CALL_AGG_INIT</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>callUdf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>callType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>interBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input: block, state</comment>
<comment type="line">// output: interbuf,</comment>
<function><type><name>int32_t</name></type> <name>doCallUdfAggProcess</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>newState</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>callType</name> <init>= <expr><name>TSDB_UDF_CALL_AGG_PROC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>callUdf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>callType</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>newState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input: interbuf1, interbuf2</comment>
<comment type="line">// output: resultBuf</comment>
<function><type><name>int32_t</name></type> <name>doCallUdfAggMerge</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>interBuf1</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>interBuf2</name></decl></parameter>,
                          <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>resultBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>callType</name> <init>= <expr><name>TSDB_UDF_CALL_AGG_MERGE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>callUdf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>callType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>interBuf1</name></expr></argument>, <argument><expr><name>interBuf2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>resultBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// input: interBuf</comment>
<comment type="line">// output: resultData</comment>
<function><type><name>int32_t</name></type> <name>doCallUdfAggFinalize</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>interBuf</name></decl></parameter>, <parameter><decl><type><name>SUdfInterBuf</name> <modifier>*</modifier></type><name>resultData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>callType</name> <init>= <expr><name>TSDB_UDF_CALL_AGG_FIN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>callUdf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>callType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>interBuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>resultData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doCallUdfScalarFunc</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SScalarParam</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>      <name>callType</name> <init>= <expr><name>TSDB_UDF_CALL_SCALA_PROC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name></type> <name>inputBlock</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>convertScalarParamToDataBlock</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name></type> <name>resultBlock</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>err</name> <init>= <expr><call><name>callUdf</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>callType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resultBlock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>convertDataBlockToScalarParm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resultBlock</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>resultBlock</name><operator>.</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>inputBlock</name><operator>.</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doTeardownUdf</name><parameter_list>(<parameter><decl><type><name>UdfcFuncHandle</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfcUvSession</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><operator>(</operator><name>SUdfcUvSession</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"tear down udf. pipe to udfd does not exist. udf name: %s"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_UDF_PIPE_NO_PIPE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SClientUdfTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientUdfTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>UDF_TASK_TEARDOWN</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfTeardownRequest</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>_teardown</name><operator>.</operator><name>req</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>udfHandle</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>severHandle</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>udfcRunUdfUvTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>UV_TASK_REQ_RSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>errCode</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>udfcRunUdfUvTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>UV_TASK_DISCONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"tear down udf. udf name: %s, udf func handle: %p"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO: synchronization refactor between libuv event loop and request thread</comment>
  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfcUvMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SClientUvConn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>session</name><operator>-&gt;</operator><name>udfUvPipe</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gUdfcProxy</name><operator>.</operator><name>udfcUvMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
</unit>
