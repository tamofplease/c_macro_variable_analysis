<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/src/udfd.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<comment type="line">// clang-format off</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fnLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tudf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tudfInt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdataformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmisce.h"</cpp:file></cpp:include>
<comment type="line">// clang-foramt on</comment>

<typedef>typedef <type><struct>struct <name>SUdfdContext</name> <block>{
  <decl_stmt><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type> <name>loop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_pipe_t</name></type>   <name>ctrlPipe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_signal_t</name></type> <name>intrSignal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>listenPipeName</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <name>UDF_LISTEN_PIPE_NAME_LEN</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_pipe_t</name></type>   <name>listeningPipe</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type>     <name>clientRpc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCorEpSet</name></type>  <name>mgmtEp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_mutex_t</name></type> <name>udfsMutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type> <name>udfsHash</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>residentFuncs</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>printVersion</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdfdContext</name>;</typedef>

<decl_stmt><decl><type><name>SUdfdContext</name></type> <name>global</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>SUdfdUvConn</name> <block>{
  <decl_stmt><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type>       <name>inputBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>inputLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>inputCap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>inputTotal</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdfdUvConn</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SUvUdfWork</name> <block>{
  <decl_stmt><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_buf_t</name></type>     <name>input</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_buf_t</name></type>     <name>output</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUvUdfWork</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>UDF_STATE_INIT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>UDF_STATE_LOADING</name></decl>, <decl><name>UDF_STATE_READY</name></decl>, <decl><name>UDF_STATE_UNLOADING</name></decl> }</block></enum></type> <name>EUdfState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SUdf</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>refCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EUdfState</name></type>  <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_cond_t</name></type>  <name>condReady</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>resident</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>name</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>funcType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>scriptType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>outputType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>outputLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufSize</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_lib_t</name></type> <name>lib</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TUdfScalarProcFunc</name></type> <name>scalarProcFunc</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TUdfAggStartFunc</name></type>   <name>aggStartFunc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TUdfAggProcessFunc</name></type> <name>aggProcFunc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TUdfAggFinishFunc</name></type>  <name>aggFinishFunc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TUdfAggMergeFunc</name></type>   <name>aggMergeFunc</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TUdfInitFunc</name></type>    <name>initFunc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TUdfDestroyFunc</name></type> <name>destroyFunc</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdf</name>;</typedef>

<comment type="line">// TODO: add private udf structure.</comment>
<typedef>typedef <type><struct>struct <name>SUdfcFuncHandle</name> <block>{
  <decl_stmt><decl><type><name>SUdf</name> <modifier>*</modifier></type><name>udf</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdfcFuncHandle</name>;</typedef>

<typedef>typedef <type><enum>enum <name>EUdfdRpcReqRspType</name> <block>{
  <decl><name>UDFD_RPC_MNODE_CONNECT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <decl><name>UDFD_RPC_RETRIVE_FUNC</name></decl>,
}</block></enum></type> <name>EUdfdRpcReqRspType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SUdfdRpcSendRecvInfo</name> <block>{
  <decl_stmt><decl><type><name>EUdfdRpcReqRspType</name></type> <name>rpcType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type>             <name>param</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_sem_t</name></type>           <name>resultSem</name></decl>;</decl_stmt>
}</block></struct></type> <name>SUdfdRpcSendRecvInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfdProcessRpcRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdFillUdfInfoFromMNode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientRpc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>, <parameter><decl><type><name>SUdf</name> <modifier>*</modifier></type><name>udf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdConnectToMnode</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdLoadUdf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>, <parameter><decl><type><name>SUdf</name> <modifier>*</modifier></type><name>udf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>udfdRpcRfp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>     <name>initEpSetFromCfg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>firstEp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>secondEp</name></decl></parameter>, <parameter><decl><type><name>SCorEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdOpenClientRpc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdCloseClientRpc</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdProcessSetupRequest</name><parameter_list>(<parameter><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>uvUdf</name></decl></parameter>, <parameter><decl><type><name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdProcessCallRequest</name><parameter_list>(<parameter><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>uvUdf</name></decl></parameter>, <parameter><decl><type><name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdProcessTeardownRequest</name><parameter_list>(<parameter><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>uvUdf</name></decl></parameter>, <parameter><decl><type><name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdProcessRequest</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdOnWrite</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdSendResponse</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdAllocBuffer</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggestedSize</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isUdfdUvMsgComplete</name><parameter_list>(<parameter><decl><type><name>SUdfdUvConn</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdHandleRequest</name><parameter_list>(<parameter><decl><type><name>SUdfdUvConn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdPipeCloseCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type> <name>udfdUvHandleError</name><parameter_list>(<parameter><decl><type><name>SUdfdUvConn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>udfdPipeCloseCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdPipeRead</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>udfdOnNewConnection</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfdIntrSignalHandler</name><parameter_list>(<parameter><decl><type><name>uv_signal_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>removeListeningPipe</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfdPrintVersion</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdParseArgs</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdInitLog</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfdCtrlAllocBufCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfdCtrlReadCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdUvInit</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfdCloseWalkCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdRun</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>udfdConnectMnodeThreadFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>udfdProcessRequest</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>uvUdf</name> <init>= <expr><operator>(</operator><name>SUvUdfWork</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfRequest</name></type> <name>request</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>decodeUdfRequest</name><argument_list>(<argument><expr><name><name>uvUdf</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>request</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>UDF_TASK_SETUP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>udfdProcessSetupRequest</name><argument_list>(<argument><expr><name>uvUdf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>UDF_TASK_CALL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>udfdProcessCallRequest</name><argument_list>(<argument><expr><name>uvUdf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>UDF_TASK_TEARDOWN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>udfdProcessTeardownRequest</name><argument_list>(<argument><expr><name>uvUdf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdProcessSetupRequest</name><parameter_list>(<parameter><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>uvUdf</name></decl></parameter>, <parameter><decl><type><name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: tracable id from client. connect, setup, call, teardown</comment>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"setup request. seq num: %"</literal> <name>PRId64</name> <literal type="string">", udf name: %s"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>setup</name><operator>.</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfSetupRequest</name> <modifier>*</modifier></type><name>setup</name> <init>= <expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>setup</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdf</name> <modifier>*</modifier></type>            <name>udf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>udfsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>udfInHash</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>udfsHash</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>setup</name><operator>.</operator><name>udfName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>setup</name><operator>.</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>udfInHash</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name><operator>(</operator><operator>*</operator><name>udfInHash</name><operator>)</operator><operator>-&gt;</operator><name>refCount</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>udf</name> <operator>=</operator> <operator>*</operator><name>udfInHash</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>udfsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SUdf</name> <modifier>*</modifier></type><name>udfNew</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>udfNew</name><operator>-&gt;</operator><name>refCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udfNew</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UDF_STATE_INIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfNew</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udfNew</name><operator>-&gt;</operator><name>condReady</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>udf</name> <operator>=</operator> <name>udfNew</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SUdf</name><modifier>*</modifier><modifier>*</modifier></type> <name>pUdf</name> <init>= <expr><operator>&amp;</operator><name>udf</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>udfsHash</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>setup</name><operator>.</operator><name>udfName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>request</name><operator>-&gt;</operator><name>setup</name><operator>.</operator><name>udfName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pUdf</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>udfsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>udf</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>UDF_STATE_INIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UDF_STATE_LOADING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>udfdLoadUdf</name><argument_list>(<argument><expr><name><name>setup</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>udf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>udf</name><operator>-&gt;</operator><name>initFunc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>udf</name><operator>-&gt;</operator><name>initFunc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>resident</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>residentFuncs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>funcName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>residentFuncs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>setup</name><operator>-&gt;</operator><name>udfName</name></name></expr></argument>, <argument><expr><name>funcName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>resident</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>UDF_STATE_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>condReady</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <while>while <condition>(<expr><name><name>udf</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>UDF_STATE_READY</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uv_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>condReady</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>SUdfcFuncHandle</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfcFuncHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>udf</name></name> <operator>=</operator> <name>udf</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfResponse</name></type> <name>rsp</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>seqNum</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>seqNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>setupRsp</name><operator>.</operator><name>udfHandle</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>handle</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>setupRsp</name><operator>.</operator><name>outputType</name></name> <operator>=</operator> <name><name>udf</name><operator>-&gt;</operator><name>outputType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>setupRsp</name><operator>.</operator><name>outputLen</name></name> <operator>=</operator> <name><name>udf</name><operator>-&gt;</operator><name>outputLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>setupRsp</name><operator>.</operator><name>bufSize</name></name> <operator>=</operator> <name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>encodeUdfResponse</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bufBegin</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>bufBegin</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>encodeUdfResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>uvUdf</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>uv_buf_init</name><argument_list>(<argument><expr><name>bufBegin</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>uvUdf</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdProcessCallRequest</name><parameter_list>(<parameter><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>uvUdf</name></decl></parameter>, <parameter><decl><type><name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfCallRequest</name> <modifier>*</modifier></type><name>call</name> <init>= <expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>call</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"call request. call type %d, handle: %"</literal> <name>PRIx64</name> <literal type="string">", seq num %"</literal> <name>PRId64</name></expr></argument> , <argument><expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name></expr></argument>, <argument><expr><name><name>call</name><operator>-&gt;</operator><name>udfHandle</name></name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfcFuncHandle</name> <modifier>*</modifier></type> <name>handle</name> <init>= <expr><operator>(</operator><name>SUdfcFuncHandle</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>call</name><operator>-&gt;</operator><name>udfHandle</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdf</name> <modifier>*</modifier></type>            <name>udf</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>udf</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfResponse</name></type>      <name>response</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfResponse</name> <modifier>*</modifier></type>    <name>rsp</name> <init>= <expr><operator>&amp;</operator><name>response</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfCallResponse</name> <modifier>*</modifier></type><name>subRsp</name> <init>= <expr><operator>&amp;</operator><name><name>rsp</name><operator>-&gt;</operator><name>callRsp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_UDF_CALL_SCALA_PROC</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUdfColumn</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SUdfDataBlock</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>convertDataBlockToUdfDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>udf</name><operator>-&gt;</operator><name>scalarProcFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeUdfDataDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>convertUdfColumnToDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>response</name><operator>.</operator><name>callRsp</name><operator>.</operator><name>resultData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeUdfColumn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_INIT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUdfInterBuf</name></type> <name>outBuf</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>bufLen</name> <operator>=</operator> <name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name></expr>, <expr><operator>.</operator><name>numOfResult</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>udf</name><operator>-&gt;</operator><name>aggStartFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subRsp</name><operator>-&gt;</operator><name>resultBuf</name></name> <operator>=</operator> <name>outBuf</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_PROC</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUdfDataBlock</name></type> <name>input</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>convertDataBlockToUdfDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SUdfInterBuf</name></type> <name>outBuf</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>bufLen</name> <operator>=</operator> <name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name></expr>, <expr><operator>.</operator><name>numOfResult</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>udf</name><operator>-&gt;</operator><name>aggProcFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeUdfDataDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subRsp</name><operator>-&gt;</operator><name>resultBuf</name></name> <operator>=</operator> <name>outBuf</name></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_MERGE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUdfInterBuf</name></type> <name>outBuf</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>bufLen</name> <operator>=</operator> <name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name></expr>, <expr><operator>.</operator><name>numOfResult</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>udf</name><operator>-&gt;</operator><name>aggMergeFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subRsp</name><operator>-&gt;</operator><name>resultBuf</name></name> <operator>=</operator> <name>outBuf</name></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_FIN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SUdfInterBuf</name></type> <name>outBuf</name> <init>= <expr><block>{<expr><operator>.</operator><name>buf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>bufLen</name> <operator>=</operator> <name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name></expr>, <expr><operator>.</operator><name>numOfResult</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name><name>udf</name><operator>-&gt;</operator><name>aggFinishFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>interBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subRsp</name><operator>-&gt;</operator><name>resultBuf</name></name> <operator>=</operator> <name>outBuf</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>seqNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subRsp</name><operator>-&gt;</operator><name>callType</name></name> <operator>=</operator> <name><name>call</name><operator>-&gt;</operator><name>callType</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>encodeUdfResponse</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bufBegin</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>bufBegin</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>encodeUdfResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uvUdf</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>uv_buf_init</name><argument_list>(<argument><expr><name>bufBegin</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>call</name><operator>-&gt;</operator><name>callType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_UDF_CALL_SCALA_PROC</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataFreeRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataFreeRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subRsp</name><operator>-&gt;</operator><name>resultData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_INIT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_PROC</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataFreeRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>call</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_MERGE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_UDF_CALL_AGG_FIN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>freeUdfInterBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subRsp</name><operator>-&gt;</operator><name>resultBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>uvUdf</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdProcessTeardownRequest</name><parameter_list>(<parameter><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>uvUdf</name></decl></parameter>, <parameter><decl><type><name>SUdfRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfTeardownRequest</name> <modifier>*</modifier></type><name>teardown</name> <init>= <expr><operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>teardown</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"teardown. seq number: %"</literal> <name>PRId64</name> <literal type="string">", handle:%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>seqNum</name></name></expr></argument>, <argument><expr><name><name>teardown</name><operator>-&gt;</operator><name>udfHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SUdfcFuncHandle</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>SUdfcFuncHandle</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>teardown</name><operator>-&gt;</operator><name>udfHandle</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdf</name> <modifier>*</modifier></type>           <name>udf</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>udf</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>unloadUdf</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>uv_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>udfsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>refCount</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>udf</name><operator>-&gt;</operator><name>refCount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>udf</name><operator>-&gt;</operator><name>resident</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>unloadUdf</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>udfsHash</name></name></expr></argument>, <argument><expr><name><name>udf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>udf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uv_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>udfsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>unloadUdf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>condReady</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>udf</name><operator>-&gt;</operator><name>destroyFunc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><name><name>udf</name><operator>-&gt;</operator><name>destroyFunc</name></name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>uv_dlclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>udf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfResponse</name></type>  <name>response</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUdfResponse</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><operator>&amp;</operator><name>response</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>seqNum</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>seqNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>encodeUdfResponse</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bufBegin</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>bufBegin</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>encodeUdfResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uvUdf</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>uv_buf_init</name><argument_list>(<argument><expr><name>bufBegin</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>uvUdf</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdProcessRpcRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfdRpcSendRecvInfo</name> <modifier>*</modifier></type><name>msgInfo</name> <init>= <expr><operator>(</operator><name>SUdfdRpcSendRecvInfo</name> <operator>*</operator><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pEpSet</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEpsetEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>updateEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>mgmtEp</name></name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd rpc error. code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>msgInfo</name><operator>-&gt;</operator><name>rpcType</name></name> <operator>==</operator> <name>UDFD_RPC_MNODE_CONNECT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SConnectRsp</name></type> <name>connectRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDeserializeSConnectRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int32_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>delta</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>now</name> <operator>-</operator> <name><name>connectRsp</name><operator>.</operator><name>svrTimestamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">900</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_TIME_UNSYNCED</name></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>
    
     
    <if_stmt><if>if <condition>(<expr><name><name>connectRsp</name><operator>.</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>connectRsp</name><operator>.</operator><name>dnodeNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isEpsetEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>connectRsp</name><operator>.</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>updateEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>mgmtEp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>connectRsp</name><operator>.</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>msgInfo</name><operator>-&gt;</operator><name>rpcType</name></name> <operator>==</operator> <name>UDFD_RPC_RETRIVE_FUNC</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRetrieveFuncRsp</name></type> <name>retrieveRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDeserializeSRetrieveFuncRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retrieveRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>retrieveRsp</name><operator>.</operator><name>pFuncInfos</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SFuncInfo</name> <modifier>*</modifier></type><name>pFuncInfo</name> <init>= <expr><operator>(</operator><name>SFuncInfo</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>retrieveRsp</name><operator>.</operator><name>pFuncInfos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SUdf</name> <modifier>*</modifier></type>     <name>udf</name> <init>= <expr><name><name>msgInfo</name><operator>-&gt;</operator><name>param</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>funcType</name></name> <operator>=</operator> <name><name>pFuncInfo</name><operator>-&gt;</operator><name>funcType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>scriptType</name></name> <operator>=</operator> <name><name>pFuncInfo</name><operator>-&gt;</operator><name>scriptType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name><name>pFuncInfo</name><operator>-&gt;</operator><name>outputType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>outputLen</name></name> <operator>=</operator> <name><name>pFuncInfo</name><operator>-&gt;</operator><name>outputLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>udf</name><operator>-&gt;</operator><name>bufSize</name></name> <operator>=</operator> <name><name>pFuncInfo</name><operator>-&gt;</operator><name>bufSize</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_AVAIL_DISK</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd create shared library failed since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s.dll"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><name><name>pFuncInfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/lib%s.so"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><name><name>pFuncInfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>file</name> <init>=
        <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_AUTO_DEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd write udf shared library: %s failed, error: %d %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>count</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>pFuncInfo</name><operator>-&gt;</operator><name>pCode</name></name></expr></argument>, <argument><expr><name><name>pFuncInfo</name><operator>-&gt;</operator><name>codeSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name><name>pFuncInfo</name><operator>-&gt;</operator><name>codeSize</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd write udf shared library failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>udf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSFuncInfo</name><argument_list>(<argument><expr><name>pFuncInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>retrieveRsp</name><operator>.</operator><name>pFuncInfos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_sem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgInfo</name><operator>-&gt;</operator><name>resultSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfdFillUdfInfoFromMNode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientRpc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>, <parameter><decl><type><name>SUdf</name> <modifier>*</modifier></type><name>udf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRetrieveFuncReq</name></type> <name>retrieveReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>retrieveReq</name><operator>.</operator><name>numOfFuncs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>retrieveReq</name><operator>.</operator><name>pFuncNames</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>retrieveReq</name><operator>.</operator><name>pFuncNames</name></name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSRetrieveFuncReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>retrieveReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type>  <name>pReq</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSRetrieveFuncReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retrieveReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>retrieveReq</name><operator>.</operator><name>pFuncNames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfdRpcSendRecvInfo</name> <modifier>*</modifier></type><name>msgInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfdRpcSendRecvInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>rpcType</name></name> <operator>=</operator> <name>UDFD_RPC_RETRIVE_FUNC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>udf</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgInfo</name><operator>-&gt;</operator><name>resultSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_RETRIEVE_FUNC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>msgInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcSendRequest</name><argument_list>(<argument><expr><name>clientRpc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgInfo</name><operator>-&gt;</operator><name>resultSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_sem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgInfo</name><operator>-&gt;</operator><name>resultSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfdConnectToMnode</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConnectReq</name></type> <name>connReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>connReq</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>CONN_TYPE__UDFD</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>connReq</name><operator>.</operator><name>app</name></name></expr></argument>, <argument><expr><literal type="string">"udfd"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>connReq</name><operator>.</operator><name>app</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>connReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>connReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>pass</name><index>[<expr><name>TSDB_PASSWORD_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosEncryptPass_c</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>TSDB_DEFAULT_PASS</name><operator>)</operator></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TSDB_DEFAULT_PASS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>connReq</name><operator>.</operator><name>passwd</name></name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>connReq</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>connReq</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>taosGetPId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>connReq</name><operator>.</operator><name>startTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSConnectReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>connReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type>  <name>pReq</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSConnectReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfdRpcSendRecvInfo</name> <modifier>*</modifier></type><name>msgInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfdRpcSendRecvInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>msgInfo</name><operator>-&gt;</operator><name>rpcType</name></name> <operator>=</operator> <name>UDFD_RPC_MNODE_CONNECT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgInfo</name><operator>-&gt;</operator><name>resultSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_CONNECT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>msgInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcSendRequest</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>clientRpc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_sem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgInfo</name><operator>-&gt;</operator><name>resultSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>msgInfo</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_sem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>msgInfo</name><operator>-&gt;</operator><name>resultSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfdLoadUdf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>udfName</name></decl></parameter>, <parameter><decl><type><name>SUdf</name> <modifier>*</modifier></type><name>udf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>udf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>udfdFillUdfInfoFromMNode</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>clientRpc</name></name></expr></argument>, <argument><expr><name><name>udf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>udf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"can not retrieve udf from mnode. udf name %s"</literal></expr></argument>, <argument><expr><name>udfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_UDF_LOAD_UDF_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>uv_dlopen</name><argument_list>(<argument><expr><name><name>udf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"can not load library %s. error: %s"</literal></expr></argument>, <argument><expr><name><name>udf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_UDF_LOAD_UDF_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>  <name><name>initFuncName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>initSuffix</name> <init>= <expr><literal type="string">"_init"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>initFuncName</name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>initFuncName</name></expr></argument>, <argument><expr><name>initSuffix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>initSuffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_dlsym</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>initFuncName</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>initFunc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>  <name><name>destroyFuncName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destroySuffix</name> <init>= <expr><literal type="string">"_destroy"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>destroyFuncName</name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>destroyFuncName</name></expr></argument>, <argument><expr><name>destroySuffix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destroySuffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_dlsym</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>destroyFuncName</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>destroyFunc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>udf</name><operator>-&gt;</operator><name>funcType</name></name> <operator>==</operator> <name>TSDB_FUNC_TYPE_SCALAR</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>processFuncName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>processFuncName</name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_dlsym</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>processFuncName</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>scalarProcFunc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>udf</name><operator>-&gt;</operator><name>funcType</name></name> <operator>==</operator> <name>TSDB_FUNC_TYPE_AGGREGATE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>processFuncName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>processFuncName</name></expr></argument>, <argument><expr><name>udfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_dlsym</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>processFuncName</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>aggProcFunc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type>  <name><name>startFuncName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>startSuffix</name> <init>= <expr><literal type="string">"_start"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>startFuncName</name></expr></argument>, <argument><expr><name>processFuncName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>startFuncName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>startFuncName</name></expr></argument>, <argument><expr><name>startSuffix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>startSuffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_dlsym</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>startFuncName</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>aggStartFunc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type>  <name><name>finishFuncName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>finishSuffix</name> <init>= <expr><literal type="string">"_finish"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>finishFuncName</name></expr></argument>, <argument><expr><name>processFuncName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>finishFuncName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>finishFuncName</name></expr></argument>, <argument><expr><name>finishSuffix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>finishSuffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_dlsym</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>finishFuncName</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>aggFinishFunc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>mergeFuncName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mergeSuffix</name> <init>= <expr><literal type="string">"_merge"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>mergeFuncName</name></expr></argument>, <argument><expr><name>processFuncName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mergeFuncName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>mergeFuncName</name></expr></argument>, <argument><expr><name>mergeSuffix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>mergeSuffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_dlsym</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>, <argument><expr><name>mergeFuncName</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>aggMergeFunc</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>udfdRpcRfp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_RPC_NETWORK_UNAVAIL</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_RPC_BROKEN_LINK</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name> <operator>||</operator>
      <name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_RESTORING</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_MNODE_NOT_FOUND</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_APP_IS_STARTING</name> <operator>||</operator>
      <name>code</name> <operator>==</operator> <name>TSDB_CODE_APP_IS_STOPPING</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_SCH_QUERY</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_MERGE_QUERY</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_FETCH</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_MERGE_FETCH</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt> 
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>initEpSetFromCfg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>firstEp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>secondEp</name></decl></parameter>, <parameter><decl><type><name>SCorEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// init mnode ip set</comment>
  <decl_stmt><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>mgmtEpSet</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pEpSet</name><operator>-&gt;</operator><name>epSet</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>inUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>firstEp</name> <operator>&amp;&amp;</operator> <name><name>firstEp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>firstEp</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>TSDB_EP_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><name>firstEp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>secondEp</name> <operator>&amp;&amp;</operator> <name><name>secondEp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>secondEp</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>TSDB_EP_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><name>secondEp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfdOpenClientRpc</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcInit</name></type> <name>rpcInit</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"UDFD"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <operator>(</operator><name>RpcCfp</name><operator>)</operator><name>udfdProcessRpcRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>TAOS_CONN_CLIENT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>idleTime</name></name> <operator>=</operator> <name>tsShellActivityTimer</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>TSDB_DEFAULT_USER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <operator>&amp;</operator><name>global</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>rfp</name></name> <operator>=</operator> <name>udfdRpcRfp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>compressSize</name></name> <operator>=</operator> <name>tsCompressMsgSize</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>global</name><operator>.</operator><name>clientRpc</name></name> <operator>=</operator> <call><name>rpcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>global</name><operator>.</operator><name>clientRpc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"failed to init dnode rpc client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfdCloseClientRpc</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd begin closing rpc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcClose</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>clientRpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd finish closing rpc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdOnWrite</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>work</name> <init>= <expr><operator>(</operator><name>SUvUdfWork</name> <operator>*</operator><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd send response error, length: %zu code: %s"</literal></expr></argument>, <argument><expr><name><name>work</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>work</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdSendResponse</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name> <modifier>*</modifier></type><name>work</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>udfWork</name> <init>= <expr><operator>(</operator><name>SUvUdfWork</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>work</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>write_req</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_write_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>write_req</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>udfWork</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_write</name><argument_list>(<argument><expr><name>write_req</name></expr></argument>, <argument><expr><name><name>udfWork</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>udfWork</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>udfdOnWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdAllocBuffer</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggestedSize</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfdUvConn</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>msgHeadSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>inputCap</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputBuf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>msgHeadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>inputBuf</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputCap</name></name> <operator>=</operator> <name>msgHeadSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputTotal</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputBuf</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputCap</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <macro><name>fnError</name><argument_list>(<argument><literal type="string">"udfd can not allocate enough memory"</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>inputTotal</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputLen</name></name> <operator>&lt;</operator> <name>msgHeadSize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputBuf</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>msgHeadSize</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputCap</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputTotal</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputCap</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputTotal</name></name></expr> </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>inputCap</name></name></expr></else></ternary></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>inputBuf</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputBuf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputCap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>inputBuf</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputBuf</name></name> <operator>=</operator> <name>inputBuf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputBuf</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputCap</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>inputLen</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <macro><name>fnError</name><argument_list>(<argument><literal type="string">"udfd can not allocate enough memory"</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isUdfdUvMsgComplete</name><parameter_list>(<parameter><decl><type><name>SUdfdUvConn</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pipe</name><operator>-&gt;</operator><name>inputTotal</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pipe</name><operator>-&gt;</operator><name>inputLen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pipe</name><operator>-&gt;</operator><name>inputTotal</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pipe</name><operator>-&gt;</operator><name>inputBuf</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pipe</name><operator>-&gt;</operator><name>inputLen</name></name> <operator>==</operator> <name><name>pipe</name><operator>-&gt;</operator><name>inputCap</name></name> <operator>&amp;&amp;</operator> <name><name>pipe</name><operator>-&gt;</operator><name>inputTotal</name></name> <operator>==</operator> <name><name>pipe</name><operator>-&gt;</operator><name>inputCap</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"receive request complete. length %d"</literal></expr></argument>, <argument><expr><name><name>pipe</name><operator>-&gt;</operator><name>inputLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdHandleRequest</name><parameter_list>(<parameter><decl><type><name>SUdfdUvConn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uv_work_t</name> <modifier>*</modifier></type> <name>work</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_work_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUvUdfWork</name> <modifier>*</modifier></type><name>udfWork</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUvUdfWork</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>udfWork</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>client</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udfWork</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>uv_buf_init</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>inputBuf</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>inputLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inputBuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inputLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inputCap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inputTotal</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>work</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>udfWork</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_queue_work</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><name>udfdProcessRequest</name></expr></argument>, <argument><expr><name>udfdSendResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdPipeCloseCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>pipe</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfdUvConn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>pipe</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>inputBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdPipeRead</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnDebug</name><argument_list>(<argument><expr><literal type="string">"udf read %zd bytes from client"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SUdfdUvConn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>client</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>inputLen</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isUdfdUvMsgComplete</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>udfdHandleRequest</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// log error or continue;</comment>
    </block_content>}</block></else></if_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"Receive error %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <name>UV_EOF</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO check more when close</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>udfdUvHandleError</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdOnNewConnection</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd new connection error. code: %s"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uv_pipe_t</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>uv_pipe_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_pipe_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>uv_accept</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SUdfdUvConn</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUdfdUvConn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputBuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inputCap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>, <argument><expr><name>udfdAllocBuffer</name></expr></argument>, <argument><expr><name>udfdPipeRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdIntrSignalHandler</name><parameter_list>(<parameter><decl><type><name>uv_signal_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd signal received: %d\n"</literal></expr></argument>, <argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uv_fs_t</name></type> <name>req</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_fs_unlink</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>global</name><operator>.</operator><name>listenPipeName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_signal_stop</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_stop</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdParseArgs</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>PATH_MAX</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"config file path overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'-c' requires a parameter, default is %s\n"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>global</name><operator>.</operator><name>printVersion</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>udfdPrintVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_ENTERPRISE</name></cpp:ifdef>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>releaseName</name> <init>= <expr><literal type="string">"enterprise"</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>releaseName</name> <init>= <expr><literal type="string">"community"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s version: %s compatible_version: %s\n"</literal></expr></argument>, <argument><expr><name>releaseName</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>compatible_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"gitinfo: %s\n"</literal></expr></argument>, <argument><expr><name>gitinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"buildInfo: %s\n"</literal></expr></argument>, <argument><expr><name>buildinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdInitLog</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>logName</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%slog"</literal></expr></argument>, <argument><expr><literal type="string">"udfd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosCreateLog</name><argument_list>(<argument><expr><name>logName</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdCtrlAllocBufCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>suggested_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>suggested_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdCtrlReadCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd ctrl pipe read error. %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_stop</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd ctrl pipe read %zu bytes"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>removeListeningPipe</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uv_fs_t</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>err</name> <init>= <expr><call><name>uv_fs_unlink</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>global</name><operator>.</operator><name>listenPipeName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_fs_req_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdUvInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_loop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>global</name><operator>.</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsStartUdfd</name></expr>)</condition> <block>{<block_content> <comment type="line">// udfd is started by taosd, which shall exit when taosd exit</comment>
    <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>ctrlPipe</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_pipe_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>ctrlPipe</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>ctrlPipe</name></name></expr></argument>, <argument><expr><name>udfdCtrlAllocBufCb</name></expr></argument>, <argument><expr><name>udfdCtrlReadCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>getUdfdPipeName</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>listenPipeName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>listenPipeName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>removeListeningPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>listeningPipe</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_signal_init</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>intrSignal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_signal_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>intrSignal</name></name></expr></argument>, <argument><expr><name>udfdIntrSignalHandler</name></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"bind to pipe %s"</literal></expr></argument>, <argument><expr><name><name>global</name><operator>.</operator><name>listenPipeName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>uv_pipe_bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>listeningPipe</name></name></expr></argument>, <argument><expr><name><name>global</name><operator>.</operator><name>listenPipeName</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"Bind error %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>removeListeningPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>listeningPipe</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>udfdOnNewConnection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"Listen error %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>removeListeningPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>udfdCloseWalkCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>udfdRun</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>global</name><operator>.</operator><name>udfsHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>udfsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"start udfd event loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd event loop stopped."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_walk</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><name>udfdCloseWalkCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>udfdConnectMnodeThreadFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>retryMnodeTimes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>retryMnodeTimes</name><operator>++</operator> <operator>&lt;=</operator> <name>TSDB_MAX_REPLICA</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_sleep</name><argument_list>(<argument><expr><literal type="number">100</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>retryMnodeTimes</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>udfdConnectToMnode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd can not connect to mnode, code: %s. retry"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"udfd can not connect to mnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfdInitResidentFuncs</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tsUdfdResFuncs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>global</name><operator>.</operator><name>residentFuncs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pSave</name> <init>= <expr><name>tsUdfdResFuncs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>token</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>pSave</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSave</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>func</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fnInfo</name><argument_list>(<argument><expr><literal type="string">"udfd add resident function %s"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>residentFuncs</name></name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfdDeinitResidentFuncs</name><parameter_list>()</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>residentFuncs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>funcName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>residentFuncs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SUdf</name><modifier>*</modifier><modifier>*</modifier></type> <name>udfInHash</name> <init>=  <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>udfsHash</name></name></expr></argument>, <argument><expr><name>funcName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>udfInHash</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SUdf</name><modifier>*</modifier></type> <name>udf</name> <init>= <expr><operator>*</operator><name>udfInHash</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>udf</name><operator>-&gt;</operator><name>destroyFunc</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>udf</name><operator>-&gt;</operator><name>destroyFunc</name></name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>uv_dlclose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>udf</name><operator>-&gt;</operator><name>lib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>udf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>udfsHash</name></name></expr></argument>, <argument><expr><name>funcName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>residentFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>udfdCleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>uv_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>udfsMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>global</name><operator>.</operator><name>udfsHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckSystemIsLittleEnd</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to start since on non-little-end machines\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>udfdParseArgs</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to start since parse args error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>global</name><operator>.</operator><name>printVersion</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>udfdPrintVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>udfdInitLog</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// ignore create log failed, because this error no matter</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to start since init log error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosInitCfg</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"failed to start since read config error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initEpSetFromCfg</name><argument_list>(<argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><name>tsSecond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>global</name><operator>.</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>udfdOpenClientRpc</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"open rpc connection to mnode failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>udfdUvInit</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fnError</name><argument_list>(<argument><expr><literal type="string">"uv init failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">5</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>udfdInitResidentFuncs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uv_thread_t</name></type> <name>mnodeConnectThread</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mnodeConnectThread</name></expr></argument>, <argument><expr><name>udfdConnectMnodeThreadFunc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>udfdRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>removeListeningPipe</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>udfdCloseClientRpc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>udfdDeinitResidentFuncs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>udfdCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
