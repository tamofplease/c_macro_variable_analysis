<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/src/functionMgt.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtinsimpl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgtInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tudf.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SFuncMgtService</name> <block>{
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pFuncNameHashTable</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFuncMgtService</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>SFuncMgtService</name></type> <name>gFunMgtService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type>    <name>functionHashTableInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>         <name>initFunctionCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doInitFunctionTable</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>gFunMgtService</name><operator>.</operator><name>pFuncNameHashTable</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><name>funcMgtBuiltinsNum</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>gFunMgtService</name><operator>.</operator><name>pFuncNameHashTable</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>initFunctionCode</name> <operator>=</operator> <name>TSDB_CODE_FAILED</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>funcMgtBuiltinsNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>gFunMgtService</name><operator>.</operator><name>pFuncNameHashTable</name></name></expr></argument>, <argument><expr><name><name>funcMgtBuiltins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
                                         <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>funcMgtBuiltins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>initFunctionCode</name> <operator>=</operator> <name>TSDB_CODE_FAILED</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isSpecificClassifyFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>classification</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>FUNC_MGT_AGG_FUNC</name> <operator>==</operator> <name>classification</name></expr>
               ?</condition><then> <expr><name>FUNC_AGGREGATE_UDF_ID</name> <operator>==</operator> <name>funcId</name></expr>
               </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>FUNC_MGT_SCALAR_FUNC</name> <operator>==</operator> <name>classification</name></expr> ?</condition><then> <expr><name>FUNC_SCALAR_UDF_ID</name> <operator>==</operator> <name>funcId</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>FUNC_MGT_TEST_MASK</name><argument_list>(<argument><expr><name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>classification</name></expr></argument>, <argument><expr><name>classification</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fmFuncMgtInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>functionHashTableInit</name></expr></argument>, <argument><expr><name>doInitFunctionTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>initFunctionCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fmGetFuncInfo</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>gFunMgtService</name><operator>.</operator><name>pFuncNameHashTable</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>gFunMgtService</name><operator>.</operator><name>pFuncNameHashTable</name></name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pVal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pVal</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
      <return>return <expr><name><name>funcMgtBuiltins</name><index>[<expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><call><name>translateFunc</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>TSDB_CODE_FUNC_NOT_BUILTIN_FUNTION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>funcMgtBuiltinsNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>funcMgtBuiltins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcType</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
      <return>return <expr><name><name>funcMgtBuiltins</name><index>[<expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><call><name>translateFunc</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_FUNC_NOT_BUILTIN_FUNTION</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EFuncReturnRows</name></type> <name>fmGetFuncReturnRows</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><name>estimateReturnRowsFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>funcMgtBuiltins</name><index>[<expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><call><name>estimateReturnRowsFunc</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>fmIsIndefiniteRowsFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>fmIsMultiRowsFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>FUNC_RETURN_ROWS_INDEFINITE</name></expr>
                                                                                     </then><else>: <expr><name>FUNC_RETURN_ROWS_NORMAL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsBuiltinFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>NULL</name> <operator>!=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>gFunMgtService</name><operator>.</operator><name>pFuncNameHashTable</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>EFunctionType</name></type> <name>fmGetFuncType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>gFunMgtService</name><operator>.</operator><name>pFuncNameHashTable</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pVal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>funcMgtBuiltins</name><index>[<expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pVal</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FUNCTION_TYPE_UDF</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EFuncDataRequired</name></type> <name>fmFuncDataRequired</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pTimeWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><name>dataRequiredFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>funcMgtBuiltins</name><index>[<expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><call><name>dataRequiredFunc</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pTimeWindow</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>EFuncDataRequired</name></type> <name>fmFuncDynDataRequired</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pTimeWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_group_key"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"_select_value"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_NOT_LOAD</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>dynDataRequiredFunc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>FUNC_DATA_REQUIRED_DATA_LOAD</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><call><name>dynDataRequiredFunc</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>pTimeWindow</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fmGetFuncExecFuncs</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>, <parameter><decl><type><name>SFuncExecFuncs</name><modifier>*</modifier></type> <name>pFpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>getEnv</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>getEnvFunc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>initFunc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>processFunc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>finalize</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>finalizeFunc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>combine</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>combineFunc</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fmGetUdafExecFuncs</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>, <parameter><decl><type><name>SFuncExecFuncs</name><modifier>*</modifier></type> <name>pFpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>getEnv</name></name> <operator>=</operator> <name>udfAggGetEnv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>udfAggInit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name>udfAggProcess</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>finalize</name></name> <operator>=</operator> <name>udfAggFinalize</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fmGetScalarFuncExecFuncs</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>, <parameter><decl><type><name>SScalarFuncExecFuncs</name><modifier>*</modifier></type> <name>pFpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>sprocessFunc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>getEnv</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>getEnvFunc</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsAggFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_AGG_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsScalarFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_SCALAR_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsVectorFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><call><name>fmIsScalarFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>fmIsPseudoColumnFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsSelectFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_SELECT_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsTimelineFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_TIMELINE_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_PSEUDO_COLUMN_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsScanPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_SCAN_PC_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsWindowPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_WINDOW_PC_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsWindowClauseFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>fmIsAggFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>fmIsWindowPseudoColumnFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsIndefiniteRowsFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_INDEFINITE_ROWS_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsSpecialDataRequiredFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_SPECIAL_DATA_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsDynamicScanOptimizedFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_DYNAMIC_SCAN_OPTIMIZED</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsMultiResFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_MULTI_RES_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsRepeatScanFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_REPEAT_SCAN_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsUserDefinedFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>funcId</name> <operator>&gt;</operator> <name>FUNC_UDF_ID_START</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsForbidFillFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_FORBID_FILL_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsIntervalInterpoFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_INTERVAL_INTERPO_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsForbidStreamFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_FORBID_STREAM_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsSystemInfoFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_SYSTEM_INFO_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsImplicitTsFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_IMPLICIT_TS_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsClientPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_CLIENT_PC_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsMultiRowsFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_MULTI_ROWS_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsKeepOrderFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_KEEP_ORDER_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsCumulativeFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_CUMULATIVE_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsInterpFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FUNCTION_TYPE_INTERP</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsInterpPseudoColumnFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>isSpecificClassifyFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>, <argument><expr><name>FUNC_MGT_INTERP_PC_FUNC</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsLastRowFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FUNCTION_TYPE_LAST_ROW</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsNotNullOutputFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FUNCTION_TYPE_LAST</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator>
         <name>FUNCTION_TYPE_LAST_PARTIAL</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator>
         <name>FUNCTION_TYPE_LAST_MERGE</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator>
         <name>FUNCTION_TYPE_FIRST</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator>
         <name>FUNCTION_TYPE_FIRST_PARTIAL</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator>
         <name>FUNCTION_TYPE_FIRST_MERGE</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator>
         <name>FUNCTION_TYPE_COUNT</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator>
         <name>FUNCTION_TYPE_HYPERLOGLOG</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator>
         <name>FUNCTION_TYPE_HYPERLOGLOG_PARTIAL</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>||</operator>
         <name>FUNCTION_TYPE_HYPERLOGLOG_MERGE</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsSelectValueFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FUNCTION_TYPE_SELECT_VALUE</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsGroupKeyFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FUNCTION_TYPE_GROUP_KEY</name> <operator>==</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fmFuncMgtDestroy</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><name><name>gFunMgtService</name><operator>.</operator><name>pFuncNameHashTable</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>atomic_val_compare_exchange_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gFunMgtService</name><operator>.</operator><name>pFuncNameHashTable</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>m</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fmSetInvertFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>, <parameter><decl><type><name>SFuncExecFuncs</name><modifier>*</modifier></type> <name>pFpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>invertFunc</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fmSetNormalFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>, <parameter><decl><type><name>SFuncExecFuncs</name><modifier>*</modifier></type> <name>pFpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>funcId</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>funcId</name> <operator>&gt;=</operator> <name>funcMgtBuiltinsNum</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFpSet</name><operator>-&gt;</operator><name>process</name></name> <operator>=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>processFunc</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsInvertible</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FUNCTION_TYPE_COUNT</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_SUM</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_STDDEV</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_AVG</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_WSTART</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_WEND</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_WDURATION</name></expr>:</case>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// function has same input/output type</comment>
<function><type><name>bool</name></type> <name>fmIsSameInOutType</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FUNCTION_TYPE_MAX</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_MIN</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_TOP</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_BOTTOM</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_FIRST</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_LAST</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_SAMPLE</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_TAIL</name></expr>:</case>
    <case>case <expr><name>FUNCTION_TYPE_UNIQUE</name></expr>:</case>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getLastCacheDataType</name><parameter_list>(<parameter><decl><type><name>SDataType</name><modifier>*</modifier></type> <name>pType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>getFirstLastInfoSize</name><argument_list>(<argument><expr><name><name>pType</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pType</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getFuncInfo</name><parameter_list>(<parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>fmGetFuncInfo</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>createFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParameterList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_FUNCTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <name>pParameterList</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <call><name>getFuncInfo</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pParameterList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pFunc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SNode</name><modifier>*</modifier></type> <name>createColumnByFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnNode</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCol</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pCol</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fmIsDistExecFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>funcId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fmIsUserDefinedFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsVectorFunc</name><argument_list>(<argument><expr><name>funcId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>NULL</name> <operator>!=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>pPartialFunc</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name>funcId</name></expr>]</index></name><operator>.</operator><name>pMergeFunc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createPartialFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pSrcFunc</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPartialFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pParameterList</name> <init>= <expr><call><name>nodesCloneList</name><argument_list>(<argument><expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pParameterList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pPartialFunc</name> <operator>=</operator> <call><name>createFunction</name><argument_list>(<argument><expr><name><name>funcMgtBuiltins</name><index>[<expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><name>pPartialFunc</name></expr></argument>, <argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pPartialFunc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pPartialFunc</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>aliasName</name></name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pPartialFunc</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>aliasName</name></name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.%p"</literal></expr></argument>,
           <argument><expr><name><operator>(</operator><operator>*</operator><name>pPartialFunc</name><operator>)</operator><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><name>pSrcFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createMergeFuncPara</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pSrcFunc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pPartialFunc</name></decl></parameter>,
                                   <parameter><decl><type><name>SNodeList</name><modifier>*</modifier><modifier>*</modifier></type> <name>pParameterList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>createColumnByFunc</name><argument_list>(<argument><expr><name>pPartialFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>funcMgtBuiltins</name><index>[<expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><name>createMergeParaFuc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>funcMgtBuiltins</name><index>[<expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><call><name>createMergeParaFuc</name><argument_list>(<argument><expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>pParameterList</name></name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>nodesListMakeStrictAppend</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createMergeFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pSrcFunc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pPartialFunc</name></decl></parameter>,
                                   <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMergeFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name><modifier>*</modifier></type>     <name>pParameterList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createMergeFuncPara</name><argument_list>(<argument><expr><name>pSrcFunc</name></expr></argument>, <argument><expr><name>pPartialFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pParameterList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pFunc</name> <operator>=</operator> <call><name>createFunction</name><argument_list>(<argument><expr><name><name>funcMgtBuiltins</name><index>[<expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr>]</index></name><operator>.</operator><name>pMergeFunc</name></expr></argument>, <argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFunc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// overwrite function restype set by translate function</comment>
    <if_stmt><if>if <condition>(<expr><call><name>fmIsSameInOutType</name><argument_list>(<argument><expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name><name>pSrcFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>resType</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>, <argument><expr><name><name>pSrcFunc</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>aliasName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pMergeFunc</name> <operator>=</operator> <name>pFunc</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>fmGetDistMethod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SFunctionNode</name><modifier>*</modifier></type> <name>pFunc</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPartialFunc</name></decl></parameter>, <parameter><decl><type><name>SFunctionNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>pMergeFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fmIsDistExecFunc</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>funcId</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>createPartialFunction</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>pPartialFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createMergeFunction</name><argument_list>(<argument><expr><name>pFunc</name></expr></argument>, <argument><expr><operator>*</operator><name>pPartialFunc</name></expr></argument>, <argument><expr><name>pMergeFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pPartialFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pMergeFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
