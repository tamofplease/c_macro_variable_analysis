<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/src/tpercentile.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpagedbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpercentile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NUM_OF_SLOT</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><name>int32_t</name></type> <name>getGroupId</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>numOfSlots</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>slotIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>times</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>times</name> <operator>*</operator> <name>numOfSlots</name><operator>)</operator> <operator>+</operator> <name>slotIndex</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SFilePage</name> <modifier>*</modifier></type><name>loadDataFromFilePage</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pMemBucket</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>slotIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFilePage</name> <modifier>*</modifier></type><name>buffer</name> <init>=
      <expr><operator>(</operator><name>SFilePage</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>bytes</name></name> <operator>*</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>slotIdx</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>groupId</name> <init>= <expr><call><name>getGroupId</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></argument>, <argument><expr><name>slotIdx</name></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>times</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pIdList</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>groupPagesMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pIdList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pageId</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pIdList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SFilePage</name> <modifier>*</modifier></type><name>pg</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>pg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>pg</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>bytes</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pg</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>bytes</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>slotIdx</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>comparFn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetBoundingBox</name><parameter_list>(<parameter><decl><type><name>MinMaxEntry</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>i64MaxVal</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>i64MinVal</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>u64MaxVal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>u64MinVal</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>dMaxVal</name></name> <operator>=</operator> <operator>-</operator><name>DBL_MAX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>dMinVal</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setBoundingBox</name><parameter_list>(<parameter><decl><type><name>MinMaxEntry</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>maxval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>minval</name> <operator>&gt;</operator> <name>maxval</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>i64MinVal</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>minval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>i64MaxVal</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>maxval</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>u64MinVal</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>minval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>u64MaxVal</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>maxval</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>dMinVal</name></name> <operator>=</operator> <name>minval</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>dMaxVal</name></name> <operator>=</operator> <name>maxval</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetPosInfo</name><parameter_list>(<parameter><decl><type><name>SSlotInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pageId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>findOnlyResult</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pMemBucket</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tMemBucketSlot</name> <modifier>*</modifier></type><name>pSlot</name> <init>= <expr><operator>&amp;</operator><name><name>pMemBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>groupId</name> <init>= <expr><call><name>getGroupId</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>times</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>pList</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>groupPagesMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>  <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>*</operator><name>pList</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name>   <modifier>*</modifier></type><name>pageId</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SFilePage</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBucketIntHash</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pBucket</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MaxVal</name></name> <operator>||</operator> <name>v</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MinVal</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>index</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// divide the value range into 1024 buckets</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>span</name> <init>= <expr><name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MaxVal</name></name> <operator>-</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MinVal</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>span</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>v</name> <operator>-</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MinVal</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>%</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type>   <name>slotSpan</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>span</name><operator>)</operator> <operator>/</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>delta</name> <init>= <expr><name>v</name> <operator>-</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MinVal</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>delta</name> <operator>/</operator> <name>slotSpan</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MaxVal</name></name> <operator>||</operator> <name>index</name> <operator>==</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>index</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBucketUintHash</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pBucket</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>u64MaxVal</name></name> <operator>||</operator> <name>v</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>u64MinVal</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>index</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// divide the value range into 1024 buckets</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>span</name> <init>= <expr><name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>u64MaxVal</name></name> <operator>-</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>u64MinVal</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>span</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>v</name> <operator>-</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>u64MinVal</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>delta</name> <operator>%</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>slotSpan</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>span</name> <operator>/</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>-</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>u64MinVal</name></name><operator>)</operator> <operator>/</operator> <name>slotSpan</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>u64MaxVal</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>index</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBucketDoubleHash</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pBucket</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBucket</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMaxVal</name></name> <operator>||</operator> <name>v</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMinVal</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>index</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// divide a range of [dMinVal, dMaxVal] into 1024 buckets</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>span</name> <init>= <expr><name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMaxVal</name></name> <operator>-</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMinVal</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>span</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>v</name> <operator>-</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMinVal</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>%</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>slotSpan</name> <init>= <expr><name>span</name> <operator>/</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>-</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMinVal</name></name><operator>)</operator> <operator>/</operator> <name>slotSpan</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMaxVal</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>index</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__perc_hash_func_t</name></type> <name>getHashFunc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>tBucketIntHash</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>tBucketUintHash</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>tBucketDoubleHash</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetSlotInfo</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pBucket</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tMemBucketSlot</name> <modifier>*</modifier></type><name>pSlot</name> <init>= <expr><operator>&amp;</operator><name><name>pBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>resetBoundingBox</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSlot</name><operator>-&gt;</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>resetPosInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSlot</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>tMemBucket</name> <modifier>*</modifier></type><name>tMemBucketCreate</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>nElemSize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>maxval</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pBucket</name> <init>= <expr><operator>(</operator><name>tMemBucket</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tMemBucket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBucket</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name> <operator>=</operator> <name>DEFAULT_NUM_OF_SLOT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>bufPageSize</name></name> <operator>=</operator> <literal type="number">16384</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>  <comment type="line">// 16k per page</comment>

  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>nElemSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>times</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>maxCapacity</name></name> <operator>=</operator> <literal type="number">200000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>groupPagesMap</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>setBoundingBox</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBucket</name><operator>-&gt;</operator><name>range</name></name></expr></argument>, <argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">//    qError("MemBucket:%p, invalid value range: %f-%f", pBucket, minval, maxval);</comment>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>elemPerPage</name></name> <operator>=</operator> <operator>(</operator><name><name>pBucket</name><operator>-&gt;</operator><name>bufPageSize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SFilePage</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>comparFn</name></name> <operator>=</operator> <call><name>getKeyComparFunc</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>hashFunc</name></name> <operator>=</operator> <call><name>getHashFunc</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBucket</name><operator>-&gt;</operator><name>hashFunc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    qError("MemBucket:%p, not support data type %d, failed", pBucket, pBucket-&gt;type);</comment>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pSlots</name></name> <operator>=</operator> <operator>(</operator><name>tMemBucketSlot</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tMemBucketSlot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBucket</name><operator>-&gt;</operator><name>pSlots</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>resetSlotInfo</name><argument_list>(<argument><expr><name>pBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_AVAIL_DISK</name></expr>;</expr_stmt>
    <comment type="line">// qError("MemBucket create disk based Buf failed since %s", terrstr(terrno));</comment>
    <expr_stmt><expr><call><name>tMemBucketDestroy</name><argument_list>(<argument><expr><name>pBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>createDiskbasedBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBucket</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>bufPageSize</name></name></expr></argument>, <argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>bufPageSize</name></name> <operator>*</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tMemBucketDestroy</name><argument_list>(<argument><expr><name>pBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  qDebug("MemBucket:%p, elem size:%d", pBucket, pBucket-&gt;bytes);</comment>
  <return>return <expr><name>pBucket</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tMemBucketDestroy</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pBucket</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBucket</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>groupPagesMap</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>p1</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>groupPagesMap</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>destroyDiskbasedBuf</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>groupPagesMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tMemBucketUpdateBoundingBox</name><parameter_list>(<parameter><decl><type><name>MinMaxEntry</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>i64MinVal</name></name> <operator>&gt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i64MinVal</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>i64MaxVal</name></name> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i64MaxVal</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>i64MinVal</name></name> <operator>&gt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i64MinVal</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>i64MaxVal</name></name> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>i64MaxVal</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>dMinVal</name></name> <operator>&gt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>dMinVal</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>dMaxVal</name></name> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>dMaxVal</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * in memory bucket, we only accept data array list
 */</comment>
<function><type><name>int32_t</name></type> <name>tMemBucketPut</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pBucket</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pBucket</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pBucket</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>bytes</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><name><name>pBucket</name><operator>-&gt;</operator><name>hashFunc</name></name><operator>)</operator><operator>(</operator><name>pBucket</name>, <name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>tMemBucketSlot</name> <modifier>*</modifier></type><name>pSlot</name> <init>= <expr><operator>&amp;</operator><name><name>pBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tMemBucketUpdateBoundingBox</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSlot</name><operator>-&gt;</operator><name>range</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ensure available memory pages to allocate</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>groupId</name> <init>= <expr><call><name>getGroupId</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>times</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>pageId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>elemPerPage</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>elemPerPage</name></name> <operator>&amp;&amp;</operator> <name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// keep the pointer in memory</comment>
        <expr_stmt><expr><call><name>releaseBufPage</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pPageIdList</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>groupPagesMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pPageIdList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>groupPagesMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPageIdList</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pPageIdList</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>getNewBufPage</name><argument_list>(<argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pageId</name></name> <operator>=</operator> <name>pageId</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pPageIdList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name><name>pBucket</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>pBucket</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBucket</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="block">/*
 *
 * now, we need to find the minimum value of the next slot for
 * interpolating the percentile value
 * j is the last slot of current segment, we need to get the first
 * slot of the next segment.
 */</comment>
<function><type><specifier>static</specifier> <name>MinMaxEntry</name></type> <name>getMinMaxEntryOfNextSlotWithData</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pMemBucket</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>slotIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>slotIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pMemBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>j</name> <operator>&lt;</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>range</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isIdenticalData</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pMemBucket</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>double</name></type> <name>getIdenticalDataVal</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pMemBucket</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>slotIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isIdenticalData</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>, <argument><expr><name>slotIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>tMemBucketSlot</name> <modifier>*</modifier></type><name>pSlot</name> <init>= <expr><operator>&amp;</operator><name><name>pMemBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>slotIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>finalResult</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>finalResult</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pSlot</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MinVal</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>finalResult</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pSlot</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>u64MinVal</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>finalResult</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pSlot</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMinVal</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>finalResult</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>getPercentileImpl</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pMemBucket</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>fraction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tMemBucketSlot</name> <modifier>*</modifier></type><name>pSlot</name> <init>= <expr><operator>&amp;</operator><name><name>pMemBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// required value in current slot</comment>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>num</name> <operator>+</operator> <name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>size</name></name> <operator>+</operator> <name>num</name> <operator>==</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * now, we need to find the minimum value of the next slot for interpolating the percentile value
         * j is the last slot of current segment, we need to get the first slot of the next segment.
         */</comment>
        <decl_stmt><decl><type><name>MinMaxEntry</name></type> <name>next</name> <init>= <expr><call><name>getMinMaxEntryOfNextSlotWithData</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>maxOfThisSlot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>minOfNextSlot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>maxOfThisSlot</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pSlot</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MaxVal</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>minOfNextSlot</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>next</name><operator>.</operator><name>i64MinVal</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>maxOfThisSlot</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pSlot</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>u64MaxVal</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>minOfNextSlot</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>next</name><operator>.</operator><name>u64MinVal</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>maxOfThisSlot</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>pSlot</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMaxVal</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>minOfNextSlot</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>next</name><operator>.</operator><name>dMinVal</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>minOfNextSlot</name> <operator>&gt;</operator> <name>maxOfThisSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>fraction</name><operator>)</operator> <operator>*</operator> <name>maxOfThisSlot</name> <operator>+</operator> <name>fraction</name> <operator>*</operator> <name>minOfNextSlot</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>val</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>size</name></name> <operator>&lt;=</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>maxCapacity</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// data in buffer and file are merged together to be processed.</comment>
        <decl_stmt><decl><type><name>SFilePage</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>loadDataFromFilePage</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>    <name>currentIdx</name> <init>= <expr><name>count</name> <operator>-</operator> <name>num</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>thisVal</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>bytes</name></name> <operator>*</operator> <name>currentIdx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nextVal</name> <init>= <expr><name>thisVal</name> <operator>+</operator> <name><name>pMemBucket</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>td</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nd</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>thisVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>nextVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>fraction</name><operator>)</operator> <operator>*</operator> <name>td</name> <operator>+</operator> <name>fraction</name> <operator>*</operator> <name>nd</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>val</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// incur a second round bucket split</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isIdenticalData</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>getIdenticalDataVal</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// try next round</comment>
        <expr_stmt><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>times</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <comment type="line">//       qDebug("MemBucket:%p, start next round data bucketing, time:%d", pMemBucket, pMemBucket-&gt;times);</comment>

        <expr_stmt><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name><name>pSlot</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>resetSlotInfo</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>groupId</name> <init>= <expr><call><name>getGroupId</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>numOfSlots</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>times</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>list</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>groupPagesMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>f</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SPageInfo</name> <modifier>*</modifier></type><name>pgInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SPageInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SFilePage</name> <modifier>*</modifier></type><name>pg</name> <init>= <expr><call><name>getBufPage</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><call><name>getPageId</name><argument_list>(<argument><expr><name>pgInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>tMemBucketPut</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>, <argument><expr><name><name>pg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pg</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>releaseBufPageInfo</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>pBuffer</name></name></expr></argument>, <argument><expr><name>pgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><call><name>getPercentileImpl</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <name>num</name></expr></argument>, <argument><expr><name>fraction</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>num</name> <operator>+=</operator> <name><name>pSlot</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>getPercentile</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pMemBucket</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>percent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0.0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// if only one elements exists, return it</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>findOnlyResult</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>percent</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// find the min/max value, no need to scan all data in bucket</comment>
  <if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>percent</name> <operator>-</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>DBL_EPSILON</name> <operator>||</operator> <operator>(</operator><name>percent</name> <operator>&lt;</operator> <name>DBL_EPSILON</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>MinMaxEntry</name> <modifier>*</modifier></type><name>pRange</name> <init>= <expr><operator>&amp;</operator><name><name>pMemBucket</name><operator>-&gt;</operator><name>range</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>fabs</name><argument_list>(<argument><expr><name>percent</name> <operator>-</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>DBL_EPSILON</name></expr> ?</condition><then> <expr><name><name>pRange</name><operator>-&gt;</operator><name>i64MaxVal</name></name></expr> </then><else>: <expr><name><name>pRange</name><operator>-&gt;</operator><name>i64MinVal</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>fabs</name><argument_list>(<argument><expr><name>percent</name> <operator>-</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>DBL_EPSILON</name></expr> ?</condition><then> <expr><name><name>pRange</name><operator>-&gt;</operator><name>u64MaxVal</name></name></expr> </then><else>: <expr><name><name>pRange</name><operator>-&gt;</operator><name>u64MinVal</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><ternary><condition><expr><call><name>fabs</name><argument_list>(<argument><expr><name>percent</name> <operator>-</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>DBL_EPSILON</name></expr> ?</condition><then> <expr><name><name>pRange</name><operator>-&gt;</operator><name>dMaxVal</name></name></expr> </then><else>: <expr><name><name>pRange</name><operator>-&gt;</operator><name>dMinVal</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>percentVal</name> <init>= <expr><operator>(</operator><name>percent</name> <operator>*</operator> <operator>(</operator><name><name>pMemBucket</name><operator>-&gt;</operator><name>total</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><literal type="number">100.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="line">// do put data by using buckets</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>orderIdx</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>percentVal</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>getPercentileImpl</name><argument_list>(<argument><expr><name>pMemBucket</name></expr></argument>, <argument><expr><name>orderIdx</name></expr></argument>, <argument><expr><name>percentVal</name> <operator>-</operator> <name>orderIdx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * check if data in one slot are all identical only need to compare with the bounding box
 */</comment>
<function><type><name>bool</name></type> <name>isIdenticalData</name><parameter_list>(<parameter><decl><type><name>tMemBucket</name> <modifier>*</modifier></type><name>pMemBucket</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tMemBucketSlot</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pMemBucket</name><operator>-&gt;</operator><name>pSlots</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_FLOAT_TYPE</name><argument_list>(<argument><expr><name><name>pMemBucket</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMaxVal</name></name> <operator>-</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>dMinVal</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>DBL_EPSILON</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>pSeg</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MinVal</name></name> <operator>==</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>range</name><operator>.</operator><name>i64MaxVal</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
