<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/function/src/thistogram.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thistogram.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlosertree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 *
 * implement the histogram and percentile_approx based on the paper:
 * Yael Ben-Haim, Elad Tom-Tov. A Streaming Parallel Decision Tree Algorithm,
 * The Journal of Machine Learning Research.Volume 11, 3/1/2010 pp.849-872
 * https://dl.acm.org/citation.cfm?id=1756034
 *
 * @data 2018-12-14
 * @version 0.1
 *
 */</comment>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>histogramCreateBin</name><parameter_list>(<parameter><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>tHistogramCreate</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>numOfEntries</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* need one redundant slot */</comment>
  <decl_stmt><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>numOfEntries</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARRAYLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>pList</name></name> <operator>=</operator> <call><name>SSkipListCreate</name><argument_list>(<argument><expr><name>MAX_SKIP_LIST_LEVEL</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SInsertSupporter</name><modifier>*</modifier></type> <name>pss</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SInsertSupporter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pss</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>maxEntries</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pss</name><operator>-&gt;</operator><name>pSkipList</name></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>pList</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>tLoserTreeCreate1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHisto</name><operator>-&gt;</operator><name>pLoserTree</name></name></expr></argument>, <argument><expr><name>numOfEntries</name></expr></argument>, <argument><expr><name>pss</name></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pss</name><operator>-&gt;</operator><name>pTree</name></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>pLoserTree</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><call><name>tHistogramCreateFrom</name><argument_list>(<argument><expr><name>pHisto</name></expr></argument>, <argument><expr><name>numOfEntries</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>tHistogramCreateFrom</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfBins</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>numOfBins</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto</name> <init>= <expr><operator>(</operator><name>SHistogramInfo</name><operator>*</operator><operator>)</operator><name>pBuf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pBuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistogramInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfBins</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <operator>-</operator><name>DBL_MAX</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>maxEntries</name></name> <operator>=</operator> <name>numOfBins</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <operator>-</operator><name>DBL_MAX</name></expr>;</expr_stmt>

  <return>return <expr><name>pBuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tHistogramAdd</name><parameter_list>(<parameter><decl><type><name>SHistogramInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pHisto</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pHisto</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pHisto</name> <operator>=</operator> <call><name>tHistogramCreate</name><argument_list>(<argument><expr><name>MAX_HISTOGRAM_BIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARRAYLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><call><name>histoBinarySearch</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>elems</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;=</operator> <name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>maxEntries</name></name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>elems</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>elems</name></name><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>val</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>elems</name></name><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>num</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/* insert a new slot */</comment>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfElems</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfEntries</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>elems</name></name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>.</operator><name>val</name> <operator>&lt;=</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>elems</name></name><index>[<expr><name>idx</name></expr>]</index><operator>.</operator><name>val</name> <operator>&gt;</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfElems</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>elems</name></name><index>[<expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfEntries</name></name></expr>]</index><operator>.</operator><name>val</name> <operator>&lt;=</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>histogramCreateBin</name><argument_list>(<argument><expr><operator>*</operator><name>pHisto</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>tSkipListKey</name></type> <name>key</name> <init>= <expr><call><name>tSkipListCreateKey</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>nSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type>    <name>entry</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>tSkipListNode</name><modifier>*</modifier></type> <name>pResNode</name> <init>= <expr><call><name>SSkipListPut</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pList</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pEntry1</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pResNode</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>tSkipListNode</name><modifier>*</modifier></type> <name>pLast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pEntry1</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* it is a new node */</comment>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* number of entries reaches the upper limitation */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* we need to update the last updated slot in loser tree*/</comment>
      <expr_stmt><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pResNode</name><operator>-&gt;</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pData</name><operator>)</operator><operator>-&gt;</operator><name>val</name> <operator>-</operator> <name>val</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>                 <name>lastIndex</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>maxIndex</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pLoserTree</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name><name>pLoserTree</name><operator>-&gt;</operator><name>pNode</name></name></name><index>[<expr><name>lastIndex</name> <operator>+</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>]</index><operator>.</operator><name>pData</name> <operator>=</operator> <name>pResNode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name><name>pLoserTree</name><operator>-&gt;</operator><name>pNode</name></name></name><index>[<expr><name>lastIndex</name> <operator>+</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>]</index><operator>.</operator><name>index</name></expr>;</expr_stmt>

        <comment type="line">// update the loser tree</comment>
        <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tMergeTreeAdjust</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>tSkipListKey</name></type> <name>kx</name> <init>=
            <expr><call><name>tSkipListCreateKey</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>]</index></name><operator>.</operator><name>nSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pLast</name> <operator>=</operator> <call><name>tSkipListGetOne</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/* this node located at the last position of the skiplist, we do not
       * update the loser-tree */</comment>
      <expr_stmt><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pLast</name> <operator>=</operator> <name>pResNode</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pBackward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name><name>pList</name><operator>-&gt;</operator><name>pHead</name></name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pPrevEntry</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pResNode</name><operator>-&gt;</operator><name>pBackward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pData</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pPrevEntry</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>val</name> <operator>-</operator> <name><name>pPrevEntry</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pLoserTree</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tMergeTreeAdjust</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name><name>pPrevEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tMergeTreePrint</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>&gt;=</operator> <name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>maxEntries</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// set the right value for loser-tree</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pLoserTree</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SSkipListPrint</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pLoserTree</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>tSkipListNode</name><modifier>*</modifier></type>          <name>pHead</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name><name>pList</name><operator>-&gt;</operator><name>pHead</name><operator>.</operator><name>pForward</name></name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>tSkipListNode</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><name>pHead</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>p1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%f\t"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* last one in skiplist is ignored */</comment>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTree</name><operator>-&gt;</operator><name>totalEntries</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>=</operator> <name>pHead</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pBin</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pHead</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pBin</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name></expr>;</expr_stmt>

          <expr_stmt><expr><name>pHead</name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>pLast</name> <operator>=</operator> <name>pHead</name></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>tMergeTreePrint</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pTree</name><operator>-&gt;</operator><name>totalEntries</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>tMergeTreeAdjust</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>tMergeTreePrint</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>ordered</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"delta is:%lf\n"</literal></expr></argument>, <argument><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SSkipListPrint</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* the chosen node */</comment>
      <decl_stmt><decl><type><name>tSkipListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name><name>pLoserTree</name><operator>-&gt;</operator><name>pNode</name></name></name><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>pData</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type>      <name>pEntry</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>tSkipListNode</name><modifier>*</modifier></type> <name>pNext</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type>      <name>pNextEntry</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pNext</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pNextEntry</name><operator>-&gt;</operator><name>val</name></name> <operator>-</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>double</name></type> <name>newVal</name> <init>= <expr><operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name> <operator>*</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name><name>pNextEntry</name><operator>-&gt;</operator><name>val</name></name> <operator>*</operator> <name><name>pNextEntry</name><operator>-&gt;</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name><name>pNextEntry</name><operator>-&gt;</operator><name>num</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>newVal</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>dKey</name></name> <operator>=</operator> <name>newVal</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name><name>pNextEntry</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

      <comment type="line">// update delta value in current node</comment>
      <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <operator>(</operator><name><name>pNextEntry</name><operator>-&gt;</operator><name>delta</name></name> <operator>+</operator> <name><name>pNextEntry</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator> <operator>-</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>

      <comment type="line">// reset delta value in the previous node</comment>
      <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pPrevEntry</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pBackward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pData</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pPrevEntry</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pPrevEntry</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name> <operator>-</operator> <name><name>pPrevEntry</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pLoserTree</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pNextEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>maxIndex</name></name> <operator>=</operator> <name><name>pNextEntry</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

        <comment type="line">// set the last element in skiplist, of which delta is FLT_MAX;</comment>
        <expr_stmt><expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name><name>pNextEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>=</operator> <name>pLast</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pLast</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>-&gt;</operator><name>index</name> <operator>=</operator> <name><name>pNextEntry</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>f</name> <init>= <expr><name><name>pTree</name><operator>-&gt;</operator><name>pNode</name><index>[<expr><name><name>pNextEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>]</index></name><operator>.</operator><name>index</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"disappear index is:%d\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tMergeTreeAdjust</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <name><name>pTree</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// remove the next node in skiplist</comment>
      <expr_stmt><expr><call><name>tSkipListRemoveNode</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pList</name></name></expr></argument>, <argument><expr><name>pNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SSkipListPrint</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tMergeTreePrint</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>pLoserTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// add to heap</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pResNode</name><operator>-&gt;</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pData</name><operator>)</operator><operator>-&gt;</operator><name>val</name> <operator>-</operator> <name>val</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pBackward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name><name>pList</name><operator>-&gt;</operator><name>pHead</name></name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pPrevEntry</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pResNode</name><operator>-&gt;</operator><name>pBackward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pData</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <name>val</name> <operator>-</operator> <name><name>pPrevEntry</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"delta is:%9lf\n"</literal></expr></argument>, <argument><expr><name><name>pEntry1</name><operator>-&gt;</operator><name>delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pResNode</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>min</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pHisto</name><operator>)</operator><operator>-&gt;</operator><name>numOfElems</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>histoBinarySearch</name><parameter_list>(<parameter><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pEntry</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>end</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>start</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <name>val</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>mid</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>&lt;</operator> <name>val</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><ternary><condition><expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr> ?</condition><then> <expr><name>start</name></expr> </then><else>: <expr><name>end</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>histogramMergeImpl</name><parameter_list>(<parameter><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pHistBin</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARRAYLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>oldSize</name> <init>= <expr><operator>*</operator><name>size</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type>  <name>delta</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>oldSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name><name>pHistBin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <name><name>pHistBin</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>delta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>delta</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>s1</name> <init>= <expr><operator>&amp;</operator><name><name>pHistBin</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>s2</name> <init>= <expr><operator>&amp;</operator><name><name>pHistBin</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>newVal</name> <init>= <expr><operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>val</name></name> <operator>*</operator> <name><name>s1</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name><name>s2</name><operator>-&gt;</operator><name>val</name></name> <operator>*</operator> <name><name>s2</name><operator>-&gt;</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name><name>s2</name><operator>-&gt;</operator><name>num</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>newVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <name><name>s2</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHistBin</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHistBin</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>oldSize</name> <operator>-</operator> <name>index</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* optimize this procedure */</comment>
<function><type><name>int32_t</name></type> <name>histogramCreateBin</name><parameter_list>(<parameter><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARRAYLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>remain</name> <init>= <expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>-</operator> <name>index</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>maxEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="block">/* we need to merge the slot */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>==</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>maxEntries</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>histogramMergeImpl</name><argument_list>(<argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name><name>pHisto</name><operator>-&gt;</operator><name>maxEntries</name></name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name><name>pHisto</name><operator>-&gt;</operator><name>maxEntries</name></name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>&lt;=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>maxEntries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tHistogramDestroy</name><parameter_list>(<parameter><decl><type><name>SHistogramInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pHisto</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pHisto</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>pHisto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pHisto</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tHistogramPrint</name><parameter_list>(<parameter><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"total entries: %d, elements: %"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARRAYLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d: (%f, %"</literal> <name>PRId64</name> <literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>tSkipListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name><name>pHisto</name><operator>-&gt;</operator><name>pList</name><operator>-&gt;</operator><name>pHead</name><operator>.</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pNode</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d: (%f, %"</literal> <name>PRId64</name> <literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Estimated number of points in the interval (âinf,b].
 * @param pHisto
 * @param v
 */</comment>
<function><type><name>int64_t</name></type> <name>tHistogramSum</name><parameter_list>(<parameter><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARRAYLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>slotIdx</name> <init>= <expr><call><name>histoBinarySearch</name><argument_list>(<argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>, <argument><expr><name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>slotIdx</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>!=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>slotIdx</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>slotIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>slotIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>slotIdx</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>&gt;=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>slotIdx</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>slotIdx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>slotIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>m1</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>slotIdx</name></expr>]</index></name><operator>.</operator><name>num</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>v1</name> <init>= <expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>slotIdx</name></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>m2</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>slotIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>v2</name> <init>= <expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>slotIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>estNum</name> <init>= <expr><name>m1</name> <operator>+</operator> <operator>(</operator><name>m2</name> <operator>-</operator> <name>m1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name>v1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>v2</name> <operator>-</operator> <name>v1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>s1</name> <init>= <expr><operator>(</operator><name>m1</name> <operator>+</operator> <name>estNum</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>v</name> <operator>-</operator> <name>v1</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>v2</name> <operator>-</operator> <name>v1</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slotIdx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>s1</name> <operator>+</operator> <name>m1</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>s1</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>double</name><modifier>*</modifier></type> <name>tHistogramUniform</name><parameter_list>(<parameter><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>ratio</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ARRAYLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>numOfElem</name> <init>= <expr><operator>(</operator><name><name>ratio</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>numOfElem</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numOfElem</name> <operator>&lt;=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numOfElem</name> <operator>==</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>num</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>total</name> <operator>&lt;=</operator> <name>numOfElem</name> <operator>&amp;&amp;</operator> <name>total</name> <operator>+</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>&gt;</operator> <name>numOfElem</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>total</name> <operator>&lt;=</operator> <name>numOfElem</name> <operator>&amp;&amp;</operator> <name>total</name> <operator>+</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>&gt;</operator> <name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><name>numOfElem</name> <operator>-</operator> <name>total</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>FLT_EPSILON</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>num</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>range</name> <init>= <expr><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name><operator>)</operator> <operator>*</operator> <name>delta</name> <operator>/</operator> <name>start</name> <operator>+</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>factor</name> <init>= <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>start</name> <operator>+</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>start</name> <operator>*</operator> <name>start</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>range</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>delta</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>range</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>+</operator> <operator>(</operator><name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name> <operator>-</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name><operator>)</operator> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>numOfElem</name> <init>= <expr><name><name>ratio</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>tSkipListNode</name><modifier>*</modifier></type> <name>pFirst</name> <init>= <expr><name><name>pHisto</name><operator>-&gt;</operator><name>pList</name><operator>-&gt;</operator><name>pHead</name><operator>.</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type>      <name>pEntry</name> <init>= <expr><operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pFirst</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfElem</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"i/numofSlot: %f, v:%f, %f\n"</literal></expr></argument>, <argument><expr><name><name>ratio</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numOfElem</name> <operator>&lt;=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"i/numofSlot: %f, v:%f, %f\n"</literal></expr></argument>, <argument><expr><name><name>ratio</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numOfElem</name> <operator>==</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>numOfElems</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"i/numofSlot: %f, v:%f, %f\n"</literal></expr></argument>, <argument><expr><name><name>ratio</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>numOfElem</name></expr></argument>, <argument><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>   <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>   <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pPrev</name> <init>= <expr><name>pEntry</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>pHisto</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>total</name> <operator>&lt;=</operator> <name>numOfElem</name> <operator>&amp;&amp;</operator> <name>total</name> <operator>+</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <name>numOfElem</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pPrev</name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>pFirst</name> <operator>=</operator> <name><name>pFirst</name><operator>-&gt;</operator><name>pForward</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>(</operator><name>SHistBin</name><operator>*</operator><operator>)</operator><name><name>pFirst</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>total</name> <operator>&lt;=</operator> <name>numOfElem</name> <operator>&amp;&amp;</operator> <name>total</name> <operator>+</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <name>numOfElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>delta</name> <init>= <expr><name>numOfElem</name> <operator>-</operator> <name>total</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>FLT_EPSILON</name></expr>)</condition> <block>{<block_content>
      <comment type="line">//                printf("i/numofSlot: %f, v:%f, %f\n",</comment>
      <comment type="line">//                (double)i/numOfSlots, numOfElem, pHisto-&gt;elems[j].val);</comment>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pPrev</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>start</name> <init>= <expr><name><name>pPrev</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>range</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name> <operator>-</operator> <name><name>pPrev</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator> <operator>*</operator> <name>delta</name> <operator>/</operator> <name>start</name> <operator>+</operator> <name><name>pPrev</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>factor</name> <init>= <expr><operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>start</name> <operator>+</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>start</name> <operator>*</operator> <name>start</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>range</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>delta</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>range</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pVal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pPrev</name><operator>-&gt;</operator><name>val</name></name> <operator>+</operator> <operator>(</operator><name><name>pEntry</name><operator>-&gt;</operator><name>val</name></name> <operator>-</operator> <name><name>pPrev</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">//            printf("i/numofSlot: %f, v:%f, %f\n", (double)i/numOfSlots,</comment>
    <comment type="line">//            numOfElem, val);</comment>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>pVal</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>tHistogramMerge</name><parameter_list>(<parameter><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto1</name></decl></parameter>, <parameter><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pHisto2</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfEntries</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHistogramInfo</name><modifier>*</modifier></type> <name>pResHistogram</name> <init>= <expr><call><name>tHistogramCreate</name><argument_list>(<argument><expr><name>numOfEntries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// error in histogram info</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pHisto1</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>&gt;</operator> <name>MAX_HISTOGRAM_BIN</name> <operator>||</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>&gt;</operator> <name>MAX_HISTOGRAM_BIN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>pResHistogram</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHistBin</name><modifier>*</modifier></type> <name>pHistoBins</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pHisto1</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>+</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>numOfEntries</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pHisto1</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pHisto1</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>&lt;</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHistoBins</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pHisto1</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pHisto1</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>&gt;</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHistoBins</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pHistoBins</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>pHisto1</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHistoBins</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>num</name> <operator>+=</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>num</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pHisto1</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>remain</name> <init>= <expr><name><name>pHisto1</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHistoBins</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHisto1</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>remain</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>numOfEntries</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>remain</name> <init>= <expr><name><name>pHisto2</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHistoBins</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHisto2</name><operator>-&gt;</operator><name>elems</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>remain</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* update other information */</comment>
  <expr_stmt><expr><name><name>pResHistogram</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>=</operator> <name><name>pHisto1</name><operator>-&gt;</operator><name>numOfElems</name></name> <operator>+</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>numOfElems</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResHistogram</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pHisto1</name><operator>-&gt;</operator><name>min</name></name> <operator>&lt;</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>min</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pHisto1</name><operator>-&gt;</operator><name>min</name></name></expr> </then><else>: <expr><name><name>pHisto2</name><operator>-&gt;</operator><name>min</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResHistogram</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pHisto1</name><operator>-&gt;</operator><name>max</name></name> <operator>&gt;</operator> <name><name>pHisto2</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pHisto1</name><operator>-&gt;</operator><name>max</name></name></expr> </then><else>: <expr><name><name>pHisto2</name><operator>-&gt;</operator><name>max</name></name></expr></else></ternary></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>numOfEntries</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>histogramMergeImpl</name><argument_list>(<argument><expr><name>pHistoBins</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pResHistogram</name><operator>-&gt;</operator><name>numOfEntries</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pResHistogram</name><operator>-&gt;</operator><name>elems</name></name></expr></argument>, <argument><expr><name>pHistoBins</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHistBin</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHistoBins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pResHistogram</name></expr>;</return>
</block_content>}</block></function>
</unit>
