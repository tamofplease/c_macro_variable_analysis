<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/transport/test/cliBench.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int</name></type>      <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEpSet</name></type>   <name>epSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>num</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>numOfReqs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>msgSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tsem_t</name></type>   <name>rspSem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tsem_t</name>  <modifier>*</modifier></type><name>pOverSem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThread</name></type> <name>thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pRpc</name></decl>;</decl_stmt>
}</block></struct></type> <name>SInfo</name>;</typedef>


<function><type><name>void</name></type> <name>initLogEnv</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  <modifier>*</modifier></type><name>logDir</name> <init>=  <expr><literal type="string">"/tmp/trans_cli"</literal></expr></init></decl>;</decl_stmt> 
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>  <name>defaultLogFileNamePrefix</name> <init>= <expr><literal type="string">"taoslog"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>maxLogFileNum</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tsAsyncLog</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <comment type="line">//idxDebugFlag = 143;</comment>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>logDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosRemoveDir</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
     
  <if_stmt><if>if <condition>(<expr><call><name>taosInitLog</name><argument_list>(<argument><expr><name>defaultLogFileNamePrefix</name></expr></argument>, <argument><expr><name>maxLogFileNum</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
   <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to open log file in directory:%s\n"</literal></expr></argument>, <argument><expr><name>tsLogDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
  
<function><type><specifier>static</specifier> <name>void</name></type> <name>processResponse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>SInfo</name> <operator>*</operator><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"thread:%d, response is received, type:%d contLen:%d code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>,
         <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pEpSet</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <operator>*</operator><name>pEpSet</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>sendRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SInfo</name>  <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>SInfo</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"thread:%d, start to send request"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfReqs</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfReqs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>msgSize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"thread:%d, send request, contLen:%d num:%d"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgSize</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcSendRequest</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRpc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>num</name></name> <operator>%</operator> <literal type="number">20000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"thread:%d, %d requests have been sent"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"thread:%d, it is over"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tcount</name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcInit</name></type>       <name>rpcInit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEpSet</name></type>         <name>epSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>            <name>msgSize</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>            <name>numOfReqs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>            <name>appThreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>           <name><name>serverIp</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><literal type="string">"127.0.0.1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>systemTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>startTime</name></decl>, <decl><type ref="prev"/><name>endTime</name></decl>;</decl_stmt>

  <comment type="line">// server info</comment>
  <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>inUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <literal type="number">7000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <literal type="number">7000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name>serverIp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><literal type="string">"192.168.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// client info</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rpcInit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>localPort</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"APP"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <name>processResponse</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>idleTime</name></name> <operator>=</operator> <name>tsShellActivityTimer</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>user</name></name> <operator>=</operator> <literal type="string">"michael"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>TAOS_CONN_CLIENT</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rpcDebugFlag</name> <operator>=</operator> <literal type="number">135</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>msgSize</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfReqs</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>appThreads</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-o"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsCompressMsgSize</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-u"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-k"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-spi"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rpcDebugFlag</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nusage: %s [options] \n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-i ip]: first server IP address, default is:%s\n"</literal></expr></argument>, <argument><expr><name>serverIp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-t threads]: number of rpc threads, default is:%d\n"</literal></expr></argument>, <argument><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-m msgSize]: message body size, default is:%d\n"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-a threads]: number of app threads, default is:%d\n"</literal></expr></argument>, <argument><expr><name>appThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-n requests]: number of requests per thread, default is:%d\n"</literal></expr></argument>, <argument><expr><name>numOfReqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-u user]: user name for the connection, default is:%s\n"</literal></expr></argument>, <argument><expr><name><name>rpcInit</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-d debugFlag]: debug flag, default:%d\n"</literal></expr></argument>, <argument><expr><name>rpcDebugFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-h help]: print out this help\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
   

  <expr_stmt><expr><call><name>initLogEnv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRpc</name> <init>= <expr><call><name>rpcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRpc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to initialize RPC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"client is initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"threads:%d msgSize:%d requests:%d"</literal></expr></argument>, <argument><expr><name>appThreads</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><name>numOfReqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>SInfo</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>appThreads</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SInfo</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pInfo</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>appThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name>epSet</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfReqs</name></name> <operator>=</operator> <name>numOfReqs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgSize</name></name> <operator>=</operator> <name>msgSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRpc</name></name> <operator>=</operator> <name>pRpc</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sendRequest</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pInfo</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <do>do <block>{<block_content>
    <expr_stmt><expr><call><name>taosUsleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>tcount</name> <operator>&lt;</operator> <name>appThreads</name></expr>)</condition>;</do>

  <decl_stmt><decl><type><name>float</name></type> <name>usedTime</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>now</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0f</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"it takes %.3f mseconds to send %d requests to server"</literal></expr></argument>, <argument><expr><name>usedTime</name></expr></argument>, <argument><expr><name>numOfReqs</name> <operator>*</operator> <name>appThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"Performance: %.3f requests per second, msgSize:%d bytes"</literal></expr></argument>, <argument><expr><literal type="number">1000.0</literal> <operator>*</operator> <name>numOfReqs</name> <operator>*</operator> <name>appThreads</name> <operator>/</operator> <name>usedTime</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>appThreads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosCloseLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
