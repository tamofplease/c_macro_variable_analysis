<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/transport/test/uv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"task.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_OF_THREAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMEOUT</name></cpp:macro>       <cpp:value>10000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SThreadObj</name> <block>{
  <decl_stmt><decl><type><name>TdThread</name></type>    <name>thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_pipe_t</name>  <modifier>*</modifier></type><name>pipe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_loop_t</name>  <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>workerAsync</name></decl>;</decl_stmt>  <comment type="line">//</comment>
  <decl_stmt><decl><type><name>int</name></type>         <name>fd</name></decl>;</decl_stmt>
}</block></struct></type> <name>SThreadObj</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SServerObj</name> <block>{
  <decl_stmt><decl><type><name>uv_tcp_t</name></type>     <name>server</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_loop_t</name>   <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>workerIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>numOfThread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SThreadObj</name> <modifier>*</modifier><modifier>*</modifier></type><name>pThreadObj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_pipe_t</name>  <modifier>*</modifier><modifier>*</modifier></type><name>pipe</name></decl>;</decl_stmt>
}</block></struct></type> <name>SServerObj</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SConnCtx</name> <block>{
  <decl_stmt><decl><type><name>uv_tcp_t</name>   <modifier>*</modifier></type><name>pClient</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_timer_t</name> <modifier>*</modifier></type><name>pTimer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>pWorkerAsync</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>ref</name></decl>;</decl_stmt>
}</block></struct></type> <name>SConnCtx</name>;</typedef>

<function><type><name>void</name></type> <name>echo_write</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Write error %s\n"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"write data to client\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>echo_read</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConnCtx</name> <modifier>*</modifier></type><name>pConn</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>SConnCtx</name></expr></argument>, <argument><expr><name>pClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>ref</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"read data %d\n"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>uv_write_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_write_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// dispatch request to database other process thread</comment>
    <comment type="line">// just write out</comment>
    <decl_stmt><decl><type><name>uv_buf_t</name></type> <name>write_out</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>write_out</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>write_out</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>nread</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_write</name><argument_list>(<argument><expr><operator>(</operator><name>uv_write_t</name> <operator>*</operator><operator>)</operator><name>req</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>echo_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>!=</operator> <name>UV_EOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Read error %s\n"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>alloc_buffer</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>suggested_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>suggested_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>on_new_connection</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// error!</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SServerObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SServerObj</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"new_connection from client\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uv_tcp_t</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>uv_tcp_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_tcp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>uv_accept</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>write_req</name> <init>= <expr><operator>(</operator><name>uv_write_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_write_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uv_buf_t</name></type>    <name>dummy_buf</name> <init>= <expr><call><name>uv_buf_init</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// despatch to worker thread</comment>
    <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>workerIdx</name></name> <operator>=</operator> <operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>workerIdx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pObj</name><operator>-&gt;</operator><name>numOfThread</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_write2</name><argument_list>(<argument><expr><name>write_req</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name><name>pObj</name><operator>-&gt;</operator><name>workerIdx</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>,
              <argument><expr><name>echo_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name>client</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>child_on_new_connection</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"x child_on_new_connection \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>!=</operator> <name>UV_EOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Read error %s\n"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SThreadObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><operator>(</operator><name>SThreadObj</name> <operator>*</operator><operator>)</operator><call><name>container_of</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr>struct <name>SThreadObj</name></expr></argument>, <argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_pipe_t</name> <modifier>*</modifier></type><name>pipe</name> <init>= <expr><operator>(</operator><name>uv_pipe_t</name> <operator>*</operator><operator>)</operator><name>q</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_pipe_pending_count</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No pending count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uv_handle_type</name></type> <name>pending</name> <init>= <expr><call><name>uv_pipe_pending_type</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pending</name> <operator>==</operator> <name>UV_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SConnCtx</name> <modifier>*</modifier></type><name>pConn</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SConnCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* init conn timer*/</comment>
  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTimer</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_timer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_timer_init</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>pClient</name></name> <operator>=</operator> <operator>(</operator><name>uv_tcp_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_tcp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>pWorkerAsync</name></name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>workerAsync</name></name></expr>;</expr_stmt>  <comment type="line">// thread safty</comment>
  <expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pClient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>uv_accept</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pConn</name><operator>-&gt;</operator><name>pClient</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_os_fd_t</name></type> <name>fd</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uv_fileno</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>pClient</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Worker Accepted fd %d\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>, <argument><expr><name>timeOutCallBack</name></expr></argument>, <argument><expr><name>TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pConn</name><operator>-&gt;</operator><name>pClient</name></name><operator>)</operator></expr></argument>, <argument><expr><name>alloc_buffer</name></expr></argument>, <argument><expr><name>echo_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>pClient</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pClient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>workerAsyncCallback</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SThreadObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>SThreadObj</name></expr></argument>, <argument><expr><name>workerAsync</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// do nothing</comment>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>worker_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SThreadObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><operator>(</operator><name>SThreadObj</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>fd</name> <init>= <expr><name><name>pObj</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <operator>(</operator><name>uv_loop_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_loop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_pipe_open</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>workerAsync</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_async_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_async_init</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>workerAsync</name></name></expr></argument>, <argument><expr><name>workerAsyncCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><name><name>pObj</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>alloc_buffer</name></expr></argument>, <argument><expr><name>child_on_new_connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SServerObj</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SServerObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <operator>(</operator><name>uv_loop_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_loop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>numOfThread</name></name> <operator>=</operator> <name>NUM_OF_THREAD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>workerIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>pThreadObj</name></name> <operator>=</operator> <operator>(</operator><name>SThreadObj</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>numOfThread</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SThreadObj</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <operator>(</operator><name>uv_pipe_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>numOfThread</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_pipe_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>server</name><operator>-&gt;</operator><name>numOfThread</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SThreadObj</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SThreadObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uv_pipe_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_pipe_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>uv_socketpair</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><name>UV_NONBLOCK_PIPE</name></expr></argument>, <argument><expr><name>UV_NONBLOCK_PIPE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_pipe_open</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// init write</comment>

    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>fd</name> <operator>=</operator> <name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pipe</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// init read</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>thread</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>worker_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>server</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"thread %d create\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"thread %d create failed"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>bind_addr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uv_ip4_addr</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>, <argument><expr><literal type="number">7000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bind_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_tcp_bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>bind_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>on_new_connection</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Listen error %s\n"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
