<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/transport/test/svrBench.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<comment type="line">//#define _DEFAULT_SOURCE</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type>         <name>msgSize</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>         <name>commit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TdFilePtr</name></type>   <name>pDataFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier></type><name>qhandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STaosQset</name>  <modifier>*</modifier></type><name>qset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>balance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfThread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STaosQueue</name> <modifier>*</modifier><modifier>*</modifier></type><name>qhandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STaosQset</name>  <modifier>*</modifier><modifier>*</modifier></type><name>qset</name></decl>;</decl_stmt>

}</block></struct></type> <name>MultiThreadQhandle</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TThread</name> <block>{
  <decl_stmt><decl><type><name>TdThread</name></type> <name>thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>TThread</name>;</typedef>

<decl_stmt><decl><type><name>MultiThreadQhandle</name> <modifier>*</modifier></type><name>multiQ</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initLogEnv</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>   <modifier>*</modifier></type><name>logDir</name> <init>= <expr><literal type="string">"/tmp/trans_svr"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>   <modifier>*</modifier></type><name>defaultLogFileNamePrefix</name> <init>= <expr><literal type="string">"taoslog"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>maxLogFileNum</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tsAsyncLog</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <comment type="line">// idxDebugFlag = 143;</comment>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><name>logDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosRemoveDir</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosInitLog</name><argument_list>(<argument><expr><name>defaultLogFileNamePrefix</name></expr></argument>, <argument><expr><name>maxLogFileNum</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to open log file in directory:%s\n"</literal></expr></argument>, <argument><expr><name>tsLogDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>processShellMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TThread</name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><operator>(</operator><name>TThread</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>idx</name> <init>= <expr><name><name>thread</name><operator>-&gt;</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name>   <modifier>*</modifier></type><name>pRpcMsg</name></decl>, <decl><type ref="prev"/><name>rpcMsg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueueInfo</name></type> <name>qinfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>qall</name> <operator>=</operator> <call><name>taosAllocateQall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>numOfMsgs</name> <init>= <expr><call><name>taosReadAllQitemsFromQset</name><argument_list>(<argument><expr><name><name>multiQ</name><operator>-&gt;</operator><name>qset</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%d shell msgs are received"</literal></expr></argument>, <argument><expr><name>numOfMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfMsgs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfMsgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>pDataFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pDataFile</name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"failed to write data file, reason:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>commit</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>num</name> <operator>+=</operator> <name>numOfMsgs</name></expr>;</expr_stmt>
      <comment type="line">// if (taosFsync(pDataFile) &lt; 0) {</comment>
      <comment type="line">//  tInfo("failed to flush data to file, reason:%s", strerror(errno));</comment>
      <comment type="line">//}</comment>

      <if_stmt><if>if <condition>(<expr><name>num</name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"%d request have been written into disk"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosResetQitems</name><argument_list>(<argument><expr><name>qall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfMsgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>msgSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name><name>pRpcMsg</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcSendResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>pRpcMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">//{</comment>
      <comment type="line">//  SRpcMsg nRpcMsg = {0};</comment>
      <comment type="line">//  nRpcMsg.pCont = rpcMallocCont(msgSize);</comment>
      <comment type="line">//  nRpcMsg.contLen = msgSize;</comment>
      <comment type="line">//  nRpcMsg.info.handle = handle;</comment>
      <comment type="line">//  nRpcMsg.code = TSDB_CODE_CTG_NOT_READY;</comment>
      <comment type="line">//  rpcSendResponse(&amp;nRpcMsg);</comment>
      <comment type="line">//}</comment>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosUpdateItemSize</name><argument_list>(<argument><expr><name><name>qinfo</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>numOfMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name>qall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>processRequestMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pParent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pTemp</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pTemp</name> <operator>=</operator> <call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><name>balance</name> <operator>%</operator> <name><name>multiQ</name><operator>-&gt;</operator><name>numOfThread</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"request is received, type:%d, contLen:%d, item:%p"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>multiQ</name><operator>-&gt;</operator><name>qhandle</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>balance</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>balance</name> <operator>&gt;=</operator> <name><name>multiQ</name><operator>-&gt;</operator><name>numOfThread</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>balance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcInit</name></type> <name>rpcInit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>dataName</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><literal type="string">"server.data"</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosBlockSIGPIPE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rpcInit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>localPort</name></name> <operator>=</operator> <literal type="number">7000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rpcInit</name><operator>.</operator><name>localFqdn</name></name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"SER"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <name>processRequestMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>idleTime</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">1500</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rpcDebugFlag</name> <operator>=</operator> <literal type="number">131</literal></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>localPort</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>msgSize</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-o"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsCompressMsgSize</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-w"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rpcDebugFlag</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dDebugFlag</name> <operator>=</operator> <name>rpcDebugFlag</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>uDebugFlag</name> <operator>=</operator> <name>rpcDebugFlag</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nusage:%s [options] \n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-p port]: server port number, default is:%d\n"</literal></expr></argument>, <argument><expr><name><name>rpcInit</name><operator>.</operator><name>localPort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-t threads]: number of rpc threads, default is:%d\n"</literal></expr></argument>, <argument><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-s sessions]: number of sessions, default is:%d\n"</literal></expr></argument>, <argument><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-m msgSize]: message body size, default is:%d\n"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-o compSize]: compression message size, default is:%d\n"</literal></expr></argument>, <argument><expr><name>tsCompressMsgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-w write]: write received data to file(0, 1, 2), default is:%d\n"</literal></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-d debugFlag]: debug flag, default:%d\n"</literal></expr></argument>, <argument><expr><name>rpcDebugFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  [-h help]: print out this help\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>TAOS_CONN_SERVER</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initLogEnv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRpc</name> <init>= <expr><call><name>rpcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRpc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to start RPC server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// taosSsleep(5);</comment>

  <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"RPC server is running, ctrl-c to exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDataFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>dataName</name></expr></argument>, <argument><expr><name>TD_FILE_APPEND</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDataFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"failed to open data file, reason:%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfAthread</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>multiQ</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numOfAthread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>multiQ</name><operator>-&gt;</operator><name>numOfThread</name></name> <operator>=</operator> <name>numOfAthread</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>multiQ</name><operator>-&gt;</operator><name>qhandle</name></name> <operator>=</operator> <operator>(</operator><name>STaosQueue</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaosQueue</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfAthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>multiQ</name><operator>-&gt;</operator><name>qset</name></name> <operator>=</operator> <operator>(</operator><name>STaosQset</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaosQset</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfAthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfAthread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>multiQ</name><operator>-&gt;</operator><name>qhandle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>taosOpenQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>multiQ</name><operator>-&gt;</operator><name>qset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>taosOpenQset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosAddIntoQset</name><argument_list>(<argument><expr><name><name>multiQ</name><operator>-&gt;</operator><name>qset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>multiQ</name><operator>-&gt;</operator><name>qhandle</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>TThread</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TThread</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfAthread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfAthread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>processShellMsg</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <comment type="line">// qhandle = taosOpenQueue();</comment>
  <comment type="line">// qset = taosOpenQset();</comment>
  <comment type="line">// taosAddIntoQset(qset, qhandle, NULL);</comment>

  <comment type="line">// processShellMsg();</comment>

  <if_stmt><if>if <condition>(<expr><name>pDataFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDataFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>dataName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
