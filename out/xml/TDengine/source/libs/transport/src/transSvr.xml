<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/transport/src/transSvr.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 * * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UV</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transComm.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type> <name>transModuleInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>notify</name> <init>= <expr><literal type="string">"a"</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int</name></type>       <name>notifyCount</name></decl>;</decl_stmt>  <comment type="line">//</comment>
  <decl_stmt><decl><type><name>int</name></type>       <name>init</name></decl>;</decl_stmt>         <comment type="line">// init or not</comment>
  <decl_stmt><decl><type><name>STransMsg</name></type> <name>msg</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSvrRegArg</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSvrConn</name> <block>{
  <macro><name>T_REF_DECLARE</name><argument_list>()</argument_list></macro>
  <decl_stmt><decl><type><name>uv_tcp_t</name><modifier>*</modifier></type>  <name>pTcp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>queue</name></type>      <name>wreqQueue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_timer_t</name></type> <name>pTimer</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>queue</name></type>       <name>queue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SConnBuffer</name></type> <name>readBuf</name></decl>;</decl_stmt>  <comment type="line">// read buf,</comment>
  <decl_stmt><decl><type><name>int</name></type>         <name>inType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>pTransInst</name></decl>;</decl_stmt>  <comment type="line">// rpc init</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>ahandle</name></decl>;</decl_stmt>     <comment type="line">//</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>hostThrd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransQueue</name></type> <name>srvMsgs</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSvrRegArg</name></type> <name>regArg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>       <name>broken</name></decl>;</decl_stmt>  <comment type="line">// conn broken;</comment>

  <decl_stmt><decl><type><name>ConnStatus</name></type> <name>status</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>clientIp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dst</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>spi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>info</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>user</name><index>[<expr><name>TSDB_UNI_LEN</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// user ID for the link</comment>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>secret</name><index>[<expr><name>TSDB_PASSWORD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>ckey</name><index>[<expr><name>TSDB_PASSWORD_LEN</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// ciphering key</comment>
}</block></struct></type> <name>SSvrConn</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SSvrMsg</name> <block>{
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type>     <name>pConn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransMsg</name></type>     <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>queue</name></type>         <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransMsgType</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSvrMsg</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SWorkThrd</name> <block>{
  <decl_stmt><decl><type><name>TdThread</name></type>      <name>thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_connect_t</name></type>  <name>connect_req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_pipe_t</name><modifier>*</modifier></type>    <name>pipe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_os_fd_t</name></type>    <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_loop_t</name><modifier>*</modifier></type>    <name>loop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAsyncPool</name><modifier>*</modifier></type>   <name>asyncPool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_prepare_t</name><modifier>*</modifier></type> <name>prepare</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>queue</name></type>         <name>msg</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>queue</name></type> <name>conn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pTransInst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>  <name>quit</name></decl>;</decl_stmt>
}</block></struct></type> <name>SWorkThrd</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SServerObj</name> <block>{
  <decl_stmt><decl><type><name>TdThread</name></type>   <name>thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_tcp_t</name></type>   <name>server</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_loop_t</name><modifier>*</modifier></type> <name>loop</name></decl>;</decl_stmt>

  <comment type="line">// work thread info</comment>
  <decl_stmt><decl><type><name>int</name></type>         <name>workerIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>numOfThreads</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>numOfWorkerReady</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier><modifier>*</modifier></type> <name>pThreadObj</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_pipe_t</name></type>   <name>pipeListen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_pipe_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pipe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>    <name>ip</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>    <name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>pAcceptAsync</name></decl>;</decl_stmt>  <comment type="line">// just to quit from from accept thread</comment>

  <decl_stmt><decl><type><name>bool</name></type> <name>inited</name></decl>;</decl_stmt>
}</block></struct></type> <name>SServerObj</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvAllocConnBufferCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvAllocRecvBufferCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvOnRecvCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>cli</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvOnTimeoutCb</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvOnSendCb</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvOnPipeWriteCb</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvOnAcceptCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvOnConnectionCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvWorkerAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvAcceptAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvShutDownCb</name><parameter_list>(<parameter><decl><type><name>uv_shutdown_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvPrepareCb</name><parameter_list>(<parameter><decl><type><name>uv_prepare_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>uvRecvReleaseReq</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * time-consuming task throwed into BG work thread
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvWorkDoTask</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvWorkAfterTask</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvWalkCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvFreeCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>uvStartSendRespImpl</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>smsg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>uvPrepareSendData</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>wb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvStartSendResp</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvNotifyLinkBrokenToApp</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type>      <name>destroySmsg</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>smsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>SSvrConn</name><modifier>*</modifier></type> <name>createConn</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>hThrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type>      <name>destroyConn</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clear</name></decl></parameter> <comment type="block">/*clear handle or not*/</comment>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type>      <name>destroyConnRegArg</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>reallocConnRef</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvHandleQuit</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvHandleRelease</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvHandleResp</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvHandleRegister</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>transAsyncHandle</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list> <init>= <expr><block>{<expr><name>uvHandleResp</name></expr></block></expr></init><operator>,</operator> uvHandleQuit<operator>,</operator> uvHandleRelease<operator>,</operator>
                                                                    uvHandleRegister<operator>,</operator> NULL</function_decl>};

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>uvDestroyConn</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// server and worker thread</comment>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>transWorkerThread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>transAcceptThread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// add handle loop</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>addHandleToWorkloop</name><parameter_list>(<parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pipeName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>addHandleToAcceptloop</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRV_RELEASE_UV</name><parameter_list>(<parameter><type><name>loop</name></type></parameter>)</parameter_list></cpp:macro>       \
  <cpp:value>do {                             \
    uv_walk(loop, uvWalkCb, NULL); \
    uv_run(loop, UV_RUN_DEFAULT);  \
    uv_loop_close(loop);           \
  } while (0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASYNC_ERR_JRET</name><parameter_list>(<parameter><type><name>thrd</name></type></parameter>)</parameter_list></cpp:macro>                            \
  <cpp:value>do {                                                  \
    if (thrd-&gt;quit) {                                   \
      tTrace("worker thread already quit, ignore msg"); \
      goto _return1;                                    \
    }                                                   \
  } while (0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>uvAllocRecvBufferCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type>    <name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>transAllocBuffer</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// refers specifically to query or insert timeout</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>uvHandleActivityTimeout</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%p timeout since no activity"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>uvHandleReq</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>msgLen</name> <init>= <expr><call><name>transDumpFromBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pHead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgLen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"%s conn %p read invalid packet"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>transDecompressMsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pHead</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"%s conn %p recv invalid packet, failed to decompress"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>uvRecvReleaseReq</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// TODO(dengyihao): time-consuming task throwed into BG Thread</comment>
  <comment type="line">//  uv_work_t* wreq = taosMemoryMalloc(sizeof(uv_work_t));</comment>
  <comment type="line">//  wreq-&gt;data = pConn;</comment>
  <comment type="line">//  uv_read_stop((uv_stream_t*)pConn-&gt;pTcp);</comment>
  <comment type="line">//  transRefSrvHandle(pConn);</comment>
  <comment type="line">//  uv_queue_work(((SWorkThrd*)pConn-&gt;hostThrd)-&gt;loop, wreq, uvWorkDoTask, uvWorkAfterTask);</comment>

  <decl_stmt><decl><type><name>STransMsg</name></type> <name>transMsg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <call><name>transContLenFromMsg</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>inType</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnNormal</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pHead</name><operator>-&gt;</operator><name>persist</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ConnAcquire</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transRefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"conn %p acquired by server app"</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pHead</name><operator>-&gt;</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>        <name>cost</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>taosNtoh64</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>EXCEPTION_LIMIT_US</name> <init>= <expr><literal type="number">100</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnNormal</name> <operator>&amp;&amp;</operator> <name><name>pHead</name><operator>-&gt;</operator><name>noResp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transRefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&gt;=</operator> <name>EXCEPTION_LIMIT_US</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tGWarn</name><argument_list>(<argument><expr><literal type="string">"%s conn %p %s received from %s, local info:%s, len:%d, cost:%dus, recv exception"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>pConn</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p %s received from %s, local info:%s, len:%d, cost:%dus"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>,
              <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&gt;=</operator> <name>EXCEPTION_LIMIT_US</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tGWarn</name><argument_list>(<argument><expr><literal type="string">"%s conn %p %s received from %s, local info:%s, len:%d, resp:%d, code:%d, cost:%dus, recv exception"</literal></expr></argument>,
             <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>noResp</name></name></expr></argument>,
             <argument><expr><name><name>transMsg</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cost</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p %s received from %s, local info:%s, len:%d, resp:%d, code:%d, cost:%dus"</literal></expr></argument>,
              <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>noResp</name></name></expr></argument>,
              <argument><expr><name><name>transMsg</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>cost</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// pHead-&gt;noResp = 1,</comment>
  <comment type="line">// 1. server application should not send resp on handle</comment>
  <comment type="line">// 2. once send out data, cli conn released to conn pool immediately</comment>
  <comment type="line">// 3. not mixed with persist</comment>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pHead</name><operator>-&gt;</operator><name>ahandle</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>traceId</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s handle %p conn:%p translated to app, refId:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>,
          <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHead</name><operator>-&gt;</operator><name>noResp</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set up conn info</comment>
  <decl_stmt><decl><type><name>SRpcConnInfo</name><modifier>*</modifier></type> <name>pConnInfo</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>conn</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pConnInfo</name><operator>-&gt;</operator><name>clientIp</name></name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>clientIp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConnInfo</name><operator>-&gt;</operator><name>clientPort</name></name> <operator>=</operator> <name><name>pConn</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pConnInfo</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pConnInfo</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name>)<argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uvOnRecvCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>cli</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>cli</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>   <name>pTransInst</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <name>TRANS_PACKET_LIMIT</name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name>transReadComplete</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>true</name> <operator>==</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>invalid</name></name> <operator>||</operator> <name>false</name> <operator>==</operator> <call><name>uvHandleReq</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"%s conn %p read invalid packet, received from %s, local info:%s"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
                 <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>destroyConn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <return>return;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"%s conn %p read invalid packet, exceed limit, received from %s, local info:%s"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>destroyConn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tWarn</name><argument_list>(<argument><expr><literal type="string">"%s conn %p read error:%s"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>broken</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnAcquire</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p broken, notify server app"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name>)<argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>msg</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>destroyConn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>uvAllocConnBufferCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uvOnTimeoutCb</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// opt</comment>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"conn %p time out"</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uvOnSendCb</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><call><name>transReqQueueRemove</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p data already was written on stream"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSvrMsg</name><modifier>*</modifier></type>  <name>msg</name> <init>= <expr><call><name>transQueuePop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"conn %p write data out"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// send cached data</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name>SSvrMsg</name><operator>*</operator><operator>)</operator><call><name>transQueueGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Register</name> <operator>&amp;&amp;</operator> <name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnAcquire</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>notifyCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>msg</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>broken</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name><operator>)</operator><operator>(</operator><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name><operator>,</operator> <operator>&amp;</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>msg</name></name><operator>)</operator><operator>,</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>transQueuePop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name>SSvrMsg</name><operator>*</operator><operator>)</operator><call><name>transQueueGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>uvStartSendRespImpl</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>uvStartSendRespImpl</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>pTcp</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"conn %p failed to write data, %s"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>broken</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>uvOnPipeWriteCb</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"success to dispatch conn to work thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"fail to dispatch conn to work thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>uvFreeCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>uvPrepareSendData</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>smsg</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>wb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type>  <name>pConn</name> <init>= <expr><name><name>smsg</name><operator>-&gt;</operator><name>pConn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><operator>&amp;</operator><name><name>smsg</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>rpcMallocCont</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><call><name>transHeadFromCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>traceId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>hasEpSet</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasEpSet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>magicNum</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>TRANS_MAGIC_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// handle invalid drop_task resp, TD-20098</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>inType</name></name> <operator>==</operator> <name>TDMT_SCH_DROP_TASK</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_VND_INVALID_VGROUP_ID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transQueuePop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>smsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnNormal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><literal type="number">0</literal> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr> ?</condition><then> <expr><name><name>pConn</name><operator>-&gt;</operator><name>inType</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>smsg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Release</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>smsg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Release</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ConnNormal</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>destroyConnRegArg</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// set up resp msg type</comment>
      <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><literal type="number">0</literal> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr> ?</condition><then> <expr><name><name>pConn</name><operator>-&gt;</operator><name>inType</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>release</name></name> <operator>=</operator> <ternary><condition><expr><name><name>smsg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Release</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHead</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>transMsgLenFromCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTransInst</name><operator>-&gt;</operator><name>compressSize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>compressSize</name></name> <operator>&lt;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>transCompressMsg</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p %s is sent to %s, local info:%s, len:%d"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>,
          <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>wb</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHead</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>uvStartSendRespImpl</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>smsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><name><name>smsg</name><operator>-&gt;</operator><name>pConn</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>broken</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uv_buf_t</name></type> <name>wb</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>uvPrepareSendData</name><argument_list>(<argument><expr><name>smsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>transRefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>req</name> <init>= <expr><call><name>transReqQueuePush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>wreqQueue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_write</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>uvOnSendCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>uvStartSendResp</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>smsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl</comment>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><name><name>smsg</name><operator>-&gt;</operator><name>pConn</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>broken</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// persist by</comment>
    <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>smsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnNormal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transQueuePush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>, <argument><expr><name>smsg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uvStartSendRespImpl</name><argument_list>(<argument><expr><name>smsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroySmsg</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>smsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>smsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>smsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>smsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyAllConn</name><parameter_list>(<parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"thread %p destroy all conn "</literal></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>queue</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SSvrConn</name></expr></argument>, <argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>uvWorkerAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAsyncItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type>  <name>pThrd</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>pThrd</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type>   <name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>queue</name></type>       <name>wq</name></decl>;</decl_stmt>

  <comment type="line">// batch process to avoid to lock/unlock frequently</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_MOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>queue</name><modifier>*</modifier></type> <name>head</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>SSvrMsg</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"unexcept occurred, continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// release handle to rpc init</comment>
    <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Quit</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call>(<modifier>*</modifier><name>transAsyncHandle</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name></expr>]</index>)<argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>STransMsg</name></type> <name>transMsg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh1</name> <init>= <expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type>    <name>refId</name> <init>= <expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh2</name> <init>= <expr><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>exh2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>exh1</name> <operator>!=</operator> <name>exh2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"handle except msg %p, ignore it"</literal></expr></argument>, <argument><expr><name>exh1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pConn</name></name> <operator>=</operator> <name><name>exh1</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call>(<modifier>*</modifier><name>transAsyncHandle</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name></expr>]</index>)<argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>uvWalkCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>uvFreeCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uvAcceptAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SServerObj</name><modifier>*</modifier></type> <name>srv</name> <init>= <expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"close server port %d"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_walk</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>uvWalkCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uvShutDownCb</name><parameter_list>(<parameter><decl><type><name>uv_shutdown_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"conn failed to shut down:%s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>uvDestroyConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>uvRecvReleaseReq</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pHead</name><operator>)</operator><operator>-&gt;</operator><name>release</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name><operator>)</operator> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>reallocConnRef</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p received release request"</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STraceId</name></type> <name>traceId</name> <init>= <expr><name><name>pHead</name><operator>-&gt;</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ConnRelease</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transClearBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><call><name>transContFromHead</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STransMsg</name></type> <name>tmsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pConn</name></expr>, <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>traceId</name></name> <operator>=</operator> <name>traceId</name></expr>, <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">0x9527</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSvrMsg</name><modifier>*</modifier></type>  <name>srvMsg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSvrMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>srvMsg</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>tmsg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srvMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Release</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srvMsg</name><operator>-&gt;</operator><name>pConn</name></name> <operator>=</operator> <name>pConn</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transQueuePush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>, <argument><expr><name>srvMsg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p release, notify server app"</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name>)<argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pConn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>msg</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>uvStartSendRespImpl</name><argument_list>(<argument><expr><name>srvMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>uvPrepareCb</name><parameter_list>(<parameter><decl><type><name>uv_prepare_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// prepare callback</comment>
  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type>  <name>pThrd</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAsyncPool</name><modifier>*</modifier></type> <name>pool</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>nAsync</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>async</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>asyncs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SAsyncItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>queue</name></type> <name>wq</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QUEUE_MOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>queue</name><modifier>*</modifier></type> <name>head</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>SSvrMsg</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"unexcept occurred, continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// release handle to rpc init</comment>
      <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Quit</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call>(<modifier>*</modifier><name>transAsyncHandle</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name></expr>]</index>)<argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>STransMsg</name></type> <name>transMsg</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh1</name> <init>= <expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type>    <name>refId</name> <init>= <expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh2</name> <init>= <expr><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>exh2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>exh1</name> <operator>!=</operator> <name>exh2</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"handle except msg %p, ignore it"</literal></expr></argument>, <argument><expr><name>exh1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>pConn</name></name> <operator>=</operator> <name><name>exh1</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call>(<modifier>*</modifier><name>transAsyncHandle</name><index>[<expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name></expr>]</index>)<argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uvWorkDoTask</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// doing time-consumeing task</comment>
  <comment type="line">// only auth conn currently, add more func later</comment>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p start to be processed in BG Thread"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>uvWorkAfterTask</name><parameter_list>(<parameter><decl><type><name>uv_work_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p failed to processed "</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// Done time-consumeing task</comment>
  <comment type="line">// add more func later</comment>
  <comment type="line">// this func called in main loop</comment>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p already processed "</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uvOnAcceptCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SServerObj</name><modifier>*</modifier></type> <name>pObj</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>SServerObj</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_tcp_t</name><modifier>*</modifier></type> <name>cli</name> <init>= <expr><operator>(</operator><name>uv_tcp_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_tcp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>uv_accept</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name>cli</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>pObj</name><operator>-&gt;</operator><name>numOfWorkerReady</name></name> <operator>&lt;</operator> <name><name>pObj</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"worker-threads are not ready for all, need %d instead of %d."</literal></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr></argument>,
             <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>numOfWorkerReady</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name>cli</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>wr</name> <init>= <expr><operator>(</operator><name>uv_write_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_write_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>wr</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>cli</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uv_buf_t</name></type> <name>buf</name> <init>= <expr><call><name>uv_buf_init</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>notify</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>workerIdx</name></name> <operator>=</operator> <operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>workerIdx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pObj</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"new connection accepted by main server, dispatch to %dth worker-thread"</literal></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>workerIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>uv_write2</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>pObj</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name><name>pObj</name><operator>-&gt;</operator><name>workerIdx</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name>cli</name></expr></argument>, <argument><expr><name>uvOnPipeWriteCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name>cli</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name>cli</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>uvOnConnectionCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"connection coming"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>!=</operator> <name>UV_EOF</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"read error %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// TODO(log other failure reason)</comment>
    <expr_stmt><expr><call><name>tWarn</name><argument_list>(<argument><expr><literal type="string">"failed to create connect:%p"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name>q</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// free memory allocated by</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nread</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>notify</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_pipe_t</name><modifier>*</modifier></type> <name>pipe</name> <init>= <expr><operator>(</operator><name>uv_pipe_t</name><operator>*</operator><operator>)</operator><name>q</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_pipe_pending_count</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"No pending count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uv_handle_type</name></type> <name>pending</name> <init>= <expr><call><name>uv_pipe_pending_type</name><argument_list>(<argument><expr><name>pipe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pending</name> <operator>==</operator> <name>UV_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><call><name>createConn</name><argument_list>(<argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTransInst</name></name> <operator>=</operator> <name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr>;</expr_stmt>
  <comment type="block">/* init conn timer*/</comment>
  <comment type="line">// uv_timer_init(pThrd-&gt;loop, &amp;pConn-&gt;pTimer);</comment>
  <comment type="line">// pConn-&gt;pTimer.data = pConn;</comment>

  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>hostThrd</name></name> <operator>=</operator> <name>pThrd</name></expr>;</expr_stmt>

  <comment type="line">// init client handle</comment>
  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name></name> <operator>=</operator> <operator>(</operator><name>uv_tcp_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_tcp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pConn</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transSetConnOption</name><argument_list>(<argument><expr><operator>(</operator><name>uv_tcp_t</name><operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>uv_accept</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_os_fd_t</name></type> <name>fd</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uv_fileno</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uv_handle_t</name><operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p created, fd:%d"</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>peername</name></decl>, <decl><type ref="prev"/><name>sockname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>peername</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>uv_tcp_getpeername</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peername</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"conn %p failed to get peer info"</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>transSockInfo2Str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peername</name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>addrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sockname</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>uv_tcp_getsockname</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sockname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"conn %p failed to get local info"</literal></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>transSockInfo2Str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sockname</name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peername</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>clientIp</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pConn</name><operator>-&gt;</operator><name>pTcp</name></name><operator>)</operator></expr></argument>, <argument><expr><name>uvAllocRecvBufferCb</name></expr></argument>, <argument><expr><name>uvOnRecvCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"failed to create new connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transUnrefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>transAcceptThread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// opt</comment>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"trans-accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SServerObj</name><modifier>*</modifier></type> <name>srv</name> <init>= <expr><operator>(</operator><name>SServerObj</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>uvOnPipeConnectionCb</name><parameter_list>(<parameter><decl><type><name>uv_connect_t</name><modifier>*</modifier></type> <name>connect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>connect</name></expr></argument>, <argument><expr><name>SWorkThrd</name></expr></argument>, <argument><expr><name>connect_req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name><name>pThrd</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>uvAllocConnBufferCb</name></expr></argument>, <argument><expr><name>uvOnConnectionCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>addHandleToWorkloop</name><parameter_list>(<parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pipeName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <operator>(</operator><name>uv_loop_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_loop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>uv_loop_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_pipe_open</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pipe</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pThrd</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_prepare_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_prepare_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>prepare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_prepare_start</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>prepare</name></name></expr></argument>, <argument><expr><name>uvPrepareCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>prepare</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pThrd</name></expr>;</expr_stmt>

  <comment type="line">// conn set</comment>
  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name> <operator>=</operator> <call><name>transAsyncPoolCreate</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>, <argument><expr><name>uvWorkerAsyncCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>uv_pipe_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>connect_req</name></name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>pipeName</name></expr></argument>, <argument><expr><name>uvOnPipeConnectionCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name><name>pThrd</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>uvAllocConnBufferCb</name></expr></argument>, <argument><expr><name>uvOnConnectionCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>addHandleToAcceptloop</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <decl_stmt><decl><type><name>SServerObj</name><modifier>*</modifier></type> <name>srv</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to init accept server:%s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// register an async here to quit server gracefully</comment>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>pAcceptAsync</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_async_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_async_init</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>pAcceptAsync</name></name></expr></argument>, <argument><expr><name>uvAcceptAsyncCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>pAcceptAsync</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>srv</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>bind_addr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_ip4_addr</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bind_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>uv_tcp_bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>bind_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to bind:%s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><literal type="number">4096</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>uvOnAcceptCb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to listen:%s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RPC_PORT_EADDRINUSE</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>transWorkerThread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"trans-svr-work"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><operator>(</operator><name>SWorkThrd</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>SSvrConn</name><modifier>*</modifier></type> <name>createConn</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>hThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name>hThrd</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><operator>(</operator><name>SSvrConn</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSvrConn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>transReqQueueInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>wreqQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QUEUE_PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transQueueInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>broken</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ConnNormal</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transInitBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>pConn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name> <operator>=</operator> <name>pThrd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>transAddExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>exh</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>exh</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transRefSrvHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s handle %p, conn %p created, refId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exh</name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pConn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroyConn</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clear</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>clear</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>pTcp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p to be destroyed"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>pTcp</name></name></expr></argument>, <argument><expr><name>uvDestroyConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroyConnRegArg</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>init</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>msg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>reallocConnRef</name><parameter_list>(<parameter><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transRemoveExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// avoid app continue to send msg on invalid handle</comment>
  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>transAddExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>exh</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>exh</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>uvDestroyConn</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transRemoveExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>thrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p destroy"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>transQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>transQueueGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>transQueueDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReqQueueClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>wreqQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>pTcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyConnRegArg</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transDestroyBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>thrd</name><operator>-&gt;</operator><name>quit</name></name> <operator>&amp;&amp;</operator> <call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thrd</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"work thread quit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_walk</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>uvWalkCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>uvPipeListenCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"server failed to init pipe, errmsg: %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SServerObj</name><modifier>*</modifier></type> <name>srv</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>SServerObj</name></expr></argument>, <argument><expr><name>pipeListen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_pipe_t</name><modifier>*</modifier></type>  <name>pipe</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>srv</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name><name>srv</name><operator>-&gt;</operator><name>numOfWorkerReady</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>pipe</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_accept</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>pipeListen</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_is_readable</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_is_writable</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name>pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>numOfWorkerReady</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>transInitServer</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numOfThreads</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>shandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SServerObj</name><modifier>*</modifier></type> <name>srv</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SServerObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <operator>(</operator><name>uv_loop_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_loop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>numOfThreads</name></name> <operator>=</operator> <name>numOfThreads</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>workerIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>numOfWorkerReady</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>pThreadObj</name></name> <operator>=</operator> <operator>(</operator><name>SWorkThrd</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWorkThrd</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <operator>(</operator><name>uv_pipe_t</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_pipe_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>ip</name></name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>pipeName</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>pipeListen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to init pipe, errmsg: %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pipeName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pipeName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\\\\?\\pipe\\trans.rpc.%d-%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>taosSafeRand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pipeName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pipeName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%spipe.trans.rpc.%08d-%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><call><name>taosSafeRand</name><argument_list>()</argument_list></call></expr></argument>,
           <argument><expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_pipe_bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>pipeListen</name></name></expr></argument>, <argument><expr><name>pipeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to bind pipe, errmsg: %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>pipeListen</name></name></expr></argument>, <argument><expr><name>SOMAXCONN</name></expr></argument>, <argument><expr><name>uvPipeListenCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to listen pipe, errmsg: %s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>srv</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name> <init>= <expr><operator>(</operator><name>SWorkThrd</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWorkThrd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>pTransInst</name></name> <operator>=</operator> <name>shandle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>thrd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>pTransInst</name></name> <operator>=</operator> <name>shandle</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uv_pipe_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_pipe_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>srv</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// init read</comment>

    <if_stmt><if>if <condition>(<expr><name>false</name> <operator>==</operator> <call><name>addHandleToWorkloop</name><argument_list>(<argument><expr><name>thrd</name></expr></argument>, <argument><expr><name>pipeName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <goto>goto <name>End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>thrd</name><operator>-&gt;</operator><name>thread</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>transWorkerThread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>thrd</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"success to create worker-thread:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// TODO: clear all other resource later</comment>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to create worker-thread:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>End</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>srv</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name> <init>= <expr><operator>(</operator><name>SWorkThrd</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWorkThrd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>pTransInst</name></name> <operator>=</operator> <name>shandle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>pTransInst</name></name> <operator>=</operator> <name>shandle</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uv_pipe_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_pipe_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>thrd</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uv_os_sock_t</name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>uv_socketpair</name><argument_list>(<argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><name>UV_NONBLOCK_PIPE</name></expr></argument>, <argument><expr><name>UV_NONBLOCK_PIPE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>srv</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_pipe_open</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>srv</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>pipe</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>srv</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// init read</comment>
    <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>false</name> <operator>==</operator> <call><name>addHandleToWorkloop</name><argument_list>(<argument><expr><name>thrd</name></expr></argument>, <argument><expr><name>pipeName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <goto>goto <name>End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>thrd</name><operator>-&gt;</operator><name>thread</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>transWorkerThread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>thrd</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"success to create worker-thread:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// TODO: clear all other resource later</comment>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to create worker-thread:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>End</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>false</name> <operator>==</operator> <call><name>taosValidIpAndPort</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"invalid ip/port, %d:%d, reason:%s"</literal></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>srv</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>false</name> <operator>==</operator> <call><name>addHandleToAcceptloop</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>srv</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>transAcceptThread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>srv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"success to create accept-thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed  to create accept-thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
    <comment type="line">// clear all resource later</comment>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>srv</name><operator>-&gt;</operator><name>inited</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>srv</name></expr>;</return>
<label><name>End</name>:</label>
  <expr_stmt><expr><call><name>transCloseServer</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>uvHandleQuit</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>thrd</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thrd</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_walk</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>uvWalkCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>destroyAllConn</name><argument_list>(<argument><expr><name>thrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>uvHandleRelease</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pConn</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnAcquire</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>reallocConnRef</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transQueuePush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>uvStartSendRespImpl</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnRelease</name> <operator>||</operator> <name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnNormal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p already released, ignore release-msg"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>uvHandleResp</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// send msg to client</comment>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p start to send resp (2/2)"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pConn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uvStartSendResp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>uvHandleRegister</name><parameter_list>(<parameter><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>pConn</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p register brokenlink callback"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnAcquire</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transQueuePush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>transQueuePop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>srvMsgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>notifyCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>msg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"conn %p register brokenlink callback succ"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>broken</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name>)<argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>regArg</name><operator>.</operator><name>msg</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>regArg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>destroyWorkThrd</name><parameter_list>(<parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pThrd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SRV_RELEASE_UV</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TRANS_DESTROY_ASYNC_POOL_MSG</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><name>SSvrMsg</name></expr></argument>, <argument><expr><name>destroySmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transAsyncPoolDestroy</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>prepare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sendQuitToWorkThrd</name><parameter_list>(<parameter><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSvrMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Quit</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"server send quit msg to work thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transCloseServer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <decl_stmt><decl><type><name>SServerObj</name><modifier>*</modifier></type> <name>srv</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"send quit msg to accept thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>inited</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_async_send</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>pAcceptAsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SRV_RELEASE_UV</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>srv</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>sendQuitToWorkThrd</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>destroyWorkThrd</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>pThreadObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>pAcceptAsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>srv</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>pipe</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>srv</name><operator>-&gt;</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transRefSrvHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_INC</name><argument_list>(<argument><expr><operator>(</operator><name>SSvrConn</name><operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p ref count:%d"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transUnrefSrvHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_DEC</name><argument_list>(<argument><expr><operator>(</operator><name>SSvrConn</name><operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"conn %p ref count:%d"</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyConn</name><argument_list>(<argument><expr><operator>(</operator><name>SSvrConn</name><operator>*</operator><operator>)</operator><name>handle</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transReleaseSrvHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcHandleInfo</name><modifier>*</modifier></type> <name>info</name> <init>= <expr><name>handle</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type>      <name>exh</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>refId</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASYNC_CHECK_HANDLE</name><argument_list>(<argument><expr><name>exh</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASYNC_ERR_JRET</name><argument_list>(<argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STransMsg</name></type> <name>tmsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>exh</name></expr>, <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name>refId</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSvrMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>tmsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Release</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p start to release"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>exh</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>_return1</name>:</label>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"handle %p failed to send to release handle"</literal></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<label><name>_return2</name>:</label>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"handle %p failed to send to release handle"</literal></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transSendResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STransMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>noResp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"no need send resp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>refId</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASYNC_CHECK_HANDLE</name><argument_list>(<argument><expr><name>exh</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>refId</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STransMsg</name></type> <name>tmsg</name> <init>= <expr><operator>*</operator><name>msg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tmsg</name><operator>.</operator><name>info</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name>refId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASYNC_ERR_JRET</name><argument_list>(<argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSvrMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>tmsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Normal</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>(</operator><name>STraceId</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"conn %p start to send resp (1/2)"</literal></expr></argument>, <argument><expr><name><name>exh</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_return1</name>:</label>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"handle %p failed to send resp"</literal></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<label><name>_return2</name>:</label>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"handle %p failed to send resp"</literal></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>transRegisterMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STransMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>refId</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>refId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASYNC_CHECK_HANDLE</name><argument_list>(<argument><expr><name>exh</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STransMsg</name></type> <name>tmsg</name> <init>= <expr><operator>*</operator><name>msg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tmsg</name><operator>.</operator><name>info</name><operator>.</operator><name>noResp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tmsg</name><operator>.</operator><name>info</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <name>refId</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SWorkThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASYNC_ERR_JRET</name><argument_list>(<argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSvrMsg</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSvrMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>tmsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Register</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p start to register brokenlink callback"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>exh</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroySmsg</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_return1</name>:</label>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"handle %p failed to register brokenlink"</literal></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<label><name>_return2</name>:</label>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"handle %p failed to register brokenlink"</literal></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transGetConnInfo</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>thandle</name></decl></parameter>, <parameter><decl><type><name>STransHandleInfo</name><modifier>*</modifier></type> <name>pConnInfo</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
