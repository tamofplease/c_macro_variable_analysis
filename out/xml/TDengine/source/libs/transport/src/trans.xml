<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/transport/src/trans.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UV</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transComm.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>taosInitHandle</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfThreads</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>shandle</name></decl></parameter>)</parameter_list> <init>= <expr><block>{
    <expr><name>transInitServer</name></expr></block></expr></init><operator>,</operator> transInitClient</function_decl>};

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>taosCloseHandle</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <init>= <expr><block>{<expr><name>transCloseServer</name></expr></block></expr></init><operator>,</operator> transCloseClient</function_decl>};

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>taosRefHandle</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <init>= <expr><block>{<expr><name>transRefSrvHandle</name></expr></block></expr></init><operator>,</operator> transRefCliHandle</function_decl>};
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>taosUnRefHandle</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <init>= <expr><block>{<expr><name>transUnrefSrvHandle</name></expr></block></expr></init><operator>,</operator> transUnrefCliHandle</function_decl>};

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>transReleaseHandle</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <init>= <expr><block>{<expr><name>transReleaseSrvHandle</name></expr></block></expr></init><operator>,</operator> transReleaseCliHandle</function_decl>};

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>transValidLocalFqdn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>localFqdn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <call><name>taosGetIpv4FromFqdn</name><argument_list>(<argument><expr><name>localFqdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ip</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RPC_FQDN_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>rpcOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRpcInit</name><modifier>*</modifier></type> <name>pInit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>rpcInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcInfo</name><modifier>*</modifier></type> <name>pRpc</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRpc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInit</name><operator>-&gt;</operator><name>label</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>pInit</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>compressSize</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>compressSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>encryption</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>encryption</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>retryLimit</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>retryLimit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>retryInterval</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>retryInterval</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>retryMinInterval</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>retryMinInterval</name></name></expr>;</expr_stmt>  <comment type="line">// retry init interval</comment>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>retryStepFactor</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>retryStepFactor</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>retryMaxInterval</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>retryMaxInterval</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>retryMaxTimouet</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>retryMaxTimouet</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>failFastThreshold</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>failFastThreshold</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>failFastInterval</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>failFastInterval</name></name></expr>;</expr_stmt>

  <comment type="line">// register callback handle</comment>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>cfp</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>cfp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>retry</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>rfp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>startTimer</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>tfp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>destroyFp</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>dfp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>failFastFp</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>ffp</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>numOfThreads</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pInit</name><operator>-&gt;</operator><name>numOfThreads</name></name> <operator>&gt;</operator> <name>TSDB_MAX_RPC_THREADS</name></expr> ?</condition><then> <expr><name>TSDB_MAX_RPC_THREADS</name></expr> </then><else>: <expr><name><name>pInit</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRpc</name><operator>-&gt;</operator><name>numOfThreads</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>numOfThreads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInit</name><operator>-&gt;</operator><name>connType</name></name> <operator>==</operator> <name>TAOS_CONN_SERVER</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>transValidLocalFqdn</name><argument_list>(<argument><expr><name><name>pInit</name><operator>-&gt;</operator><name>localFqdn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"invalid fqdn:%s, errmsg:%s"</literal></expr></argument>, <argument><expr><name><name>pInit</name><operator>-&gt;</operator><name>localFqdn</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>connType</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>connType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>idleTime</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>idleTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>tcphandle</name></name> <operator>=</operator>
      <call>(<modifier>*</modifier><name>taosInitHandle</name><index>[<expr><name><name>pRpc</name><operator>-&gt;</operator><name>connType</name></name></expr>]</index>)<argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>pInit</name><operator>-&gt;</operator><name>localPort</name></name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRpc</name><operator>-&gt;</operator><name>tcphandle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>pInit</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInit</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pInit</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name> <init>= <expr><call><name>transAddExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name>refId</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>refId</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rpcClose</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"start to close rpc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transRemoveExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tInfo</name><argument_list>(<argument><expr><literal type="string">"end to close rpc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rpcCloseImpl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcInfo</name><modifier>*</modifier></type> <name>pRpc</name> <init>= <expr><operator>(</operator><name>SRpcInfo</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name>taosCloseHandle</name><index>[<expr><name><name>pRpc</name><operator>-&gt;</operator><name>connType</name></name></expr>]</index>)<argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>tcphandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>rpcMallocCont</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>contLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><name>contLen</name> <operator>+</operator> <name>TRANS_MSG_OVERHEAD</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>start</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to malloc msg, size:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"malloc mem:%p size:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>start</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rpcFreeCont</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cont</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cont</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>cont</name> <operator>-</operator> <name>TRANS_MSG_OVERHEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"rpc free cont:%p"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>cont</name> <operator>-</operator> <name>TRANS_MSG_OVERHEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>rpcReallocCont</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>contLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>st</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <name>TRANS_MSG_OVERHEAD</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sz</name> <init>= <expr><name>contLen</name> <operator>+</operator> <name>TRANS_MSG_OVERHEAD</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>st</name> <operator>+</operator> <name>TRANS_MSG_OVERHEAD</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rpcSendRequest</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>shandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pRid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>transSendRequest</name><argument_list>(<argument><expr><name>shandle</name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rpcSendRequestWithCtx</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>shandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pRid</name></decl></parameter>, <parameter><decl><type><name>SRpcCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>transSendRequest</name><argument_list>(<argument><expr><name>shandle</name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rpcSendRecv</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>shandle</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>transSendRecv</name><argument_list>(<argument><expr><name>shandle</name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rpcSendResponse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>transSendResponse</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>rpcRefHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>TAOS_CONN_SERVER</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TAOS_CONN_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name>taosRefHandle</name><index>[<expr><name>type</name></expr>]</index>)<argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rpcUnrefHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>TAOS_CONN_SERVER</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TAOS_CONN_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name>taosUnRefHandle</name><index>[<expr><name>type</name></expr>]</index>)<argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rpcRegisterBrokenLinkArg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>transRegisterMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>rpcReleaseHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>TAOS_CONN_SERVER</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TAOS_CONN_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call>(<modifier>*</modifier><name>transReleaseHandle</name><index>[<expr><name>type</name></expr>]</index>)<argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rpcSetDefaultAddr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>thandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fqdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// later</comment>
  <return>return <expr><call><name>transSetDefaultAddr</name><argument_list>(<argument><expr><name>thandle</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>fqdn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>rpcAllocHandle</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>transAllocHandle</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>rpcInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>transInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>rpcCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>transCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transHttpEnvDestroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
