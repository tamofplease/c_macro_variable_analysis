<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/transport/src/thttp.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<comment type="line">// clang-format off</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thttp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transComm.h"</cpp:file></cpp:include>

<comment type="line">// clang-format on</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RECV_BUF_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SHttpModule</name> <block>{
  <decl_stmt><decl><type><name>uv_loop_t</name><modifier>*</modifier></type>  <name>loop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAsyncPool</name><modifier>*</modifier></type> <name>asyncPool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThread</name></type>    <name>thread</name></decl>;</decl_stmt>
}</block></struct></type> <name>SHttpModule</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SHttpMsg</name> <block>{
  <decl_stmt><decl><type><name>queue</name></type>         <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>         <name>server</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>         <name>cont</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EHttpCompFlag</name></type> <name>flag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>        <name>quit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHttpModule</name><modifier>*</modifier></type>  <name>http</name></decl>;</decl_stmt>

}</block></struct></type> <name>SHttpMsg</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SHttpClient</name> <block>{
  <decl_stmt><decl><type><name>uv_connect_t</name></type>       <name>conn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_tcp_t</name></type>           <name>tcp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_write_t</name></type>         <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_buf_t</name><modifier>*</modifier></type>          <name>wbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>rbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name></type>           <name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>dest</name></decl>;</decl_stmt>
}</block></struct></type> <name>SHttpClient</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type> <name>transHttpInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SHttpModule</name><modifier>*</modifier></type> <name>thttp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type>         <name>transHttpEnvInit</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>httpHandleReq</name><parameter_list>(<parameter><decl><type><name>SHttpMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>httpHandleQuit</name><parameter_list>(<parameter><decl><type><name>SHttpMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>httpSendQuit</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosSendHttpReportImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pCont</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>contLen</name></decl></parameter>,
                                      <parameter><decl><type><name>EHttpCompFlag</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosBuildHttpHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>contLen</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pHead</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>headLen</name></decl></parameter>,
                                   <parameter><decl><type><name>EHttpCompFlag</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>HTTP_FLAT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>, <argument><expr><name>headLen</name></expr></argument>,
                    <argument><expr><literal type="string">"POST /report HTTP/1.1\n"</literal>
                    <literal type="string">"Host: %s\n"</literal>
                    <literal type="string">"Content-Type: application/json\n"</literal>
                    <literal type="string">"Content-Length: %d\n\n"</literal></expr></argument>,
                    <argument><expr><name>server</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>==</operator> <name>HTTP_GZIP</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>, <argument><expr><name>headLen</name></expr></argument>,
                    <argument><expr><literal type="string">"POST /report HTTP/1.1\n"</literal>
                    <literal type="string">"Host: %s\n"</literal>
                    <literal type="string">"Content-Type: application/json\n"</literal>
                    <literal type="string">"Content-Encoding: gzip\n"</literal>
                    <literal type="string">"Content-Length: %d\n\n"</literal></expr></argument>,
                    <argument><expr><name>server</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_CFG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosCompressHttpRport</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>srcLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>destLen</name> <init>= <expr><name>srcLen</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pDest</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>destLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pDest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>z_stream</name></type> <name>gzipStream</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>gzipStream</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <operator>(</operator><name>alloc_func</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gzipStream</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <operator>(</operator><name>free_func</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gzipStream</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <operator>(</operator><name>voidpf</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>deflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gzipStream</name></expr></argument>, <argument><expr><name>Z_DEFAULT_COMPRESSION</name></expr></argument>, <argument><expr><name>Z_DEFLATED</name></expr></argument>, <argument><expr><name>MAX_WBITS</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>gzipStream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><name>pSrc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gzipStream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <operator>(</operator><name>uLong</name><operator>)</operator><name>srcLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gzipStream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>Bytef</name><operator>*</operator><operator>)</operator><name>pDest</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gzipStream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <operator>(</operator><name>uLong</name><operator>)</operator><operator>(</operator><name>destLen</name><operator>)</operator></expr>;</expr_stmt>

  <while>while <condition>(<expr><name><name>gzipStream</name><operator>.</operator><name>avail_in</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gzipStream</name><operator>.</operator><name>total_out</name></name> <operator>&lt;</operator> <operator>(</operator><name>uLong</name><operator>)</operator><operator>(</operator><name>destLen</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gzipStream</name></expr></argument>, <argument><expr><name>Z_FULL_FLUSH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_COMPRESS_ERROR</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name><name>gzipStream</name><operator>.</operator><name>avail_in</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_COMPRESS_ERROR</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gzipStream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_COMPRESS_ERROR</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gzipStream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_COMPRESS_ERROR</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gzipStream</name><operator>.</operator><name>total_out</name></name> <operator>&gt;=</operator> <name>srcLen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_COMPRESS_ERROR</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>pDest</name></expr></argument>, <argument><expr><name><name>gzipStream</name><operator>.</operator><name>total_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>gzipStream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>taosBuildDstAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_in</name></name><modifier>*</modifier></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ip</name> <init>= <expr><call><name>taosGetIpv4FromFqdn</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ip</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report failed to get http server:%s since %s"</literal></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><ternary><condition><expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"invalid http server"</literal></expr> </then><else>: <expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tinet_ntoa</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_ip4_addr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>httpThread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpModule</name><modifier>*</modifier></type> <name>http</name> <init>= <expr><operator>(</operator><name>SHttpModule</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"http-cli-send-thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpDestroyMsg</name><parameter_list>(<parameter><decl><type><name>SHttpMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>httpAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAsyncItem</name><modifier>*</modifier></type>  <name>item</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHttpModule</name><modifier>*</modifier></type> <name>http</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>pThrd</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHttpMsg</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>quitMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>queue</name></type> <name>wq</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_MOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>queue</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SHttpMsg</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>quit</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>quitMsg</name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>httpHandleReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>quitMsg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>httpHandleQuit</name><argument_list>(<argument><expr><name>quitMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroyHttpClient</name><parameter_list>(<parameter><decl><type><name>SHttpClient</name><modifier>*</modifier></type> <name>cli</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>wbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>wbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>rbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>clientCloseCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpClient</name><modifier>*</modifier></type> <name>cli</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>destroyHttpClient</name><argument_list>(<argument><expr><name>cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>clientAllocBuffCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpClient</name><modifier>*</modifier></type> <name>cli</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>cli</name><operator>-&gt;</operator><name>rbuf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>HTTP_RECV_BUF_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>clientRecvCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpClient</name><modifier>*</modifier></type> <name>cli</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report recv error:%s"</literal></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"http-report succ to recv %d bytes"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>clientCloseCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clientSentCb</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpClient</name><modifier>*</modifier></type> <name>cli</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report failed to send data, reason: %s, dst:%s:%d"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>clientCloseCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"http-report succ to send data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>clientAllocBuffCb</name></expr></argument>, <argument><expr><name>clientRecvCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report failed to recv data,reason:%s, dst:%s:%d"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>clientCloseCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clientConnCb</name><parameter_list>(<parameter><decl><type><name>uv_connect_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpClient</name><modifier>*</modifier></type> <name>cli</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report failed to conn to server, reason:%s, dst:%s:%d"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>clientCloseCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>uv_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>clientSentCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>status</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report failed to send data,reason:%s, dst:%s:%d"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>clientCloseCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>httpSendQuit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpMsg</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHttpMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHttpModule</name><modifier>*</modifier></type> <name>load</name> <init>= <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thttp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>load</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>httpDestroyMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report already released"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>http</name></name> <operator>=</operator> <name>load</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>load</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>q</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosSendHttpReportImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pCont</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>contLen</name></decl></parameter>,
                                      <parameter><decl><type><name>EHttpCompFlag</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpMsg</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHttpMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>cont</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHttpModule</name><modifier>*</modifier></type> <name>load</name> <init>= <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thttp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>load</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>httpDestroyMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report already released"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>http</name></name> <operator>=</operator> <name>load</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>load</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>msg</name><operator>-&gt;</operator><name>q</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>httpDestroyClientCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpClient</name><modifier>*</modifier></type> <name>http</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>destroyHttpClient</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>httpWalkCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_handle_type</name></type> <name>type</name> <init>= <expr><call><name>uv_handle_get_type</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>uv_handle_get_type</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UV_TCP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>httpDestroyClientCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>httpHandleQuit</name><parameter_list>(<parameter><decl><type><name>SHttpMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpModule</name><modifier>*</modifier></type> <name>http</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>http</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_walk</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>httpWalkCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>httpHandleReq</name><parameter_list>(<parameter><decl><type><name>SHttpMsg</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpModule</name><modifier>*</modifier></type> <name>http</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>http</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>dest</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosBuildDstAddr</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HTTP_GZIP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>dstLen</name> <init>= <expr><call><name>taosCompressHttpRport</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dstLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>dstLen</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>HTTP_FLAT</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dstLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>END</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>header</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>headLen</name> <init>= <expr><call><name>taosBuildHttpHeader</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>headLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>wb</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_buf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>wb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>uv_buf_init</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//  heap var</comment>
  <expr_stmt><expr><name><name>wb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>uv_buf_init</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>msg</name><operator>-&gt;</operator><name>cont</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">//  heap var</comment>

  <decl_stmt><decl><type><name>SHttpClient</name><modifier>*</modifier></type> <name>cli</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHttpClient</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>cli</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>cli</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>cli</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>=</operator> <name>wb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>rbuf</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>HTTP_RECV_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>server</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// set up timeout to avoid stuck;</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>fd</name> <init>= <expr><call><name>taosCreateSocketWithTimeout</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>ret</name> <init>= <expr><call><name>uv_tcp_open</name><argument_list>(<argument><expr><operator>(</operator><name>uv_tcp_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report failed to open socket, reason:%s, dst:%s:%d"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyHttpClient</name><argument_list>(<argument><expr><name>cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_tcp_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cli</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name>clientConnCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report failed to connect to http-server, reason:%s, dst:%s:%d"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>,
           <argument><expr><name><name>cli</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyHttpClient</name><argument_list>(<argument><expr><name>cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>

<label><name>END</name>:</label>
  <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"http-report failed to report, reason: %s, addr: %s:%d"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>httpDestroyMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosSendHttpReport</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pCont</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>contLen</name></decl></parameter>, <parameter><decl><type><name>EHttpCompFlag</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transHttpInit</name></expr></argument>, <argument><expr><name>transHttpEnvInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosSendHttpReportImpl</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transHttpEnvInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpModule</name><modifier>*</modifier></type> <name>http</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHttpModule</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_loop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>http</name><operator>-&gt;</operator><name>asyncPool</name></name> <operator>=</operator> <call><name>transAsyncPoolCreate</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>http</name></expr></argument>, <argument><expr><name>httpAsyncCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>httpThread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>http</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>http</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>http</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thttp</name></expr></argument>, <argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transHttpEnvDestroy</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHttpModule</name><modifier>*</modifier></type> <name>load</name> <init>= <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thttp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>load</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>httpSendQuit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>load</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TRANS_DESTROY_ASYNC_POOL_MSG</name><argument_list>(<argument><expr><name><name>load</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><name>SHttpMsg</name></expr></argument>, <argument><expr><name>httpDestroyMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transAsyncPoolDestroy</name><argument_list>(<argument><expr><name><name>load</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><name><name>load</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>load</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thttp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
