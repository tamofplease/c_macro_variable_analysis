<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/transport/src/tmsgcb.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsgcb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SMsgCb</name></type> <name>defaultMsgCb</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>tmsgSetDefault</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMsgCb</name><modifier>*</modifier></type> <name>msgcb</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>defaultMsgCb</name> <operator>=</operator> <operator>*</operator><name>msgcb</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmsgPutToQueue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMsgCb</name><modifier>*</modifier></type> <name>msgcb</name></decl></parameter>, <parameter><decl><type><name>EQueueType</name></type> <name>qtype</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>msgcb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call>(<modifier>*</modifier><name><name>msgcb</name><operator>-&gt;</operator><name>putToQueueFp</name></name>)<argument_list>(<argument><expr><name><name>msgcb</name><operator>-&gt;</operator><name>mgmt</name></name></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmsgGetQueueSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMsgCb</name><modifier>*</modifier></type> <name>msgcb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>EQueueType</name></type> <name>qtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call>(<modifier>*</modifier><name><name>msgcb</name><operator>-&gt;</operator><name>qsizeFp</name></name>)<argument_list>(<argument><expr><name><name>msgcb</name><operator>-&gt;</operator><name>mgmt</name></name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmsgSendReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SEpSet</name><modifier>*</modifier></type> <name>epSet</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call>(<modifier>*</modifier><name><name>defaultMsgCb</name><operator>.</operator><name>sendReqFp</name></name>)<argument_list>(<argument><expr><name>epSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmsgSendRsp</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <expr_stmt><expr><call><name>rpcSendResponse</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call>(<modifier>*</modifier><name><name>defaultMsgCb</name><operator>.</operator><name>sendRspFp</name></name>)<argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmsgRegisterBrokenLinkArg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name><name>defaultMsgCb</name><operator>.</operator><name>registerBrokenLinkArgFp</name></name>)<argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tmsgReleaseHandle</name><parameter_list>(<parameter><decl><type><name>SRpcHandleInfo</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name><name>defaultMsgCb</name><operator>.</operator><name>releaseHandleFp</name></name>)<argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tmsgReportStartup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name><name>defaultMsgCb</name><operator>.</operator><name>reportStartupFp</name></name>)<argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</unit>
