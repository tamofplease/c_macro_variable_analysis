<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/transport/src/transCli.c"><comment type="block" format="doxygen">/** Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UV</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transComm.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SConnList</name> <block>{
  <decl_stmt><decl><type><name>queue</name></type>   <name>conns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>SConnList</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SCliConn</name> <block>{
  <macro><name>T_REF_DECLARE</name><argument_list>()</argument_list></macro>
  <decl_stmt><decl><type><name>uv_connect_t</name></type> <name>connReq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>queue</name></type>        <name>wreqQueue</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>timer</name></decl>;</decl_stmt>  <comment type="line">// read timer, forbidden</comment>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>hostThrd</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SConnBuffer</name></type> <name>readBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransQueue</name></type> <name>cliMsgs</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>queue</name></type>      <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SConnList</name><modifier>*</modifier></type> <name>list</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STransCtx</name></type>  <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>       <name>broken</name></decl>;</decl_stmt>  <comment type="line">// link broken or not</comment>
  <decl_stmt><decl><type><name>ConnStatus</name></type> <name>status</name></decl>;</decl_stmt>  <comment type="line">//</comment>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>ip</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>port</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDelayTask</name><modifier>*</modifier></type> <name>task</name></decl>;</decl_stmt>

  <comment type="line">// debug and log info</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dst</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>SCliConn</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SCliMsg</name> <block>{
  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransMsg</name></type>      <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>queue</name></type>          <name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransMsgType</name></type>  <name>type</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>st</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>sent</name></decl>;</decl_stmt>  <comment type="line">//(0: no send, 1: alread sent)</comment>
}</block></struct></type> <name>SCliMsg</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SCliThrd</name> <block>{
  <decl_stmt><decl><type><name>TdThread</name></type>      <name>thread</name></decl>;</decl_stmt>  <comment type="line">// tid</comment>
  <decl_stmt><decl><type><name>int64_t</name></type>       <name>pid</name></decl>;</decl_stmt>     <comment type="line">// pid</comment>
  <decl_stmt><decl><type><name>uv_loop_t</name><modifier>*</modifier></type>    <name>loop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAsyncPool</name><modifier>*</modifier></type>   <name>asyncPool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_prepare_t</name><modifier>*</modifier></type> <name>prepare</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>         <name>pool</name></decl>;</decl_stmt>  <comment type="line">// conn pool</comment>
  <comment type="line">// timer handles</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>timerList</name></decl>;</decl_stmt>
  <comment type="line">// msg queue</comment>
  <decl_stmt><decl><type><name>queue</name></type>         <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type> <name>msgMtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelayQueue</name><modifier>*</modifier></type>  <name>delayQueue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelayQueue</name><modifier>*</modifier></type>  <name>timeoutQueue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>      <name>nextTimeout</name></decl>;</decl_stmt>  <comment type="line">// next timeout</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>         <name>pTransInst</name></decl>;</decl_stmt>   <comment type="line">//</comment>

  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destroyAhandleFp</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ahandle</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>fqdn2ipCache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCvtAddr</name></type>  <name>cvtAddr</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>failFastCache</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>stopMsg</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>quit</name></decl>;</decl_stmt>
}</block></struct></type> <name>SCliThrd</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SCliObj</name> <block>{
  <decl_stmt><decl><type><name>char</name></type>       <name><name>label</name><index>[<expr><name>TSDB_LABEL_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>numOfThreads</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier><modifier>*</modifier></type> <name>pThreadObj</name></decl>;</decl_stmt>
}</block></struct></type> <name>SCliObj</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>reinit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>threshold</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>interval</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFailFastItem</name>;</typedef>
<comment type="line">// conn pool</comment>
<comment type="line">// add expire timeout and capacity limit</comment>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type>     <name>createConnPool</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type>     <name>destroyConnPool</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SCliConn</name><modifier>*</modifier></type> <name>getConnFromPool</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>addConnToPool</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>doCloseIdleConn</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// register conn timer</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliConnTimeout</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// register timer for read</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliReadTimeoutCb</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// register timer in each thread to clear expire conn</comment>
<comment type="line">// static void cliTimeoutCb(uv_timer_t* handle);</comment>
<comment type="line">// alloc buffer for recv</comment>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>cliAllocRecvBufferCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// callback after recv nbytes from socket</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliRecvCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>cli</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// callback after send data to socket</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliSendCb</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// callback after conn to server</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliConnCb</name><parameter_list>(<parameter><decl><type><name>uv_connect_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliIdleCb</name><parameter_list>(<parameter><decl><type><name>uv_idle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliPrepareCb</name><parameter_list>(<parameter><decl><type><name>uv_prepare_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>cliRecvReleaseReq</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>allocConnRef</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cliAppCb</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pResp</name></decl></parameter>, <parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SCliConn</name><modifier>*</modifier></type> <name>cliCreateConn</name><parameter_list>(<parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>cliDestroyConn</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clear</name></decl></parameter> <comment type="block">/*clear tcp handle or not*/</comment>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>cliDestroy</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>cliSend</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>cliDestroyConnMsgs</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>destroy</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// cli util func</comment>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>cliIsEpsetUpdated</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>cliMayCvtFqdnToIp</name><parameter_list>(<parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SCvtAddr</name><modifier>*</modifier></type> <name>pCvtAddr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>cliBuildExceptResp</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>resp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>uint32_t</name></type> <name>cliGetIpFromFqdnCache</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>fqdn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type>     <name>cliUpdateFqdnCache</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>fqdn</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// process data read from server, add decompress etc later</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliHandleResp</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// handle except about conn</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliHandleExcept</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliReleaseUnfinishedMsg</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// handle req from app</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliHandleReq</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliHandleQuit</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliHandleRelease</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliHandleUpdate</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>cliAsyncHandle</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <init>= <expr><block>{<expr><name>cliHandleReq</name></expr></block></expr></init><operator>,</operator> cliHandleQuit<operator>,</operator> cliHandleRelease<operator>,</operator> NULL<operator>,</operator>
                                                                   cliHandleUpdate</function_decl>};

<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroyUserdata</name><parameter_list>(<parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroyCmsg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cmsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroyCmsgAndAhandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>cmsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int</name></type>  <name>cliRBChoseIdx</name><parameter_list>(<parameter><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>transDestroyConnCtx</name><parameter_list>(<parameter><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// thread obj</comment>
<function_decl><type><specifier>static</specifier> <name>SCliThrd</name><modifier>*</modifier></type> <name>createThrdObj</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>trans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>destroyThrdObj</name><parameter_list>(<parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cliWalkCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLI_RELEASE_UV</name><parameter_list>(<parameter><type><name>loop</name></type></parameter>)</parameter_list></cpp:macro>        \
  <cpp:value>do {                              \
    uv_walk(loop, cliWalkCb, NULL); \
    uv_run(loop, UV_RUN_DEFAULT);   \
    uv_loop_close(loop);            \
  } while (0);</cpp:value></cpp:define>

<comment type="line">// snprintf may cause performance problem</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_CONSTRUCT_HASH_KEY</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>ip</name></type></parameter>, <parameter><type><name>port</name></type></parameter>)</parameter_list></cpp:macro>          \
  <cpp:value>do {                                                  \
    snprintf(key, sizeof(key), "%s:%d", ip, (int)port); \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_PERSIST_TIME</name><parameter_list>(<parameter><type><name>para</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((para) &lt;= 90000 ? 90000 : (para))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_GET_INST_LABEL</name><parameter_list>(<parameter><type><name>conn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((STrans*)(((SCliThrd*)(conn)-&gt;hostThrd)-&gt;pTransInst))-&gt;label)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_GET_MSGCTX_BY_AHANDLE</name><parameter_list>(<parameter><type><name>conn</name></type></parameter>, <parameter><type><name>ahandle</name></type></parameter>)</parameter_list></cpp:macro>                         \
  <cpp:value>do {                                                                    \
    int i = 0, sz = transQueueSize(&amp;conn-&gt;cliMsgs);                       \
    for (; i &lt; sz; i++) {                                                 \
      pMsg = transQueueGet(&amp;conn-&gt;cliMsgs, i);                            \
      if (pMsg-&gt;ctx != NULL &amp;&amp; (uint64_t)pMsg-&gt;ctx-&gt;ahandle == ahandle) { \
        break;                                                            \
      }                                                                   \
    }                                                                     \
    if (i == sz) {                                                        \
      pMsg = NULL;                                                        \
      tDebug("msg not found, %" PRIu64 "", ahandle);                      \
    } else {                                                              \
      pMsg = transQueueRm(&amp;conn-&gt;cliMsgs, i);                             \
      tDebug("msg found, %" PRIu64 "", ahandle);                          \
    }                                                                     \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_GET_NEXT_SENDMSG</name><parameter_list>(<parameter><type><name>conn</name></type></parameter>)</parameter_list></cpp:macro>                 \
  <cpp:value>do {                                              \
    int i = 0;                                      \
    do {                                            \
      pCliMsg = transQueueGet(&amp;conn-&gt;cliMsgs, i++); \
      if (pCliMsg &amp;&amp; 0 == pCliMsg-&gt;sent) {          \
        break;                                      \
      }                                             \
    } while (pCliMsg != NULL);                      \
    if (pCliMsg == NULL) {                          \
      goto _RETURN;                                 \
    }                                               \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_SET_PERSIST_BY_APP</name><parameter_list>(<parameter><type><name>conn</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                \
    if (conn-&gt;status == ConnNormal) { \
      conn-&gt;status = ConnAcquire;     \
      transRefCliHandle(conn);        \
    }                                 \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_NO_PERSIST_BY_APP</name><parameter_list>(<parameter><type><name>conn</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(((conn)-&gt;status == ConnNormal || (conn)-&gt;status == ConnInPool) &amp;&amp; T_REF_VAL_GET(conn) == 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONN_RELEASE_BY_SERVER</name><parameter_list>(<parameter><type><name>conn</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(((conn)-&gt;status == ConnRelease || (conn)-&gt;status == ConnInPool) &amp;&amp; T_REF_VAL_GET(conn) == 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_NO_RESP</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>((msg)-&gt;info.noResp == 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_PERSIS_HANDLE</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((msg)-&gt;info.persistHandle == 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_RELEASE_HANDLE</name><parameter_list>(<parameter><type><name>cmsg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cmsg)-&gt;type == Release)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSET_IS_VALID</name><parameter_list>(<parameter><type><name>epSet</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>((epSet) != NULL &amp;&amp; (epSet)-&gt;numOfEps &gt;= 0 &amp;&amp; (epSet)-&gt;inUse &gt;= 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSET_GET_SIZE</name><parameter_list>(<parameter><type><name>epSet</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(epSet)-&gt;numOfEps</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSET_GET_INUSE_IP</name><parameter_list>(<parameter><type><name>epSet</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((epSet)-&gt;eps[(epSet)-&gt;inUse].fqdn)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSET_GET_INUSE_PORT</name><parameter_list>(<parameter><type><name>epSet</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((epSet)-&gt;eps[(epSet)-&gt;inUse].port)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSET_FORWARD_INUSE</name><parameter_list>(<parameter><type><name>epSet</name></type></parameter>)</parameter_list></cpp:macro>                             \
  <cpp:value>do {                                                         \
    if ((epSet)-&gt;numOfEps != 0) {                              \
      ++((epSet)-&gt;inUse);                                      \
      (epSet)-&gt;inUse = ((epSet)-&gt;inUse) % ((epSet)-&gt;numOfEps); \
    }                                                          \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSET_DEBUG_STR</name><parameter_list>(<parameter><type><name>epSet</name></type></parameter>, <parameter><type><name>tbuf</name></type></parameter>)</parameter_list></cpp:macro>                                                                                   \
  <cpp:value>do {                                                                                                                 \
    int len = snprintf(tbuf, sizeof(tbuf), "epset:{");                                                                 \
    for (int i = 0; i &lt; (epSet)-&gt;numOfEps; i++) {                                                                      \
      if (i == (epSet)-&gt;numOfEps - 1) {                                                                                \
        len += snprintf(tbuf + len, sizeof(tbuf) - len, "%d. %s:%d", i, (epSet)-&gt;eps[i].fqdn, (epSet)-&gt;eps[i].port);   \
      } else {                                                                                                         \
        len += snprintf(tbuf + len, sizeof(tbuf) - len, "%d. %s:%d, ", i, (epSet)-&gt;eps[i].fqdn, (epSet)-&gt;eps[i].port); \
      }                                                                                                                \
    }                                                                                                                  \
    len += snprintf(tbuf + len, sizeof(tbuf) - len, "}, inUse:%d", (epSet)-&gt;inUse);                                    \
  } while (0);</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>cliWorkThread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cliReleaseUnfinishedMsg</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>transQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>transQueueGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>msg</name><operator>-&gt;</operator><name>ctx</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>msg</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>!=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">0x9527</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>freeFunc</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>msg</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>conn</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>freeFunc</name></name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pThrd</name><operator>-&gt;</operator><name>destroyAhandleFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p destroy unfinished ahandle %p"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pThrd</name><operator>-&gt;</operator><name>destroyAhandleFp</name></name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>cliMaySendCachedMsg</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pCliMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CONN_GET_NEXT_SENDMSG</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pCliMsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>false</name></expr>;</return></block_content></block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>cliSend</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
<label><name>_RETURN</name>:</label>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>cliHandleResp</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>   <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>uv_is_active</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p stop timer"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><call><name>transDumpFromBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pHead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgLen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p recv invalid packet "</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>transDecompressMsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pHead</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p recv invalid packet, failed to decompress"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cliRecvReleaseReq</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STransMsg</name></type> <name>transMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <call><name>transContLenFromMsg</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>transContFromHead</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>traceId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>hasEpSet</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>hasEpSet</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type>       <name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>CONN_NO_PERSIST_BY_APP</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pMsg</name> <operator>=</operator> <call><name>transQueuePop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pCtx</name> <operator>=</operator> <ternary><condition><expr><name>pMsg</name></expr> ?</condition><then> <expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <ternary><condition><expr><name>pCtx</name></expr> ?</condition><then> <expr><name><name>pCtx</name><operator>-&gt;</operator><name>ahandle</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p get ahandle %p, persist: 0"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>ahandle</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pHead</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CONN_GET_MSGCTX_BY_AHANDLE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ahandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <call><name>transCtxDumpVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p construct ahandle %p by %s, persist: 1"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
             <argument><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CONN_RELEASE_BY_SERVER</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_RPC_BROKEN_LINK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <call><name>transCtxDumpBrokenlinkVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>transMsg</name><operator>.</operator><name>msgType</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p construct ahandle %p due brokenlink, persist: 1"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
               <argument><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pCtx</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <ternary><condition><expr><name>pCtx</name></expr> ?</condition><then> <expr><name><name>pCtx</name><operator>-&gt;</operator><name>ahandle</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p get ahandle %p, persist: 1"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="line">// buf's mem alread translated to transMsg.pCont</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CONN_NO_PERSIST_BY_APP</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p ref by app"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p %s received from %s, local info:%s, len:%d, code str:%s"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
          <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCtx</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>CONN_NO_PERSIST_BY_APP</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s except, conn %p read while cli ignore it"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>CONN_RELEASE_BY_SERVER</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s except, conn %p read while cli ignore it"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>pMsg</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Release</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>cliAppCb</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transMsg</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cliMaySendCachedMsg</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>CONN_NO_PERSIST_BY_APP</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>addConnToPool</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>cliAllocRecvBufferCb</name></expr></argument>, <argument><expr><name>cliRecvCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cliHandleExceptImpl</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>transQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>broken</name></name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <call><name>CONN_NO_PERSIST_BY_APP</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p handle except, persist:0"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transUnrefCliHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>   <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>once</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>transQueuePop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>once</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>REQUEST_NO_RESP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><ternary><condition><expr><name>pMsg</name></expr> ?</condition><then> <expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>STransMsg</name></type> <name>transMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <ternary><condition><expr><name>code</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name><name>pConn</name><operator>-&gt;</operator><name>broken</name></name></expr> ?</condition><then> <expr><name>TSDB_CODE_RPC_BROKEN_LINK</name></expr> </then><else>: <expr><name>TSDB_CODE_RPC_NETWORK_UNAVAIL</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>code</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <ternary><condition><expr><name>pMsg</name></expr> ?</condition><then> <expr><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CONN_NO_PERSIST_BY_APP</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <call><name>transCtxDumpVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p construct ahandle %p by %s"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>,
             <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>msgType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <call><name>transCtxDumpBrokenlinkVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>msgType</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p construct ahandle %p due to brokenlink"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>,
               <argument><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pMsg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Release</name> <operator>&amp;&amp;</operator> <name>pCtx</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pCtx</name><operator>-&gt;</operator><name>ahandle</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pCtx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>pSem</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>transMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>REQUEST_NO_RESP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Release</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>once</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>pMsg</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Release</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>cliAppCb</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transMsg</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p start to destroy, ref:%d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>transQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  <expr_stmt><expr><call><name>transUnrefCliHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>cliHandleExcept</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p except ref:%d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cliHandleExceptImpl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cliConnTimeout</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p conn timeout, ref:%d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cliHandleExceptImpl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>cliReadTimeoutCb</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// set up timeout cb</comment>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p timeout, ref:%d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_read_stop</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cliHandleExceptImpl</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>TSDB_CODE_RPC_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>createConnPool</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// thread local, no lock</comment>
  <return>return <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>destroyConnPool</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConnList</name><modifier>*</modifier></type> <name>connList</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><operator>(</operator><name>SHashObj</name><operator>*</operator><operator>)</operator><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>connList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connList</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>queue</name><modifier>*</modifier></type>    <name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>connList</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SCliConn</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cliDestroyConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>connList</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><operator>(</operator><name>SHashObj</name><operator>*</operator><operator>)</operator><name>pool</name></expr></argument>, <argument><expr><name>connList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SCliConn</name><modifier>*</modifier></type> <name>getConnFromPool</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>TSDB_FQDN_LEN</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CONN_CONSTRUCT_HASH_KEY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SConnList</name><modifier>*</modifier></type> <name>plist</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><operator>(</operator><name>SHashObj</name><operator>*</operator><operator>)</operator><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>plist</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SConnList</name></type> <name>list</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><operator>(</operator><name>SHashObj</name><operator>*</operator><operator>)</operator><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>plist</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><operator>(</operator><name>SHashObj</name><operator>*</operator><operator>)</operator><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>plist</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plist</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plist</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>plist</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>queue</name><modifier>*</modifier></type>    <name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plist</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SCliConn</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ConnNormal</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>task</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transDQCancel</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SCliThrd</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name><operator>)</operator><operator>-&gt;</operator><name>timeoutQueue</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>addConnToPool</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>ConnInPool</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>allocConnRef</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>thrd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transUnrefCliHandle</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>cliDestroyConnMsgs</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ConnInPool</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>TSDB_FQDN_LEN</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CONN_CONSTRUCT_HASH_KEY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p added to conn pool, read buf cap:%d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name><operator>.</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><operator>(</operator><name>SHashObj</name><operator>*</operator><operator>)</operator><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p added to conn pool, read buf cap:%d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name><operator>.</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>QUEUE_PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STaskArg</name><modifier>*</modifier></type> <name>arg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaskArg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>param1</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>param2</name></name> <operator>=</operator> <name>thrd</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name><name>thrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <call><name>transDQSched</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>timeoutQueue</name></name></expr></argument>, <argument><expr><name>doCloseIdleConn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>CONN_PERSIST_TIME</name><argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>idleTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>allocConnRef</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transRemoveExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>transAddExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>exh</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>specifyConnRef</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>update</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transRemoveExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>exh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>exh</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cliAllocRecvBufferCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>suggested_size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type>    <name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p alloc read buf"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transAllocBuffer</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cliRecvCb</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type>    <name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>nread</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>transReadComplete</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p read complete"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>invalid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>cliHandleExcept</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>cliHandleResp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// ref http://docs.libuv.org/en/v1.x/stream.html?highlight=uv_read_start#c.uv_read_cb</comment>
    <comment type="line">// nread might be 0, which does not indicate an error or EOF. This is equivalent to EAGAIN or EWOULDBLOCK under</comment>
    <comment type="line">// read(2).</comment>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p read empty"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tWarn</name><argument_list>(<argument><expr><literal type="string">"%s conn %p read error:%s, ref:%d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>broken</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cliHandleExcept</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SCliConn</name><modifier>*</modifier></type> <name>cliCreateConn</name><parameter_list>(<parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCliConn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// read/write stream handle</comment>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_tcp_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uv_tcp_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transSetConnOption</name><argument_list>(<argument><expr><operator>(</operator><name>uv_tcp_t</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><ternary><condition><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name>uv_timer_t</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayPop</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_timer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"no available timer, create a timer %p"</literal></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_timer_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>connReq</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReqQueueInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>wreqQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transQueueInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transInitBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name> <operator>=</operator> <name>pThrd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ConnNormal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>broken</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transRefCliHandle</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>allocConnRef</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cliDestroyConn</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clear</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p remove from conn pool"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transRemoveExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>task</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transDQCancel</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timeoutQueue</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>clear</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uv_read_stop</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>cliDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cliDestroy</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>uv_handle_get_type</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>UV_TCP</name> <operator>||</operator> <name><name>handle</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transRemoveExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cliDestroyConnMsgs</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p destroy successfully"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReqQueueClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>wreqQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transDestroyBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>cliHandleNoResp</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>transQueueGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>REQUEST_NO_RESP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>transQueuePop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>cliMaySendCachedMsg</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>thrd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addConnToPool</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cliSendCb</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><call><name>transReqQueueRemove</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><ternary><condition><expr><operator>!</operator><call><name>transQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>transQueueGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cost</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>st</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tWarn</name><argument_list>(<argument><expr><literal type="string">"%s conn %p send cost:%dus, send exception"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p data already was written out"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"%s conn %p failed to write:%s"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>cliHandleExcept</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cliHandleNoResp</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p no resp required"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>cliAllocRecvBufferCb</name></expr></argument>, <argument><expr><name>cliRecvCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cliSend</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>transQueueEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pCliMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CONN_GET_NEXT_SENDMSG</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCliMsg</name><operator>-&gt;</operator><name>sent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pCliMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>   <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><operator>(</operator><name>STransMsg</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pCliMsg</name><operator>-&gt;</operator><name>msg</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>rpcMallocCont</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type>            <name>msgLen</name> <init>= <expr><call><name>transMsgLenFromCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><call><name>transHeadFromCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHead</name><operator>-&gt;</operator><name>comp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <ternary><condition><expr><name>pCtx</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>ahandle</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>noResp</name></name> <operator>=</operator> <ternary><condition><expr><call><name>REQUEST_NO_RESP</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>persist</name></name> <operator>=</operator> <ternary><condition><expr><call><name>REQUEST_PERSIS_HANDLE</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>release</name></name> <operator>=</operator> <ternary><condition><expr><call><name>REQUEST_RELEASE_HANDLE</name><argument_list>(<argument><expr><name>pCliMsg</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>traceId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>magicNum</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>TRANS_MAGIC_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <call><name>taosHton64</name><argument_list>(<argument><expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHead</name><operator>-&gt;</operator><name>persist</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CONN_SET_PERSIST_BY_APP</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTransInst</name><operator>-&gt;</operator><name>startTimer</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name><name>pTransInst</name><operator>-&gt;</operator><name>startTimer</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><ternary><condition><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name>uv_timer_t</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayPop</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>timer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_timer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"no available timer, create a timer %p"</literal></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uv_timer_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pConn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p start timer for msg:%s"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_timer_t</name><operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>cliReadTimeoutCb</name></expr></argument>, <argument><expr><name>TRANS_READ_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHead</name><operator>-&gt;</operator><name>comp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTransInst</name><operator>-&gt;</operator><name>compressSize</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>compressSize</name></name> <operator>&lt;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>msgLen</name> <operator>=</operator> <call><name>transCompressMsg</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>msgLen</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p %s is sent to %s, local info %s, len:%d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>,
          <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uv_buf_t</name></type>    <name>wb</name> <init>= <expr><call><name>uv_buf_init</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHead</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>req</name> <init>= <expr><call><name>transReqQueuePush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>wreqQueue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>uv_write</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cliSendCb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tGError</name><argument_list>(<argument><expr><literal type="string">"%s conn %p failed to send msg:%s, errmsg:%s"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cliHandleExcept</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>
<label><name>_RETURN</name>:</label>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cliConnCb</name><parameter_list>(<parameter><decl><type><name>uv_connect_t</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pConn</name><operator>-&gt;</operator><name>timer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConn</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>transQueueGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>  <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"%s msg %s failed to send, conn %p failed to connect to %s:%d, reason: %s"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><ternary><condition><expr><name>pMsg</name></expr> ?</condition><then> <expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>pConn</name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>REQUEST_NO_RESP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>pTransInst</name><operator>-&gt;</operator><name>failFastFp</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name><name>pTransInst</name><operator>-&gt;</operator><name>failFastFp</name></name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>ip</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>ip</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>port</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>port</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>     <name><name>key</name><index>[<expr><name>TSDB_FQDN_LEN</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>CONN_CONSTRUCT_HASH_KEY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SFailFastItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>failFastCache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type>        <name>cTimestamp</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>elapse</name> <init>= <expr><name>cTimestamp</name> <operator>-</operator> <name><name>item</name><operator>-&gt;</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>elapse</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>elapse</name> <operator>&lt;=</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>failFastInterval</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>cTimestamp</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SFailFastItem</name></type> <name>item</name> <init>= <expr><block>{<expr><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>timestamp</name> <operator>=</operator> <name>cTimestamp</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>failFastCache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFailFastItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>cliHandleExcept</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>peername</name></decl>, <decl><type ref="prev"/><name>sockname</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>peername</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_tcp_getpeername</name><argument_list>(<argument><expr><operator>(</operator><name>uv_tcp_t</name><operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peername</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transSockInfo2Str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peername</name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>addrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sockname</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_tcp_getsockname</name><argument_list>(<argument><expr><operator>(</operator><name>uv_tcp_t</name><operator>*</operator><operator>)</operator><name><name>pConn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transSockInfo2Str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sockname</name></expr></argument>, <argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p connect to server successfully"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pConn</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cliSend</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cliHandleQuit</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transAsyncPoolIsEmpty</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>stopMsg</name></name> <operator>=</operator> <name>pMsg</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>stopMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"cli work thread %p start to quit"</literal></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyConnPool</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_walk</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>cliWalkCb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cliHandleRelease</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>refId</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>exh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" already released"</literal></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>exh</name><operator>-&gt;</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p start to release to inst"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transUnrefCliHandle</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transQueuePush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>cliSend</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"%s conn %p already released"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cliHandleUpdate</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>cvtAddr</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>cvtAddr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SCliConn</name><modifier>*</modifier></type> <name>cliGetConn</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type>      <name>conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>refId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>exh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to get conn, refId: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>ignore</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>conn</name> <operator>=</operator> <name><name>exh</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>getConnFromPool</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><call><name>EPSET_GET_INUSE_IP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EPSET_GET_INUSE_PORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>specifyConnRef</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>conn</name></expr>;</return>
  </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>getConnFromPool</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><call><name>EPSET_GET_INUSE_IP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EPSET_GET_INUSE_PORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p get from conn pool:%p"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s not found conn in conn pool:%p"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>STrans</name><operator>*</operator><operator>)</operator><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name><operator>)</operator><operator>-&gt;</operator><name>label</name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>FORCE_INLINE</name> <name>void</name></type> <name>cliMayCvtFqdnToIp</name><parameter_list>(<parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SCvtAddr</name><modifier>*</modifier></type> <name>pCvtAddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCvtAddr</name><operator>-&gt;</operator><name>cvt</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pCvtAddr</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pCvtAddr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>bool</name></type> <name>cliIsEpsetUpdated</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <comment type="line">// if (pCtx-&gt;retryCnt == 0) return false;</comment>
  <if_stmt><if>if <condition>(<expr><call><name>transEpSetIsEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>origEpSet</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>FORCE_INLINE</name> <name>int32_t</name></type> <name>cliBuildExceptResp</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pResp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pResp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pResp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_RPC_BROKEN_LINK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResp</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr> ?</condition><then> <expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ahandle</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResp</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>uint32_t</name></type> <name>cliGetIpFromFqdnCache</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>fqdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>fqdn</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fqdn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>taosGetIpv4FromFqdn</name><argument_list>(<argument><expr><name>fqdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>fqdn</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fqdn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>*</operator><name>v</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>cliUpdateFqdnCache</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>fqdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// impl later</comment>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cliHandleReq</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>        <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>cliMayCvtFqdnToIp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>cvtAddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EPSET_IS_VALID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"invalid epset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>REQUEST_NO_RESP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pTransInst</name><operator>-&gt;</operator><name>failFastFp</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name><name>pTransInst</name><operator>-&gt;</operator><name>failFastFp</name></name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>ip</name> <init>= <expr><call><name>EPSET_GET_INUSE_IP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>port</name> <init>= <expr><call><name>EPSET_GET_INUSE_PORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>     <name><name>key</name><index>[<expr><name>TSDB_FQDN_LEN</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CONN_CONSTRUCT_HASH_KEY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SFailFastItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>failFastCache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>elapse</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>item</name><operator>-&gt;</operator><name>timestamp</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>failFastThreshold</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>elapse</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>elapse</name> <operator>&lt;=</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>failFastInterval</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s, msg %s cancel to send, reason: failed to connect %s:%d: count: %d, at %d"</literal></expr></argument>, <argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>label</name></name></expr></argument>,
                <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>elapse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>      <name>ignore</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><call><name>cliGetConn</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ignore</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// persist conn already release by server</comment>
    <decl_stmt><decl><type><name>STransMsg</name></type> <name>resp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cliBuildExceptResp</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Release</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name><argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transCtxMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>appCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transQueuePush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cliSend</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>cliCreateConn</name><argument_list>(<argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>refId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>specifyConnRef</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>transCtxMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>appCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transQueuePush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ip</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>EPSET_GET_INUSE_IP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>EPSET_GET_INUSE_PORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>cliGetIpFromFqdnCache</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>fqdn2ipCache</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p try to connect to %s:%d"</literal></expr></argument>, <argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>uv_tcp_connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>connReq</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uv_tcp_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>cliConnCb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p failed to connect to %s:%d, reason:%s"</literal></expr></argument>, <argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
              <argument><expr><call><name>uv_err_name</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>cliHandleExcept</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>cliConnTimeout</name></expr></argument>, <argument><expr><name>TRANS_CONN_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p ready"</literal></expr></argument>, <argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cliAsyncCb</name><parameter_list>(<parameter><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAsyncItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type>   <name>pThrd</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>pThrd</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type>    <name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// batch process to avoid to lock/unlock frequently</comment>
  <decl_stmt><decl><type><name>queue</name></type> <name>wq</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_MOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>queue</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SCliMsg</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call>(<modifier>*</modifier><name>cliAsyncHandle</name><index>[<expr><name><name>pMsg</name><operator>-&gt;</operator><name>type</name></name></expr>]</index>)<argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"cli process batch size:%d"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// if (!uv_is_active((uv_handle_t*)pThrd-&gt;prepare)) uv_prepare_start(pThrd-&gt;prepare, cliPrepareCb);</comment>

  <if_stmt><if>if <condition>(<expr><name><name>pThrd</name><operator>-&gt;</operator><name>stopMsg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cliHandleQuit</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>stopMsg</name></name></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cliPrepareCb</name><parameter_list>(<parameter><decl><type><name>uv_prepare_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>thrd</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"prepare work start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SAsyncPool</name><modifier>*</modifier></type> <name>pool</name> <init>= <expr><name><name>thrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>nAsync</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>async</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>asyncs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SAsyncItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>queue</name></type> <name>wq</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QUEUE_MOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>queue</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>SCliMsg</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call>(<modifier>*</modifier><name>cliAsyncHandle</name><index>[<expr><name><name>pMsg</name><operator>-&gt;</operator><name>type</name></name></expr>]</index>)<argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>thrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"prepare work end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>thrd</name><operator>-&gt;</operator><name>stopMsg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cliHandleQuit</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>stopMsg</name></name></expr></argument>, <argument><expr><name>thrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cliDestroyConnMsgs</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>destroy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>transCtxCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cliReleaseUnfinishedMsg</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>destroy</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transQueueDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>transQueueClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cliIteraConnMsgs</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>   <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>transQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>cmsg</name> <init>= <expr><call><name>transQueueGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Release</name> <operator>||</operator> <call><name>REQUEST_NO_RESP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>cmsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SCH_DROP_TASK</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STransMsg</name></type> <name>resp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <call><name>cliBuildExceptResp</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name><argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>cliRecvReleaseReq</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHead</name><operator>-&gt;</operator><name>release</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pHead</name><operator>-&gt;</operator><name>msgLen</name></name><operator>)</operator> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>ahandle</name> <init>= <expr><name><name>pHead</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"ahandle = %"</literal> <name>PRIu64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>ahandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CONN_GET_MSGCTX_BY_AHANDLE</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ahandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>transClearBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>readBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><call><name>transContFromHead</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ahandle</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>transQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>cliMsg</name> <init>= <expr><call><name>transQueueGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>cliMsgs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cliMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Release</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pMsg</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>cliIteraConnMsgs</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p receive release request, refId:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addConnToPool</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SCliThrd</name><operator>*</operator><operator>)</operator><name><name>conn</name><operator>-&gt;</operator><name>hostThrd</name></name><operator>)</operator><operator>-&gt;</operator><name>pool</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>cliWorkThread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><operator>(</operator><name>SCliThrd</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"trans-cli-work"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"thread quit-thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>transInitClient</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numOfThreads</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>shandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliObj</name><modifier>*</modifier></type> <name>cli</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCliObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name>shandle</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>TSDB_LABEL_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>numOfThreads</name></name> <operator>=</operator> <name>numOfThreads</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>pThreadObj</name></name> <operator>=</operator> <operator>(</operator><name>SCliThrd</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCliThrd</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cli</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><call><name>createThrdObj</name><argument_list>(<argument><expr><name>shandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>       <name>err</name> <init>= <expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cliWorkThread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pThrd</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"success to create tranport-cli thread:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>cli</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pThrd</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>cli</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroyUserdata</name><parameter_list>(<parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>userdata</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>userdata</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>userdata</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroyCmsg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>transDestroyConnCtx</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyUserdata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>destroyCmsgAndAhandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>param</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>STaskArg</name><modifier>*</modifier></type> <name>arg</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type>  <name>pMsg</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>param1</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>param2</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"destroy Ahandle A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pThrd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pThrd</name><operator>-&gt;</operator><name>destroyAhandleFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"destroy Ahandle B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pThrd</name><operator>-&gt;</operator><name>destroyAhandleFp</name></name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"destroy Ahandle C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transDestroyConnCtx</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyUserdata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SCliThrd</name><modifier>*</modifier></type> <name>createThrdObj</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>trans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><name>trans</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><operator>(</operator><name>SCliThrd</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCliThrd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>msgMtx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <operator>(</operator><name>uv_loop_t</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_loop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name> <operator>=</operator> <call><name>transAsyncPoolCreate</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>, <argument><expr><name>cliAsyncCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>prepare</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_prepare_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_prepare_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>prepare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>prepare</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pThrd</name></expr>;</expr_stmt>
  <comment type="line">// uv_prepare_start(pThrd-&gt;prepare, cliPrepareCb);</comment>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>timerSize</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>timerSize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>timerSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_timer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uv_timer_init</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>createConnPool</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transDQCreate</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>delayQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transDQCreate</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>timeoutQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>nextTimeout</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>CONN_PERSIST_TIME</name><argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>idleTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name> <operator>=</operator> <name>trans</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>destroyAhandleFp</name></name> <operator>=</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>destroyFp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>fqdn2ipCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>failFastCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pThrd</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>pThrd</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyThrdObj</name><parameter_list>(<parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pThrd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CLI_RELEASE_UV</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThrd</name><operator>-&gt;</operator><name>msgMtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TRANS_DESTROY_ASYNC_POOL_MSG</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><name>SCliMsg</name></expr></argument>, <argument><expr><name>destroyCmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transAsyncPoolDestroy</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transDQDestroy</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>delayQueue</name></name></expr></argument>, <argument><expr><name>destroyCmsgAndAhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transDQDestroy</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timeoutQueue</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"thread destroy %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>timerList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>prepare</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>fqdn2ipCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>failFastCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>transDestroyConnCtx</name><parameter_list>(<parameter><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cliSendQuit</name><parameter_list>(<parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>thrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// cli can stop gracefully</comment>
  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCliMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Quit</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thrd</name><operator>-&gt;</operator><name>asyncPool</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>cliWalkCb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uv_is_closing</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>uv_handle_get_type</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UV_TIMER</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// SCliConn* pConn = handle-&gt;data;</comment>
      <comment type="line">//  if (pConn != NULL &amp;&amp; pConn-&gt;timer != NULL) {</comment>
      <comment type="line">//    SCliThrd* pThrd = pConn-&gt;hostThrd;</comment>
      <comment type="line">//    uv_timer_stop((uv_timer_t*)handle);</comment>
      <comment type="line">//    handle-&gt;data = NULL;</comment>
      <comment type="line">//    taosArrayPush(pThrd-&gt;timerList, &amp;pConn-&gt;timer);</comment>
      <comment type="line">//    pConn-&gt;timer = NULL;</comment>
      <comment type="line">//  }</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>uv_read_stop</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name><operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>cliDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>int</name></type> <name>cliRBChoseIdx</name><parameter_list>(<parameter><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><name><name>pTransInst</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTransInst</name><operator>-&gt;</operator><name>numOfThreads</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*
   * no lock, and to avoid CPU load imbalance, set limit pTransInst-&gt;numOfThreads * 2000;
   */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTransInst</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator> <operator>&gt;=</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>numOfThreads</name></name> <operator>*</operator> <literal type="number">2000</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>index</name> <operator>%</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>doDelayTask</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaskArg</name><modifier>*</modifier></type> <name>arg</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cliHandleReq</name><argument_list>(<argument><expr><operator>(</operator><name>SCliMsg</name><operator>*</operator><operator>)</operator><name><name>arg</name><operator>-&gt;</operator><name>param1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SCliThrd</name><operator>*</operator><operator>)</operator><name><name>arg</name><operator>-&gt;</operator><name>param2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doCloseIdleConn</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaskArg</name><modifier>*</modifier></type> <name>arg</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>conn</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>param1</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s conn %p idle, close it"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cliDestroyConn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cliSchedMsgToNextNode</name><parameter_list>(<parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>        <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EPSET_DEBUG_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"%s retry on next node,use:%s, step: %d,timeout:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>,
          <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryStep</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryNextInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STaskArg</name><modifier>*</modifier></type> <name>arg</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaskArg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>param1</name></name> <operator>=</operator> <name>pMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>param2</name></name> <operator>=</operator> <name>pThrd</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>transDQSched</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>delayQueue</name></name></expr></argument>, <argument><expr><name>doDelayTask</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryNextInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>void</name></type> <name>cliCompareAndSwap</name><parameter_list>(<parameter><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>newVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>val</name> <operator>!=</operator> <name>exp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>newVal</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>bool</name></type> <name>cliTryExtractEpSet</name><parameter_list>(<parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pResp</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pResp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pResp</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasEpSet</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// rebuild resp msg</comment>
  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epset</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSEpSet</name><argument_list>(<argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><call><name>tSerializeSEpSet</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <name>tlen</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>+</operator> <name>tlen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>epset</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>cliResetEpset</name><parameter_list>(<parameter><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name></decl></parameter>, <parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pResp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>hasEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>noDelay</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasEpSet</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>epsetRetryCnt</name></name> <operator>&gt;=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>EPSET_FORWARD_INUSE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SEpSet</name></type>  <name>epSet</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>valid</name> <init>= <expr><call><name>tDeserializeSEpSet</name><argument_list>(<argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"get invalid epset, epset equal, continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>epsetRetryCnt</name></name> <operator>&gt;=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>EPSET_FORWARD_INUSE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transEpSetIsEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"epset not equal, retry new epset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name>epSet</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>epsetRetryCnt</name></name> <operator>&gt;=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"epset equal, continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>EPSET_FORWARD_INUSE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SEpSet</name></type>  <name>epSet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>valid</name> <init>= <expr><call><name>tDeserializeSEpSet</name><argument_list>(<argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"get invalid epset, epset equal, continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>epsetRetryCnt</name></name> <operator>&gt;=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>EPSET_FORWARD_INUSE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>transEpSetIsEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"epset not equal, retry new epset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name>epSet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>epsetRetryCnt</name></name> <operator>&gt;=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"epset equal, continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EPSET_FORWARD_INUSE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>noDelay</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>cliGenRetryRule</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pResp</name></decl></parameter>, <parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>   <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name><name>pResp</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>retry</name> <init>= <expr><ternary><condition><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>retry</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>pTransInst</name><operator>-&gt;</operator><name>retry</name></name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>retry</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pCtx</name><operator>-&gt;</operator><name>retryInit</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryMinInterval</name></name> <operator>=</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>retryMinInterval</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryMaxInterval</name></name> <operator>=</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>retryMaxInterval</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryStepFactor</name></name> <operator>=</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>retryStepFactor</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryMaxTimeout</name></name> <operator>=</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>retryMaxTimouet</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryInitTimestamp</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryNextInterval</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>retryMinInterval</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryStep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryInit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryCode</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>retryMaxTimeout</name></name> <operator>&amp;&amp;</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>retryInitTimestamp</name></name> <operator>&gt;=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>retryMaxTimeout</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// code, msgType</comment>

  <comment type="line">// A:  epset,   leader, not self</comment>
  <comment type="line">// B:  epset,   not know leader</comment>
  <comment type="line">// C:  no epset, leader but not serivce</comment>

  <decl_stmt><decl><type><name>bool</name></type> <name>noDelay</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_RPC_BROKEN_LINK</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_RPC_NETWORK_UNAVAIL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"code str %s, contlen:%d 0"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <call><name>cliResetEpset</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transUnrefCliHandle</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_INTERNAL_ERROR</name> <operator>||</operator>
             <name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_PROPOSE_NOT_READY</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_VND_STOPPED</name> <operator>||</operator>
             <name>code</name> <operator>==</operator> <name>TSDB_CODE_MNODE_NOT_FOUND</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_APP_IS_STARTING</name> <operator>||</operator>
             <name>code</name> <operator>==</operator> <name>TSDB_CODE_APP_IS_STOPPING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"code str %s, contlen:%d 1"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <call><name>cliResetEpset</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addConnToPool</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_RESTORING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"code str %s, contlen:%d 0"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <call><name>cliResetEpset</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addConnToPool</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"code str %s, contlen:%d 0"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>noDelay</name> <operator>=</operator> <call><name>cliResetEpset</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pResp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addConnToPool</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_RPC_BROKEN_LINK</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_RPC_NETWORK_UNAVAIL</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// save one internal code</comment>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryCode</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>noDelay</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>epsetRetryCnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryStep</name></name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>factor</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryStepFactor</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryStep</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryNextInterval</name></name> <operator>=</operator> <name>factor</name> <operator>*</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>retryMinInterval</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryNextInterval</name></name> <operator>&gt;=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>retryMaxInterval</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryNextInterval</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>retryMaxInterval</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if (-1 != pCtx-&gt;retryMaxTimeout &amp;&amp; taosGetTimestampMs() - pCtx-&gt;retryInitTimestamp &gt;= pCtx-&gt;retryMaxTimeout) {</comment>
    <comment type="line">//   return false;</comment>
    <comment type="line">// }</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryNextInterval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>epsetRetryCnt</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cliSchedMsgToNextNode</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pThrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>cliAppCb</name><parameter_list>(<parameter><decl><type><name>SCliConn</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pResp</name></decl></parameter>, <parameter><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><name><name>pConn</name><operator>-&gt;</operator><name>hostThrd</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type>   <name>pTransInst</name> <init>= <expr><name><name>pThrd</name><operator>-&gt;</operator><name>pTransInst</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p handle resp"</literal></expr></argument>, <argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name><argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>pResp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>ctx</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>retry</name> <init>= <expr><call><name>cliGenRetryRule</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pResp</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>retry</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>retryCode</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>pResp</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// return internal code app</comment>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_RPC_NETWORK_UNAVAIL</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_RPC_BROKEN_LINK</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>retryCode</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pResp</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>hasEpSet</name> <init>= <expr><call><name>cliTryExtractEpSet</name><argument_list>(<argument><expr><name>pResp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasEpSet</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>EPSET_DEBUG_STR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p extract epset from msg"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSem</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p(sync) handle resp"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRsp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p(sync) failed to resp, ignore"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pRsp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pResp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pResp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRsp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tGTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p handle resp"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>retry</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>hasEpSet</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name><argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>pResp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cliIsEpsetUpdated</name><argument_list>(<argument><expr><name><name>pResp</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name><argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>pResp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>pTransInst</name><operator>-&gt;</operator><name>cfp</name></name><argument_list>(<argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>pResp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transCloseClient</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliObj</name><modifier>*</modifier></type> <name>cli</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cli</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>cliSendQuit</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyThrdObj</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>cli</name><operator>-&gt;</operator><name>pThreadObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>transRefCliHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_INC</name><argument_list>(<argument><expr><operator>(</operator><name>SCliConn</name><operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p ref %d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><operator>(</operator><name>SCliConn</name><operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>transUnrefCliHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name>T_REF_DEC</name><argument_list>(<argument><expr><operator>(</operator><name>SCliConn</name><operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s conn %p ref:%d"</literal></expr></argument>, <argument><expr><call><name>CONN_GET_INST_LABEL</name><argument_list>(<argument><expr><operator>(</operator><name>SCliConn</name><operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cliDestroyConn</name><argument_list>(<argument><expr><operator>(</operator><name>SCliConn</name><operator>*</operator><operator>)</operator><name>handle</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>SCliThrd</name><modifier>*</modifier></type> <name>transGetWorkThrdFromHandle</name><parameter_list>(<parameter><decl><type><name>STrans</name><modifier>*</modifier></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type>  <name>pThrd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>exh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>trans</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>cliRBChoseIdx</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SCliObj</name><operator>*</operator><operator>)</operator><name><name>trans</name><operator>-&gt;</operator><name>tcphandle</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pThreadObj</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pThrd</name> <operator>=</operator> <name><name>exh</name><operator>-&gt;</operator><name>pThrd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pThrd</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>SCliThrd</name><modifier>*</modifier></type> <name>transGetWorkThrd</name><parameter_list>(<parameter><decl><type><name>STrans</name><modifier>*</modifier></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>cliRBChoseIdx</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><operator>(</operator><name>SCliObj</name><operator>*</operator><operator>)</operator><name><name>trans</name><operator>-&gt;</operator><name>tcphandle</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pThreadObj</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><call><name>transGetWorkThrdFromHandle</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pThrd</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>transReleaseCliHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>  <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><call><name>transGetWorkThrdFromHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pThrd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STransMsg</name></type> <name>tmsg</name> <init>= <expr><block>{<expr><operator>.</operator><name><name>info</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>, <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">0x9527</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TRACE_SET_MSGID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmsg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></argument>, <argument><expr><call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransConnCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <name><name>tmsg</name><operator>.</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>cmsg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCliMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>tmsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Release</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmsg</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>pCtx</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>tmsg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"send release request at thread:%08"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmsg</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transSendRequest</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>shandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>STransCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><operator>(</operator><name>STrans</name><operator>*</operator><operator>)</operator><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTransInst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><call><name>transGetWorkThrd</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pThrd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_RPC_BROKEN_LINK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>TRACE_SET_MSGID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></argument>, <argument><expr><call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransConnCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <operator>*</operator><name>pEpSet</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>appCtx</name></name> <operator>=</operator> <operator>*</operator><name>ctx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>cliMsg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCliMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>pCtx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <operator>*</operator><name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Normal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"%s send request at thread:%08"</literal> <name>PRId64</name> <literal type="string">", dst:%s:%d, app:%p"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,
          <argument><expr><call><name>EPSET_GET_INUSE_IP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EPSET_GET_INUSE_PORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cliMsg</name><operator>-&gt;</operator><name>q</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>cliMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transSendRecv</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>shandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>STransMsg</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><operator>(</operator><name>STrans</name><operator>*</operator><operator>)</operator><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTransInst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>pThrd</name> <init>= <expr><call><name>transGetWorkThrd</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pThrd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>transFreeMsg</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_RPC_BROKEN_LINK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tsem_t</name><modifier>*</modifier></type> <name>sem</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsem_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>TRACE_SET_MSGID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></argument>, <argument><expr><call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransConnCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <operator>*</operator><name>pEpSet</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>origEpSet</name></name> <operator>=</operator> <operator>*</operator><name>pEpSet</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pSem</name></name> <operator>=</operator> <name>sem</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pRsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>cliMsg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCliMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>pCtx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <operator>*</operator><name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>st</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Normal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tGDebug</name><argument_list>(<argument><expr><literal type="string">"%s send request at thread:%08"</literal> <name>PRId64</name> <literal type="string">", dst:%s:%d, app:%p"</literal></expr></argument>, <argument><expr><call><name>transLabel</name><argument_list>(<argument><expr><name>pTransInst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,
          <argument><expr><call><name>EPSET_GET_INUSE_IP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EPSET_GET_INUSE_PORT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>pThrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cliMsg</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>cliMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_RETURN</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_RETURN</name>:</label>
  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
 *
 **/</comment>
<function><type><name>int</name></type> <name>transSetDefaultAddr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>shandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fqdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name><modifier>*</modifier></type> <name>pTransInst</name> <init>= <expr><operator>(</operator><name>STrans</name><operator>*</operator><operator>)</operator><call><name>transAcquireExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTransInst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCvtAddr</name></type> <name>cvtAddr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ip</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fqdn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>cvtAddr</name><operator>.</operator><name>ip</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cvtAddr</name><operator>.</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>cvtAddr</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>fqdn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cvtAddr</name><operator>.</operator><name>fqdn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cvtAddr</name><operator>.</operator><name>cvt</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTransInst</name><operator>-&gt;</operator><name>numOfThreads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransConnCtx</name><modifier>*</modifier></type> <name>pCtx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransConnCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>cvtAddr</name></name> <operator>=</operator> <name>cvtAddr</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SCliMsg</name><modifier>*</modifier></type> <name>cliMsg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCliMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>pCtx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>Update</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cliMsg</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SCliThrd</name><modifier>*</modifier></type> <name>thrd</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SCliObj</name><operator>*</operator><operator>)</operator><name><name>pTransInst</name><operator>-&gt;</operator><name>tcphandle</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pThreadObj</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"%s update epset at thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTransInst</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>transAsyncSend</name><argument_list>(<argument><expr><name><name>thrd</name><operator>-&gt;</operator><name>asyncPool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cliMsg</name><operator>-&gt;</operator><name>q</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>destroyCmsg</name><argument_list>(<argument><expr><name>cliMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>transReleaseExHandle</name><argument_list>(<argument><expr><call><name>transGetInstMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>shandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>transAllocHandle</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExHandle</name><modifier>*</modifier></type> <name>exh</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>exh</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>transAddExHandle</name><argument_list>(<argument><expr><call><name>transGetRefMgt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>exh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"pre alloc refId %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>exh</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>exh</name><operator>-&gt;</operator><name>refId</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
