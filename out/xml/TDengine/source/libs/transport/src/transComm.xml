<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/transport/src/transComm.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UV</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transComm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_CAP</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type> <name>transModuleInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>refMgt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>instMgt</name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>transCompressMsg</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>            <name>compHdr</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransCompMsg</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><call><name>transHeadFromCont</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <name>compHdr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// 8 extra bytes</comment>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tError</name><argument_list>(<argument><expr><literal type="string">"failed to allocate memory for rpc msg compression, contLen:%d"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>clen</name> <init>= <expr><call><name>LZ4_compress_default</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>compHdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/*
   * only the compressed size is less than the value of contLen - overhead, the compression is applied
   * The first four bytes is set to 0, the second four bytes are utilized to keep the original length of message
   */</comment>
  <if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>clen</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <name>compHdr</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STransCompMsg</name><modifier>*</modifier></type> <name>pComp</name> <init>= <expr><operator>(</operator><name>STransCompMsg</name><operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pComp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>msg</name> <operator>+</operator> <name>compHdr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tDebug</name><argument_list>(<argument><expr><literal type="string">"compress rpc msg, before:%d, after:%d"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>clen</name> <operator>+</operator> <name>compHdr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>transDecompressMsg</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><operator>(</operator><name>STransMsgHead</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>msg</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pHead</name><operator>-&gt;</operator><name>comp</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pCont</name> <init>= <expr><call><name>transContFromHead</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STransCompMsg</name><modifier>*</modifier></type> <name>pComp</name> <init>= <expr><operator>(</operator><name>STransCompMsg</name><operator>*</operator><operator>)</operator><name>pCont</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>oriLen</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>pComp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>oriLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransMsgHead</name><modifier>*</modifier></type> <name>pNewHead</name> <init>= <expr><operator>(</operator><name>STransMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>decompLen</name> <init>= <expr><call><name>LZ4_decompress_safe</name><argument_list>(<argument><expr><name>pCont</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransCompMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pNewHead</name><operator>-&gt;</operator><name>content</name></name></expr></argument>,
                                                 <argument><expr><name>len</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransCompMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>oriLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pNewHead</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNewHead</name><operator>-&gt;</operator><name>msgLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>oriLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>decompLen</name> <operator>!=</operator> <name>oriLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transFreeMsg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>msg</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>transSockInfo2Str</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name><modifier>*</modifier></type> <name>sockname</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><name>sockname</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>r</name> <init>= <expr><call><name>uv_ip4_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>transInitBuffer</name><parameter_list>(<parameter><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>BUFFER_CAP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BUFFER_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>invalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>transDestroyBuffer</name><parameter_list>(<parameter><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transClearBuffer</name><parameter_list>(<parameter><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>cap</name></name> <operator>&gt;</operator> <name>BUFFER_CAP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>BUFFER_CAP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>BUFFER_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>invalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transDumpFromBuffer</name><parameter_list>(<parameter><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>connBuf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>HEADSIZE</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>connBuf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>total</name> <operator>&gt;=</operator> <name>HEADSIZE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>invalid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transResetBuffer</name><argument_list>(<argument><expr><name>connBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>total</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transResetBuffer</name><parameter_list>(<parameter><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>connBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>connBuf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>total</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>total</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>transAllocBuffer</name><parameter_list>(<parameter><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>connBuf</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name><modifier>*</modifier></type> <name>uvBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/*
   * formate of data buffer:
   * |&lt;--------------------------data from socket-------------------------------&gt;|
   * |&lt;------STransMsgHead-------&gt;|&lt;-------------------userdata---------------&gt;|&lt;-----auth data-----&gt;|&lt;----user
   * info---&gt;|
   */</comment>
  <decl_stmt><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>connBuf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>uvBuf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>uvBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>cap</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>cap</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>uvBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>uvBuf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>uvBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="line">// check whether already read complete</comment>
<function><type><name>bool</name></type> <name>transReadComplete</name><parameter_list>(<parameter><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>connBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConnBuffer</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>connBuf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STransMsgHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STransMsgHead</name></type> <name>head</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><name><name>connBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><name><name>head</name><operator>.</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name>msgLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>invalid</name></name> <operator>=</operator> <call><name>TRANS_NOVALID_PACKET</name><argument_list>(<argument><expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>head</name><operator>.</operator><name>magicNum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>total</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>invalid</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>transSetConnOption</name><parameter_list>(<parameter><decl><type><name>uv_tcp_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>uv_tcp_nodelay</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  <comment type="line">// int ret = uv_tcp_keepalive(stream, 5, 60);</comment>
</block_content>}</block></function>

<function><type><name>SAsyncPool</name><modifier>*</modifier></type> <name>transAsyncPoolCreate</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name><modifier>*</modifier></type> <name>loop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>AsyncCB</name></type> <name>cb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAsyncPool</name><modifier>*</modifier></type> <name>pool</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SAsyncPool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>nAsync</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>asyncs</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_async_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pool</name><operator>-&gt;</operator><name>nAsync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>nAsync</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SAsyncItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SAsyncItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>pThrd</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>async</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>asyncs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uv_async_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>async</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pool</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transAsyncPoolDestroy</name><parameter_list>(<parameter><decl><type><name>SAsyncPool</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>nAsync</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>async</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>asyncs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SAsyncItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>asyncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>transAsyncPoolIsEmpty</name><parameter_list>(<parameter><decl><type><name>SAsyncPool</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>nAsync</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>async</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>asyncs</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SAsyncItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>transAsyncSend</name><parameter_list>(<parameter><decl><type><name>SAsyncPool</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>queue</name><modifier>*</modifier></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>index</name></name> <operator>%</operator> <name><name>pool</name><operator>-&gt;</operator><name>nAsync</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// no need mutex here</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>nAsync</name></name> <operator>*</operator> <literal type="number">2000</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uv_async_t</name><modifier>*</modifier></type> <name>async</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>asyncs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAsyncItem</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>async</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>uv_async_send</name><argument_list>(<argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transCtxInit</name><parameter_list>(<parameter><decl><type><name>STransCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// init transCtx</comment>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_UINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>transCtxCleanup</name><parameter_list>(<parameter><decl><type><name>STransCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STransCtxVal</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>freeFunc</name></name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>freeFunc</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>brokenVal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transCtxMerge</name><parameter_list>(<parameter><decl><type><name>STransCtx</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>STransCtx</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>args</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>freeFunc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>args</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>args</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>brokenVal</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>brokenVal</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>freeFunc</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>freeFunc</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>klen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>iter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STransCtxVal</name><modifier>*</modifier></type> <name>sVal</name> <init>= <expr><operator>(</operator><name>STransCtxVal</name><operator>*</operator><operator>)</operator><name>iter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>sVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// STransCtxVal* dVal = taosHashGet(dst-&gt;args, key, klen);</comment>
    <comment type="line">// if (dVal) {</comment>
    <comment type="line">//   dst-&gt;freeFunc(dVal-&gt;val);</comment>
    <comment type="line">// }</comment>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>sVal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>transCtxDumpVal</name><parameter_list>(<parameter><decl><type><name>STransCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STransCtxVal</name><modifier>*</modifier></type> <name>cVal</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>cVal</name><operator>-&gt;</operator><name>clone</name></name>)<argument_list>(<argument><expr><name><name>cVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>transCtxDumpBrokenlinkVal</name><parameter_list>(<parameter><decl><type><name>STransCtx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>brokenVal</name><operator>.</operator><name>clone</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>ctx</name><operator>-&gt;</operator><name>brokenVal</name><operator>.</operator><name>clone</name></name>)<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>brokenVal</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msgType</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>brokenVal</name><operator>.</operator><name>msgType</name></name></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transReqQueueInit</name><parameter_list>(<parameter><decl><type><name>queue</name><modifier>*</modifier></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// init req queue</comment>
  <expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>transReqQueuePush</name><parameter_list>(<parameter><decl><type><name>queue</name><modifier>*</modifier></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransReq</name><modifier>*</modifier></type> <name>req</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>wreq</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QUEUE_PUSH</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>wreq</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>transReqQueueRemove</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uv_write_t</name><modifier>*</modifier></type> <name>wreq</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STransReq</name><modifier>*</modifier></type> <name>req</name> <init>= <expr><ternary><condition><expr><name>wreq</name></expr> ?</condition><then> <expr><name><name>wreq</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>wreq</name> <operator>&amp;&amp;</operator> <name><name>wreq</name><operator>-&gt;</operator><name>handle</name></name></expr> ?</condition><then> <expr><name><name>wreq</name><operator>-&gt;</operator><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>transReqQueueClear</name><parameter_list>(<parameter><decl><type><name>queue</name><modifier>*</modifier></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_IS_EMPTY</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>queue</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>STransReq</name><modifier>*</modifier></type> <name>req</name> <init>= <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>STransReq</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transQueueInit</name><parameter_list>(<parameter><decl><type><name>STransQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freeFunc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>freeFunc</name></name> <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>freeFunc</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>transQueuePush</name><parameter_list>(<parameter><decl><type><name>STransQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>transQueuePop</name><parameter_list>(<parameter><decl><type><name>STransQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>transQueueSize</name><parameter_list>(<parameter><decl><type><name>STransQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name><modifier>*</modifier></type> <name>transQueueGet</name><parameter_list>(<parameter><decl><type><name>STransQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>transQueueRm</name><parameter_list>(<parameter><decl><type><name>STransQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>transQueueEmpty</name><parameter_list>(<parameter><decl><type><name>STransQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>transQueueClear</name><parameter_list>(<parameter><decl><type><name>STransQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>freeFunc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>queue</name><operator>-&gt;</operator><name>freeFunc</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>transQueueDestroy</name><parameter_list>(<parameter><decl><type><name>STransQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>transQueueClear</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>timeCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HeapNode</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HeapNode</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDelayTask</name><modifier>*</modifier></type> <name>arg1</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>SDelayTask</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelayTask</name><modifier>*</modifier></type> <name>arg2</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>SDelayTask</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>arg1</name><operator>-&gt;</operator><name>execTime</name></name> <operator>&gt;</operator> <name><name>arg2</name><operator>-&gt;</operator><name>execTime</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transDQTimeout</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDelayQueue</name><modifier>*</modifier></type> <name>queue</name> <init>= <expr><name><name>timer</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"timer %p timeout"</literal></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>current</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier></type> <name>minNode</name> <init>= <expr><call><name>heapMin</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>minNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SDelayTask</name><modifier>*</modifier></type> <name>task</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>minNode</name></expr></argument>, <argument><expr><name>SDelayTask</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>execTime</name></name> <operator>&lt;=</operator> <name>current</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>heapRemove</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>, <argument><expr><name>minNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>task</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>execTime</name></name> <operator>-</operator> <name>current</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>transDQTimeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>transDQCreate</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name><modifier>*</modifier></type> <name>loop</name></decl></parameter>, <parameter><decl><type><name>SDelayQueue</name><modifier>*</modifier><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uv_timer_t</name><modifier>*</modifier></type> <name>timer</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uv_timer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uv_timer_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Heap</name><modifier>*</modifier></type> <name>heap</name> <init>= <expr><call><name>heapCreate</name><argument_list>(<argument><expr><name>timeCompare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDelayQueue</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelayQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <name>heap</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>loop</name></name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>queue</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transDQDestroy</name><parameter_list>(<parameter><decl><type><name>SDelayQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freeFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><call><name>heapSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier></type> <name>minNode</name> <init>= <expr><call><name>heapMin</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>minNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>heapRemove</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>, <argument><expr><name>minNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SDelayTask</name><modifier>*</modifier></type> <name>task</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>minNode</name></expr></argument>, <argument><expr><name>SDelayTask</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>STaskArg</name><modifier>*</modifier></type> <name>arg</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>freeFunc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeFunc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>heapDestroy</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>transDQCancel</name><parameter_list>(<parameter><decl><type><name>SDelayQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>SDelayTask</name><modifier>*</modifier></type> <name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>heapSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>heapRemove</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>heapSize</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier></type> <name>minNode</name> <init>= <expr><call><name>heapMin</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>minNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type>    <name>now</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDelayTask</name><modifier>*</modifier></type> <name>task</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>minNode</name></expr></argument>, <argument><expr><name>SDelayTask</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>    <name>timeout</name> <init>= <expr><ternary><condition><expr><name>now</name> <operator>&gt;</operator> <name><name>task</name><operator>-&gt;</operator><name>execTime</name></name></expr> ?</condition><then> <expr><name>now</name> <operator>-</operator> <name><name>task</name><operator>-&gt;</operator><name>execTime</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>transDQTimeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SDelayTask</name><modifier>*</modifier></type> <name>transDQSched</name><parameter_list>(<parameter><decl><type><name>SDelayQueue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>timeoutMs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type>    <name>now</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelayTask</name><modifier>*</modifier></type> <name>task</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelayTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>execTime</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <name>timeoutMs</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>HeapNode</name><modifier>*</modifier></type> <name>minNode</name> <init>= <expr><call><name>heapMin</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>minNode</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDelayTask</name><modifier>*</modifier></type> <name>minTask</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>minNode</name></expr></argument>, <argument><expr><name>SDelayTask</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>minTask</name><operator>-&gt;</operator><name>execTime</name></name> <operator>&lt;</operator> <name><name>task</name><operator>-&gt;</operator><name>execTime</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>timeoutMs</name> <operator>=</operator> <ternary><condition><expr><name><name>minTask</name><operator>-&gt;</operator><name>execTime</name></name> <operator>&lt;=</operator> <name>now</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>minTask</name><operator>-&gt;</operator><name>execTime</name></name> <operator>-</operator> <name>now</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"timer %p put task into delay queue, timeoutMs:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>timeoutMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>heapInsert</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>transDQTimeout</name></expr></argument>, <argument><expr><name>timeoutMs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transPrintEpSet</name><parameter_list>(<parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pEpSet</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"NULL epset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"epset:{"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d. %s:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d. %s:%d, "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tTrace</name><argument_list>(<argument><expr><literal type="string">"%s, inUse:%d"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>transEpSetIsEqual</name><parameter_list>(<parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>inUse</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>inUse</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transInitEnv</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>refMgt</name> <operator>=</operator> <call><name>transOpenRefMgt</name><argument_list>(<argument><expr><literal type="number">50000</literal></expr></argument>, <argument><expr><name>transDestoryExHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>instMgt</name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>rpcCloseImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uv_os_setenv</name><argument_list>(<argument><expr><literal type="string">"UV_TCP_SINGLE_ACCEPT"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>transDestroyEnv</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>transCloseRefMgt</name><argument_list>(<argument><expr><name>refMgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>transCloseRefMgt</name><argument_list>(<argument><expr><name>instMgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// init env</comment>
  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transModuleInit</name></expr></argument>, <argument><expr><name>transInitEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>transGetRefMgt</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>refMgt</name></expr>;</return> </block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>transGetInstMgt</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>instMgt</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>transCleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// clean env</comment>
  <expr_stmt><expr><call><name>transDestroyEnv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>transOpenRefMgt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// added into once later</comment>
  <return>return <expr><call><name>taosOpenRef</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>transCloseRefMgt</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>mgt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// close ref</comment>
  <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name>mgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int64_t</name></type> <name>transAddExHandle</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>refMgt</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// acquire extern handle</comment>
  <return>return <expr><call><name>taosAddRef</name><argument_list>(<argument><expr><name>refMgt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>transRemoveExHandle</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>refMgt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>refId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// acquire extern handle</comment>
  <return>return <expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name>refMgt</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>transAcquireExHandle</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>refMgt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>refId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// acquire extern handle</comment>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>refMgt</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>transReleaseExHandle</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>refMgt</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>refId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// release extern handle</comment>
  <return>return <expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>refMgt</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>transDestoryExHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
