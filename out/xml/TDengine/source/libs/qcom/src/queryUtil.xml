<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/qcom/src/queryUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsched.h"</cpp:file></cpp:include>
<comment type="line">// clang-format off</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALIDNUMOFCOLS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;= TSDB_MIN_COLUMNS &amp;&amp; (x) &lt;= TSDB_MAX_COLUMNS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALIDNUMOFTAGS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;= 0 &amp;&amp; (x) &lt;= TSDB_MAX_TAGS)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>SSchema</name></name></type> <name>_s</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>colId</name> <operator>=</operator> <name>TSDB_TBNAME_COLUMN_INDEX</name></expr>,
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>,
    <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>,
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tbname"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>tGetTbnameColumnSchema</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>_s</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doValidateSchema</name><parameter_list>(<parameter><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// 1. valid types</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidDataType</name><argument_list>(<argument><expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// 2. valid length for each type</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>&gt;</operator> <name>TSDB_MAX_BINARY_LEN</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>&gt;</operator> <name>TSDB_MAX_NCHAR_LEN</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>!=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// 3. valid column names</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pSchema</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rowLen</name> <operator>+=</operator> <name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rowLen</name> <operator>&lt;=</operator> <name>maxLen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tIsValidSchema</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSchema</name></name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfTags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALIDNUMOFCOLS</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALIDNUMOFTAGS</name><argument_list>(<argument><expr><name>numOfTags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* first column must be the timestamp, which is a primary key */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doValidateSchema</name><argument_list>(<argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>doValidateSchema</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSchema</name><index>[<expr><name>numOfCols</name></expr>]</index></name></expr></argument>, <argument><expr><name>numOfTags</name></expr></argument>, <argument><expr><name>TSDB_MAX_TAGS_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>SSchedQueue</name></type> <name>pTaskQueue</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>initTaskQueue</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>queueSize</name> <init>= <expr><name>tsMaxShellConns</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosInitScheduler</name><argument_list>(<argument><expr><name>queueSize</name></expr></argument>, <argument><expr><name>tsNumOfTaskQueueThreads</name></expr></argument>, <argument><expr><literal type="string">"tsc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTaskQueue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to init task queue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"task queue is initialized, numOfThreads: %d"</literal></expr></argument>, <argument><expr><name>tsNumOfTaskQueueThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cleanupTaskQueue</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosCleanUpScheduler</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTaskQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execHelper</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SSchedMsg</name></name><modifier>*</modifier></type> <name>pSchedMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pSchedMsg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSchedMsg</name><operator>-&gt;</operator><name>ahandle</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>__async_exec_fn_t</name></type> <name>execFn</name> <init>= <expr><operator>(</operator><name>__async_exec_fn_t</name><operator>)</operator><name><name>pSchedMsg</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><call><name>execFn</name><argument_list>(<argument><expr><name><name>pSchedMsg</name><operator>-&gt;</operator><name>thandle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pSchedMsg</name><operator>-&gt;</operator><name>msg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>pSchedMsg</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosAsyncExec</name><parameter_list>(<parameter><decl><type><name>__async_exec_fn_t</name></type> <name>execFn</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>execParam</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>execFn</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSchedMsg</name></type> <name>schedMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>fp</name></name> <operator>=</operator> <name>execHelper</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <name>execFn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>thandle</name></name> <operator>=</operator> <name>execParam</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>schedMsg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

  <return>return <expr><call><name>taosScheduleTask</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTaskQueue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schedMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroySendMsgInfo</name><parameter_list>(<parameter><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pMsgBody</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pMsgBody</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pMsgBody</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pMsgBody</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsgBody</name><operator>-&gt;</operator><name>paramFreeFp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pMsgBody</name><operator>-&gt;</operator><name>paramFreeFp</name></name>)<argument_list>(<argument><expr><name><name>pMsgBody</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pMsgBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>destroyAhandle</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ahandle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>pSendInfo</name> <init>= <expr><name>ahandle</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSendInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>pSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>asyncSendMsgToServerExt</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pTransporter</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>epSet</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pTransporterId</name></decl></parameter>, <parameter><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>,
                                <parameter><decl><type><name>bool</name></type> <name>persistHandle</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>rpcCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pMsg</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMsg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" msg:%s malloc failed"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>msgType</name></name></expr>,
    <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pMsg</name></expr>,
    <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name></expr>,
    <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pInfo</name></expr>,
    <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>handle</name></name></expr>,
    <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>persistHandle</name></name> <operator>=</operator> <name>persistHandle</name></expr>, 
    <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TRACE_SET_ROOTID</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rpcMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>rpcSendRequestWithCtx</name><argument_list>(<argument><expr><name>pTransporter</name></expr></argument>, <argument><expr><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><name>pTransporterId</name></expr></argument>, <argument><expr><name>rpcCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>asyncSendMsgToServer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pTransporter</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>epSet</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pTransporterId</name></decl></parameter>, <parameter><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>asyncSendMsgToServerExt</name><argument_list>(<argument><expr><name>pTransporter</name></expr></argument>, <argument><expr><name>epSet</name></expr></argument>, <argument><expr><name>pTransporterId</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>jobTaskStatusStr</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JOB_TASK_STATUS_NULL</name></expr>:</case>
      <return>return <expr><literal type="string">"NULL"</literal></expr>;</return>
    <case>case <expr><name>JOB_TASK_STATUS_INIT</name></expr>:</case>
      <return>return <expr><literal type="string">"INIT"</literal></expr>;</return>
    <case>case <expr><name>JOB_TASK_STATUS_EXEC</name></expr>:</case>
      <return>return <expr><literal type="string">"EXECUTING"</literal></expr>;</return>
    <case>case <expr><name>JOB_TASK_STATUS_PART_SUCC</name></expr>:</case>
      <return>return <expr><literal type="string">"PARTIAL_SUCCEED"</literal></expr>;</return>
    <case>case <expr><name>JOB_TASK_STATUS_SUCC</name></expr>:</case>
      <return>return <expr><literal type="string">"SUCCEED"</literal></expr>;</return>
    <case>case <expr><name>JOB_TASK_STATUS_FAIL</name></expr>:</case>
      <return>return <expr><literal type="string">"FAILED"</literal></expr>;</return>
    <case>case <expr><name>JOB_TASK_STATUS_DROP</name></expr>:</case>
      <return>return <expr><literal type="string">"DROPPING"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
SSchema createSchema(int8_t type, int32_t bytes, col_id_t colId, const char* name) {
  SSchema s = {0};
  s.type = type;
  s.bytes = bytes;
  s.colId = colId;

  tstrncpy(s.name, name, tListLen(s.name));
  return s;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>freeSTableMetaRspPointer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tFreeSTableMetaRsp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyQueryExecRes</name><parameter_list>(<parameter><decl><type><name>SExecResult</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRes</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_VND_CREATE_TABLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name>freeSTableMetaRspPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_CREATE_STB</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_ALTER_TABLE</name></expr>:</case>
    <case>case <expr><name>TDMT_MND_ALTER_STB</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>tFreeSTableMetaRsp</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_SUBMIT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>tFreeSSubmitRsp</name><argument_list>(<argument><expr><operator>(</operator><name>SSubmitRsp</name><operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_QUERY</name></expr>:</case> 
    <case>case <expr><name>TDMT_SCH_MERGE_QUERY</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid exec result for request type %d"</literal></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>
<comment type="line">// clang-format on</comment>

<function><type><name>int32_t</name></type> <name>dataConverToStr</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>, <argument><expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>bufSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">//        tscError("invalid buf size");</comment>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>bufSize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>bufSize</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>bufSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">//        tscError("invalid buf size");</comment>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>length</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <comment type="line">//      tscError("unsupported type:%d", type);</comment>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>parseTagDatatoJson</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tTagToValArray</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STag</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagVals</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int16_t</name></type> <name>nCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nCols</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tagJsonKey</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>json</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>pTagVal</name> <init>= <expr><operator>(</operator><name>STagVal</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// json key  encode by binary</comment>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tagJsonKey</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tagJsonKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// json value</comment>
    <decl_stmt><decl><type><name>char</name></type> <name>type</name> <init>= <expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><call><name>cJSON_CreateNull</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>tagJsonKey</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>tagJsonValue</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><name>tagJsonValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"charset:%s to %s. val:%s convert json value failed."</literal></expr></argument>, <argument><expr><name>DEFAULT_UNICODE_ENCODEC</name></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>,
                 <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tagJsonValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name>tagJsonValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tagJsonValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>tagJsonKey</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>jsonVd</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>jsonVd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>tagJsonKey</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type>   <name>jsonVd</name> <init>= <expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>value</name> <init>= <expr><call><name>cJSON_CreateBool</name><argument_list>(<argument><expr><name>jsonVd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>tagJsonKey</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>cJSON_PrintUnformatted</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>TSDB_DATA_NULL_STR_L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>cloneTableMeta</name><parameter_list>(<parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSrc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfField</name> <init>= <expr><name><name>pSrc</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfField</name> <operator>&gt;</operator> <name>TSDB_MAX_COL_TAG_NUM</name> <operator>||</operator> <name>numOfField</name> <operator>&lt;</operator> <name>TSDB_MIN_COLUMNS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"too many column and tag num:%d,%d"</literal></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>metaSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMeta</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>numOfField</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>freeVgInfo</name><parameter_list>(<parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>vgInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>vgInfo</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>cloneDbVgInfo</name><parameter_list>(<parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SDBVgInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSrc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pSrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pDst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pSrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>vgHash</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pDst</name><operator>)</operator><operator>-&gt;</operator><name>vgHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                                   <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>pDst</name><operator>)</operator><operator>-&gt;</operator><name>vgHash</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>vgInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>        <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>vgInfo</name> <operator>=</operator> <name>pIter</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>vgId</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pDst</name><operator>)</operator><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vgId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vgInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut failed, vgId:%d"</literal></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freeVgInfo</name><argument_list>(<argument><expr><operator>*</operator><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
