<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/qcom/src/querymsg.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"queryInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>COMPILER_SUPPORTS_CXX13</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wformat-truncation"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>queryBuildMsg</name><index>[<expr><name>TDMT_MAX</name></expr>]</index>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, 
                                   <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallocFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init>;</function_decl>
<function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>queryProcessMsgRsp</name><index>[<expr><name>TDMT_MAX</name></expr>]</index>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init>;</function_decl>

<function><type><name>int32_t</name></type> <name>queryBuildUseDbOutput</name><parameter_list>(<parameter><decl><type><name>SUseDbOutput</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>, <parameter><decl><type><name>SUseDbRsp</name> <modifier>*</modifier></type><name>usedbRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>usedbRsp</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDBVgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>=</operator> <name><name>usedbRsp</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>hashMethod</name></name> <operator>=</operator> <name><name>usedbRsp</name><operator>-&gt;</operator><name>hashMethod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>hashPrefix</name></name> <operator>=</operator> <name><name>usedbRsp</name><operator>-&gt;</operator><name>hashPrefix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>hashSuffix</name></name> <operator>=</operator> <name><name>usedbRsp</name><operator>-&gt;</operator><name>hashSuffix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>stateTs</name></name> <operator>=</operator> <name><name>usedbRsp</name><operator>-&gt;</operator><name>stateTs</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"Got %d vgroup for db %s, vgVersion:%d, stateTs:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>-&gt;</operator><name>vgNum</name></name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>-&gt;</operator><name>vgVersion</name></name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>-&gt;</operator><name>stateTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>usedbRsp</name><operator>-&gt;</operator><name>vgNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>vgHash</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>usedbRsp</name><operator>-&gt;</operator><name>vgNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>vgHash</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>usedbRsp</name><operator>-&gt;</operator><name>vgNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgroupInfo</name> <modifier>*</modifier></type><name>pVgInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>usedbRsp</name><operator>-&gt;</operator><name>pVgroupInfos</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>numOfTable</name></name> <operator>+=</operator> <name><name>pVgInfo</name><operator>-&gt;</operator><name>numOfTable</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"the %dth vgroup, id %d, epNum %d, current %s port %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>,
           <argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pVgInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildTableMetaReqMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, 
                                  <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBuildTableInput</name> <modifier>*</modifier></type><name>pInput</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>input</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableInfoReq</name></type> <name>infoReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>infoReq</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>dbFName</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSTableInfoReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSTableInfoReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildUseDbMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBuildUseDBInput</name> <modifier>*</modifier></type><name>pInput</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInput</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SUseDbReq</name></type> <name>usedbReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>usedbReq</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>usedbReq</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>usedbReq</name><operator>.</operator><name>db</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>usedbReq</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>usedbReq</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>usedbReq</name><operator>.</operator><name>dbId</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>dbId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>usedbReq</name><operator>.</operator><name>numOfTable</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>numOfTable</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>usedbReq</name><operator>.</operator><name>stateTs</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>stateTs</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSUseDbReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedbReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSUseDbReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildQnodeListMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQnodeListReq</name></type> <name>qnodeListReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>qnodeListReq</name><operator>.</operator><name>rowNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSQnodeListReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>qnodeListReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSQnodeListReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qnodeListReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildDnodeListMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDnodeListReq</name></type> <name>dnodeListReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dnodeListReq</name><operator>.</operator><name>rowNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSDnodeListReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeListReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSDnodeListReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeListReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildGetSerVerMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SServerVerReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSServerVerReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSServerVerReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildGetDBCfgMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDbCfgReq</name></type> <name>dbCfgReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>dbCfgReq</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dbCfgReq</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSDbCfgReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfgReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSDbCfgReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCfgReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildGetIndexMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SUserIndexReq</name></type> <name>indexReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>indexReq</name><operator>.</operator><name>indexFName</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>indexReq</name><operator>.</operator><name>indexFName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSUserIndexReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSUserIndexReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildRetrieveFuncMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, 
                                  <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRetrieveFuncReq</name></type> <name>funcReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>funcReq</name><operator>.</operator><name>numOfFuncs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>funcReq</name><operator>.</operator><name>ignoreCodeComment</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>funcReq</name><operator>.</operator><name>pFuncNames</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>funcReq</name><operator>.</operator><name>pFuncNames</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSRetrieveFuncReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSRetrieveFuncReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>funcReq</name><operator>.</operator><name>pFuncNames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildGetUserAuthMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SGetUserAuthReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSGetUserAuthReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSGetUserAuthReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildGetTbIndexMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableIndexReq</name></type> <name>indexReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>indexReq</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>indexReq</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSTableIndexReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSTableIndexReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryBuildGetTbCfgMsg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>msgLen</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallcFp</name>)<parameter_list>(<parameter><decl><type><name>int64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msgLen</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SBuildTableInput</name> <modifier>*</modifier></type><name>pInput</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableCfgReq</name></type>      <name>cfgReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>cfgReq</name><operator>.</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSTableCfgReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call>(<modifier>*</modifier><name>mallcFp</name>)<argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSTableCfgReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>msg</name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>msgLen</name> <operator>=</operator> <name>bufLen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessUseDBRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUseDbOutput</name> <modifier>*</modifier></type><name>pOut</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUseDbRsp</name></type>     <name>usedbRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</expr_stmt>
    <goto>goto <name>PROCESS_USEDB_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSUseDbRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedbRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid use db rsp msg, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>PROCESS_USEDB_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>usedbRsp</name><operator>.</operator><name>vgNum</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid db[%s] vgroup number[%d]"</literal></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>.</operator><name>vgNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</expr_stmt>
    <goto>goto <name>PROCESS_USEDB_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>qTrace</name><argument_list>(<argument><expr><literal type="string">"db:%s, usedbRsp received, numOfVgroups:%d"</literal></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>.</operator><name>vgNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>usedbRsp</name><operator>.</operator><name>vgNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgroupInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>usedbRsp</name><operator>.</operator><name>pVgroupInfos</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>qTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, numOfEps:%d inUse:%d "</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>qTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, index:%d epset:%s:%u"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>queryBuildUseDbOutput</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>PROCESS_USEDB_OVER</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pOut</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to process usedb rsp since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tFreeSUsedbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>usedbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>queryConvertTableMetaMsg</name><parameter_list>(<parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pMetaMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMetaMsg</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>&gt;</operator> <name>TSDB_MAX_TAGS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid numOfTags[%d] in table meta rsp msg"</literal></expr></argument>, <argument><expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>&gt;</operator> <name>TSDB_MAX_COLUMNS</name> <operator>||</operator> <name><name>pMetaMsg</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid numOfColumns[%d] in table meta rsp msg"</literal></expr></argument>, <argument><expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>tableType</name></name> <operator>!=</operator> <name>TSDB_SUPER_TABLE</name> <operator>&amp;&amp;</operator> <name><name>pMetaMsg</name><operator>-&gt;</operator><name>tableType</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name> <operator>&amp;&amp;</operator>
      <name><name>pMetaMsg</name><operator>-&gt;</operator><name>tableType</name></name> <operator>!=</operator> <name>TSDB_NORMAL_TABLE</name> <operator>&amp;&amp;</operator> <name><name>pMetaMsg</name><operator>-&gt;</operator><name>tableType</name></name> <operator>!=</operator> <name>TSDB_SYSTEM_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid tableType[%d] in table meta rsp msg"</literal></expr></argument>, <argument><expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>sversion</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid sversion[%d] in table meta rsp msg"</literal></expr></argument>, <argument><expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>tversion</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid tversion[%d] in table meta rsp msg"</literal></expr></argument>, <argument><expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>tversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>colId</name> <operator>!=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid colId[%"</literal> <name>PRIi16</name> <literal type="string">"] for the first column in table meta rsp msg"</literal></expr></argument>, <argument><expr><name><name>pMetaMsg</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>colId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryCreateCTableMetaFromMsg</name><parameter_list>(<parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>SCTableMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>tuid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"ctable %s uid %"</literal> <name>PRIx64</name> <literal type="string">" meta returned, type %d vgId:%d db %s suid %"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
         <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryCreateTableMetaFromMsg</name><parameter_list>(<parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStb</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>msg</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>metaSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMeta</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>total</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>pTableMeta</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTableMeta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc size[%d] failed"</literal></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <ternary><condition><expr><name>isStb</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>msg</name><operator>-&gt;</operator><name>vgId</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <ternary><condition><expr><name>isStb</name></expr> ?</condition><then> <expr><name>TSDB_SUPER_TABLE</name></expr> </then><else>: <expr><name><name>msg</name><operator>-&gt;</operator><name>tableType</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><name>isStb</name></expr> ?</condition><then> <expr><name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr> </then><else>: <expr><name><name>msg</name><operator>-&gt;</operator><name>tuid</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>sversion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tversion</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>tversion</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>msg</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>rowSize</name></name> <operator>+=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"table %s uid %"</literal> <name>PRIx64</name> <literal type="string">" meta returned, type %d vgId:%d db %s stb %s suid %"</literal> <name>PRIx64</name> <literal type="string">" sver %d tver %d"</literal> <name>PRIx64</name>
         <literal type="string">" tagNum %d colNum %d precision %d rowSize %d"</literal></expr></argument>,
         <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>,
         <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tversion</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>,
         <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>rowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pMeta</name> <operator>=</operator> <name>pTableMeta</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessTableMetaRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMetaRsp</name></type> <name>metaRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</expr_stmt>
    <goto>goto <name>PROCESS_META_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSTableMetaRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>PROCESS_META_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>queryConvertTableMetaMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>PROCESS_META_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>tIsValidSchema</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><name><name>metaRsp</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name><name>metaRsp</name><operator>.</operator><name>numOfTags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</expr_stmt>
    <goto>goto <name>PROCESS_META_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableMetaOutput</name> <modifier>*</modifier></type><name>pOut</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>metaRsp</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>metaRsp</name><operator>.</operator><name>dbId</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>metaRsp</name><operator>.</operator><name>tableType</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_META_TYPE_BOTH_TABLE</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>ctbName</name></name></expr></argument>, <argument><expr><name><name>metaRsp</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>metaRsp</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>ctbMeta</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>metaRsp</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>ctbMeta</name><operator>.</operator><name>tableType</name></name> <operator>=</operator> <name><name>metaRsp</name><operator>.</operator><name>tableType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>ctbMeta</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>metaRsp</name><operator>.</operator><name>tuid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>ctbMeta</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>metaRsp</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>queryCreateTableMetaFromMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>SET_META_TYPE_TABLE</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>metaType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>metaRsp</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>queryCreateTableMetaFromMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>, <argument><expr><operator>(</operator><name><name>metaRsp</name><operator>.</operator><name>tableType</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOut</name><operator>-&gt;</operator><name>tbMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>PROCESS_META_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to process table meta rsp since %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tFreeSTableMetaRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessQnodeListRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQnodeListRsp</name></type> <name>out</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>out</name><operator>.</operator><name>qnodeList</name></name> <operator>=</operator> <operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><name>output</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSQnodeListRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid qnode list rsp msg, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessDnodeListRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeListRsp</name></type> <name>out</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSDnodeListRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid dnode list rsp msg, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>output</name> <operator>=</operator> <name><name>out</name><operator>.</operator><name>dnodeList</name></name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessGetSerVerRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SServerVerRsp</name></type> <name>out</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSServerVerRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid svr ver rsp msg, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>output</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessGetDbCfgRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDbCfgRsp</name></type> <name>out</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSDbCfgRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSDbCfgRsp failed, msgSize:%d,dbCfgRsp:%lu"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessGetIndexRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUserIndexRsp</name></type> <name>out</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSUserIndexRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSUserIndexRsp failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessRetrieveFuncRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRetrieveFuncRsp</name></type> <name>out</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSRetrieveFuncRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSRetrieveFuncRsp failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>!=</operator> <name><name>out</name><operator>.</operator><name>numOfFuncs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid func num returned, numOfFuncs:%d"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>numOfFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFuncInfo</name> <modifier>*</modifier></type><name>funcInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>pFuncInfos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>funcInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>funcInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>pFuncInfos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessGetUserAuthRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSGetUserAuthRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>(</operator><name>SGetUserAuthRsp</name> <operator>*</operator><operator>)</operator><name>output</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSGetUserAuthRsp failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessGetTbIndexRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableIndexRsp</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>STableIndexRsp</name> <operator>*</operator><operator>)</operator><name>output</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSTableIndexRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSTableIndexRsp failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>queryProcessGetTbCfgRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>output</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>msg</name> <operator>||</operator> <name>msgSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableCfgRsp</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableCfgRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSTableCfgRsp</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSTableCfgRsp failed, msgSize:%d"</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSTableCfgRsp</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>STableCfgRsp</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>output</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initQueryModuleMsgHandle</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_VND_TABLE_META</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildTableMetaReqMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_TABLE_META</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildTableMetaReqMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_USE_DB</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildUseDbMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_QNODE_LIST</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildQnodeListMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_DNODE_LIST</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildDnodeListMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_GET_DB_CFG</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildGetDBCfgMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_GET_INDEX</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildGetIndexMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_RETRIEVE_FUNC</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildRetrieveFuncMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_GET_USER_AUTH</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildGetUserAuthMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_GET_TABLE_INDEX</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildGetTbIndexMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_VND_TABLE_CFG</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildGetTbCfgMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_TABLE_CFG</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildGetTbCfgMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryBuildMsg</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_SERVER_VERSION</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryBuildGetSerVerMsg</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_VND_TABLE_META</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessTableMetaRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_TABLE_META</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessTableMetaRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_USE_DB</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessUseDBRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_QNODE_LIST</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessQnodeListRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_DNODE_LIST</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessDnodeListRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_GET_DB_CFG</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessGetDbCfgRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_GET_INDEX</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessGetIndexRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_RETRIEVE_FUNC</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessRetrieveFuncRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_GET_USER_AUTH</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessGetUserAuthRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_GET_TABLE_INDEX</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessGetTbIndexRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_VND_TABLE_CFG</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessGetTbCfgRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_TABLE_CFG</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessGetTbCfgRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queryProcessMsgRsp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name>TDMT_MND_SERVER_VERSION</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>queryProcessGetSerVerRsp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
</unit>
