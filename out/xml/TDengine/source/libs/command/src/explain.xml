<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/command/src/explain.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<comment type="line">// clang-format off</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commandInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>

<function_decl><type><name>int32_t</name></type> <name>qExplainGenerateResNode</name><parameter_list>(<parameter><decl><type><name>SPhysiNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SExplainGroup</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>SExplainResNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int32_t</name></type> <name>qExplainAppendGroupResRows</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>singleChannel</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>qExplainFreeResNode</name><parameter_list>(<parameter><decl><type><name>SExplainResNode</name> <modifier>*</modifier></type><name>resNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>resNode</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>resNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>node</argument>, <argument>resNode-&gt;pChildren</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>qExplainFreeResNode</name><argument_list>(<argument><expr><operator>(</operator><name>SExplainResNode</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
  <expr_stmt><expr><call><name>nodesClearList</name><argument_list>(<argument><expr><name><name>resNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>resNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qExplainFreeCtx</name><parameter_list>(<parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCtx</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SQueryExplainRowInfo</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>row</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>EXPLAIN_MODE_ANALYZE</name> <operator>==</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;&amp;</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>groupHash</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>groupHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SExplainGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>(</operator><name>SExplainGroup</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SExplainRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tFreeSExplainRsp</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>groupHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>groupHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>tbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainInitCtx</name><parameter_list>(<parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>groupHash</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verbose</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ratio</name></decl></parameter>, <parameter><decl><type><name>EExplainMode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExplainCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc SExplainCtx failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>rows</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryExplainRowInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit SQueryExplainRowInfo failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tbuf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tbuf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"malloc size %d failed"</literal></expr></argument>, <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ratio</name></name> <operator>=</operator> <name>ratio</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbuf</name></name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>groupHash</name></name> <operator>=</operator> <name>groupHash</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>groupHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QRY_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainGenerateResChildren</name><parameter_list>(<parameter><decl><type><name>SPhysiNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SExplainGroup</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>SNodeList</name> <modifier>*</modifier><modifier>*</modifier></type><name>pChildren</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pPhysiChildren</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STagScanPhysiNode</name> <modifier>*</modifier></type><name>pTagScanNode</name> <init>= <expr><operator>(</operator><name>STagScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pTagScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SEQ_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableScanPhysiNode</name> <modifier>*</modifier></type><name>pTblScanNode</name> <init>= <expr><operator>(</operator><name>STableScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSystemTableScanPhysiNode</name> <modifier>*</modifier></type><name>pSTblScanNode</name> <init>= <expr><operator>(</operator><name>SSystemTableScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PROJECT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SProjectPhysiNode</name> <modifier>*</modifier></type><name>pPrjNode</name> <init>= <expr><operator>(</operator><name>SProjectPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pPrjNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_JOIN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSortMergeJoinPhysiNode</name> <modifier>*</modifier></type><name>pJoinNode</name> <init>= <expr><operator>(</operator><name>SSortMergeJoinPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_AGG</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SAggPhysiNode</name> <modifier>*</modifier></type><name>pAggNode</name> <init>= <expr><operator>(</operator><name>SAggPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SExchangePhysiNode</name> <modifier>*</modifier></type><name>pExchNode</name> <init>= <expr><operator>(</operator><name>SExchangePhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pExchNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SORT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSortPhysiNode</name> <modifier>*</modifier></type><name>pSortNode</name> <init>= <expr><operator>(</operator><name>SSortPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SIntervalPhysiNode</name> <modifier>*</modifier></type><name>pIntNode</name> <init>= <expr><operator>(</operator><name>SIntervalPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_SESSION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSessionWinodwPhysiNode</name> <modifier>*</modifier></type><name>pSessNode</name> <init>= <expr><operator>(</operator><name>SSessionWinodwPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pSessNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_STATE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SStateWinodwPhysiNode</name> <modifier>*</modifier></type><name>pStateNode</name> <init>= <expr><operator>(</operator><name>SStateWinodwPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SPartitionPhysiNode</name> <modifier>*</modifier></type><name>partitionPhysiNode</name> <init>= <expr><operator>(</operator><name>SPartitionPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>partitionPhysiNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SMergePhysiNode</name> <modifier>*</modifier></type><name>mergePhysiNode</name> <init>= <expr><operator>(</operator><name>SMergePhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>mergePhysiNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INDEF_ROWS_FUNC</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SIndefRowsFuncPhysiNode</name> <modifier>*</modifier></type><name>indefPhysiNode</name> <init>= <expr><operator>(</operator><name>SIndefRowsFuncPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>indefPhysiNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SMergeAlignedIntervalPhysiNode</name> <modifier>*</modifier></type><name>intPhysiNode</name> <init>= <expr><operator>(</operator><name>SMergeAlignedIntervalPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>intPhysiNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_FILL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SFillPhysiNode</name> <modifier>*</modifier></type><name>fillPhysiNode</name> <init>= <expr><operator>(</operator><name>SFillPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>fillPhysiNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableMergeScanPhysiNode</name> <modifier>*</modifier></type><name>mergePhysiNode</name> <init>= <expr><operator>(</operator><name>STableMergeScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>mergePhysiNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_BLOCK_DIST_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SBlockDistScanPhysiNode</name> <modifier>*</modifier></type><name>distPhysiNode</name> <init>= <expr><operator>(</operator><name>SBlockDistScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>distPhysiNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_LAST_ROW_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SLastRowScanPhysiNode</name> <modifier>*</modifier></type><name>lastRowPhysiNode</name> <init>= <expr><operator>(</operator><name>SLastRowScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>lastRowPhysiNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableCountScanPhysiNode</name> <modifier>*</modifier></type><name>tableCountPhysiNode</name> <init>= <expr><operator>(</operator><name>STableCountScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>tableCountPhysiNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_GROUP_SORT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SGroupSortPhysiNode</name> <modifier>*</modifier></type><name>groupSortPhysiNode</name> <init>= <expr><operator>(</operator><name>SGroupSortPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>groupSortPhysiNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_INTERVAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SMergeIntervalPhysiNode</name> <modifier>*</modifier></type><name>mergeIntPhysiNode</name> <init>= <expr><operator>(</operator><name>SMergeIntervalPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>mergeIntPhysiNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INTERP_FUNC</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SInterpFuncPhysiNode</name> <modifier>*</modifier></type><name>interpPhysiNode</name> <init>= <expr><operator>(</operator><name>SInterpFuncPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pPhysiChildren</name> <operator>=</operator> <name><name>interpPhysiNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pChildren</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"not supported physical node type %d"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>pPhysiChildren</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pChildren</name> <operator>=</operator> <call><name>nodesMakeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pChildren</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"nodesMakeList failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name>           <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainResNode</name> <modifier>*</modifier></type><name>pResNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>node</argument>, <argument>pPhysiChildren</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainGenerateResNode</name><argument_list>(<argument><expr><operator>(</operator><name>SPhysiNode</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pResNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesListAppend</name><argument_list>(<argument><expr><operator>*</operator><name>pChildren</name></expr></argument>, <argument><expr><operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>pResNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainGenerateResNodeExecInfo</name><parameter_list>(<parameter><decl><type><name>SPhysiNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>pExecInfo</name></decl></parameter>, <parameter><decl><type><name>SExplainGroup</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pExecInfo</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExplainExecInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>pExecInfo</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d explainExecInfo failed"</literal></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExplainRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>singleChannel</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>group</name><operator>-&gt;</operator><name>physiPlanExecIdx</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>nodeIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeIdx</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>physiPlanExecIdx</name></name> <operator>&gt;=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>numOfPlans</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"physiPlanIdx %d exceed plan num %d"</literal></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>physiPlanExecIdx</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>numOfPlans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pExecInfo</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>subplanInfo</name></name> <operator>+</operator> <name><name>group</name><operator>-&gt;</operator><name>physiPlanExecIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>nodeNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>physiPlanExecIdx</name></name> <operator>&gt;=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>numOfPlans</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"physiPlanIdx %d exceed plan num %d"</literal></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>physiPlanExecIdx</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>numOfPlans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pExecInfo</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>subplanInfo</name></name> <operator>+</operator> <name><name>group</name><operator>-&gt;</operator><name>physiPlanExecIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>++</operator><name><name>group</name><operator>-&gt;</operator><name>physiPlanExecIdx</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainGenerateResNode</name><parameter_list>(<parameter><decl><type><name>SPhysiNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>SExplainGroup</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><name>SExplainResNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pResNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pResNode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"physical node is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SExplainResNode</name> <modifier>*</modifier></type><name>resNode</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExplainResNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>resNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc SPhysiNodeExplainRes failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>resNode</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><call><name>qExplainGenerateResNodeExecInfo</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>resNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><call><name>qExplainGenerateResChildren</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>resNode</name><operator>-&gt;</operator><name>pChildren</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pResNode</name> <operator>=</operator> <name>resNode</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>qExplainFreeResNode</name><argument_list>(<argument><expr><name>resNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QRY_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainBufAppendExecInfo</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pExecInfo</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>tlen</name> <init>= <expr><operator>*</operator><name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>nodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pExecInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainExecInfo</name></type> <name>maxExecInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExplainExecInfo</name> <modifier>*</modifier></type><name>execInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pExecInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>execInfo</name><operator>-&gt;</operator><name>startupCost</name></name> <operator>&gt;</operator> <name><name>maxExecInfo</name><operator>.</operator><name>startupCost</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>maxExecInfo</name><operator>.</operator><name>startupCost</name></name> <operator>=</operator> <name><name>execInfo</name><operator>-&gt;</operator><name>startupCost</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>execInfo</name><operator>-&gt;</operator><name>totalCost</name></name> <operator>&gt;</operator> <name><name>maxExecInfo</name><operator>.</operator><name>totalCost</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>maxExecInfo</name><operator>.</operator><name>totalCost</name></name> <operator>=</operator> <name><name>execInfo</name><operator>-&gt;</operator><name>totalCost</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>execInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>&gt;</operator> <name><name>maxExecInfo</name><operator>.</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>maxExecInfo</name><operator>.</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>execInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_EXECINFO_FORMAT</name></expr></argument>, <argument><expr><name><name>maxExecInfo</name><operator>.</operator><name>startupCost</name></name></expr></argument>, <argument><expr><name><name>maxExecInfo</name><operator>.</operator><name>totalCost</name></name></expr></argument>, <argument><expr><name><name>maxExecInfo</name><operator>.</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainBufAppendVerboseExecInfo</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pExecInfo</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>gotVerbose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>nodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pExecInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainExecInfo</name></type> <name>maxExecInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SExplainExecInfo</name> <modifier>*</modifier></type><name>execInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pExecInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>execInfo</name><operator>-&gt;</operator><name>verboseInfo</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>gotVerbose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>gotVerbose</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"exec verbose info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainResAppendRow</name><parameter_list>(<parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryExplainRowInfo</name></type> <name>row</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>row</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>row</name><operator>.</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosMemoryMalloc %d failed"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>row</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>row</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>row</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>+=</operator> <name><name>row</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosArrayPush row to explain res rows failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>row</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>getIntervalPrecision</name><parameter_list>(<parameter><decl><type><name>SIntervalPhysiNode</name> <modifier>*</modifier></type><name>pIntNode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>.</operator><name>resType</name><operator>.</operator><name>precision</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainResNodeToRowsImpl</name><parameter_list>(<parameter><decl><type><name>SExplainResNode</name> <modifier>*</modifier></type><name>pResNode</name></decl></parameter>, <parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>isVerboseLine</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>tbuf</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>tbuf</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>verbose</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>verbose</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPhysiNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pResNode</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"pyhsical node in explain res node is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TAG_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STagScanPhysiNode</name> <modifier>*</modifier></type><name>pTagScanNode</name> <init>= <expr><operator>(</operator><name>STagScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_TAG_SCAN_FORMAT</name></expr></argument>, <argument><expr><name><name>pTagScanNode</name><operator>-&gt;</operator><name>tableName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTagScanNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_PSEUDO_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pTagScanNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pTagScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pTagScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pTagScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pTagScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pTagScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendVerboseExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>tlen</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SEQ_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name></expr>:</case>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableScanPhysiNode</name> <modifier>*</modifier></type><name>pTblScanNode</name> <init>= <expr><operator>(</operator><name>STableScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>,
                      <argument><expr><ternary><condition><expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_MERGE_SCAN</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr> ?</condition><then> <expr><name>EXPLAIN_TBL_MERGE_SCAN_FORMAT</name></expr>
                                                                               </then><else>: <expr><name>EXPLAIN_TBL_SCAN_FORMAT</name></expr></else></ternary></expr></argument>,
                      <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>tableName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_PSEUDO_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_TABLE_SCAN_FORMAT</name></expr></argument>, <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scanSeq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// basic analyze output</comment>
      <if_stmt><if>if <condition>(<expr><name>EXPLAIN_MODE_ANALYZE</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"I/O: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type>                      <name>nodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>STableScanAnalyzeInfo</name></name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>maxIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>totalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nodeNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SExplainExecInfo</name>      <modifier>*</modifier></type><name>execInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>STableScanAnalyzeInfo</name> <modifier>*</modifier></type><name>pScanInfo</name> <init>= <expr><operator>(</operator><name>STableScanAnalyzeInfo</name> <operator>*</operator><operator>)</operator><name><name>execInfo</name><operator>-&gt;</operator><name>verboseInfo</name></name></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name><name>info</name><operator>.</operator><name>totalBlocks</name></name> <operator>+=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>totalBlocks</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name><operator>.</operator><name>loadBlocks</name></name> <operator>+=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>loadBlocks</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name><operator>.</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name><operator>.</operator><name>skipBlocks</name></name> <operator>+=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>skipBlocks</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name><operator>.</operator><name>filterTime</name></name> <operator>+=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>filterTime</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name><operator>.</operator><name>loadBlockStatis</name></name> <operator>+=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>loadBlockStatis</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name><operator>.</operator><name>totalCheckedRows</name></name> <operator>+=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>totalCheckedRows</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name><operator>.</operator><name>filterOutBlocks</name></name> <operator>+=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>filterOutBlocks</name></name></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>&gt;</operator> <name>totalRows</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>totalRows</name> <operator>=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"total_blocks=%.1f"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>info</name><operator>.</operator><name>totalBlocks</name></name><operator>)</operator> <operator>/</operator> <name>nodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"load_blocks=%.1f"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>info</name><operator>.</operator><name>loadBlocks</name></name><operator>)</operator> <operator>/</operator> <name>nodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"load_block_SMAs=%.1f"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>info</name><operator>.</operator><name>loadBlockStatis</name></name><operator>)</operator> <operator>/</operator> <name>nodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"total_rows=%.1f"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>info</name><operator>.</operator><name>totalRows</name></name><operator>)</operator> <operator>/</operator> <name>nodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"check_rows=%.1f"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>info</name><operator>.</operator><name>totalCheckedRows</name></name><operator>)</operator> <operator>/</operator> <name>nodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Rows out: Avg 4166.7 rows x 24 workers. Max 4187 rows (seg7) with 0.220 ms to first row, 1.738 ms to end,</comment>
        <comment type="line">// start offset by 1.470 ms.</comment>
        <decl_stmt><decl><type><name>SExplainExecInfo</name>      <modifier>*</modifier></type><name>execInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>maxIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>STableScanAnalyzeInfo</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><name>STableScanAnalyzeInfo</name> <operator>*</operator><operator>)</operator><name><name>execInfo</name><operator>-&gt;</operator><name>verboseInfo</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"max_row_task=%d, total_rows:%"</literal> <name>PRId64</name> <literal type="string">", ep:%s (cost=%.3f..%.3f)"</literal></expr></argument>, <argument><expr><name>maxIndex</name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>,
                           <argument><expr><literal type="string">"tbd"</literal></expr></argument>, <argument><expr><name><name>execInfo</name><operator>-&gt;</operator><name>startupCost</name></name></expr></argument>, <argument><expr><name><name>execInfo</name><operator>-&gt;</operator><name>totalCost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_TIMERANGE_FORMAT</name></expr></argument>, <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>skey</name></name></expr></argument>,
                        <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scanRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pTblScanNode</name><operator>-&gt;</operator><name>pGroupTags</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_PARTITION_KETS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_PARTITIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>pGroupTags</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SYSTABLE_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSystemTableScanPhysiNode</name> <modifier>*</modifier></type><name>pSTblScanNode</name> <init>= <expr><operator>(</operator><name>SSystemTableScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_SYSTBL_SCAN_FORMAT</name></expr></argument>, <argument><expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>tableName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_PSEUDO_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pSTblScanNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>       
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PROJECT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SProjectPhysiNode</name> <modifier>*</modifier></type><name>pPrjNode</name> <init>= <expr><operator>(</operator><name>SProjectPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_PROJECTION_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>pProjections</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_IGNORE_GROUPID_FORMAT</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>ignoreGroupId</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_MERGEBLOCKS_FORMAT</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr>?</condition><then> <expr><literal type="string">"True"</literal></expr></then><else>:<expr><literal type="string">"False"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  

        <if_stmt><if>if <condition>(<expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pPrjNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>      
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_JOIN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSortMergeJoinPhysiNode</name> <modifier>*</modifier></type><name>pJoinNode</name> <init>= <expr><operator>(</operator><name>SSortMergeJoinPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_JOIN_FORMAT</name></expr></argument>, <argument><expr><call><name>EXPLAIN_JOIN_STRING</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>joinType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pTargets</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_ON_CONDITIONS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(
            <argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pMergeCondition</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">" AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(
              <argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pJoinNode</name><operator>-&gt;</operator><name>pOnConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_AGG</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SAggPhysiNode</name> <modifier>*</modifier></type><name>pAggNode</name> <init>= <expr><operator>(</operator><name>SAggPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_AGG_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pAggNode</name><operator>-&gt;</operator><name>pAggFuncs</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_FUNCTIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>pAggFuncs</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pAggNode</name><operator>-&gt;</operator><name>pGroupKeys</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_GROUPS_FORMAT</name></expr></argument>, <argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>pGroupKeys</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_MERGEBLOCKS_FORMAT</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pAggNode</name><operator>-&gt;</operator><name>mergeDataBlock</name></name></expr>?</condition><then> <expr><literal type="string">"True"</literal></expr></then><else>:<expr><literal type="string">"False"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INDEF_ROWS_FUNC</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SIndefRowsFuncPhysiNode</name> <modifier>*</modifier></type><name>pIndefNode</name> <init>= <expr><operator>(</operator><name>SIndefRowsFuncPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_INDEF_ROWS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pIndefNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_FUNCTIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pIndefNode</name><operator>-&gt;</operator><name>pFuncs</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pIndefNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pIndefNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pIndefNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pIndefNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pIndefNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pIndefNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pIndefNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>      
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_EXCHANGE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SExchangePhysiNode</name> <modifier>*</modifier></type><name>pExchNode</name> <init>= <expr><operator>(</operator><name>SExchangePhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>nodeNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pExchNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>pExchNode</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SExplainGroup</name>      <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>groupHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pExchNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>group</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"exchange src group %d not in groupHash"</literal></expr></argument>, <argument><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>nodeNum</name> <operator>+=</operator> <name><name>group</name><operator>-&gt;</operator><name>nodeNum</name></name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_EXCHANGE_FORMAT</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>singleChannel</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>nodeNum</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pExchNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>      
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pExchNode</name><operator>-&gt;</operator><name>srcStartGroupId</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>pExchNode</name><operator>-&gt;</operator><name>srcEndGroupId</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainAppendGroupResRows</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pExchNode</name><operator>-&gt;</operator><name>singleChannel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_SORT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSortPhysiNode</name> <modifier>*</modifier></type><name>pSortNode</name> <init>= <expr><operator>(</operator><name>SSortPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_SORT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SDataBlockDescNode</name> <modifier>*</modifier></type><name>pDescNode</name> <init>= <expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pDescNode</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pDescNode</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>EXPLAIN_MODE_ANALYZE</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// sort key</comment>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Sort Key: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>SOrderByExprNode</name> <modifier>*</modifier></type><name>ptn</name> <init>= <expr><operator>(</operator><name>SOrderByExprNode</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><name><name>ptn</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// sort method</comment>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Sort Method: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type>           <name>nodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SExplainExecInfo</name> <modifier>*</modifier></type><name>execInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSortExecInfo</name>    <modifier>*</modifier></type><name>pExecInfo</name> <init>= <expr><operator>(</operator><name>SSortExecInfo</name> <operator>*</operator><operator>)</operator><name><name>execInfo</name><operator>-&gt;</operator><name>verboseInfo</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortMethod</name></name> <operator>==</operator> <name>SORT_QSORT_T</name></expr> ?</condition><then> <expr><literal type="string">"quicksort"</literal></expr> </then><else>: <expr><literal type="string">"merge sort"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  Buffers:%.2f Mb"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  Buffers:%.2f Kb"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  Buffers:%d b"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  loops:%d"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>loops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_HASH_INTERVAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SIntervalPhysiNode</name> <modifier>*</modifier></type><name>pIntNode</name> <init>= <expr><operator>(</operator><name>SIntervalPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_INTERVAL_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_FUNCTIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_INPUT_ORDER_FORMAT</name></expr></argument>, <argument><expr><call><name>EXPLAIN_ORDER_STRING</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>inputTsOrder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_OUTPUT_ORDER_TYPE_FORMAT</name></expr></argument>, <argument><expr><call><name>EXPLAIN_ORDER_STRING</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>outputTsOrder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>precision</name> <init>= <expr><call><name>getIntervalPrecision</name><argument_list>(<argument><expr><name>pIntNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_TIME_WINDOWS_FORMAT</name></expr></argument>,
                        <argument><expr><call><name>INVERAL_TIME_FROM_PRECISION_TO_UNIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><call><name>getPrecisionUnit</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>INVERAL_TIME_FROM_PRECISION_TO_UNIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_MERGEBLOCKS_FORMAT</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>mergeDataBlock</name></name></expr>?</condition><then> <expr><literal type="string">"True"</literal></expr></then><else>:<expr><literal type="string">"False"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_ALIGNED_INTERVAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SMergeAlignedIntervalPhysiNode</name> <modifier>*</modifier></type><name>pIntNode</name> <init>= <expr><operator>(</operator><name>SMergeAlignedIntervalPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_MERGE_ALIGNED_INTERVAL_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_FUNCTIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>precision</name> <init>= <expr><call><name>getIntervalPrecision</name><argument_list>(<argument><expr><name>pIntNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_TIME_WINDOWS_FORMAT</name></expr></argument>,
                        <argument><expr><call><name>INVERAL_TIME_FROM_PRECISION_TO_UNIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><call><name>getPrecisionUnit</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>INVERAL_TIME_FROM_PRECISION_TO_UNIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_MERGEBLOCKS_FORMAT</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>mergeDataBlock</name></name></expr>?</condition><then> <expr><literal type="string">"True"</literal></expr></then><else>:<expr><literal type="string">"False"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_FILL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SFillPhysiNode</name> <modifier>*</modifier></type><name>pFillNode</name> <init>= <expr><operator>(</operator><name>SFillPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_FILL_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_MODE_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetFillModeString</name><argument_list>(<argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pFillNode</name><operator>-&gt;</operator><name>pValues</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>pValues</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><name><name>pFillNode</name><operator>-&gt;</operator><name>pValues</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILL_VALUE_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>SNode</name>  <modifier>*</modifier></type><name>tNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <macro><name>FOREACH</name><argument_list>(<argument>tNode</argument>, <argument>pValues-&gt;pNodeList</argument>)</argument_list></macro> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>tValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name>tNode</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>nodesGetStrValueFromNode</name><argument_list>(<argument><expr><name>tValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_STRING_TYPE_FORMAT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
          </block_content>}</block>

          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_TIMERANGE_FORMAT</name></expr></argument>, <argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pFillNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>       
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_SESSION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSessionWinodwPhysiNode</name> <modifier>*</modifier></type><name>pSessNode</name> <init>= <expr><operator>(</operator><name>SSessionWinodwPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_SESSION_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_FUNCTIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pSessNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pSessNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pSessNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pSessNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pSessNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pSessNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_WINDOW_FORMAT</name></expr></argument>, <argument><expr><name><name>pSessNode</name><operator>-&gt;</operator><name>gap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pSessNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pSessNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>      
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_STATE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SStateWinodwPhysiNode</name> <modifier>*</modifier></type><name>pStateNode</name> <init>= <expr><operator>(</operator><name>SStateWinodwPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_STATE_WINDOW_FORMAT</name></expr></argument>,
                      <argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STargetNode</name> <operator>*</operator><operator>)</operator><name><name>pStateNode</name><operator>-&gt;</operator><name>pStateKey</name></name><operator>)</operator><operator>-&gt;</operator><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_FUNCTIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pStateNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>     
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_PARTITION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SPartitionPhysiNode</name> <modifier>*</modifier></type><name>pPartNode</name> <init>= <expr><operator>(</operator><name>SPartitionPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pPartitionKeys</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_PARITION_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_PARTITION_KETS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_PARTITIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>pPartitionKeys</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pPartNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pPartNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SMergePhysiNode</name> <modifier>*</modifier></type><name>pMergeNode</name> <init>= <expr><operator>(</operator><name>SMergePhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_MERGE_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SDataBlockDescNode</name> <modifier>*</modifier></type><name>pDescNode</name> <init>= <expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pDescNode</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pDescNode</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>EXPLAIN_MODE_ANALYZE</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// sort key</comment>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Merge Key: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>SOrderByExprNode</name> <modifier>*</modifier></type><name>ptn</name> <init>= <expr><operator>(</operator><name>SOrderByExprNode</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><name><name>ptn</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// sort method</comment>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Sort Method: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type>           <name>nodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SExplainExecInfo</name> <modifier>*</modifier></type><name>execInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSortExecInfo</name>    <modifier>*</modifier></type><name>pExecInfo</name> <init>= <expr><operator>(</operator><name>SSortExecInfo</name> <operator>*</operator><operator>)</operator><name><name>execInfo</name><operator>-&gt;</operator><name>verboseInfo</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortMethod</name></name> <operator>==</operator> <name>SORT_QSORT_T</name></expr> ?</condition><then> <expr><literal type="string">"quicksort"</literal></expr> </then><else>: <expr><literal type="string">"merge sort"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  Buffers:%.2f Mb"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  Buffers:%.2f Kb"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  Buffers:%d b"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  loops:%d"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>loops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_MERGE_KEYS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>groupSort</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_STRING_TYPE_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"_group_id asc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COMMA_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SOrderByExprNode</name> <modifier>*</modifier></type><name>ptn</name> <init>= <expr><operator>(</operator><name>SOrderByExprNode</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_STRING_TYPE_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><name><name>ptn</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_STRING_TYPE_FORMAT</name></expr></argument>, <argument><expr><call><name>EXPLAIN_ORDER_STRING</name><argument_list>(<argument><expr><name><name>ptn</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>pMergeKeys</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COMMA_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pMergeNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>     
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_BLOCK_DIST_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SBlockDistScanPhysiNode</name> <modifier>*</modifier></type><name>pDistScanNode</name> <init>= <expr><operator>(</operator><name>SBlockDistScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_DISTBLK_SCAN_FORMAT</name></expr></argument>, <argument><expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>tableName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>pScanCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_PSEUDO_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>pScanPseudoCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pDistScanNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>       
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_LAST_ROW_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SLastRowScanPhysiNode</name> <modifier>*</modifier></type><name>pLastRowNode</name> <init>= <expr><operator>(</operator><name>SLastRowScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_LASTROW_SCAN_FORMAT</name></expr></argument>, <argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>tableName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_PSEUDO_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_TABLE_COUNT_SCAN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>STableCountScanPhysiNode</name> <modifier>*</modifier></type><name>pLastRowNode</name> <init>= <expr><operator>(</operator><name>STableCountScanPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_TABLE_COUNT_SCAN_FORMAT</name></expr></argument>,
                      <argument><expr><operator>(</operator><ternary><condition><expr><literal type="char">'\0'</literal> <operator>!=</operator> <name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>tableName</name><operator>.</operator><name>tname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>tableName</name><operator>.</operator><name>tname</name></name></expr> </then><else>: <expr><name>TSDB_INS_TABLE_TABLES</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanCols</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_PSEUDO_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>pScanPseudoCols</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pLastRowNode</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>        
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_GROUP_SORT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SGroupSortPhysiNode</name> <modifier>*</modifier></type><name>pSortNode</name> <init>= <expr><operator>(</operator><name>SGroupSortPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_GROUP_SORT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SDataBlockDescNode</name> <modifier>*</modifier></type><name>pDescNode</name> <init>= <expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pDescNode</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pDescNode</name><operator>-&gt;</operator><name>totalRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>EXPLAIN_MODE_ANALYZE</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// sort key</comment>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Sort Key: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>SOrderByExprNode</name> <modifier>*</modifier></type><name>ptn</name> <init>= <expr><operator>(</operator><name>SOrderByExprNode</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>pSortKeys</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><name><name>ptn</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// sort method</comment>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Sort Method: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type>           <name>nodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SExplainExecInfo</name> <modifier>*</modifier></type><name>execInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSortExecInfo</name>    <modifier>*</modifier></type><name>pExecInfo</name> <init>= <expr><operator>(</operator><name>SSortExecInfo</name> <operator>*</operator><operator>)</operator><name><name>execInfo</name><operator>-&gt;</operator><name>verboseInfo</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortMethod</name></name> <operator>==</operator> <name>SORT_QSORT_T</name></expr> ?</condition><then> <expr><literal type="string">"quicksort"</literal></expr> </then><else>: <expr><literal type="string">"merge sort"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  Buffers:%.2f Mb"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  Buffers:%.2f Kb"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  Buffers:%d b"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>sortBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><literal type="string">"  loops:%d"</literal></expr></argument>, <argument><expr><name><name>pExecInfo</name><operator>-&gt;</operator><name>loops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pSortNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>    
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_MERGE_INTERVAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SMergeIntervalPhysiNode</name> <modifier>*</modifier></type><name>pIntNode</name> <init>= <expr><operator>(</operator><name>SMergeIntervalPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_MERGE_INTERVAL_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetNameFromColumnNode</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pTspk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_FUNCTIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>pFuncs</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>precision</name> <init>= <expr><call><name>getIntervalPrecision</name><argument_list>(<argument><expr><name>pIntNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_TIME_WINDOWS_FORMAT</name></expr></argument>,
                        <argument><expr><call><name>INVERAL_TIME_FROM_PRECISION_TO_UNIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><call><name>getPrecisionUnit</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>INVERAL_TIME_FROM_PRECISION_TO_UNIT</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pIntNode</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>  
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_NODE_PHYSICAL_PLAN_INTERP_FUNC</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SInterpFuncPhysiNode</name> <modifier>*</modifier></type><name>pInterpNode</name> <init>= <expr><operator>(</operator><name>SInterpFuncPhysiNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>EXPLAIN_INTERP_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_LEFT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainBufAppendExecInfo</name><argument_list>(<argument><expr><name><name>pResNode</name><operator>-&gt;</operator><name>pExecInfo</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>pFuncs</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_FUNCTIONS_FORMAT</name></expr></argument>, <argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>pFuncs</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_MODE_FORMAT</name></expr></argument>, <argument><expr><call><name>nodesGetFillModeString</name><argument_list>(<argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>fillMode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_RIGHT_PARENTHESIS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_OUTPUT_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_COLUMNS_FORMAT</name></expr></argument>,
                           <argument><expr><call><name>nodesGetOutputNumFromSlotList</name><argument_list>(<argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>pSlots</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_WIDTH_FORMAT</name></expr></argument>, <argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pOutputDataBlockDesc</name><operator>-&gt;</operator><name>outputRowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_LIMIT</name><argument_list>(<argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND_SLIMIT</name><argument_list>(<argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pSlimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>pFillValues</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>pValues</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><name><name>pInterpNode</name><operator>-&gt;</operator><name>pFillValues</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILL_VALUE_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>SNode</name>  <modifier>*</modifier></type><name>tNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <macro><name>FOREACH</name><argument_list>(<argument>tNode</argument>, <argument>pValues-&gt;pNodeList</argument>)</argument_list></macro> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_BLANK_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>SValueNode</name> <modifier>*</modifier></type><name>tValue</name> <init>= <expr><operator>(</operator><name>SValueNode</name> <operator>*</operator><operator>)</operator><name>tNode</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>nodesGetStrValueFromNode</name><argument_list>(<argument><expr><name>tValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>EXPLAIN_ROW_APPEND</name><argument_list>(<argument><expr><name>EXPLAIN_STRING_TYPE_FORMAT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
          </block_content>}</block>

          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_INTERVAL_VALUE_FORMAT</name></expr></argument>, <argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_TIMERANGE_FORMAT</name></expr></argument>, <argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>timeRange</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_NEW</name><argument_list>(<argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>EXPLAIN_FILTER_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>nodesNodeToSQL</name><argument_list>(<argument><expr><name><name>pInterpNode</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pConditions</name></name></expr></argument>, <argument><expr><name>tbuf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
                                     <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>EXPLAIN_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>      
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"not supported physical node type %d"</literal></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainResNodeToRows</name><parameter_list>(<parameter><decl><type><name>SExplainResNode</name> <modifier>*</modifier></type><name>pResNode</name></decl></parameter>, <parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pResNode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"explain res node is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResNodeToRowsImpl</name><argument_list>(<argument><expr><name>pResNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pResNode-&gt;pChildren</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResNodeToRows</name><argument_list>(<argument><expr><operator>(</operator><name>SExplainResNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainAppendGroupResRows</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>singleChannel</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExplainResNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainCtx</name>     <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SExplainCtx</name> <operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExplainGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>groupHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>group</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"group %d not in groupHash"</literal></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>singleChannel</name></name> <operator>=</operator> <name>singleChannel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>physiPlanExecIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainGenerateResNode</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><call><name>qExplainResNodeToRows</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>qExplainFreeResNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QRY_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainGetRspFromCtx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>(</operator><name>SExplainCtx</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>rowNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rowNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"empty explain res rows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name>    <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>infoData</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>TSDB_EXPLAIN_RESULT_ROW_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>rowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SQueryExplainRowInfo</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pInfoData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>row</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>rowNum</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>blockGetEncodeSize</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><operator>(</operator><name>SRetrieveTableRsp</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rspSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>rsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"malloc SRetrieveTableRsp failed, size:%d"</literal></expr></argument>, <argument><expr><name>rspSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>completed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>rowNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>blockEncode</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>rspSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pRsp</name> <operator>=</operator> <name>rsp</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainPrepareCtx</name><parameter_list>(<parameter><decl><type><name>SQueryPlan</name> <modifier>*</modifier></type><name>pDag</name></decl></parameter>, <parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNodeListNode</name> <modifier>*</modifier></type><name>plans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>taskNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainGroup</name> <modifier>*</modifier></type><name>pGroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainCtx</name>   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid subplan num:%d"</literal></expr></argument>, <argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>levelNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>levelNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid level num:%d"</literal></expr></argument>, <argument><expr><name>levelNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>groupHash</name> <init>=
      <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><name>EXPLAIN_MAX_GROUP_NUM</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>groupHash</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"groupHash %d failed"</literal></expr></argument>, <argument><expr><name>EXPLAIN_MAX_GROUP_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(
      <argument><expr><call><name>qExplainInitCtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>groupHash</name></expr></argument>, <argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>explainInfo</name><operator>.</operator><name>verbose</name></name></expr></argument>, <argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>explainInfo</name><operator>.</operator><name>ratio</name></name></expr></argument>, <argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>explainInfo</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>levelNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>plans</name> <operator>=</operator> <operator>(</operator><name>SNodeListNode</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pDag</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>plans</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"empty level plan, level:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>taskNum</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>plans</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>taskNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid level plan number:%d, level:%d"</literal></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSubplan</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>taskNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>plan</name> <operator>=</operator> <operator>(</operator><name>SSubplan</name> <operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>plans</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pGroup</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>groupHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>plan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pGroup</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name><name>pGroup</name><operator>-&gt;</operator><name>nodeNum</name></name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SExplainGroup</name></type> <name>group</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>group</name><operator>.</operator><name>nodeNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>group</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <name>plan</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name>groupHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>plan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>group</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosHashPut to explainGroupHash failed, taskIdx:%d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>taskNum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid taskNum %d for level 0"</literal></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><name>TSDB_CODE_QRY_INVALID_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rootGroupId</name></name> <operator>=</operator> <name><name>plan</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"level %d group handled, taskNum:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>taskNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>pCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>qExplainFreeCtx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>QRY_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainAppendPlanRows</name><parameter_list>(<parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>EXPLAIN_MODE_ANALYZE</name> <operator>!=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>tbuf</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>tbuf</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>EXPLAIN_SUM_ROW_NEW</name><argument_list>(<argument><expr><name>EXPLAIN_RATIO_TIME_FORMAT</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EXPLAIN_SUM_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>EXPLAIN_SUM_ROW_NEW</name><argument_list>(<argument><expr><name>EXPLAIN_PLANNING_TIME_FORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>pCtx</name><operator>-&gt;</operator><name>jobStartTs</name></name> <operator>-</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>reqStartTs</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EXPLAIN_SUM_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>EXPLAIN_SUM_ROW_NEW</name><argument_list>(<argument><expr><name>EXPLAIN_EXEC_TIME_FORMAT</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>pCtx</name><operator>-&gt;</operator><name>jobDoneTs</name></name> <operator>-</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>jobStartTs</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>EXPLAIN_SUM_ROW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainResAppendRow</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainGenerateRsp</name><parameter_list>(<parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainAppendGroupResRows</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>rootGroupId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainAppendPlanRows</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainGetRspFromCtx</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExplainUpdateExecInfo</name><parameter_list>(<parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SExplainRsp</name> <modifier>*</modifier></type><name>pRspMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SExplainResNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>             <name>groupDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainCtx</name>     <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SExplainCtx</name> <operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExplainGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>groupHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>group</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"group %d not in groupHash"</literal></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSExplainRsp</name><argument_list>(<argument><expr><name>pRspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SExplainRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d explainExecInfo failed"</literal></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tFreeSExplainRsp</name><argument_list>(<argument><expr><name>pRspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>physiPlanExecNum</name></name> <operator>=</operator> <name><name>pRspMsg</name><operator>-&gt;</operator><name>numOfPlans</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>group</name><operator>-&gt;</operator><name>nodeNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"group execInfo already full, size:%d, nodeNum:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSExplainRsp</name><argument_list>(<argument><expr><name>pRspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>physiPlanExecNum</name></name> <operator>!=</operator> <name><name>pRspMsg</name><operator>-&gt;</operator><name>numOfPlans</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"physiPlanExecNum %d mismatch with others %d in group %d"</literal></expr></argument>, <argument><expr><name><name>pRspMsg</name><operator>-&gt;</operator><name>numOfPlans</name></name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>physiPlanExecNum</name></name></expr></argument>,
           <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSExplainRsp</name><argument_list>(<argument><expr><name>pRspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr></argument>, <argument><expr><name>pRspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <expr_stmt><expr><name>groupDone</name> <operator>=</operator> <operator>(</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>nodeExecInfo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>group</name><operator>-&gt;</operator><name>nodeNum</name></name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>groupDone</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>groupHash</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>groupDoneNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>execDone</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>taosWTryLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainGenerateRsp</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// LEAVE LOCK THERE</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExecStaticExplain</name><parameter_list>(<parameter><decl><type><name>SQueryPlan</name> <modifier>*</modifier></type><name>pDag</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainPrepareCtx</name><argument_list>(<argument><expr><name>pDag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QRY_ERR_JRET</name><argument_list>(<argument><expr><call><name>qExplainGenerateRsp</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>qExplainFreeCtx</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QRY_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExecExplainBegin</name><parameter_list>(<parameter><decl><type><name>SQueryPlan</name> <modifier>*</modifier></type><name>pDag</name></decl></parameter>, <parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>startTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainPrepareCtx</name><argument_list>(<argument><expr><name>pDag</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pCtx</name><operator>)</operator><operator>-&gt;</operator><name>reqStartTs</name></name> <operator>=</operator> <name>startTs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pCtx</name><operator>)</operator><operator>-&gt;</operator><name>jobStartTs</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExecExplainEnd</name><parameter_list>(<parameter><decl><type><name>SExplainCtx</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>jobDoneTs</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>execDone</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>groupHash</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>groupDoneNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>taosWTryLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>QRY_ERR_RET</name><argument_list>(<argument><expr><call><name>qExplainGenerateRsp</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// LEAVE LOCK THERE</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
