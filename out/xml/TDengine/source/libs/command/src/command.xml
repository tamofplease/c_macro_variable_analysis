<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/libs/command/src/command.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commandInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tgrant.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SConfig</name><modifier>*</modifier></type> <name>tsCfg</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildRetrieveTableRsp</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>rspSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>blockGetEncodeSize</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRsp</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rspSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pRsp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>completed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>blockEncode</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>rspSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getSchemaBytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
      <return>return <expr><operator>(</operator><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
      <return>return <expr><operator>(</operator><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>;</return>
    <default>default:</default>
      <return>return <expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildDescResultDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBlock</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>infoData</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>DESCRIBE_RESULT_FIELD_LEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>infoData</name> <operator>=</operator> <call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>DESCRIBE_RESULT_TYPE_LEN</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>infoData</name> <operator>=</operator> <call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_INT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>infoData</name> <operator>=</operator> <call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>DESCRIBE_RESULT_NOTE_LEN</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setDescResultIntoDataBlock</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>sysInfoUser</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// field</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// Type</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol2</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// Length</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol3</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// Note</comment>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol4</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>             <name><name>buf</name><index>[<expr><name>DESCRIBE_RESULT_FIELD_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>invisibleColumn</name><argument_list>(<argument><expr><name>sysInfoUser</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol1</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol2</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><call><name>getSchemaBytes</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>schema</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol3</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>bytes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr> ?</condition><then> <expr><literal type="string">"TAG"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol4</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>execDescribe</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>sysInfoUser</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDescribeStmt</name><modifier>*</modifier></type> <name>pDesc</name> <init>= <expr><operator>(</operator><name>SDescribeStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>numOfRows</name> <init>= <expr><call><name>TABLE_TOTAL_COL_NUM</name><argument_list>(<argument><expr><name><name>pDesc</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildDescResultDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setDescResultIntoDataBlock</name><argument_list>(<argument><expr><name>sysInfoUser</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name><name>pDesc</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRetrieveTableRsp</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>DESCRIBE_RESULT_COLS</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>execResetQueryCache</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>catalogClearCache</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateDBResultDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBlock</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>infoData</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>SHOW_CREATE_DB_RESULT_COLS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>infoData</name> <operator>=</operator> <call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>SHOW_CREATE_DB_RESULT_FIELD2_LEN</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>getValOfDiffPrecision</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>unit</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>val</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'m'</literal></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>val</name> <operator>/</operator> <name><name>tsTickPerMin</name><index>[<expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>]</index></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'h'</literal></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>val</name> <operator>/</operator> <operator>(</operator><name><name>tsTickPerMin</name><index>[<expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>]</index></name> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>val</name> <operator>/</operator> <operator>(</operator><name><name>tsTickPerMin</name><index>[<expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>]</index></name> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>val</name> <operator>/</operator> <operator>(</operator><name><name>tsTickPerMin</name><index>[<expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>]</index></name> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>buildRetension</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pRetension</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pRetension</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>       <name>p1</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRetention</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pRetension</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>v1</name> <init>= <expr><call><name>getValOfDiffPrecision</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>freqUnit</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>v2</name> <init>= <expr><call><name>getValOfDiffPrecision</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>keepUnit</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>keep</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">"%c:%"</literal> <name>PRId64</name> <literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>freqUnit</name></name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>keepUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pRetension</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>getValOfDiffPrecision</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>freqUnit</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>getValOfDiffPrecision</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>keepUnit</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>keep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">"%c:%"</literal> <name>PRId64</name> <literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>freqUnit</name></name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>keepUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pRetension</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>getValOfDiffPrecision</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>freqUnit</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>getValOfDiffPrecision</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>keepUnit</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>keep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">"%c:%"</literal> <name>PRId64</name> <literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>freqUnit</name></name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>keepUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>p1</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cacheModelStr</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>cacheModel</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>cacheModel</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_CACHE_MODEL_NONE</name></expr>:</case>
      <return>return <expr><name>TSDB_CACHE_MODEL_NONE_STR</name></expr>;</return>
    <case>case <expr><name>TSDB_CACHE_MODEL_LAST_ROW</name></expr>:</case>
      <return>return <expr><name>TSDB_CACHE_MODEL_LAST_ROW_STR</name></expr>;</return>
    <case>case <expr><name>TSDB_CACHE_MODEL_LAST_VALUE</name></expr>:</case>
      <return>return <expr><name>TSDB_CACHE_MODEL_LAST_VALUE_STR</name></expr>;</return>
    <case>case <expr><name>TSDB_CACHE_MODEL_BOTH</name></expr>:</case>
      <return>return <expr><name>TSDB_CACHE_MODEL_BOTH_STR</name></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CACHE_MODEL_NONE_STR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>strictStr</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>strict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>TSDB_DB_STRICT_ON</name> <operator>==</operator> <name>strict</name></expr> ?</condition><then> <expr><name>TSDB_DB_STRICT_ON_STR</name></expr> </then><else>: <expr><name>TSDB_DB_STRICT_OFF_STR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setCreateDBResultIntoDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name></decl></parameter>, <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>             <name><name>buf1</name><index>[<expr><name>SHOW_CREATE_DB_RESULT_FIELD1_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol2</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>             <name><name>buf2</name><index>[<expr><name>SHOW_CREATE_DB_RESULT_FIELD2_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>prec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>precision</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case>
      <expr_stmt><expr><name>prec</name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI_STR</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case>
      <expr_stmt><expr><name>prec</name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MICRO_STR</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case>
      <expr_stmt><expr><name>prec</name> <operator>=</operator> <name>TSDB_TIME_PRECISION_NANO_STR</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>prec</name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>retentions</name> <init>= <expr><call><name>buildRetension</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pRetensions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(
      <argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>,
      <argument><expr><literal type="string">"CREATE DATABASE `%s` BUFFER %d CACHESIZE %d CACHEMODEL '%s' COMP %d DURATION %dm "</literal>
      <literal type="string">"WAL_FSYNC_PERIOD %d MAXROWS %d MINROWS %d KEEP %dm,%dm,%dm PAGES %d PAGESIZE %d PRECISION '%s' REPLICA %d "</literal>
      <literal type="string">"STRICT '%s' WAL_LEVEL %d VGROUPS %d SINGLE_STABLE %d"</literal></expr></argument>,
      <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>cacheSize</name></name></expr></argument>, <argument><expr><call><name>cacheModelStr</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>cacheLast</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>daysPerFile</name></name></expr></argument>,
      <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walFsyncPeriod</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>maxRows</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>minRows</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>daysToKeep0</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>daysToKeep1</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>daysToKeep2</name></name></expr></argument>,
      <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pages</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pageSize</name></name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>replications</name></name></expr></argument>, <argument><expr><call><name>strictStr</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>strict</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walLevel</name></name></expr></argument>,
      <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>==</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfStables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>retentions</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" RETENTIONS %s"</literal></expr></argument>, <argument><expr><name>retentions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>retentions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><call><name>varDataLen</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>execShowCreateDatabase</name><parameter_list>(<parameter><decl><type><name>SShowCreateDatabaseStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildCreateDBResultDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setCreateDBResultIntoDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRetrieveTableRsp</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>SHOW_CREATE_DB_RESULT_COLS</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildCreateTbResultDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBlock</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>infoData</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>SHOW_CREATE_TB_RESULT_FIELD1_LEN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>infoData</name> <operator>=</operator> <call><name>createColumnInfoData</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>SHOW_CREATE_TB_RESULT_FIELD2_LEN</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>appendColumnFields</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><name><name>pCfg</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>     <name><name>type</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_VARCHAR</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>type</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"(%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>type</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"(%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s`%s` %s"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>appendTagFields</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><name><name>pCfg</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>+</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>     <name><name>type</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_VARCHAR</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>type</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"(%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>type</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"(%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s`%s` %s"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>appendTagNameFields</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><name><name>pCfg</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>+</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s`%s`"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>appendTagValues</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type>   <name>pTag</name> <init>= <expr><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name><name>pCfg</name><operator>-&gt;</operator><name>pTags</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>pTags</name></name> <operator>||</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tag missed in table cfg, pointer:%p, numOfTags:%d"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>parseTagDatatoJson</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pJson</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tTagToValArray</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STag</name><operator>*</operator><operator>)</operator><name><name>pCfg</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagVals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int16_t</name></type> <name>valueNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><name><name>pCfg</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>+</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>valueNum</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>pTagVal</name> <init>= <expr><operator>(</operator><name>STagVal</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>&gt;</operator> <name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tag value and column mismatch, schemaId:%d, valId:%d"</literal></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type>    <name>type</name> <init>= <expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dataConverToStr</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>dataConverToStr</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <name>tlen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
    if (type == TSDB_DATA_TYPE_BINARY) {
      if (pTagVal-&gt;nData &gt; 0) {
        if (num) {
          *len += sprintf(buf + VARSTR_HEADER_SIZE + *len, ", ");
        }

        memcpy(buf + VARSTR_HEADER_SIZE + *len, pTagVal-&gt;pData, pTagVal-&gt;nData);
        *len += pTagVal-&gt;nData;
      }
    } else if (type == TSDB_DATA_TYPE_NCHAR) {
      if (pTagVal-&gt;nData &gt; 0) {
        if (num) {
          *len += sprintf(buf + VARSTR_HEADER_SIZE + *len, ", ");
        }
        int32_t tlen = taosUcs4ToMbs((TdUcs4 *)pTagVal-&gt;pData, pTagVal-&gt;nData, buf + VARSTR_HEADER_SIZE + *len);
      }
    } else if (type == TSDB_DATA_TYPE_DOUBLE) {
      double val = *(double *)(&amp;pTagVal-&gt;i64);
      int    len = 0;
      term = indexTermCreate(suid, ADD_VALUE, type, key, nKey, (const char *)&amp;val, len);
    } else if (type == TSDB_DATA_TYPE_BOOL) {
      int val = *(int *)(&amp;pTagVal-&gt;i64);
      int len = 0;
      term = indexTermCreate(suid, ADD_VALUE, TSDB_DATA_TYPE_INT, key, nKey, (const char *)&amp;val, len);
    }
    */</comment>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>appendTableOptions</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pDbCfg</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" COMMENT '%s'"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pComment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>commentLen</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" COMMENT ''"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pDbCfg</name><operator>-&gt;</operator><name>pRetensions</name></name> <operator>&amp;&amp;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>watermark1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" WATERMARK %"</literal> <name>PRId64</name> <literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>watermark1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>watermark2</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>watermark2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pDbCfg</name><operator>-&gt;</operator><name>pRetensions</name></name> <operator>&amp;&amp;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>delay1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" MAX_DELAY %"</literal> <name>PRId64</name> <literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>delay1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>delay2</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>delay2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>funcNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pDbCfg</name><operator>-&gt;</operator><name>pRetensions</name></name> <operator>&amp;&amp;</operator> <name>funcNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" ROLLUP("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>funcNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pFunc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>ttl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" TTL %d"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setCreateTBResultIntoDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SDbCfgInfo</name><modifier>*</modifier></type> <name>pDbCfg</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>tbName</name></decl></parameter>, <parameter><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>             <name><name>buf1</name><index>[<expr><name>SHOW_CREATE_TB_RESULT_FIELD1_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol2</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>buf2</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>SHOW_CREATE_TB_RESULT_FIELD2_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>==</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"CREATE STABLE `%s` ("</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendColumnFields</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">") TAGS ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendTagFields</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendTableOptions</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>pDbCfg</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>TSDB_CHILD_TABLE</name> <operator>==</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE `%s` USING `%s` ("</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendTagNameFields</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">") TAGS ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendTagValues</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendTableOptions</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>pDbCfg</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE `%s` ("</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendColumnFields</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf2</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendTableOptions</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>pDbCfg</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">65535</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">65535</literal></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pCol2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>execShowCreateTable</name><parameter_list>(<parameter><decl><type><name>SShowCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildCreateTbResultDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setCreateTBResultIntoDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRetrieveTableRsp</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>SHOW_CREATE_TB_RESULT_COLS</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>execShowCreateSTable</name><parameter_list>(<parameter><decl><type><name>SShowCreateTableStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableCfg</name><modifier>*</modifier></type> <name>pCfg</name> <init>= <expr><operator>(</operator><name>STableCfg</name><operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_SUPER_TABLE</name> <operator>!=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>tableType</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_NOT_STABLE_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>execShowCreateTable</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>execAlterCmd</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>processed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>COMMAND_RESET_LOG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosResetLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfgDumpCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>COMMAND_SCHEDULE_POLICY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schedulerUpdatePolicy</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>COMMAND_ENABLE_RESCHEDULE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schedulerEnableReSchedule</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>COMMAND_CATALOG_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>ctgdHandleDbgCommand</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>processed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>execAlterLocal</name><parameter_list>(<parameter><decl><type><name>SAlterLocalStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>processed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>execAlterCmd</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>processed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>processed</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>forbidden</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalCfgForbiddenToChange</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>forbidden</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>forbidden</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OPS_NOT_SUPPORT</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>CFG_STYPE_ALTER_CMD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosSetCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildLocalVariablesResultDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBlock</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>SHOW_LOCAL_VARIABLES_RESULT_COLS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>infoData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>SHOW_LOCAL_VARIABLES_RESULT_FIELD1_LEN</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>SHOW_LOCAL_VARIABLES_RESULT_FIELD2_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>setLocalVariablesResultIntoDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCfg</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tsCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>numOfCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCfg</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SConfigItem</name><modifier>*</modifier></type> <name>pItem</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tsCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>GRANT_CFG_SKIP</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>TSDB_CONFIG_OPTION_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_OPTION_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>c</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type>    <name><name>value</name><index>[<expr><name>TSDB_CONFIG_VALUE_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>valueLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cfgDumpItemValue</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><index>[<expr><name>VARSTR_HEADER_SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valueLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valueLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>c</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>execShowLocalVariables</name><parameter_list>(<parameter><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildLocalVariablesResultDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setLocalVariablesResultIntoDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRetrieveTableRsp</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>SHOW_LOCAL_VARIABLES_RESULT_COLS</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>createSelectResultDataBlock</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjects</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier><modifier>*</modifier></type> <name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBlock</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pProj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pProj</argument>, <argument>pProjects</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>SExprNode</name><modifier>*</modifier></type>      <name>pExpr</name> <init>= <expr><operator>(</operator><name>SExprNode</name><operator>*</operator><operator>)</operator><name>pProj</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>infoData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_NULL</name> <operator>==</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>resType</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><operator>*</operator><name>pOutput</name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildSelectResultDataBlock</name><parameter_list>(<parameter><decl><type><name>SNodeList</name><modifier>*</modifier></type> <name>pProjects</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>  <name>pProj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>FOREACH</name><argument_list>(<argument>pProj</argument>, <argument>pProjects</argument>)</argument_list></macro> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VALUE</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pProj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_PAR_INVALID_SELECTED_EXPR</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pProj</name><operator>)</operator><operator>-&gt;</operator><name>isNull</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>nodesGetValueFromNode</name><argument_list>(<argument><expr><operator>(</operator><name>SValueNode</name><operator>*</operator><operator>)</operator><name>pProj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>execSelectWithoutFrom</name><parameter_list>(<parameter><decl><type><name>SSelectStmt</name><modifier>*</modifier></type> <name>pSelect</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>createSelectResultDataBlock</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildSelectResultDataBlock</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRetrieveTableRsp</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pProjectionList</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qExecCommand</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>sysInfoUser</name></decl></parameter>, <parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_NODE_DESCRIBE_STMT</name></expr>:</case>
      <return>return <expr><call><name>execDescribe</name><argument_list>(<argument><expr><name>sysInfoUser</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_RESET_QUERY_CACHE_STMT</name></expr>:</case>
      <return>return <expr><call><name>execResetQueryCache</name><argument_list>()</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_DATABASE_STMT</name></expr>:</case>
      <return>return <expr><call><name>execShowCreateDatabase</name><argument_list>(<argument><expr><operator>(</operator><name>SShowCreateDatabaseStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_TABLE_STMT</name></expr>:</case>
      <return>return <expr><call><name>execShowCreateTable</name><argument_list>(<argument><expr><operator>(</operator><name>SShowCreateTableStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_CREATE_STABLE_STMT</name></expr>:</case>
      <return>return <expr><call><name>execShowCreateSTable</name><argument_list>(<argument><expr><operator>(</operator><name>SShowCreateTableStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_ALTER_LOCAL_STMT</name></expr>:</case>
      <return>return <expr><call><name>execAlterLocal</name><argument_list>(<argument><expr><operator>(</operator><name>SAlterLocalStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SHOW_LOCAL_VARIABLES_STMT</name></expr>:</case>
      <return>return <expr><call><name>execShowLocalVariables</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>QUERY_NODE_SELECT_STMT</name></expr>:</case>
      <return>return <expr><call><name>execSelectWithoutFrom</name><argument_list>(<argument><expr><operator>(</operator><name>SSelectStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>
</unit>
