<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/sdb/src/sdbRow.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb.h"</cpp:file></cpp:include>

<function><type><name>SSdbRow</name> <modifier>*</modifier></type><name>sdbAllocRow</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>objSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objSize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSdbRow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"row:%p, is created, len:%d"</literal></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name>objSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sdbGetRowObj</name><parameter_list>(<parameter><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbFreeRow</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>callFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// remove attached object such as trans</comment>
  <decl_stmt><decl><type><name>SdbDeleteFp</name></type> <name>deleteFp</name> <init>= <expr><name><name>pSdb</name><operator>-&gt;</operator><name>deleteFps</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>deleteFp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call>(<modifier>*</modifier><name>deleteFp</name>)<argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name>callFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sdbPrintOper</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"row:%p, is freed"</literal></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
