<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/sdb/src/sdb.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sdbCreateDir</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>SSdb</name> <modifier>*</modifier></type><name>sdbInit</name><parameter_list>(<parameter><decl><type><name>SSdbOpt</name> <modifier>*</modifier></type><name>pOption</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"start to init sdb in %s"</literal></expr></argument>, <argument><expr><name><name>pOption</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSdb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSdb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to init sdb since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%sdata"</literal></expr></argument>, <argument><expr><name><name>pOption</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>currDir</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%stmp"</literal></expr></argument>, <argument><expr><name><name>pOption</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>tmpDir</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSdb</name><operator>-&gt;</operator><name>currDir</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pSdb</name><operator>-&gt;</operator><name>tmpDir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbCleanup</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to init sdb since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>sdbCreateDir</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbCleanup</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>ESdbType</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SDB_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSdb</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>maxId</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>tableVer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>keyTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>SDB_KEY_INT32</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>pWal</name></name> <operator>=</operator> <name><name>pOption</name><operator>-&gt;</operator><name>pWal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <name><name>pOption</name><operator>-&gt;</operator><name>sync</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyTerm</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyConfig</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>commitIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>commitTerm</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>commitConfig</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>pMnode</name></name> <operator>=</operator> <name><name>pOption</name><operator>-&gt;</operator><name>pMnode</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSdb</name><operator>-&gt;</operator><name>filelock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"sdb init success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pSdb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbCleanup</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"start to cleanup sdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sdbWriteFile</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSdb</name><operator>-&gt;</operator><name>currDir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>currDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSdb</name><operator>-&gt;</operator><name>tmpDir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosRemoveDir</name><argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>tmpDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>tmpDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>ESdbType</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SDB_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name><name>pSdb</name><operator>-&gt;</operator><name>hashObjs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>ppRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><operator>*</operator><name>ppRow</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>sdbFreeRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ppRow</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>ESdbType</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SDB_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name><name>pSdb</name><operator>-&gt;</operator><name>hashObjs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSdb</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>hashObjs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSdb</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"sdb table:%s is cleaned up"</literal></expr></argument>, <argument><expr><call><name>sdbTableName</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSdb</name><operator>-&gt;</operator><name>filelock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"sdb is cleaned up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sdbSetTable</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSdbTable</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ESdbType</name></type> <name>sdbType</name> <init>= <expr><name><name>table</name><operator>.</operator><name>sdbType</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EKeyType</name></type> <name>keyType</name> <init>= <expr><name><name>table</name><operator>.</operator><name>keyType</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>keyTypes</name><index>[<expr><name>sdbType</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>.</operator><name>keyType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>insertFps</name><index>[<expr><name>sdbType</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>.</operator><name>insertFp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>updateFps</name><index>[<expr><name>sdbType</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>.</operator><name>updateFp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>deleteFps</name><index>[<expr><name>sdbType</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>.</operator><name>deleteFp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>deployFps</name><index>[<expr><name>sdbType</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>.</operator><name>deployFp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>encodeFps</name><index>[<expr><name>sdbType</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>.</operator><name>encodeFp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>decodeFps</name><index>[<expr><name>sdbType</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>.</operator><name>decodeFp</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>hashType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>SDB_KEY_INT32</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>hashType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>SDB_KEY_INT64</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>hashType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>hashType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>hashType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>maxId</name><index>[<expr><name>sdbType</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>hashObjs</name><index>[<expr><name>sdbType</name></expr>]</index></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"sdb table:%s is initialized"</literal></expr></argument>, <argument><expr><call><name>sdbTableName</name><argument_list>(<argument><expr><name>sdbType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sdbCreateDir</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosMulMkDir</name><argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>currDir</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to create dir:%s since %s"</literal></expr></argument>, <argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>currDir</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>tmpDir</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to create dir:%s since %s"</literal></expr></argument>, <argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>tmpDir</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbSetApplyInfo</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>term</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"mnode apply info changed from index:%"</literal> <name>PRId64</name> <literal type="string">" term:%"</literal> <name>PRId64</name> <literal type="string">" config:%"</literal> <name>PRId64</name> <literal type="string">" to index:%"</literal> <name>PRId64</name>
         <literal type="string">" term:%"</literal> <name>PRId64</name> <literal type="string">" config:%"</literal> <name>PRId64</name></expr></argument>,
         <argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyIndex</name></name></expr></argument>, <argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyTerm</name></name></expr></argument>, <argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyConfig</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>term</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyIndex</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyTerm</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyConfig</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbGetCommitInfo</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>term</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <name><name>pSdb</name><operator>-&gt;</operator><name>commitIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>term</name> <operator>=</operator> <name><name>pSdb</name><operator>-&gt;</operator><name>commitTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>config</name> <operator>=</operator> <name><name>pSdb</name><operator>-&gt;</operator><name>commitConfig</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"mnode current info, apply index:%"</literal> <name>PRId64</name> <literal type="string">" term:%"</literal> <name>PRId64</name> <literal type="string">" config:%"</literal> <name>PRId64</name> <literal type="string">", commit index:%"</literal> <name>PRId64</name>
         <literal type="string">" term:%"</literal> <name>PRId64</name> <literal type="string">" config:%"</literal> <name>PRId64</name></expr></argument>,
         <argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyIndex</name></name></expr></argument>, <argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyTerm</name></name></expr></argument>, <argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>applyConfig</name></name></expr></argument>, <argument><expr><operator>*</operator><name>index</name></expr></argument>, <argument><expr><operator>*</operator><name>term</name></expr></argument>, <argument><expr><operator>*</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbWriteLock</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>pLock</name> <init>= <expr><operator>&amp;</operator><name><name>pSdb</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// mTrace("sdb table:%d start write lock:%p", type, pLock);</comment>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><name>pLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// mTrace("sdb table:%d stop write lock:%p", type, pLock);</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbReadLock</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>pLock</name> <init>= <expr><operator>&amp;</operator><name><name>pSdb</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// mTrace("sdb table:%d start read lock:%p", type, pLock);</comment>
  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><name>pLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// mTrace("sdb table:%d stop read lock:%p", type, pLock);</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbUnLock</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>pLock</name> <init>= <expr><operator>&amp;</operator><name><name>pSdb</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// mTrace("sdb table:%d unlock:%p", type, pLock);</comment>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><name>pLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
