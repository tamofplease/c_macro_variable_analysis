<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/sdb/src/sdbHash.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdb.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sdbCheckRow</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdbTableName</name><parameter_list>(<parameter><decl><type><name>ESdbType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SDB_TRANS</name></expr>:</case>
      <return>return <expr><literal type="string">"trans"</literal></expr>;</return>
    <case>case <expr><name>SDB_CLUSTER</name></expr>:</case>
      <return>return <expr><literal type="string">"cluster"</literal></expr>;</return>
    <case>case <expr><name>SDB_MNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"mnode"</literal></expr>;</return>
    <case>case <expr><name>SDB_QNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"qnode"</literal></expr>;</return>
    <case>case <expr><name>SDB_SNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"snode"</literal></expr>;</return>
    <case>case <expr><name>SDB_DNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"dnode"</literal></expr>;</return>
    <case>case <expr><name>SDB_USER</name></expr>:</case>
      <return>return <expr><literal type="string">"user"</literal></expr>;</return>
    <case>case <expr><name>SDB_AUTH</name></expr>:</case>
      <return>return <expr><literal type="string">"auth"</literal></expr>;</return>
    <case>case <expr><name>SDB_ACCT</name></expr>:</case>
      <return>return <expr><literal type="string">"acct"</literal></expr>;</return>
    <case>case <expr><name>SDB_STREAM_CK</name></expr>:</case>
      <return>return <expr><literal type="string">"stream_ck"</literal></expr>;</return>
    <case>case <expr><name>SDB_STREAM</name></expr>:</case>
      <return>return <expr><literal type="string">"stream"</literal></expr>;</return>
    <case>case <expr><name>SDB_OFFSET</name></expr>:</case>
      <return>return <expr><literal type="string">"offset"</literal></expr>;</return>
    <case>case <expr><name>SDB_SUBSCRIBE</name></expr>:</case>
      <return>return <expr><literal type="string">"subscribe"</literal></expr>;</return>
    <case>case <expr><name>SDB_CONSUMER</name></expr>:</case>
      <return>return <expr><literal type="string">"consumer"</literal></expr>;</return>
    <case>case <expr><name>SDB_TOPIC</name></expr>:</case>
      <return>return <expr><literal type="string">"topic"</literal></expr>;</return>
    <case>case <expr><name>SDB_VGROUP</name></expr>:</case>
      <return>return <expr><literal type="string">"vgroup"</literal></expr>;</return>
    <case>case <expr><name>SDB_SMA</name></expr>:</case>
      <return>return <expr><literal type="string">"sma"</literal></expr>;</return>
    <case>case <expr><name>SDB_STB</name></expr>:</case>
      <return>return <expr><literal type="string">"stb"</literal></expr>;</return>
    <case>case <expr><name>SDB_DB</name></expr>:</case>
      <return>return <expr><literal type="string">"db"</literal></expr>;</return>
    <case>case <expr><name>SDB_FUNC</name></expr>:</case>
      <return>return <expr><literal type="string">"func"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"undefine"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdbStatusName</name><parameter_list>(<parameter><decl><type><name>ESdbStatus</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SDB_STATUS_CREATING</name></expr>:</case>
      <return>return <expr><literal type="string">"creating"</literal></expr>;</return>
    <case>case <expr><name>SDB_STATUS_DROPPING</name></expr>:</case>
      <return>return <expr><literal type="string">"dropping"</literal></expr>;</return>
    <case>case <expr><name>SDB_STATUS_READY</name></expr>:</case>
      <return>return <expr><literal type="string">"ready"</literal></expr>;</return>
    <case>case <expr><name>SDB_STATUS_DROPPED</name></expr>:</case>
      <return>return <expr><literal type="string">"dropped"</literal></expr>;</return>
    <case>case <expr><name>SDB_STATUS_INIT</name></expr>:</case>
      <return>return <expr><literal type="string">"init"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"undefine"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbPrintOper</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oper</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <decl_stmt><decl><type><name>EKeyType</name></type> <name>keyType</name> <init>= <expr><name><name>pSdb</name><operator>-&gt;</operator><name>keyTypes</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>SDB_KEY_BINARY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"%s:%s, ref:%d oper:%s row:%p status:%s"</literal></expr></argument>, <argument><expr><call><name>sdbTableName</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><name>oper</name></expr></argument>,
           <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><call><name>sdbStatusName</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>SDB_KEY_INT32</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"%s:%d, ref:%d oper:%s row:%p status:%s"</literal></expr></argument>, <argument><expr><call><name>sdbTableName</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>,
           <argument><expr><name>oper</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><call><name>sdbStatusName</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>SDB_KEY_INT64</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"%s:%"</literal> <name>PRId64</name> <literal type="string">", ref:%d oper:%s row:%p status:%s"</literal></expr></argument>, <argument><expr><call><name>sdbTableName</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>,
           <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><name>oper</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><call><name>sdbStatusName</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SHashObj</name> <modifier>*</modifier></type><name>sdbGetHash</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SDB_MAX</name> <operator>||</operator> <name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_TABLE_TYPE</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name><name>pSdb</name><operator>-&gt;</operator><name>hashObjs</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sdbGetkeySize</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>ESdbType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>keySize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EKeyType</name></type> <name>keyType</name> <init>= <expr><name><name>pSdb</name><operator>-&gt;</operator><name>keyTypes</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>SDB_KEY_INT32</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>keySize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>SDB_KEY_BINARY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>keySize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>keySize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>keySize</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sdbInsertRow</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>, <parameter><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keySize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbWriteLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pOldRow</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOldRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_OBJ_ALREADY_THERE</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>refCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>pRaw</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbPrintOper</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="string">"insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRow</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SdbInsertFp</name></type> <name>insertFp</name> <init>= <expr><name><name>pSdb</name><operator>-&gt;</operator><name>insertFps</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>insertFp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call>(<modifier>*</modifier><name>insertFp</name>)<argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbFreeRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSdb</name><operator>-&gt;</operator><name>keyTypes</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>==</operator> <name>SDB_KEY_INT32</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>maxId</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>maxId</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSdb</name><operator>-&gt;</operator><name>keyTypes</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>==</operator> <name>SDB_KEY_INT64</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>maxId</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>maxId</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>tableVer</name><index>[<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sdbUpdateRow</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>, <parameter><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pNewRow</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keySize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pNewRow</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbWriteLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOldRow</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>pNewRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ppOldRow</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ppOldRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>sdbInsertRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pNewRow</name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pOldRow</name> <init>= <expr><operator>*</operator><name>ppOldRow</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOldRow</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>pRaw</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbPrintOper</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pOldRow</name></expr></argument>, <argument><expr><literal type="string">"update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SdbUpdateFp</name></type> <name>updateFp</name> <init>= <expr><name><name>pSdb</name><operator>-&gt;</operator><name>updateFps</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>updateFp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call>(<modifier>*</modifier><name>updateFp</name>)<argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name><name>pOldRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name><name>pNewRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// sdbUnLock(pSdb, type);</comment>
  <expr_stmt><expr><call><name>sdbFreeRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pNewRow</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>tableVer</name><index>[<expr><name><name>pOldRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>sdbDeleteRow</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>, <parameter><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keySize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbWriteLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOldRow</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ppOldRow</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ppOldRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_OBJ_NOT_THERE</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pOldRow</name> <init>= <expr><operator>*</operator><name>ppOldRow</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pOldRow</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>pRaw</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOldRow</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbPrintOper</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pOldRow</name></expr></argument>, <argument><expr><literal type="string">"delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>pOldRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSdb</name><operator>-&gt;</operator><name>tableVer</name><index>[<expr><name><name>pOldRow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sdbFreeRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sdbCheckRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pOldRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sdbWriteWithoutFree</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>sdbGetHash</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name><name>pRaw</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>terrno</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SdbDecodeFp</name></type> <name>decodeFp</name> <init>= <expr><name><name>pSdb</name><operator>-&gt;</operator><name>decodeFps</name><index>[<expr><name><name>pRaw</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name>    <modifier>*</modifier></type><name>pRow</name> <init>= <expr><call>(<modifier>*</modifier><name>decodeFp</name>)<argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>terrno</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pRaw</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>keySize</name> <init>= <expr><call><name>sdbGetkeySize</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SDB_INVALID_ACTION_TYPE</name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>pRaw</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SDB_STATUS_CREATING</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sdbInsertRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SDB_STATUS_READY</name></expr>:</case>
    <case>case <expr><name>SDB_STATUS_DROPPING</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sdbUpdateRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SDB_STATUS_DROPPED</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>sdbDeleteRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sdbWrite</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>sdbWriteWithoutFree</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sdbAcquire</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>ESdbType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>sdbGetHash</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>keySize</name> <init>= <expr><call><name>sdbGetkeySize</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sdbReadLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keySize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ppRow</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ppRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_OBJ_NOT_THERE</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><operator>*</operator><name>ppRow</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SDB_STATUS_READY</name></expr>:</case>
      <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRow</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbPrintOper</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="string">"acquire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SDB_STATUS_CREATING</name></expr>:</case>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_OBJ_CREATING</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SDB_STATUS_DROPPING</name></expr>:</case>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_OBJ_DROPPING</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sdbCheckRow</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbWriteLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRow</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbPrintOper</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pRow</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>SDB_STATUS_DROPPED</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbReleaseLock</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><operator>(</operator><name>SSdbRow</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pObj</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSdbRow</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>SDB_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbWriteLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRow</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbPrintOper</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="string">"release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pRow</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>SDB_STATUS_DROPPED</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRow</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbRelease</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>sdbReleaseLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sdbFetch</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>ESdbType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>ppObj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>sdbGetHash</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>sdbReadLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ppRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><operator>*</operator><name>ppRow</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pRow</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>SDB_STATUS_READY</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ppRow</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRow</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbPrintOper</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="string">"fetch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppObj</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ppRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sdbFetchAll</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>ESdbType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppObj</name></decl></parameter>, <parameter><decl><type><name>ESdbStatus</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>ppObj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>sdbGetHash</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbReadLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ppRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><operator>*</operator><name>ppRow</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ppRow</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRow</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbPrintOper</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="string">"fetch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppObj</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ppRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbCancelFetch</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name>  <modifier>*</modifier></type><name>pRow</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSdbRow</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>sdbGetHash</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbReadLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sdbTraverse</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>ESdbType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sdbTraverseFp</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>sdbGetHash</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>sdbReadLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ppRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><operator>*</operator><name>ppRow</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>SDB_STATUS_READY</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>isContinue</name> <init>= <expr><call>(<modifier>*</modifier><name>fp</name>)<argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>pMnode</name></name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isContinue</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ppRow</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sdbGetSize</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>ESdbType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>sdbGetHash</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>sdbReadLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sdbGetMaxId</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>ESdbType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><call><name>sdbGetHash</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSdb</name><operator>-&gt;</operator><name>keyTypes</name><index>[<expr><name>type</name></expr>]</index></name> <operator>!=</operator> <name>SDB_KEY_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbReadLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ppRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><operator>*</operator><name>ppRow</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>id</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>pObj</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>maxId</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>maxId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ppRow</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>sdbUnLock</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>maxId</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>maxId</name></expr></argument>, <argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>maxId</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>maxId</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>sdbGetTableVer</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>ESdbType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SDB_MAX</name> <operator>||</operator> <name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_TABLE_TYPE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pSdb</name><operator>-&gt;</operator><name>tableVer</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
