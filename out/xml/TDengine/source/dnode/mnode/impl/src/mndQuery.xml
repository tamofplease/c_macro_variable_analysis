<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndQuery.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndQuery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndMnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>mndPreProcessQueryMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TDMT_SCH_QUERY</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>&amp;&amp;</operator> <name>TDMT_SCH_MERGE_QUERY</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>qWorkerPreprocessQueryMsg</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndPostProcessQueryMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TDMT_SCH_QUERY</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>&amp;&amp;</operator> <name>TDMT_SCH_MERGE_QUERY</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qWorkerAbortPreprocessQueryMsg</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndProcessQueryMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMnode</name>     <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SReadHandle</name></type> <name>handle</name> <init>= <expr><block>{<expr><operator>.</operator><name>mnd</name> <operator>=</operator> <name>pMnode</name></expr>, <expr><operator>.</operator><name>pMsgCb</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, in query queue is processing"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_SCH_QUERY</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_QUERY</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_QUERY_CONTINUE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessCQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_FETCH</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_FETCH</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessFetchMsg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_DROP_TASK</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessDropMsg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessHbMsg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"unknown msg type:%d in query queue"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>mnodeFreeSBatchRspMsg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SBatchRspMsg</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><operator>(</operator><name>SBatchRspMsg</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndProcessBatchMetaMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>rspSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchReq</name></type>  <name>batchReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchMsg</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchRspMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchRsp</name></type> <name>batchRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>   <name>reqMsg</name> <init>= <expr><operator>*</operator><name>pMsg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMnode</name>   <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSBatchReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchReq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSBatchReq failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>msgNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>batchReq</name><operator>.</operator><name>pMsgs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgNum</name> <operator>&gt;=</operator> <name>MAX_META_MSG_IN_BATCH</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"too many msgs %d in mnode batch meta req"</literal></expr></argument>, <argument><expr><name>msgNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>msgNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBatchRspMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>msgNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SBatchMsg</name><modifier>*</modifier></type> <name>req</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>batchReq</name><operator>.</operator><name>pMsgs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>msg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MndMsgFp</name></type> <name>fp</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>msgFp</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"msg:%p, failed to get msg handle, app:%p type:%s"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MSG_NOT_PROCESSED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>fp</name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>reqMsg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>rspCode</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>rspCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>msgIdx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>reqType</name></name> <operator>=</operator> <name><name>reqMsg</name><operator>.</operator><name>msgType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <name><name>reqMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>rspLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name><name>reqMsg</name><operator>.</operator><name>info</name><operator>.</operator><name>rsp</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>rspSize</name> <operator>=</operator> <call><name>tSerializeSBatchRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rspSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>rspSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSBatchRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>

  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>rspSize</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"mnd get batch meta failed cause of %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>batchReq</name><operator>.</operator><name>pMsgs</name></name></expr></argument>, <argument><expr><name>tFreeSBatchReqMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr></argument>, <argument><expr><name>mnodeFreeSBatchRspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndInitQuery</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>qWorkerInit</name><argument_list>(<argument><expr><name>NODE_TYPE_MNODE</name></expr></argument>, <argument><expr><name>MNODE_HANDLE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to init qworker in mnode since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY</name></expr></argument>, <argument><expr><name>mndProcessQueryMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_SCH_MERGE_QUERY</name></expr></argument>, <argument><expr><name>mndProcessQueryMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY_CONTINUE</name></expr></argument>, <argument><expr><name>mndProcessQueryMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_SCH_FETCH</name></expr></argument>, <argument><expr><name>mndProcessQueryMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_SCH_MERGE_FETCH</name></expr></argument>, <argument><expr><name>mndProcessQueryMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_SCH_DROP_TASK</name></expr></argument>, <argument><expr><name>mndProcessQueryMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr></argument>, <argument><expr><name>mndProcessQueryMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_BATCH_META</name></expr></argument>, <argument><expr><name>mndProcessBatchMetaMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupQuery</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>qWorkerDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
</unit>
