<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndPerfSchema.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>

<comment type="line">// connection/application/</comment>
<function><type><name>int32_t</name></type> <name>mndInitPerfsTableSchema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSysDbTableSchema</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colNum</name></decl></parameter>, <parameter><decl><type><name>SSchema</name> <modifier>*</modifier><modifier>*</modifier></type><name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>schema</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>colNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>schema</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pSrc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pSrc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pSrc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>pDst</name> <operator>=</operator> <name>schema</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndPerfsInitMeta</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableMetaRsp</name></type> <name>meta</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>tableType</name></name> <operator>=</operator> <name>TSDB_SYSTEM_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>sversion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>tversion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>               <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSysTableMeta</name> <modifier>*</modifier></type><name>pSysDbTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getPerfDbMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pSysDbTableMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pSysDbTableMeta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>meta</name><operator>.</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>pSysDbTableMeta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colNum</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndInitPerfsTableSchema</name><argument_list>(<argument><expr><name><name>pSysDbTableMeta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>schema</name></expr></argument>, <argument><expr><name><name>pSysDbTableMeta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>meta</name><operator>.</operator><name>pSchemas</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>meta</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndBuildPerfsTableSchema</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>(</operator><name>STableMetaRsp</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>meta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"invalid performance schema table name:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_SYS_TABLENAME</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pRsp</name> <operator>=</operator> <operator>*</operator><name>meta</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndBuildPerfsTableCfg</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>STableCfgRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMeta</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"invalid performance schema table name:%s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_SYS_TABLENAME</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndInitPerfs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>mndPerfsInitMeta</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupPerfs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>(</operator><name>STableMetaRsp</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>pSchemas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
