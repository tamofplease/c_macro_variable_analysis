<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndSync.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSyncEqCtrlMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMsgCb</name> <modifier>*</modifier></type><name>msgcb</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>msgcb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>msgcb</name><operator>-&gt;</operator><name>putToQueueFp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><name>msgcb</name></expr></argument>, <argument><expr><name>SYNC_CTRL_QUEUE</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSyncEqMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMsgCb</name> <modifier>*</modifier></type><name>msgcb</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>msgcb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>msgcb</name><operator>-&gt;</operator><name>putToQueueFp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><name>msgcb</name></expr></argument>, <argument><expr><name>SYNC_QUEUE</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSyncSendMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgSendReq</name><argument_list>(<argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndProcessWriteMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFsmCbMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>    <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSyncMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdbRaw</name>   <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>transId</name> <init>= <expr><call><name>sdbGetIdFromRaw</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, is proposed, saved:%d code:0x%x, apply index:%"</literal> <name>PRId64</name> <literal type="string">" term:%"</literal> <name>PRIu64</name> <literal type="string">" config:%"</literal> <name>PRId64</name>
        <literal type="string">" role:%s raw:%p"</literal></expr></argument>,
        <argument><expr><name>transId</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbWriteWithoutFree</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbSetApplyInfo</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>transId</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, invalid commit msg"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>transId</name> <operator>==</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to propose since %s, post sem"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, is proposed and post sem"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndAcquireTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>transId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, execute in mnode which not leader"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndTransExecute</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndReleaseTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// sdbWriteFile(pMnode-&gt;pSdb, SDB_WRITE_DELTA);</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, not found while execute in mnode since %s"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSyncCommitMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFsmCbMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncUtilUserCommit</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_out</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndProcessWriteMsg</name><argument_list>(<argument><expr><name>pFsm</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_out</name>:</label>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSyncGetSnapshot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>SSnapshot</name> <modifier>*</modifier></type><name>pSnapshot</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReaderParam</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"start to read snapshot from sdb in atomic way"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sdbStartRead</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SSdbIter</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ppReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyTerm</name></name></expr></argument>,
                      <argument><expr><operator>&amp;</operator><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSyncGetSnapshotInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>SSnapshot</name> <modifier>*</modifier></type><name>pSnapshot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbGetCommitInfo</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyTerm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndRestoreFinish</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pMnode</name><operator>-&gt;</operator><name>deploy</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pMnode</name><operator>-&gt;</operator><name>restored</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, sync restore finished, and will handle outstanding transactions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndTransPullup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndSetRestored</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, sync restore finished, repeat call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, sync restore finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSnapshotStartRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pParam</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"start to read snapshot from sdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sdbStartRead</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SSdbIter</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ppReader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSnapshotStopRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stop to read snapshot from sdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sdbStopRead</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSnapshotDoRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sdbDoRead</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>ppBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSnapshotStartWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pParam</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"start to apply snapshot to sdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sdbStartWrite</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SSdbIter</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ppWriter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSnapshotStopWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isApply</name></decl></parameter>, <parameter><decl><type><name>SSnapshot</name> <modifier>*</modifier></type><name>pSnapshot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stop to apply snapshot to sdb, apply:%d, index:%"</literal> <name>PRId64</name> <literal type="string">" term:%"</literal> <name>PRIu64</name> <literal type="string">" config:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>isApply</name></expr></argument>,
        <argument><expr><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyTerm</name></name></expr></argument>, <argument><expr><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sdbStopWrite</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>isApply</name></expr></argument>, <argument><expr><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyTerm</name></name></expr></argument>,
                      <argument><expr><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSnapshotDoWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sdbDoWrite</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndBecomeFollower</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, become follower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>transId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, become follower and post sem, trans:%d, failed to propose since not leader"</literal></expr></argument>,
          <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>transId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>transId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndBecomeLeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, become leader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndApplyQueueEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMnode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>qsizeFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>itemSize</name> <init>= <expr><call><name>tmsgGetQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>APPLY_QUEUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>itemSize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndApplyQueueItems</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMnode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>qsizeFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>itemSize</name> <init>= <expr><call><name>tmsgGetQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>APPLY_QUEUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>itemSize</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SSyncFSM</name> <modifier>*</modifier></type><name>mndSyncMakeFsm</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncFSM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pMnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpCommitCb</name></name> <operator>=</operator> <name>mndSyncCommitMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpPreCommitCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpRollBackCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpRestoreFinishCb</name></name> <operator>=</operator> <name>mndRestoreFinish</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpLeaderTransferCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpApplyQueueEmptyCb</name></name> <operator>=</operator> <name>mndApplyQueueEmpty</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpApplyQueueItems</name></name> <operator>=</operator> <name>mndApplyQueueItems</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpReConfigCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpBecomeLeaderCb</name></name> <operator>=</operator> <name>mndBecomeLeader</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpBecomeFollowerCb</name></name> <operator>=</operator> <name>mndBecomeFollower</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshot</name></name> <operator>=</operator> <name>mndSyncGetSnapshot</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>=</operator> <name>mndSyncGetSnapshotInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStartRead</name></name> <operator>=</operator> <name>mndSnapshotStartRead</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopRead</name></name> <operator>=</operator> <name>mndSnapshotStopRead</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotDoRead</name></name> <operator>=</operator> <name>mndSnapshotDoRead</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStartWrite</name></name> <operator>=</operator> <name>mndSnapshotStartWrite</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopWrite</name></name> <operator>=</operator> <name>mndSnapshotStopWrite</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotDoWrite</name></name> <operator>=</operator> <name>mndSnapshotDoWrite</name></expr>;</expr_stmt>
  <return>return <expr><name>pFsm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndInitSync</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosInitRWLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncInfo</name></type> <name>syncInfo</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>snapshotStrategy</name> <operator>=</operator> <name>SYNC_STRATEGY_STANDARD_SNAPSHOT</name></expr>,
      <expr><operator>.</operator><name>batchSize</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>vgId</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>pWal</name> <operator>=</operator> <name><name>pMnode</name><operator>-&gt;</operator><name>pWal</name></name></expr>,
      <expr><operator>.</operator><name>msgcb</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr>,
      <expr><operator>.</operator><name>syncSendMSg</name> <operator>=</operator> <name>mndSyncSendMsg</name></expr>,
      <expr><operator>.</operator><name>syncEqMsg</name> <operator>=</operator> <name>mndSyncEqMsg</name></expr>,
      <expr><operator>.</operator><name>syncEqCtrlMsg</name> <operator>=</operator> <name>mndSyncEqCtrlMsg</name></expr>,
      <expr><operator>.</operator><name>pingMs</name> <operator>=</operator> <literal type="number">5000</literal></expr>,
      <expr><operator>.</operator><name>electMs</name> <operator>=</operator> <literal type="number">3000</literal></expr>,
      <expr><operator>.</operator><name>heartbeatMs</name> <operator>=</operator> <literal type="number">500</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>syncInfo</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>syncInfo</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%ssync"</literal></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>syncInfo</name><operator>.</operator><name>pFsm</name></name> <operator>=</operator> <call><name>mndSyncMakeFsm</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, start to open sync, replica:%d selfIndex:%d"</literal></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>numOfReplicas</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>selfIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSyncCfg</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><operator>&amp;</operator><name><name>syncInfo</name><operator>.</operator><name>syncCfg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>replicaNum</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>numOfReplicas</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>myIndex</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>selfIndex</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>numOfReplicas</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeInfo</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><operator>&amp;</operator><name><name>pCfg</name><operator>-&gt;</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodePort</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, index:%d ep:%s:%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodePort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <call><name>syncOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syncInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>sync</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to open sync since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"mnode-sync is opened, id:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupSync</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncStop</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"mnode-sync is stopped, id:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncMgmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSyncPropose</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>transId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>req</name> <init>= <expr><block>{<expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_MND_APPLY_MSG</name></expr>, <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <macro><name>sdbGetRawTotalSize</name><argument_list>(<argument>pRaw</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>contLen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, can't be proposed since trans:%d already waiting for confirm"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_LAST_TRANS_NOT_FINISHED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, will be proposed"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name> <operator>=</operator> <name>transId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncPropose</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, is proposing and wait sem"</literal></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, confirm at once since replica is 1, continue execute"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbWriteWithoutFree</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbSetApplyInfo</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyTerm</name></name></expr></argument>, <argument><expr><name>SYNC_INDEX_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to proposed since %s"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to propose, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>transId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>pMgmt</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndSyncStart</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>syncStart</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"vgId:1, failed to start sync, id:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, sync started, id:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndSyncStop</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>transId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:1, is stopped and post sem, trans:%d"</literal></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>transId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>transId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mndIsLeader</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSyncState</name></type> <name>state</name> <init>= <expr><call><name>syncGetState</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>syncMgmt</name><operator>.</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:1, mnode is stopping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:1, mnode not leader, state:%s"</literal></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>restored</name></name> <operator>||</operator> <operator>!</operator><name><name>pMnode</name><operator>-&gt;</operator><name>restored</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_RESTORING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:1, mnode not restored:%d:%d"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>restored</name></name></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>restored</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
