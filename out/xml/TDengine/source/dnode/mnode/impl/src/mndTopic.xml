<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndTopic.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTopic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndMnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndStb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSubscribe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndUser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndVgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MND_TOPIC_VER_NUMBER</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MND_TOPIC_RESERVE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTopicActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTopicActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTopicActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pNewTopic</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessCreateTopicReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessDropTopicReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveTopic</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndCancelGetNextTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropTopicCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbTable</name></type> <name>table</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>sdbType</name> <operator>=</operator> <name>SDB_TOPIC</name></expr>,
      <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>SDB_KEY_BINARY</name></expr>,
      <expr><operator>.</operator><name>encodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbEncodeFp</name><operator>)</operator><name>mndTopicActionEncode</name></expr>,
      <expr><operator>.</operator><name>decodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbDecodeFp</name><operator>)</operator><name>mndTopicActionDecode</name></expr>,
      <expr><operator>.</operator><name>insertFp</name> <operator>=</operator> <operator>(</operator><name>SdbInsertFp</name><operator>)</operator><name>mndTopicActionInsert</name></expr>,
      <expr><operator>.</operator><name>updateFp</name> <operator>=</operator> <operator>(</operator><name>SdbUpdateFp</name><operator>)</operator><name>mndTopicActionUpdate</name></expr>,
      <expr><operator>.</operator><name>deleteFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeleteFp</name><operator>)</operator><name>mndTopicActionDelete</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_CREATE_TOPIC</name></expr></argument>, <argument><expr><name>mndProcessCreateTopicReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_DROP_TOPIC</name></expr></argument>, <argument><expr><name>mndProcessDropTopicReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_TMQ_ADD_CHECKINFO_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_TMQ_DEL_CHECKINFO_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_TOPICS</name></expr></argument>, <argument><expr><name>mndRetrieveTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_TOPICS</name></expr></argument>, <argument><expr><name>mndCancelGetNextTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>sdbSetTable</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mndTopicGetShowName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>topic</name><index>[<expr><name>TSDB_TOPIC_FNAME_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>mndTopicActionEncode</name><parameter_list>(<parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>swBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>physicalPlanLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>physicalPlanLen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>schemaLen</name> <operator>=</operator> <call><name>taosEncodeSSchemaWrapper</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ntbColLen</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbColIds</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqTopicObj</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>physicalPlanLen</name> <operator>+</operator> <name><name>pTopic</name><operator>-&gt;</operator><name>sqlLen</name></name> <operator>+</operator> <name><name>pTopic</name><operator>-&gt;</operator><name>astLen</name></name> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>ntbColLen</name> <operator>+</operator>
                 <name>MND_TOPIC_RESERVE_SIZE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>sdbAllocRaw</name><argument_list>(<argument><expr><name>SDB_TOPIC</name></expr></argument>, <argument><expr><name>MND_TOPIC_VER_NUMBER</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>TOPIC_ENCODE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>createUser</name></name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>createTime</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>updateTime</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>dbUid</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT8</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>subType</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT8</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>withMeta</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SDB_SET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>stbUid</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>astLen</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>astLen</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>astLen</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>physicalPlanLen</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>physicalPlanLen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr></argument>, <argument><expr><name>physicalPlanLen</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>schemaLen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>swBuf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>swBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>TOPIC_ENCODE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>aswBuf</name> <init>= <expr><name>swBuf</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosEncodeSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aswBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>swBuf</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbUid</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbUid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbColIds</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SDB_SET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>colId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbColIds</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SDB_SET_INT16</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>colId</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ctbStbUid</name></name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SDB_SET_RESERVE</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>MND_TOPIC_RESERVE_SIZE</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_DATALEN</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>TOPIC_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

<label><name>TOPIC_ENCODE_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>swBuf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>swBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to encode to raw:%p since %s"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"topic:%s, encode to raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRaw</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSdbRow</name> <modifier>*</modifier></type><name>mndTopicActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name>     <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbGetRawSoftVer</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>sver</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>sdbAllocRow</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqTopicObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pTopic</name> <operator>=</operator> <call><name>sdbGetRowObj</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTopic</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>createUser</name></name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>createTime</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>updateTime</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>dbUid</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT8</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>subType</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT8</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>withMeta</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SDB_GET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>stbUid</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>sql</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SDB_GET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>astLen</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>astLen</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ast</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>astLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>ast</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ast</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>astLen</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>physicalPlan</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>physicalPlan</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>physicalPlan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>SDB_GET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosDecodeSSchemaWrapper</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>nCols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>pSchema</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>ntbUid</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbUid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ntbColNum</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SDB_GET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntbColNum</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbColIds</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>ntbColNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbColIds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>TOPIC_DECODE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>colId</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SDB_GET_INT16</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colId</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbColIds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT64</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>ctbStbUid</name></name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SDB_GET_RESERVE</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>MND_TOPIC_RESERVE_SIZE</name></expr></argument>, <argument><expr><name>TOPIC_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

<label><name>TOPIC_DECODE_OVER</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to decode from raw:%p since %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pTopic</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"topic:%s, decode from raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTopicActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"topic:%s, perform insert action"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTopicActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"topic:%s, perform delete action"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbColIds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTopicActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pOldTopic</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pNewTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"topic:%s, perform update action"</literal></expr></argument>, <argument><expr><name><name>pOldTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_exchange_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOldTopic</name><operator>-&gt;</operator><name>updateTime</name></name></expr></argument>, <argument><expr><name><name>pNewTopic</name><operator>-&gt;</operator><name>updateTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOldTopic</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pNewTopic</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*taosWLockLatch(&amp;pOldTopic-&gt;lock);*/</comment>

  <comment type="line">// TODO handle update</comment>

  <comment type="block">/*taosWUnLockLatch(&amp;pOldTopic-&gt;lock);*/</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>mndAcquireTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>topicName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>        <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><call><name>sdbAcquire</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_TOPIC</name></expr></argument>, <argument><expr><name>topicName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTopic</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>==</operator> <name>TSDB_CODE_SDB_OBJ_NOT_THERE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOPIC_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pTopic</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndReleaseTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SDDropTopicReq</name> <modifier>*</modifier></type><name>mndBuildDropTopicMsg</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDDropTopicReq</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDDropTopicReq</name> <modifier>*</modifier></type><name>pDrop</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDrop</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDrop</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDrop</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDrop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDrop</name><operator>-&gt;</operator><name>tuid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pDrop</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckCreateTopicReq</name><parameter_list>(<parameter><decl><type><name>SCMCreateTopicReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_TOPIC</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>sql</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>ast</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>ast</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>subStbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>subDbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>extractTopicTbInfo</name><parameter_list>(<parameter><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pAst</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pNodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nodesCollectColumns</name><argument_list>(<argument><expr><operator>(</operator><name>SSelectStmt</name> <operator>*</operator><operator>)</operator><name>pAst</name></expr></argument>, <argument><expr><name>SQL_CLAUSE_FROM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COLLECT_COL_TYPE_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>suid</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>SSelectStmt</name> <operator>*</operator><operator>)</operator><name>pAst</name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>tableType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SRealTableNode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>SSelectStmt</name> <operator>*</operator><operator>)</operator><name>pAst</name><operator>)</operator><operator>-&gt;</operator><name>pFromTable</name><operator>)</operator><operator>-&gt;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tableType</name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ctbStbUid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tableType</name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pNodeList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>tableType</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbUid</name></name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>tableId</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbColIds</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCreateTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SCMCreateTopicReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"topic:%s to create"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMqTopicObj</name></type> <name>topicObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>createUser</name></name></expr></argument>, <argument><expr><name>userName</name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckTopicPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_CREATE_TOPIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topicObj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>createTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <name><name>topicObj</name><operator>.</operator><name>createTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <call><name>mndGenerateUid</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>dbUid</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>sqlLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>subType</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>subType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>withMeta</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>withMeta</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>topicObj</name><operator>.</operator><name>withMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>subType</name></name> <operator>!=</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>ast</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>astLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>qDebugL</name><argument_list>(<argument><expr><literal type="string">"ast %s"</literal></expr></argument>, <argument><expr><name><name>topicObj</name><operator>.</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pAst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SQueryPlan</name> <modifier>*</modifier></type><name>pPlan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SPlanContext</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>pAstRoot</name> <operator>=</operator> <name>pAst</name></expr>, <expr><operator>.</operator><name>topicQuery</name> <operator>=</operator> <name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>qCreateQueryPlan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPlan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>ntbUid</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>ntbColIds</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>topicObj</name><operator>.</operator><name>ntbColIds</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>extractTopicTbInfo</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topicObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>topicObj</name><operator>.</operator><name>ntbUid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>ntbColIds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>ntbColIds</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>qExtractResultSchema</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>topicObj</name><operator>.</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>topicObj</name><operator>.</operator><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>nodesNodeToString</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>topicObj</name><operator>.</operator><name>physicalPlan</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name> <init>= <expr><call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>subStbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_STB_NOT_EXIST</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>topicObj</name><operator>.</operator><name>stbUid</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*} else if (pCreate-&gt;subType == TOPIC_SUB_TYPE__DB) {*/</comment>
  <comment type="block">/*topicObj.ast = NULL;*/</comment>
  <comment type="block">/*topicObj.astLen = 0;*/</comment>
  <comment type="block">/*topicObj.physicalPlan = NULL;*/</comment>
  <comment type="block">/*topicObj.withTbName = 1;*/</comment>
  <comment type="block">/*topicObj.withSchema = 1;*/</comment>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_ROLLBACK</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"create-topic"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to create topic:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndTopicActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>topicObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to append commit log since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>topicObj</name><operator>.</operator><name>ntbUid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STqCheckInfo</name></type> <name>info</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>topic</name></name></expr></argument>, <argument><expr><name><name>topicObj</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>ntbUid</name></name> <operator>=</operator> <name><name>topicObj</name><operator>.</operator><name>ntbUid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>colIdList</name></name> <operator>=</operator> <name><name>topicObj</name><operator>.</operator><name>ntbColIds</name></name></expr>;</expr_stmt>
    <comment type="line">// broadcast forbid alter info</comment>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// iterate vg</comment>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>topicObj</name><operator>.</operator><name>dbUid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// encoder check alter info</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSTqCheckInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>abuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tEncodeSTqCheckInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// add redo action</comment>
      <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_TMQ_ADD_CHECKINFO</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>ntbColIds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>topicObj</name><operator>.</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>topicObj</name><operator>.</operator><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessCreateTopicReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>           <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqTopicObj</name>      <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name>           <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCMCreateTopicReq</name></type> <name>createTopicReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSCMCreateTopicReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createTopicReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"topic:%s, start to create, sql:%s"</literal></expr></argument>, <argument><expr><name><name>createTopicReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>createTopicReq</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckCreateTopicReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTopicReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>createTopicReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pTopic</name> <operator>=</operator> <call><name>mndAcquireTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>createTopicReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTopic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>createTopicReq</name><operator>.</operator><name>igExists</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"topic:%s, already exist, ignore exist is set"</literal></expr></argument>, <argument><expr><name><name>createTopicReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOPIC_ALREADY_EXIST</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_MND_TOPIC_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>createTopicReq</name><operator>.</operator><name>subDbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_NOT_SELECTED</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndCreateTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createTopicReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>createTopicReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSCMCreateTopicReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTopicReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDropTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndTopicActionEncode</name><argument_list>(<argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to append commit log since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessDropTopicReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>        <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>          <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMDropTopicReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMDropTopicReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><call><name>mndAcquireTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTopic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>dropReq</name><operator>.</operator><name>igNotExists</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"topic:%s, not exist, ignore not exist is set"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOPIC_NOT_EXIST</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckTopicPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_DROP_TOPIC</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_CONSUMER</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST_REBD</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOPIC_SUBSCRIBED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to drop since subscribed by consumer:%"</literal> <name>PRId64</name> <literal type="string">", in consumer group %s"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>,
               <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOPIC_SUBSCRIBED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to drop since subscribed by consumer:%"</literal> <name>PRId64</name> <literal type="string">", in consumer group %s (reb new)"</literal></expr></argument>,
               <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOPIC_SUBSCRIBED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to drop since subscribed by consumer:%"</literal> <name>PRId64</name> <literal type="string">", in consumer group %s (reb remove)"</literal></expr></argument>,
               <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (pTopic-&gt;refConsumerCnt != 0) {
    mndReleaseTopic(pMnode, pTopic);
    terrno = TSDB_CODE_MND_TOPIC_SUBSCRIBED;
    mError("topic:%s, failed to drop since %s", dropReq.name, terrstr());
    return -1;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_ROLLBACK</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_DB_INSIDE</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"drop-topic"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mndTransSetDbName</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to drop topic:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TODO check if rebalancing</comment>
  <if_stmt><if>if <condition>(<expr><call><name>mndDropSubByTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/*ASSERT(0);*/</comment>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>ntbUid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// broadcast to all vnode</comment>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>dbUid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>abuf</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>TSDB_TOPIC_FNAME_LEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_TMQ_DEL_CHECKINFO</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndDropTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndGetNumOfTopics</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pNumOfTopics</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_NOT_SELECTED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTopics</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_TOPIC</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>==</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfTopics</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>pNumOfTopics</name> <operator>=</operator> <name>numOfTopics</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveTopic</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowsCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>      <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>        <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rowsCapacity</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_TOPIC</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SName</name></type>            <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>topicName</name><index>[<expr><name>TSDB_TOPIC_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>topicName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mndGetDbStr</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>topicName</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*tNameFromString(&amp;n, pTopic-&gt;name, T_NAME_ACCT | T_NAME_DB);*/</comment>
    <comment type="block">/*tNameGetDbName(&amp;n, varDataVal(topicName));*/</comment>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>topicName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>topicName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>topicName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>dbName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>dbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>createTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><name>TSDB_SHOW_SQL_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sql</name><index>[<expr><name>VARSTR_HEADER_SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><name>TSDB_SHOW_SQL_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sql</name><index>[<expr><name>VARSTR_HEADER_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>sql</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSetTopicCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndTopicActionEncode</name><argument_list>(<argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropTopicCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndTopicActionEncode</name><argument_list>(<argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndCheckTopicExist</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_TOPIC</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>==</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOPIC_MUST_BE_DELETED</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndDropTopicByDB</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_TOPIC</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>!=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndSetDropTopicCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
