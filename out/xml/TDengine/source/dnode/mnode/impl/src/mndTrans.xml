<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndTrans.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndStb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndUser.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_VER_NUMBER</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_ARRAY_SIZE</name></cpp:macro>   <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANS_RESERVE_SIZE</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>SSdbRaw</name> <modifier>*</modifier></type><name>mndTransActionEncode</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndTransActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndTransActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndTransActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>OldTrans</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndTransActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>callFunc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransAppendLog</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransAppendAction</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndTransDropLogs</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndTransDropActions</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndTransDropData</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteRedoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteUndoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteRedoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteUndoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteCommitActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>mndTransPerformPrepareStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>mndTransPerformRedoLogStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>mndTransPerformRedoActionStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>mndTransPerformUndoLogStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>mndTransPerformUndoActionStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>mndTransPerformCommitActionStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>mndTransPerformCommitStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>mndTransPerformRollbackStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>mndTransPerfromFinishedStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>bool</name></type>    <name>mndCannotExecuteTransAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><name><name>pMnode</name><operator>-&gt;</operator><name>deploy</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mndIsLeader</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndTransSendRpcRsp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessTransTimer</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessTtl</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessKillTransReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveTrans</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndCancelGetNextTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbTable</name></type> <name>table</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>sdbType</name> <operator>=</operator> <name>SDB_TRANS</name></expr>,
      <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>SDB_KEY_INT32</name></expr>,
      <expr><operator>.</operator><name>encodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbEncodeFp</name><operator>)</operator><name>mndTransActionEncode</name></expr>,
      <expr><operator>.</operator><name>decodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbDecodeFp</name><operator>)</operator><name>mndTransActionDecode</name></expr>,
      <expr><operator>.</operator><name>insertFp</name> <operator>=</operator> <operator>(</operator><name>SdbInsertFp</name><operator>)</operator><name>mndTransActionInsert</name></expr>,
      <expr><operator>.</operator><name>updateFp</name> <operator>=</operator> <operator>(</operator><name>SdbUpdateFp</name><operator>)</operator><name>mndTransActionUpdate</name></expr>,
      <expr><operator>.</operator><name>deleteFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeleteFp</name><operator>)</operator><name>mndTransActionDelete</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TRANS_TIMER</name></expr></argument>, <argument><expr><name>mndProcessTransTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_KILL_TRANS</name></expr></argument>, <argument><expr><name>mndProcessKillTransReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_TRANS</name></expr></argument>, <argument><expr><name>mndRetrieveTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_TRANS</name></expr></argument>, <argument><expr><name>mndCancelGetNextTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sdbSetTable</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransGetActionsSize</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>actionNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rawDataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>actionNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_RAW</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rawDataLen</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>STransAction</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>sdbGetRawTotalSize</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_MSG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rawDataLen</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>STransAction</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pAction</name><operator>-&gt;</operator><name>contLen</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// empty</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>rawDataLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rawDataLen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRaw</name> <modifier>*</modifier></type><name>mndTransActionEncode</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rawDataLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STrans</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>TRANS_RESERVE_SIZE</name> <operator>+</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>paramLen</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rawDataLen</name> <operator>+=</operator> <call><name>mndTransGetActionsSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rawDataLen</name> <operator>+=</operator> <call><name>mndTransGetActionsSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rawDataLen</name> <operator>+=</operator> <call><name>mndTransGetActionsSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>sdbAllocRaw</name><argument_list>(<argument><expr><name>SDB_TRANS</name></expr></argument>, <argument><expr><name>TRANS_VER_NUMBER</name></expr></argument>, <argument><expr><name>rawDataLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to alloc raw since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;id</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;stage</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;policy</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;conflict</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;exec</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;oper</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument><literal type="number">0</literal></argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;originRpcType</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;dbname</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;stbname</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;redoActionPos</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>redoActionNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>undoActionNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>commitActionNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>redoActionNum</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>undoActionNum</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>commitActionNum</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>unused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>redoActionNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;id</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;errCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;acceptableCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;retryCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;actionType</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;stage</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;reserved</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_RAW</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>sdbGetRawTotalSize</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>unused</argument> <comment type="block">/*pAction-&gt;rawWritten*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>len</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>(void *)pAction-&gt;pRaw</argument>, <argument>len</argument>, <argument>_OVER</argument>)</argument_list></macro>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_MSG</name></expr>)</condition> <block>{<block_content>
      <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>(void *)&amp;pAction-&gt;epSet</argument>, <argument>sizeof(SEpSet)</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;msgType</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>unused</argument> <comment type="block">/*pAction-&gt;msgSent*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>unused</argument> <comment type="block">/*pAction-&gt;msgReceived*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;contLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;pCont</argument>, <argument>pAction-&gt;contLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// nothing</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>undoActionNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;id</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;errCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;acceptableCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;retryCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;actionType</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;stage</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;reserved</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_RAW</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>sdbGetRawTotalSize</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>unused</argument> <comment type="block">/*pAction-&gt;rawWritten*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>len</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>(void *)pAction-&gt;pRaw</argument>, <argument>len</argument>, <argument>_OVER</argument>)</argument_list></macro>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_MSG</name></expr>)</condition> <block>{<block_content>
      <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>(void *)&amp;pAction-&gt;epSet</argument>, <argument>sizeof(SEpSet)</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;msgType</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>unused</argument> <comment type="block">/*pAction-&gt;msgSent*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>unused</argument> <comment type="block">/*pAction-&gt;msgReceived*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;contLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;pCont</argument>, <argument>pAction-&gt;contLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// nothing</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>commitActionNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;id</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;errCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;acceptableCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;retryCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;actionType</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;stage</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;reserved</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_RAW</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>sdbGetRawTotalSize</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>unused</argument> <comment type="block">/*pAction-&gt;rawWritten*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>len</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>(void *)pAction-&gt;pRaw</argument>, <argument>len</argument>, <argument>_OVER</argument>)</argument_list></macro>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_MSG</name></expr>)</condition> <block>{<block_content>
      <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>(void *)&amp;pAction-&gt;epSet</argument>, <argument>sizeof(SEpSet)</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;msgType</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>unused</argument> <comment type="block">/*pAction-&gt;msgSent*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>unused</argument> <comment type="block">/*pAction-&gt;msgReceived*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;contLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAction-&gt;pCont</argument>, <argument>pAction-&gt;contLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// nothing</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;startFunc</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;stopFunc</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;paramLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>param</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;param</argument>, <argument>pTrans-&gt;paramLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;opername</argument>, <argument>TSDB_TRANS_OPER_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>TRANS_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_DATALEN</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to encode to raw:%p maxlen:%d len:%d since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>sdbGetRawTotalSize</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"trans:%d, encode to raw:%p, row:%p len:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRaw</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndTransActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRow</name>     <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name>      <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>       <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>redoActionNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>undoActionNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>commitActionNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>sdbGetRawSoftVer</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>!=</operator> <name>TRANS_VER_NUMBER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>sdbAllocRow</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STrans</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pTrans</name> <operator>=</operator> <call><name>sdbGetRowObj</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pTrans-&gt;id</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>stage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>policy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>conflict</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>exec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>oper</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>reserved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>actionType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;stage</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;policy</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;conflict</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;exec</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;oper</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;reserved</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>policy</name></name> <operator>=</operator> <name>policy</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>=</operator> <name>conflict</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>exec</name></name> <operator>=</operator> <name>exec</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>oper</name></name> <operator>=</operator> <name>oper</name></expr>;</expr_stmt>
  <macro><name>SDB_GET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pTrans-&gt;originRpcType</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pTrans-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;dbname</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pTrans-&gt;stbname</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pTrans-&gt;redoActionPos</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;redoActionNum</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;undoActionNum</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;commitActionNum</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>redoActionNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransAction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>undoActionNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransAction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>commitActionNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransAction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>unused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>redoActionNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.id</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.errCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.acceptableCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.retryCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;actionType</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>actionType</name></name> <operator>=</operator> <name>actionType</name></expr>;</expr_stmt>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;stage</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>stage</name></name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.reserved</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_RAW</name></expr>)</condition> <block>{<block_content>
      <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;unused</argument> <comment type="block">/*&amp;action.rawWritten*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;dataLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pRaw</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>pRaw</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"raw:%p, is created"</literal></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>pRaw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>action</name><operator>.</operator><name>pRaw</name></name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pRaw</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>action</name><operator>.</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_MSG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <macro><name>SDB_GET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.msgType</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;unused</argument> <comment type="block">/*&amp;action.msgSent*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;unused</argument> <comment type="block">/*&amp;action.msgReceived*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.contLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>undoActionNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.id</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.errCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.acceptableCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.retryCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;actionType</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>actionType</name></name> <operator>=</operator> <name>actionType</name></expr>;</expr_stmt>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;stage</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>stage</name></name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.reserved</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_RAW</name></expr>)</condition> <block>{<block_content>
      <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;unused</argument> <comment type="block">/*&amp;action.rawWritten*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;dataLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pRaw</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>pRaw</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"raw:%p, is created"</literal></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>pRaw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>action</name><operator>.</operator><name>pRaw</name></name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pRaw</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>action</name><operator>.</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_MSG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <macro><name>SDB_GET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.msgType</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;unused</argument> <comment type="block">/*&amp;action.msgSent*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;unused</argument> <comment type="block">/*&amp;action.msgReceived*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.contLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>commitActionNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.id</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.errCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.acceptableCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.retryCode</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;actionType</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>actionType</name></name> <operator>=</operator> <name>actionType</name></expr>;</expr_stmt>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;stage</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>stage</name></name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.reserved</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>actionType</name></name></expr>)</condition> <block>{<block_content>
      <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;unused</argument> <comment type="block">/*&amp;action.rawWritten*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;dataLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pRaw</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>pRaw</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"raw:%p, is created"</literal></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>pRaw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>action</name><operator>.</operator><name>pRaw</name></name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pRaw</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>action</name><operator>.</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_MSG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <macro><name>SDB_GET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.msgType</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;unused</argument> <comment type="block">/*&amp;action.msgSent*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;unused</argument> <comment type="block">/*&amp;action.msgReceived*/</comment>, <argument>_OVER</argument>)</argument_list></macro>
      <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;action.contLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>action</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pTrans-&gt;startFunc</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pTrans-&gt;stopFunc</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pTrans-&gt;paramLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>paramLen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>paramLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>paramLen</name></name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>opername</name></name></expr></argument>, <argument><expr><name>TSDB_TRANS_OPER_LEN</name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>SDB_GET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>TRANS_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pTrans</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to parse from raw:%p since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDropData</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>action</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"trans:%d, decode from raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mndTransStr</name><parameter_list>(<parameter><decl><type><name>ETrnStage</name></type> <name>stage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>stage</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TRN_STAGE_PREPARE</name></expr>:</case>
      <return>return <expr><literal type="string">"prepare"</literal></expr>;</return>
    <case>case <expr><name>TRN_STAGE_REDO_ACTION</name></expr>:</case>
      <return>return <expr><literal type="string">"redoAction"</literal></expr>;</return>
    <case>case <expr><name>TRN_STAGE_ROLLBACK</name></expr>:</case>
      <return>return <expr><literal type="string">"rollback"</literal></expr>;</return>
    <case>case <expr><name>TRN_STAGE_UNDO_ACTION</name></expr>:</case>
      <return>return <expr><literal type="string">"undoAction"</literal></expr>;</return>
    <case>case <expr><name>TRN_STAGE_COMMIT</name></expr>:</case>
      <return>return <expr><literal type="string">"commit"</literal></expr>;</return>
    <case>case <expr><name>TRN_STAGE_COMMIT_ACTION</name></expr>:</case>
      <return>return <expr><literal type="string">"commitAction"</literal></expr>;</return>
    <case>case <expr><name>TRN_STAGE_FINISHED</name></expr>:</case>
      <return>return <expr><literal type="string">"finished"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"invalid"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndSetTransLastAction</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pAction</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastAction</name></name> <operator>=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastMsgType</name></name> <operator>=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastEpset</name></name> <operator>=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastErrorNo</name></name> <operator>=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastAction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastMsgType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTrans</name><operator>-&gt;</operator><name>lastEpset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastEpset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastErrorNo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndTransTestStartFunc</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>paramLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"test trans start, param:%s, len:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>param</name></expr></argument>, <argument><expr><name>paramLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndTransTestStopFunc</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>paramLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"test trans stop, param:%s, len:%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>param</name></expr></argument>, <argument><expr><name>paramLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TransCbFp</name></type> <name>mndTransGetCbFp</name><parameter_list>(<parameter><decl><type><name>ETrnFunc</name></type> <name>ftype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TRANS_START_FUNC_TEST</name></expr>:</case>
      <return>return <expr><name>mndTransTestStartFunc</name></expr>;</return>
    <case>case <expr><name>TRANS_STOP_FUNC_TEST</name></expr>:</case>
      <return>return <expr><name>mndTransTestStopFunc</name></expr>;</return>
    <case>case <expr><name>TRANS_START_FUNC_MQ_REB</name></expr>:</case>
      <return>return <expr><name>mndRebCntInc</name></expr>;</return>
    <case>case <expr><name>TRANS_STOP_FUNC_MQ_REB</name></expr>:</case>
      <return>return <expr><name>mndRebCntDec</name></expr>;</return>
    <default>default:</default>
      <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"trans:%d, perform insert action, row:%p stage:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>startFunc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TransCbFp</name></type> <name>fp</name> <init>= <expr><call><name>mndTransGetCbFp</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>startFunc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call>(<modifier>*</modifier><name>fp</name>)<argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>pMnode</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>paramLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>startFunc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndTransDropData</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndTransDropActions</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndTransDropActions</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndTransDropActions</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRsp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRsp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRspLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>param</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>paramLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>callFunc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"trans:%d, perform delete action, row:%p stage:%s callfunc:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>callFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>stopFunc</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>callFunc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TransCbFp</name></type> <name>fp</name> <init>= <expr><call><name>mndTransGetCbFp</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stopFunc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call>(<modifier>*</modifier><name>fp</name>)<argument_list>(<argument><expr><name><name>pSdb</name><operator>-&gt;</operator><name>pMnode</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>paramLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stopFunc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndTransDropData</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndTransUpdateActions</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pOldArray</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pNewArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pOldArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pOldAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pOldArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pNewAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pNewArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pOldAction</name><operator>-&gt;</operator><name>rawWritten</name></name> <operator>=</operator> <name><name>pNewAction</name><operator>-&gt;</operator><name>rawWritten</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOldAction</name><operator>-&gt;</operator><name>msgSent</name></name> <operator>=</operator> <name><name>pNewAction</name><operator>-&gt;</operator><name>msgSent</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOldAction</name><operator>-&gt;</operator><name>msgReceived</name></name> <operator>=</operator> <name><name>pNewAction</name><operator>-&gt;</operator><name>msgReceived</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOldAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name><name>pNewAction</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"trans:%d, perform update action, old row:%p stage:%s, new row:%p stage:%s"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>,
         <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pNew</name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransUpdateActions</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransUpdateActions</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransUpdateActions</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>stage</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>redoActionPos</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>redoActionPos</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_COMMIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_COMMIT_ACTION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage from commit to commitAction since perform update action"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_ROLLBACK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_REDO_ACTION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage from rollback to undoAction since perform update action"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STrans</name> <modifier>*</modifier></type><name>mndAcquireTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>transId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>sdbAcquire</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_TRANS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TRANS_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pTrans</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndReleaseTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STrans</name> <modifier>*</modifier></type><name>mndTransCreate</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>ETrnPolicy</name></type> <name>policy</name></decl></parameter>, <parameter><decl><type><name>ETrnConflct</name></type> <name>conflict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opername</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STrans</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to create transaction since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>opername</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>opername</name></name></expr></argument>, <argument><expr><name>opername</name></expr></argument>, <argument><expr><name>TSDB_TRANS_OPER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>sdbGetMaxId</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_TRANS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_PREPARE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>policy</name></name> <operator>=</operator> <name>policy</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>=</operator> <name>conflict</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>exec</name></name> <operator>=</operator> <name>TRN_EXEC_PRARLLEL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TRANS_ARRAY_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransAction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TRANS_ARRAY_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransAction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TRANS_ARRAY_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STransAction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcHandleInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
      <name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to create transaction since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>originRpcType</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"trans:%d, local object is created, data:%p"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pTrans</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndTransDropActions</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_RAW</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_MSG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// nothing</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndTransDrop</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndTransDropData</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"trans:%d, local object is freed, data:%p"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransAppendAction</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndTransAppendRedolog</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>stage</name> <operator>=</operator> <name>TRN_STAGE_REDO_ACTION</name></expr>, <expr><operator>.</operator><name>actionType</name> <operator>=</operator> <name>TRANS_ACTION_RAW</name></expr>, <expr><operator>.</operator><name>pRaw</name> <operator>=</operator> <name>pRaw</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>mndTransAppendAction</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndTransAppendNullLog</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>stage</name> <operator>=</operator> <name>TRN_STAGE_REDO_ACTION</name></expr>, <expr><operator>.</operator><name>actionType</name> <operator>=</operator> <name>TRANS_ACTION_NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>mndTransAppendAction</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndTransAppendUndolog</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>stage</name> <operator>=</operator> <name>TRN_STAGE_UNDO_ACTION</name></expr>, <expr><operator>.</operator><name>actionType</name> <operator>=</operator> <name>TRANS_ACTION_RAW</name></expr>, <expr><operator>.</operator><name>pRaw</name> <operator>=</operator> <name>pRaw</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>mndTransAppendAction</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndTransAppendCommitlog</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><operator>.</operator><name>stage</name> <operator>=</operator> <name>TRN_STAGE_COMMIT_ACTION</name></expr>, <expr><operator>.</operator><name>actionType</name> <operator>=</operator> <name>TRANS_ACTION_RAW</name></expr>, <expr><operator>.</operator><name>pRaw</name> <operator>=</operator> <name>pRaw</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>mndTransAppendAction</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndTransAppendRedoAction</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_REDO_ACTION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>=</operator> <name>TRANS_ACTION_MSG</name></expr>;</expr_stmt>
  <return>return <expr><call><name>mndTransAppendAction</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndTransAppendUndoAction</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_UNDO_ACTION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>=</operator> <name>TRANS_ACTION_MSG</name></expr>;</expr_stmt>
  <return>return <expr><call><name>mndTransAppendAction</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndTransSetRpcRsp</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCont</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>contLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRsp</name></name> <operator>=</operator> <name>pCont</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRspLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndTransSetCb</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>ETrnFunc</name></type> <name>startFunc</name></decl></parameter>, <parameter><decl><type><name>ETrnFunc</name></type> <name>stopFunc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>paramLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>startFunc</name></name> <operator>=</operator> <name>startFunc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stopFunc</name></name> <operator>=</operator> <name>stopFunc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>paramLen</name></name> <operator>=</operator> <name>paramLen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSetRpcInfoForDbTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>EOperType</name></type> <name>oper</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_TRANS</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>oper</name></name> <operator>==</operator> <name>oper</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, db:%s oper:%d matched with input"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcHandleInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndTransSetDbName</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>dbname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>stbname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>, <argument><expr><name>stbname</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndTransSetSerial</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>exec</name></name> <operator>=</operator> <name>TRN_EXEC_SERIAL</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>mndTransSetOper</name><parameter_list>(<parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>EOperType</name></type> <name>oper</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>oper</name></name> <operator>=</operator> <name>oper</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransSync</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndTransActionEncode</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to encode while sync trans since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, sync to other mnodes, stage:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndSyncPropose</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to sync, errno:%s code:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, sync finished"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndCheckDbConflict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conflict</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>conflict</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>conflict</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>conflict</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndCheckTransConflict</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>conflict</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_NOTHING</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>conflict</name></expr>;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_TRANS</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_DB</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_DB</name> <operator>||</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_DB_INSIDE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbConflict</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbConflict</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_DB_INSIDE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_DB</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbConflict</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbConflict</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_DB_INSIDE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbConflict</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conflict</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="line">// for stb</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>conflict</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, db:%s stb:%s type:%d, can't execute since conflict with trans:%d db:%s stb:%s type:%d"</literal></expr></argument>,
             <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>conflict</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>,
             <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, db:%s stb:%s type:%d, not conflict with trans:%d db:%s stb:%s type:%d"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>,
            <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>conflict</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>conflict</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndTransPrepare</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_DB</name> <operator>||</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>conflict</name></name> <operator>==</operator> <name>TRN_CONFLICT_DB_INSIDE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TRANS_CONFLICT</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare conflict db not set"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckTransConflict</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TRANS_CONFLICT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TRANS_CLOG_IS_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, prepare transaction"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransSync</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, prepare finished"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><call><name>mndAcquireTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to read from sdb since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRpcArray</name></name> <operator>=</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>rpcRsp</name></name> <operator>=</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>rpcRsp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>rpcRspLen</name></name> <operator>=</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>rpcRspLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRsp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRspLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndTransExecute</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransCommit</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, commit transaction"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransSync</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to commit since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, commit finished"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransRollback</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, rollback transaction"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransSync</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to rollback since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, rollback finished"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndTransSendRpcRsp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>sendRsp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_FINISHED</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sendRsp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>policy</name></name> <operator>==</operator> <name>TRN_POLICY_ROLLBACK</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_UNDO_ACTION</name> <operator>||</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_ROLLBACK</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_MND_TRANS_UNKNOW_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>sendRsp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_REDO_ACTION</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_RESTORING</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_APP_IS_STARTING</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sendRsp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sendRsp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_MND_TRANS_UNKNOW_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sendRsp</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, send rsp, stage:%s failedTimes:%d code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_RPC_NETWORK_UNAVAIL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_MND_TRANS_NETWORK_UNAVAILL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_MNODE_NOT_FOUND</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, client:%d send rsp, code:0x%x stage:%s app:%p"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rspMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>, <expr><operator>.</operator><name>info</name> <operator>=</operator> <operator>*</operator><name>pInfo</name></expr>}</block></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>originRpcType</name></name> <operator>==</operator> <name>TDMT_MND_CREATE_DB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, origin msgtype:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>originRpcType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>bool</name></type> <name>ready</name> <init>= <expr><call><name>mndIsDbReady</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ready</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, db:%s not ready yet, wait %d times"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <break>break;</break>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>originRpcType</name></name> <operator>==</operator> <name>TDMT_MND_CREATE_STB</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pCont</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>mndBuildSMCreateStbRsp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>mndTransSetRpcRsp</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRspLen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rpcCont</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRspLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>rpcCont</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rpcCont</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRsp</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>rpcRspLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>rspMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>rpcCont</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>rspMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>rpcRspLen</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>pRpcArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndTransProcessRsp</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pRsp</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>signature</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>pRsp</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>transId</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>signature</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>action</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>signature</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndAcquireTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>transId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to get transId from vnode rsp since %s"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_REDO_ACTION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pArray</name> <operator>=</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_UNDO_ACTION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pArray</name> <operator>=</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, invalid trans stage:%d while recv action rsp"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, invalid trans stage:%d"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>actionNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>action</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>action</name> <operator>&gt;=</operator> <name>actionNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, invalid action:%d"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pAction</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgReceived</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d response is received, code:0x%x, accept:0x%x retry:0x%x"</literal></expr></argument>, <argument><expr><name>transId</name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>acceptableCode</name></name></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>retryCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransExecute</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndReleaseTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndTransResetAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>rawWritten</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgSent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgReceived</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>==</operator> <name>TSDB_CODE_SYN_NEW_CONFIG_ERROR</name> <operator>||</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>==</operator> <name>TSDB_CODE_SYN_INTERNAL_ERROR</name> <operator>||</operator>
      <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>==</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name> <operator>=</operator> <operator>(</operator><name><name>pAction</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pAction</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d execute status is reset and set epset inuse:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d execute status is reset"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndTransResetActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfActions</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>action</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>action</name> <operator>&lt;</operator> <name>numOfActions</name></expr>;</condition> <incr><expr><operator>++</operator><name>action</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>msgSent</name></name> <operator>&amp;&amp;</operator> <name><name>pAction</name><operator>-&gt;</operator><name>msgReceived</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>==</operator> <name><name>pAction</name><operator>-&gt;</operator><name>acceptableCode</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>rawWritten</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>==</operator> <name><name>pAction</name><operator>-&gt;</operator><name>acceptableCode</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mndTransResetAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransWriteSingleLog</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>rawWritten</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>sdbWriteWithoutFree</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>terrno</name> <operator>==</operator> <name>TSDB_CODE_SDB_OBJ_NOT_THERE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>rawWritten</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d write to sdb, type:%s status:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
          <argument><expr><call><name>sdbTableName</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sdbStatusName</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mndSetTransLastAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>terrno</name></expr> </then><else>: <expr><name>code</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d failed to write sdb since %s, type:%s status:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>sdbTableName</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sdbStatusName</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pRaw</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndSetTransLastAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransSendSingleMsg</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>msgSent</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCannotExecuteTransAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>signature</name> <init>= <expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>signature</name> <operator>=</operator> <operator>(</operator><name>signature</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>signature</name> <operator>+=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>msgType</name></name></expr>, <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>contLen</name></name></expr>, <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>signature</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>detail</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"msgType:%s numOfEps:%d inUse:%d"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pAction</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>detail</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" ep:%d-%s:%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>,
                    <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgSendReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAction</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgSent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgReceived</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d is sent, %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mndSetTransLastAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgSent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgReceived</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>terrno</name></expr> </then><else>: <expr><name>code</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d not send since %s, %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
           <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mndSetTransLastAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecNullMsg</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>rawWritten</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d confirm action executed"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndSetTransLastAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecSingleAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_RAW</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>mndTransWriteSingleLog</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>actionType</name></name> <operator>==</operator> <name>TRANS_ACTION_MSG</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>mndTransSendSingleMsg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>mndTransExecNullMsg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecSingleActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfActions</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>action</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>action</name> <operator>&lt;</operator> <name>numOfActions</name></expr>;</condition> <incr><expr><operator>++</operator><name>action</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndTransExecSingleAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfActions</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfActions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransExecSingleActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>       <name>numOfExecuted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>errCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pErrAction</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>action</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>action</name> <operator>&lt;</operator> <name>numOfActions</name></expr>;</condition> <incr><expr><operator>++</operator><name>action</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>msgReceived</name></name> <operator>||</operator> <name><name>pAction</name><operator>-&gt;</operator><name>rawWritten</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfExecuted</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>!=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>acceptableCode</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errCode</name> <operator>=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pErrAction</name> <operator>=</operator> <name>pAction</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pErrAction</name> <operator>=</operator> <name>pAction</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>mndSetTransLastAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pErrAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfExecuted</name> <operator>==</operator> <name>numOfActions</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errCode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, all %d actions execute successfully"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>numOfActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, all %d actions executed, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>numOfActions</name></expr></argument>, <argument><expr><name>errCode</name> <operator>&amp;</operator> <literal type="number">0XFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndTransResetActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>errCode</name></expr>;</expr_stmt>
      <return>return <expr><name>errCode</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %d of %d actions executed"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>numOfExecuted</name></expr></argument>, <argument><expr><name>numOfActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteRedoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndTransExecuteActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to execute redoActions since:%s, code:0x%x"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteUndoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndTransExecuteActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to execute undoActions since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteCommitActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndTransExecuteActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>commitActions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to execute commitActions since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndTransExecuteRedoActionsSerial</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfActions</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfActions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActionPos</name></name> <operator>&gt;=</operator> <name>numOfActions</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, execute %d actions serial"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>numOfActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>action</name> <init>= <expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActionPos</name></name></expr></init></decl>;</init> <condition><expr><name>action</name> <operator>&lt;</operator> <name>numOfActions</name></expr>;</condition> <incr><expr><operator>++</operator><name>action</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActionPos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndTransExecSingleAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>msgSent</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>msgReceived</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>!=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>acceptableCode</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mndTransResetAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d execute successfully"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>rawWritten</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>!=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>acceptableCode</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d write successfully"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>mndSetTransLastAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndCannotExecuteTransAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActionPos</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d is executed and need sync to other mnodes"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndTransSync</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActionPos</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d is executed and failed to sync to other mnodes since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
               <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d is in progress and wait it finish"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name><name>pAction</name><operator>-&gt;</operator><name>retryCode</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d receive code:0x%x and retry"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>action</name><operator>--</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d receive code:0x%x and wait another schedule, failedTimes:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
            <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndTransPerformPrepareStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>continueExec</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_REDO_ACTION</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage from prepare to redoAction"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>continueExec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndTransPerformRedoActionStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>continueExec</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>exec</name></name> <operator>==</operator> <name>TRN_EXEC_SERIAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndTransExecuteRedoActionsSerial</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndTransExecuteRedoActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCannotExecuteTransAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_COMMIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage from redoAction to commit"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage keep on redoAction since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>policy</name></name> <operator>==</operator> <name>TRN_POLICY_ROLLBACK</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastAction</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastAction</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pAction</name><operator>-&gt;</operator><name>retryCode</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pAction</name><operator>-&gt;</operator><name>retryCode</name></name> <operator>==</operator> <name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage keep on redoAction since action:%d code:0x%x not 0x%x, failedTimes:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
                   <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastAction</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>retryCode</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <return>return <expr><name>true</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_ROLLBACK</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage from redoAction to rollback since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage keep on redoAction since %s, failedTimes:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>continueExec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndTransPerformCommitStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mndCannotExecuteTransAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>continueExec</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndTransCommit</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_COMMIT_ACTION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage from commit to commitAction"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage keep on commit since %s, failedTimes:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>continueExec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndTransPerformCommitActionStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>continueExec</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndTransExecuteCommitActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_FINISHED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage from commitAction to finished"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage keep on commitAction since %s, failedTimes:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>continueExec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndTransPerformUndoActionStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>continueExec</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndTransExecuteUndoActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_FINISHED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage from undoAction to finished"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage keep on undoAction since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage keep on undoAction since %s, failedTimes:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>continueExec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndTransPerformRollbackStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mndCannotExecuteTransAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>continueExec</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndTransRollback</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>TRN_STAGE_UNDO_ACTION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage from rollback to undoAction"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, stage keep on rollback since %s, failedTimes:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>continueExec</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndTransPerfromFinishedStage</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>continueExec</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndTransActionEncode</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to encode while finish trans since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>sdbWrite</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to write sdb since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, execute finished, code:0x%x, failedTimes:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>continueExec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndTransExecute</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>continueExec</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>continueExec</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, continue to execute, stage:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastExecTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TRN_STAGE_PREPARE</name></expr>:</case>
        <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <call><name>mndTransPerformPrepareStage</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TRN_STAGE_REDO_ACTION</name></expr>:</case>
        <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <call><name>mndTransPerformRedoActionStage</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TRN_STAGE_COMMIT</name></expr>:</case>
        <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <call><name>mndTransPerformCommitStage</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TRN_STAGE_COMMIT_ACTION</name></expr>:</case>
        <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <call><name>mndTransPerformCommitActionStage</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TRN_STAGE_ROLLBACK</name></expr>:</case>
        <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <call><name>mndTransPerformRollbackStage</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TRN_STAGE_UNDO_ACTION</name></expr>:</case>
        <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <call><name>mndTransPerformUndoActionStage</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TRN_STAGE_FINISHED</name></expr>:</case>
        <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <call><name>mndTransPerfromFinishedStage</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>continueExec</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>mndTransSendRpcRsp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessTransTimer</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"start to process trans timer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransPullup</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndKillTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_REDO_ACTION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pArray</name> <operator>=</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>redoActions</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name> <operator>==</operator> <name>TRN_STAGE_UNDO_ACTION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pArray</name> <operator>=</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>undoActions</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TRANS_INVALID_STAGE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STransAction</name> <modifier>*</modifier></type><name>pAction</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %s:%d set processed for kill msg received, errCode from %s to success"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
          <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgSent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>msgReceived</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pAction</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>mndTransExecute</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessKillTransReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>       <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SKillTransReq</name></type> <name>killReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name>       <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSKillTransReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>killReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, start to kill"</literal></expr></argument>, <argument><expr><name><name>killReq</name><operator>.</operator><name>transId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_KILL_TRANS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pTrans</name> <operator>=</operator> <call><name>mndAcquireTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>killReq</name><operator>.</operator><name>transId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndKillTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to kill since %s"</literal></expr></argument>, <argument><expr><name><name>killReq</name><operator>.</operator><name>transId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCompareTransId</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pTransId1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pTransId2</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>*</operator><name>pTransId1</name> <operator>&gt;=</operator> <operator>*</operator><name>pTransId2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>mndTransPullup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>sdbGetSize</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_TRANS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_TRANS</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><name>__compar_fn_t</name><operator>)</operator><name>mndCompareTransId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pTransId</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STrans</name>  <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndAcquireTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><operator>*</operator><name>pTransId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mndTransExecute</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>mndReleaseTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>sdbWriteFile</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_WRITE_DELTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveTrans</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pWrite</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_TRANS</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTrans</name><operator>-&gt;</operator><name>createdTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>stage</name><index>[<expr><name>TSDB_TRANS_STAGE_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>stage</name></expr></argument>, <argument><expr><call><name>mndTransStr</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>stage</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>opername</name><index>[<expr><name>TSDB_TRANS_OPER_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>opername</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>opername</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>dbname</name><index>[<expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><call><name>mndGetDbStr</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>dbname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>stbname</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>stbname</name></expr></argument>, <argument><expr><call><name>mndGetDbStr</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>stbname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>stbname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTrans</name><operator>-&gt;</operator><name>failedTimes</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTrans</name><operator>-&gt;</operator><name>lastExecTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type>    <name><name>lastInfo</name><index>[<expr><name>TSDB_TRANS_ERROR_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>detail</name><index>[<expr><name>TSDB_TRANS_ERROR_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"action:%d code:0x%x(%s) "</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastAction</name></name></expr></argument>,
                           <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastErrorNo</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastErrorNo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SEpSet</name></type>  <name>epset</name> <init>= <expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastEpset</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>epset</name><operator>.</operator><name>numOfEps</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>detail</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"msgType:%s numOfEps:%d inUse:%d "</literal></expr></argument>,
                      <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>lastMsgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>epset</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>epset</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTrans</name><operator>-&gt;</operator><name>lastEpset</name><operator>.</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>detail</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"ep:%d-%s:%u "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>epset</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>epset</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>lastInfo</name></expr></argument>, <argument><expr><name>detail</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>lastInfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
