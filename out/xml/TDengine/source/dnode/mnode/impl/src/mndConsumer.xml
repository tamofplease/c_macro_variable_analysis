<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndConsumer.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndMnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndStb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSubscribe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTopic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndUser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndVgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MND_CONSUMER_VER_NUMBER</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MND_CONSUMER_RESERVE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MND_CONSUMER_LOST_HB_CNT</name></cpp:macro>          <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MND_CONSUMER_LOST_CLEAR_THRESHOLD</name></cpp:macro> <cpp:value>43200</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int8_t</name></type> <name>mqRebInExecCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mndConsumerStatusName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndConsumerActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndConsumerActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndConsumerActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pNewConsumer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConsumerMetaMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveConsumer</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndCancelGetNextConsumer</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessSubscribeReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessAskEpReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessMqHbReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessMqTimerMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConsumerLostMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConsumerClearMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConsumerRecoverMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitConsumer</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbTable</name></type> <name>table</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>sdbType</name> <operator>=</operator> <name>SDB_CONSUMER</name></expr>,
      <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>SDB_KEY_INT64</name></expr>,
      <expr><operator>.</operator><name>encodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbEncodeFp</name><operator>)</operator><name>mndConsumerActionEncode</name></expr>,
      <expr><operator>.</operator><name>decodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbDecodeFp</name><operator>)</operator><name>mndConsumerActionDecode</name></expr>,
      <expr><operator>.</operator><name>insertFp</name> <operator>=</operator> <operator>(</operator><name>SdbInsertFp</name><operator>)</operator><name>mndConsumerActionInsert</name></expr>,
      <expr><operator>.</operator><name>updateFp</name> <operator>=</operator> <operator>(</operator><name>SdbUpdateFp</name><operator>)</operator><name>mndConsumerActionUpdate</name></expr>,
      <expr><operator>.</operator><name>deleteFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeleteFp</name><operator>)</operator><name>mndConsumerActionDelete</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_SUBSCRIBE</name></expr></argument>, <argument><expr><name>mndProcessSubscribeReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_HB</name></expr></argument>, <argument><expr><name>mndProcessMqHbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_ASK_EP</name></expr></argument>, <argument><expr><name>mndProcessAskEpReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_TIMER</name></expr></argument>, <argument><expr><name>mndProcessMqTimerMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_CONSUMER_LOST</name></expr></argument>, <argument><expr><name>mndProcessConsumerLostMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_CONSUMER_RECOVER</name></expr></argument>, <argument><expr><name>mndProcessConsumerRecoverMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TMQ_LOST_CONSUMER_CLEAR</name></expr></argument>, <argument><expr><name>mndProcessConsumerClearMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_CONSUMERS</name></expr></argument>, <argument><expr><name>mndRetrieveConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_CONSUMERS</name></expr></argument>, <argument><expr><name>mndCancelGetNextConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>sdbSetTable</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupConsumer</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>bool</name></type> <name>mndRebTryStart</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mqRebInExecCnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>old</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndRebEnd</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_sub_fetch_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mqRebInExecCnt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>mndRebCntInc</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_add_fetch_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mqRebInExecCnt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>mndRebCntDec</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_sub_fetch_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mqRebInExecCnt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConsumerLostMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>             <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerLostMsg</name> <modifier>*</modifier></type><name>pLostMsg</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name>     <modifier>*</modifier></type><name>pConsumer</name> <init>= <expr><call><name>mndAcquireConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pLostMsg</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"receive consumer lost msg, consumer id %"</literal> <name>PRId64</name> <literal type="string">", status %s"</literal></expr></argument>, <argument><expr><name><name>pLostMsg</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>,
        <argument><expr><call><name>mndConsumerStatusName</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>MQ_CONSUMER_STATUS__READY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumerNew</name> <init>= <expr><call><name>tNewSMqConsumerObj</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>updateType</name></name> <operator>=</operator> <name>CONSUMER_UPDATE__LOST</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_ROLLBACK</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"lost-csm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetConsumerCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tDeleteSMqConsumerObj</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>FAIL</name>:</label>
  <expr_stmt><expr><call><name>tDeleteSMqConsumerObj</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConsumerRecoverMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>                <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerRecoverMsg</name> <modifier>*</modifier></type><name>pRecoverMsg</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name>        <modifier>*</modifier></type><name>pConsumer</name> <init>= <expr><call><name>mndAcquireConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pRecoverMsg</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"receive consumer recover msg, consumer id %"</literal> <name>PRId64</name> <literal type="string">", status %s"</literal></expr></argument>, <argument><expr><name><name>pRecoverMsg</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>,
        <argument><expr><call><name>mndConsumerStatusName</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>MQ_CONSUMER_STATUS__LOST_REBD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_CONSUMER_NOT_READY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumerNew</name> <init>= <expr><call><name>tNewSMqConsumerObj</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>updateType</name></name> <operator>=</operator> <name>CONSUMER_UPDATE__RECOVER</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"recover-csm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetConsumerCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tDeleteSMqConsumerObj</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>FAIL</name>:</label>
  <expr_stmt><expr><call><name>tDeleteSMqConsumerObj</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConsumerClearMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>              <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerClearMsg</name> <modifier>*</modifier></type><name>pClearMsg</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name>      <modifier>*</modifier></type><name>pConsumer</name> <init>= <expr><call><name>mndAcquireConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pClearMsg</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"receive consumer clear msg, consumer id %"</literal> <name>PRId64</name> <literal type="string">", status %s"</literal></expr></argument>, <argument><expr><name><name>pClearMsg</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>,
        <argument><expr><call><name>mndConsumerStatusName</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>MQ_CONSUMER_STATUS__LOST_REBD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumerNew</name> <init>= <expr><call><name>tNewSMqConsumerObj</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>updateType</name></name> <operator>=</operator> <name>CONSUMER_UPDATE__LOST</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_ROLLBACK</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"clear-csm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetConsumerDropLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tDeleteSMqConsumerObj</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>FAIL</name>:</label>
  <expr_stmt><expr><call><name>tDeleteSMqConsumerObj</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SMqRebInfo</name> <modifier>*</modifier></type><name>mndGetOrCreateRebSub</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqRebInfo</name> <modifier>*</modifier></type><name>pRebInfo</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRebInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pRebInfo</name> <operator>=</operator> <call><name>tNewSMqRebSubscribe</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRebInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pRebInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRebInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRebInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pRebInfo</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pRebInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessMqTimerMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>         <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>           <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"start to process mq timer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// rebalance cannot be parallel</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndRebTryStart</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"mq rebalance already in progress, do nothing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMqDoRebalanceMsg</name> <modifier>*</modifier></type><name>pRebMsg</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqDoRebalanceMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRebMsg</name><operator>-&gt;</operator><name>rebSubHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>MurmurHash3_32</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO set cleanfp</comment>

  <comment type="line">// iterate all consumers, find all modification</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_CONSUMER</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>hbStatus</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>hbStatus</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>status</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__READY</name> <operator>&amp;&amp;</operator> <name>hbStatus</name> <operator>&gt;</operator> <name>MND_CONSUMER_LOST_HB_CNT</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqConsumerLostMsg</name> <modifier>*</modifier></type><name>pLostMsg</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerLostMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pLostMsg</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>=</operator> <name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_MND_TMQ_CONSUMER_LOST</name></expr>,
          <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pLostMsg</name></expr>,
          <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerLostMsg</name></expr></argument>)</argument_list></sizeof></expr>,
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__READY</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// do nothing</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST_REBD</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>hbStatus</name> <operator>&gt;</operator> <name>MND_CONSUMER_LOST_CLEAR_THRESHOLD</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SMqConsumerClearMsg</name> <modifier>*</modifier></type><name>pClearMsg</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerClearMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>pClearMsg</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>=</operator> <name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
            <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_MND_TMQ_LOST_CONSUMER_CLEAR</name></expr>,
            <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pClearMsg</name></expr>,
            <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerClearMsg</name></expr></argument>)</argument_list></sizeof></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>topicNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>topicNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>TSDB_SUBSCRIBE_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>removedTopic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mndMakeSubscribeKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name>removedTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SMqRebInfo</name> <modifier>*</modifier></type><name>pRebSub</name> <init>= <expr><call><name>mndGetOrCreateRebSub</name><argument_list>(<argument><expr><name><name>pRebMsg</name><operator>-&gt;</operator><name>rebSubHash</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRebSub</name><operator>-&gt;</operator><name>removedConsumers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__MODIFY</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>newTopicNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newTopicNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>TSDB_SUBSCRIBE_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newTopic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mndMakeSubscribeKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name>newTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SMqRebInfo</name> <modifier>*</modifier></type><name>pRebSub</name> <init>= <expr><call><name>mndGetOrCreateRebSub</name><argument_list>(<argument><expr><name><name>pRebMsg</name><operator>-&gt;</operator><name>rebSubHash</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRebSub</name><operator>-&gt;</operator><name>newConsumers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>removedTopicNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>removedTopicNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>TSDB_SUBSCRIBE_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>removedTopic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mndMakeSubscribeKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name>removedTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SMqRebInfo</name> <modifier>*</modifier></type><name>pRebSub</name> <init>= <expr><call><name>mndGetOrCreateRebSub</name><argument_list>(<argument><expr><name><name>pRebMsg</name><operator>-&gt;</operator><name>rebSubHash</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRebSub</name><operator>-&gt;</operator><name>removedConsumers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// do nothing</comment>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pRebMsg</name><operator>-&gt;</operator><name>rebSubHash</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"mq rebalance will be triggered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_MND_TMQ_DO_REBALANCE</name></expr>,
        <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pRebMsg</name></expr>,
        <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMqDoRebalanceMsg</name></expr></argument>)</argument_list></sizeof></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pRebMsg</name><operator>-&gt;</operator><name>rebSubHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name>pRebMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"mq rebalance finished, no modification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndRebEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessMqHbReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>  <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqHbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMqHbReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>         <name>consumerId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>consumerId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name> <init>= <expr><call><name>mndAcquireConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"consumer %"</literal> <name>PRId64</name> <literal type="string">" not exist"</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_CONSUMER_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>hbStatus</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>status</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST_REBD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"try to recover consumer %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SMqConsumerRecoverMsg</name> <modifier>*</modifier></type><name>pRecoverMsg</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerRecoverMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pRecoverMsg</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>=</operator> <name>consumerId</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>pRpcMsg</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_MND_TMQ_CONSUMER_RECOVER</name></expr>,
        <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pRecoverMsg</name></expr>,
        <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerRecoverMsg</name></expr></argument>)</argument_list></sizeof></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessAskEpReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>     <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqAskEpReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqAskEpRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMqAskEpReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>consumerId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>consumerId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>epoch</name> <init>= <expr><name><name>req</name><operator>.</operator><name>epoch</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name> <init>= <expr><call><name>mndAcquireConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_CONSUMER_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>hbStatus</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 1. check consumer status</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>status</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST_REBD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"try to recover consumer %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SMqConsumerRecoverMsg</name> <modifier>*</modifier></type><name>pRecoverMsg</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerRecoverMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pRecoverMsg</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>=</operator> <name>consumerId</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>pRpcMsg</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_MND_TMQ_CONSUMER_RECOVER</name></expr>,
        <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pRecoverMsg</name></expr>,
        <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerRecoverMsg</name></expr></argument>)</argument_list></sizeof></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>MQ_CONSUMER_STATUS__READY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"consumer %"</literal> <name>PRId64</name> <literal type="string">" not ready, status: %s"</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><call><name>mndConsumerStatusName</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_CONSUMER_NOT_READY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>serverEpoch</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// 2. check epoch, only send ep info when epoches do not match</comment>
  <if_stmt><if>if <condition>(<expr><name>epoch</name> <operator>!=</operator> <name>serverEpoch</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"process ask ep, consumer:%"</literal> <name>PRId64</name> <literal type="string">"(epoch %d), server epoch %d"</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><name>epoch</name></expr></argument>, <argument><expr><name>serverEpoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTopics</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>topics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfTopics</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqSubTopicEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>topics</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>FAIL</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// handle all topic subscribed by the consumer</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTopics</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SMqSubscribeObj</name> <modifier>*</modifier></type><name>pSub</name> <init>= <expr><call><name>mndAcquireSubscribe</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// txn guarantees pSub is created</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SMqSubTopicEp</name></type> <name>topicEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>topicEp</name><operator>.</operator><name>topic</name></name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// 2.1 fetch topic schema</comment>
      <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><call><name>mndAcquireTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>topicEp</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>topicEp</name><operator>.</operator><name>schema</name><operator>.</operator><name>nCols</name></name> <operator>=</operator> <name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>topicEp</name><operator>.</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>topicEp</name><operator>.</operator><name>schema</name><operator>.</operator><name>pSchema</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>topicEp</name><operator>.</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>topicEp</name><operator>.</operator><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name><name>topicEp</name><operator>.</operator><name>schema</name><operator>.</operator><name>nCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTopic</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// 2.2 iterate all vg assigned to the consumer of that topic</comment>
      <decl_stmt><decl><type><name>SMqConsumerEp</name> <modifier>*</modifier></type><name>pConsumerEp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>consumerId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>        <name>vgNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumerEp</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>topicEp</name><operator>.</operator><name>vgs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>vgNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqSubVgEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>topicEp</name><operator>.</operator><name>vgs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mndReleaseSubscribe</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>FAIL</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vgNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SMqVgEp</name> <modifier>*</modifier></type><name>pVgEp</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumerEp</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>     <name><name>offsetKey</name><index>[<expr><name>TSDB_PARTITION_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mndMakePartitionKey</name><argument_list>(<argument><expr><name>offsetKey</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name>topic</name></expr></argument>, <argument><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// 2.2.1 build vg ep</comment>
        <decl_stmt><decl><type><name>SMqSubVgEp</name></type> <name>vgEp</name> <init>= <expr><block>{
            <expr><operator>.</operator><name>epSet</name> <operator>=</operator> <name><name>pVgEp</name><operator>-&gt;</operator><name>epSet</name></name></expr>,
            <expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name></expr>,
            <expr><operator>.</operator><name>offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>topicEp</name><operator>.</operator><name>vgs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>topics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topicEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndReleaseSubscribe</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// encode rsp</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>tEncodeSMqAskEpRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>mqMsgType</name> <operator>=</operator> <name>TMQ_MSG_TYPE__EP_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>epoch</name> <operator>=</operator> <name>serverEpoch</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>consumerId</name> <operator>=</operator> <name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSMqAskEpRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>abuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// release consumer and free memory</comment>
  <expr_stmt><expr><call><name>tDeleteSMqAskEpRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// send rsp</comment>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>FAIL</name>:</label>
  <expr_stmt><expr><call><name>tDeleteSMqAskEpRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSetConsumerDropLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndConsumerActionEncode</name><argument_list>(<argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSetConsumerCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndConsumerActionEncode</name><argument_list>(<argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessSubscribeReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>         <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>msgStr</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCMSubscribeReq</name></type> <name>subscribe</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDeserializeSCMSubscribeReq</name><argument_list>(<argument><expr><name>msgStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subscribe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>consumerId</name> <init>= <expr><name><name>subscribe</name><operator>.</operator><name>consumerId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>cgroup</name> <init>= <expr><name><name>subscribe</name><operator>.</operator><name>cgroup</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumerOld</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumerNew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>newSub</name> <init>= <expr><name><name>subscribe</name><operator>.</operator><name>topicNames</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>newSub</name></expr></argument>, <argument><expr><name>taosArrayCompareString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayRemoveDuplicateP</name><argument_list>(<argument><expr><name>newSub</name></expr></argument>, <argument><expr><name>taosArrayCompareString</name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>newTopicNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>newSub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// check topic existance</comment>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="string">"subscribe"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>SUBSCRIBE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newTopicNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>newSub</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><call><name>mndAcquireTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTopic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOPIC_NOT_EXIST</name></expr>;</expr_stmt>
      <goto>goto <name>SUBSCRIBE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndCheckTopicPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_SUBSCRIBE</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>SUBSCRIBE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>pConsumerOld</name> <operator>=</operator> <call><name>mndAcquireConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumerOld</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"receive subscribe request from new consumer:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pConsumerNew</name> <operator>=</operator> <call><name>tNewSMqConsumerObj</name><argument_list>(<argument><expr><name>consumerId</name></expr></argument>, <argument><expr><name>cgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>clientId</name></name></expr></argument>, <argument><expr><name><name>subscribe</name><operator>.</operator><name>clientId</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>updateType</name></name> <operator>=</operator> <name>CONSUMER_UPDATE__MODIFY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>rebNewTopics</name></name> <operator>=</operator> <name>newSub</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subscribe</name><operator>.</operator><name>topicNames</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newTopicNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newTopicCopy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>newSub</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newTopicCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name>mndSetConsumerCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>SUBSCRIBE_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>SUBSCRIBE_OVER</name>;</goto></block_content></block></if></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/*taosRLockLatch(&amp;pConsumerOld-&gt;lock);*/</comment>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>status</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumerOld</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"receive subscribe request from existing consumer:%"</literal> <name>PRId64</name> <literal type="string">", current status: %s, subscribe topic num: %d"</literal></expr></argument>,
          <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><call><name>mndConsumerStatusName</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newTopicNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>MQ_CONSUMER_STATUS__READY</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_CONSUMER_NOT_READY</name></expr>;</expr_stmt>
      <goto>goto <name>SUBSCRIBE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pConsumerNew</name> <operator>=</operator> <call><name>tNewSMqConsumerObj</name><argument_list>(<argument><expr><name>consumerId</name></expr></argument>, <argument><expr><name>cgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pConsumerNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>SUBSCRIBE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>updateType</name></name> <operator>=</operator> <name>CONSUMER_UPDATE__MODIFY</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newTopicNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newTopicCopy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>newSub</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newTopicCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>oldTopicNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pConsumerOld</name><operator>-&gt;</operator><name>currentTopics</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>oldTopicNum</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumerOld</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>oldTopicNum</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name>newTopicNum</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>oldTopicNum</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newTopicCopy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>newSub</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newTopicCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>newTopicNum</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldTopicCopy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumerOld</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldTopicCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldTopic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumerOld</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newTopic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>newSub</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>   <name>comp</name> <init>= <expr><call><name>compareLenPrefixedStr</name><argument_list>(<argument><expr><name>oldTopic</name></expr></argument>, <argument><expr><name>newTopic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>comp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oldTopicCopy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>oldTopic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldTopicCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newTopicCopy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>newTopic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newTopicCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>pConsumerOld</name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumerNew</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/*if (taosArrayGetSize(pConsumerNew-&gt;assignedTopics) == 0) {*/</comment>
      <comment type="block">/*pConsumerNew-&gt;updateType = */</comment>
      <comment type="block">/*}*/</comment>
      <goto>goto <name>SUBSCRIBE_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndSetConsumerCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>SUBSCRIBE_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>SUBSCRIBE_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt>

<label><name>SUBSCRIBE_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pConsumerOld</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/*taosRUnLockLatch(&amp;pConsumerOld-&gt;lock);*/</comment>
    <expr_stmt><expr><call><name>mndReleaseConsumer</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pConsumerOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumerNew</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDeleteSMqConsumerObj</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pConsumerNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// TODO: replace with destroy subscribe msg</comment>
  <if_stmt><if>if <condition>(<expr><name><name>subscribe</name><operator>.</operator><name>topicNames</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>subscribe</name><operator>.</operator><name>topicNames</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>mndConsumerActionEncode</name><parameter_list>(<parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><call><name>tEncodeSMqConsumerObj</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>tlen</name> <operator>+</operator> <name>MND_CONSUMER_RESERVE_SIZE</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>sdbAllocRaw</name><argument_list>(<argument><expr><name>SDB_CONSUMER</name></expr></argument>, <argument><expr><name>MND_CONSUMER_VER_NUMBER</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>CM_ENCODE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>CM_ENCODE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>abuf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSMqConsumerObj</name><argument_list>(<argument><expr><operator>&amp;</operator><name>abuf</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SDB_SET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>CM_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>CM_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_RESERVE</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>MND_CONSUMER_RESERVE_SIZE</name></expr></argument>, <argument><expr><name>CM_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_SET_DATALEN</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>CM_ENCODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

<label><name>CM_ENCODE_OVER</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", failed to encode to raw:%p since %s"</literal></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", encode to raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRaw</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSdbRow</name> <modifier>*</modifier></type><name>mndConsumerActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name>        <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbGetRawSoftVer</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>CM_DECODE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>!=</operator> <name>MND_CONSUMER_VER_NUMBER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>CM_DECODE_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>sdbAllocRow</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>CM_DECODE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pConsumer</name> <operator>=</operator> <call><name>sdbGetRowObj</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>CM_DECODE_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SDB_GET_INT32</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>CM_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>CM_DECODE_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SDB_GET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>CM_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SDB_GET_RESERVE</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>MND_CONSUMER_RESERVE_SIZE</name></expr></argument>, <argument><expr><name>CM_DECODE_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSMqConsumerObj</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>CM_DECODE_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

<label><name>CM_DECODE_OVER</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", failed to decode from raw:%p since %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pConsumer</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></else></ternary></expr></argument>,
           <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndConsumerActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", perform insert action"</literal></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>subscribeTime</name></name> <operator>=</operator> <name><name>pConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndConsumerActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", perform delete action"</literal></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDeleteSMqConsumerObj</name><argument_list>(<argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndConsumerActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pOldConsumer</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pNewConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", perform update action"</literal></expr></argument>, <argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOldConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>updateType</name></name> <operator>==</operator> <name>CONSUMER_UPDATE__MODIFY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__READY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name> <operator>=</operator> <name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name> <operator>=</operator> <name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>pOldConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name> <operator>=</operator> <name><name>pNewConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>subscribeTime</name></name> <operator>=</operator> <name><name>pNewConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__MODIFY</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>updateType</name></name> <operator>==</operator> <name>CONSUMER_UPDATE__LOST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/*pOldConsumer-&gt;rebRemovedTopics = taosArrayInit(sz, sizeof(void *));*/</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebalanceTime</name></name> <operator>=</operator> <name><name>pNewConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__LOST</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>updateType</name></name> <operator>==</operator> <name>CONSUMER_UPDATE__RECOVER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebalanceTime</name></name> <operator>=</operator> <name><name>pNewConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__MODIFY</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>updateType</name></name> <operator>==</operator> <name>CONSUMER_UPDATE__TOUCH</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOldConsumer</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebalanceTime</name></name> <operator>=</operator> <name><name>pNewConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr>;</expr_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>updateType</name></name> <operator>==</operator> <name>CONSUMER_UPDATE__ADD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addedTopic</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// not exist in current topic</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><name>addedTopic</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// remove from new topic</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>addedTopic</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// add to current topic</comment>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addedTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>taosArrayCompareString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set status</comment>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__MODIFY</name> <operator>||</operator>
          <name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__MODIFY_IN_REB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__READY</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST_IN_REB</name> <operator>||</operator>
                 <name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__LOST_REBD</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__MODIFY</name> <operator>||</operator>
          <name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__MODIFY_IN_REB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__MODIFY_IN_REB</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST</name> <operator>||</operator>
                 <name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST_IN_REB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__LOST_IN_REB</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebalanceTime</name></name> <operator>=</operator> <name><name>pNewConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOldConsumer</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>updateType</name></name> <operator>==</operator> <name>CONSUMER_UPDATE__REMOVE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>removedTopic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pNewConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// not exist in new topic</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><name>removedTopic</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// remove from removed topic</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>removedTopic</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// remove from current topic</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>removedTopic</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// must find the topic</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set status</comment>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__MODIFY</name> <operator>||</operator>
          <name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__MODIFY_IN_REB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__READY</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST_IN_REB</name> <operator>||</operator>
                 <name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__LOST_REBD</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__MODIFY</name> <operator>||</operator>
          <name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__MODIFY_IN_REB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__MODIFY_IN_REB</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST</name> <operator>||</operator>
                 <name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>MQ_CONSUMER_STATUS__LOST_IN_REB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__LOST_IN_REB</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pOldConsumer</name><operator>-&gt;</operator><name>rebalanceTime</name></name> <operator>=</operator> <name><name>pNewConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOldConsumer</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOldConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>mndAcquireConsumer</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>consumerId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>           <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name> <init>= <expr><call><name>sdbAcquire</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_CONSUMER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>consumerId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_CONSUMER_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pConsumer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndReleaseConsumer</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveConsumer</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowsCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>         <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>           <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rowsCapacity</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_CONSUMER</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"showing consumer %"</literal> <name>PRId64</name> <literal type="string">" no assigned topic, skip"</literal></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"showing consumer %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>topicSz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>hasTopic</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>topicSz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>hasTopic</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>topicSz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>+</operator> <name>topicSz</name> <operator>&gt;</operator> <name>rowsCapacity</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>numOfRows</name> <operator>+</operator> <name>topicSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>topicSz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>          <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <comment type="line">// consumer id</comment>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// consumer group</comment>
      <decl_stmt><decl><type><name>char</name></type> <name><name>cgroup</name><index>[<expr><name>TSDB_CGROUP_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>cgroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name>TSDB_CGROUP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>cgroup</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>cgroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>cgroup</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// client id</comment>
      <decl_stmt><decl><type><name>char</name></type> <name><name>clientId</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>clientId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>clientId</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>clientId</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>clientId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>clientId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// status</comment>
      <decl_stmt><decl><type><name>char</name></type> <name><name>status</name><index>[<expr><literal type="number">20</literal> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mndConsumerStatusName</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>status</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// one subscribed topic</comment>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>hasTopic</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type>        <name><name>topic</name><index>[<expr><name>TSDB_TOPIC_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>topicName</name> <init>= <expr><call><name>mndTopicGetShowName</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>topicName</name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>topic</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// end point</comment>
      <comment type="block">/*pColInfo = taosArrayGet(pBlock-&gt;pDataBlock, cols++);*/</comment>
      <comment type="block">/*colDataAppend(pColInfo, numOfRows, (const char *)&amp;pConsumer-&gt;ep, true);*/</comment>

      <comment type="line">// up time</comment>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// subscribe time</comment>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>subscribeTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// rebalance time</comment>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>rebalanceTime</name></name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebalanceTime</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextConsumer</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mndConsumerStatusName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MQ_CONSUMER_STATUS__READY</name></expr>:</case>
      <return>return <expr><literal type="string">"ready"</literal></expr>;</return>
    <case>case <expr><name>MQ_CONSUMER_STATUS__LOST</name></expr>:</case>
    <case>case <expr><name>MQ_CONSUMER_STATUS__LOST_REBD</name></expr>:</case>
    <case>case <expr><name>MQ_CONSUMER_STATUS__LOST_IN_REB</name></expr>:</case>
      <return>return <expr><literal type="string">"lost"</literal></expr>;</return>
    <case>case <expr><name>MQ_CONSUMER_STATUS__MODIFY</name></expr>:</case>
    <case>case <expr><name>MQ_CONSUMER_STATUS__MODIFY_IN_REB</name></expr>:</case>
      <return>return <expr><literal type="string">"rebalancing"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
