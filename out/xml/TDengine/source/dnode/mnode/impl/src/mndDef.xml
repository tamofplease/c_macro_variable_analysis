<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndDef.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndConsumer.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>tEncodeSStreamObj</name><parameter_list>(<parameter><decl><type><name>SEncoder</name> <modifier>*</modifier></type><name>pEncoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStreamObj</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartEncode</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>createTime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>updateTime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>totalLevel</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>smaId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>trigger</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI8</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>fillHistory</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>triggerParam</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>sourceDbUid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>targetDbUid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>sourceDb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>targetDb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>targetSTbName</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>targetStbUid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>fixedSinkVgId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pObj</name><operator>-&gt;</operator><name>sql</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pObj</name><operator>-&gt;</operator><name>ast</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pObj</name><operator>-&gt;</operator><name>physicalPlan</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>innerSz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>innerSz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>innerSz</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tEncodeSStreamTask</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeSSchemaWrapper</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>outputSchema</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// 3.0.20</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>checkpointFreq</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tEndEncode</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pEncoder</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDecodeSStreamObj</name><parameter_list>(<parameter><decl><type><name>SDecoder</name> <modifier>*</modifier></type><name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>SStreamObj</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStrTo</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>createTime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>updateTime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>totalLevel</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>smaId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>igExpired</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>trigger</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI8</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>fillHistory</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>triggerParam</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sourceDbUid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>targetDbUid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStrTo</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>sourceDb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStrTo</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>targetDb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStrTo</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>targetSTbName</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>targetStbUid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>fixedSinkVgId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStrAlloc</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStrAlloc</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStrAlloc</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>tasks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>tasks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>innerSz</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>innerSz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>innerSz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>innerSz</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SStreamTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tDecodeSStreamTask</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSSchemaWrapper</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>outputSchema</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// 3.0.20</comment>
  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>checkpointFreq</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tEndDecode</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tFreeStreamObj</name><parameter_list>(<parameter><decl><type><name>SStreamObj</name> <modifier>*</modifier></type><name>pStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>outputSchema</name><operator>.</operator><name>nCols</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>outputSchema</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLevel</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>taskSz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>taskSz</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pLevel</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tFreeSStreamTask</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SMqVgEp</name> <modifier>*</modifier></type><name>tCloneSMqVgEp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMqVgEp</name> <modifier>*</modifier></type><name>pVgEp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqVgEp</name> <modifier>*</modifier></type><name>pVgEpNew</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqVgEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgEpNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pVgEpNew</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgEpNew</name><operator>-&gt;</operator><name>qmsg</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgEpNew</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name><name>pVgEp</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>
  <return>return <expr><name>pVgEpNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tDeleteSMqVgEp</name><parameter_list>(<parameter><decl><type><name>SMqVgEp</name> <modifier>*</modifier></type><name>pVgEp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pVgEp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSMqVgEp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqVgEp</name> <modifier>*</modifier></type><name>pVgEp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeSEpSet</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgEp</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tDecodeSMqVgEp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SMqVgEp</name> <modifier>*</modifier></type><name>pVgEp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgEp</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeSEpSet</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgEp</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>tNewSMqConsumerObj</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>consumerId</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>cgroup</name><index>[<expr><name>TSDB_CGROUP_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>=</operator> <name>consumerId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name>cgroup</name></expr></argument>, <argument><expr><name>TSDB_CGROUP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>MQ_CONSUMER_STATUS__MODIFY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>hbStatus</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosInitRWLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
      <name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pConsumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>upTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pConsumer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tDeleteSMqConsumerObj</name><parameter_list>(<parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSMqConsumerObj</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>clientId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>updateType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeSEpSet</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>subscribeTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebalanceTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// current topics</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// reb new topics</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// reb removed topics</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// lost topics</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tDecodeSMqConsumerObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerObj</name> <modifier>*</modifier></type><name>pConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeStringTo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>clientId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeStringTo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>cgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>updateType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeSEpSet</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>upTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>subscribeTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumer</name><operator>-&gt;</operator><name>rebalanceTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// current topics</comment>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>currentTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// reb new topics</comment>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebNewTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// reb removed topics</comment>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>rebRemovedTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// reb removed topics</comment>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pConsumer</name><operator>-&gt;</operator><name>assignedTopics</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqConsumerEp</name> <modifier>*</modifier></type><name>tCloneSMqConsumerEp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMqConsumerEp</name> <modifier>*</modifier></type><name>pConsumerEpOld</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqConsumerEp</name> <modifier>*</modifier></type><name>pConsumerEpNew</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConsumerEpNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pConsumerEpNew</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>=</operator> <name><name>pConsumerEpOld</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConsumerEpNew</name><operator>-&gt;</operator><name>vgs</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pConsumerEpOld</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>__array_item_dup_fn_t</name><operator>)</operator><name>tCloneSMqVgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pConsumerEpNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tDeleteSMqConsumerEp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqConsumerEp</name> <modifier>*</modifier></type><name>pConsumerEp</name> <init>= <expr><operator>(</operator><name>SMqConsumerEp</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pConsumerEp</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSMqVgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSMqConsumerEp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqConsumerEp</name> <modifier>*</modifier></type><name>pConsumerEp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumerEp</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pConsumerEp</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FEncode</name><operator>)</operator><name>tEncodeSMqVgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int32_t sz = taosArrayGetSize(pConsumerEp-&gt;vgs);
  tlen += taosEncodeFixedI32(buf, sz);
  for (int32_t i = 0; i &lt; sz; i++) {
    SMqVgEp *pVgEp = taosArrayGetP(pConsumerEp-&gt;vgs, i);
    tlen += tEncodeSMqVgEp(buf, pVgEp);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tDecodeSMqConsumerEp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SMqConsumerEp</name> <modifier>*</modifier></type><name>pConsumerEp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumerEp</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConsumerEp</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDecode</name><operator>)</operator><name>tDecodeSMqVgEp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqVgEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int32_t sz;
  buf = taosDecodeFixedI32(buf, &amp;sz);
  pConsumerEp-&gt;vgs = taosArrayInit(sz, sizeof(void *));
  for (int32_t i = 0; i &lt; sz; i++) {
    SMqVgEp *pVgEp = taosMemoryMalloc(sizeof(SMqVgEp));
    buf = tDecodeSMqVgEp(buf, pVgEp);
    taosArrayPush(pConsumerEp-&gt;vgs, &amp;pVgEp);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqSubscribeObj</name> <modifier>*</modifier></type><name>tNewSubscribeObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>key</name><index>[<expr><name>TSDB_SUBSCRIBE_KEY_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqSubscribeObj</name> <modifier>*</modifier></type><name>pSubNew</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqSubscribeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSubNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>TSDB_SUBSCRIBE_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosInitRWLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSubNew</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>vgNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>consumerHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO set hash free fp</comment>
  <comment type="block">/*taosHashSetFreeFp(pSubNew-&gt;consumerHash, tDeleteSMqConsumerEp);*/</comment>

  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>unassignedVgs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pSubNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqSubscribeObj</name> <modifier>*</modifier></type><name>tCloneSubscribeObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMqSubscribeObj</name> <modifier>*</modifier></type><name>pSub</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqSubscribeObj</name> <modifier>*</modifier></type><name>pSubNew</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqSubscribeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSubNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>TSDB_SUBSCRIBE_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosInitRWLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSubNew</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>=</operator> <name><name>pSub</name><operator>-&gt;</operator><name>dbUid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>stbUid</name></name> <operator>=</operator> <name><name>pSub</name><operator>-&gt;</operator><name>stbUid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>subType</name></name> <operator>=</operator> <name><name>pSub</name><operator>-&gt;</operator><name>subType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>withMeta</name></name> <operator>=</operator> <name><name>pSub</name><operator>-&gt;</operator><name>withMeta</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>vgNum</name></name> <operator>=</operator> <name><name>pSub</name><operator>-&gt;</operator><name>vgNum</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>consumerHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO set hash free fp</comment>
  <comment type="block">/*taosHashSetFreeFp(pSubNew-&gt;consumerHash, tDeleteSMqConsumerEp);*/</comment>
  <decl_stmt><decl><type><name>void</name>          <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqConsumerEp</name> <modifier>*</modifier></type><name>pConsumerEp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pConsumerEp</name> <operator>=</operator> <operator>(</operator><name>SMqConsumerEp</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SMqConsumerEp</name></type> <name>newEp</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>consumerId</name> <operator>=</operator> <name><name>pConsumerEp</name><operator>-&gt;</operator><name>consumerId</name></name></expr>,
        <expr><operator>.</operator><name>vgs</name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pConsumerEp</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>__array_item_dup_fn_t</name><operator>)</operator><name>tCloneSMqVgEp</name></expr></argument>)</argument_list></call></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newEp</name><operator>.</operator><name>consumerId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>newEp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>unassignedVgs</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>unassignedVgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>__array_item_dup_fn_t</name><operator>)</operator><name>tCloneSMqVgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSubNew</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pSubNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tDeleteSubscribeObj</name><parameter_list>(<parameter><decl><type><name>SMqSubscribeObj</name> <modifier>*</modifier></type><name>pSub</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SMqConsumerEp</name> <modifier>*</modifier></type><name>pConsumerEp</name> <init>= <expr><operator>(</operator><name>SMqConsumerEp</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pConsumerEp</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSMqVgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>unassignedVgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSMqVgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSubscribeObj</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqSubscribeObj</name> <modifier>*</modifier></type><name>pSub</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>dbUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>vgNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>subType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>withMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>stbUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SMqConsumerEp</name> <modifier>*</modifier></type><name>pConsumerEp</name> <init>= <expr><operator>(</operator><name>SMqConsumerEp</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>tEncodeSMqConsumerEp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pConsumerEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cnt</name> <operator>==</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>unassignedVgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FEncode</name><operator>)</operator><name>tEncodeSMqVgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tDecodeSubscribeObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SMqSubscribeObj</name> <modifier>*</modifier></type><name>pSub</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeStringTo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>dbUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>vgNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>subType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>withMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>stbUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqConsumerEp</name></type> <name>consumerEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tDecodeSMqConsumerEp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>consumerEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>consumerEp</name><operator>.</operator><name>consumerId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>consumerEp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqConsumerEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSub</name><operator>-&gt;</operator><name>unassignedVgs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDecode</name><operator>)</operator><name>tDecodeSMqVgEp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqVgEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeStringTo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqSubActionLogEntry</name> <modifier>*</modifier></type><name>tCloneSMqSubActionLogEntry</name><parameter_list>(<parameter><decl><type><name>SMqSubActionLogEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqSubActionLogEntry</name> <modifier>*</modifier></type><name>pEntryNew</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqSubActionLogEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntryNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pEntryNew</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntryNew</name><operator>-&gt;</operator><name>consumers</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>consumers</name></name></expr></argument>, <argument><expr><operator>(</operator><name>__array_item_dup_fn_t</name><operator>)</operator><name>tCloneSMqConsumerEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pEntryNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tDeleteSMqSubActionLogEntry</name><parameter_list>(<parameter><decl><type><name>SMqSubActionLogEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>consumers</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSMqConsumerEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSMqSubActionLogEntry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqSubActionLogEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>consumers</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FEncode</name><operator>)</operator><name>tEncodeSMqSubActionLogEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tDecodeSMqSubActionLogEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SMqSubActionLogEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pEntry</name><operator>-&gt;</operator><name>consumers</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDecode</name><operator>)</operator><name>tDecodeSMqSubActionLogEntry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqSubActionLogEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqSubActionLogObj</name> <modifier>*</modifier></type><name>tCloneSMqSubActionLogObj</name><parameter_list>(<parameter><decl><type><name>SMqSubActionLogObj</name> <modifier>*</modifier></type><name>pLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqSubActionLogObj</name> <modifier>*</modifier></type><name>pLogNew</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqSubActionLogObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLogNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pLogNew</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pLogNew</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>TSDB_SUBSCRIBE_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLogNew</name><operator>-&gt;</operator><name>logs</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>logs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>__array_item_dup_fn_t</name><operator>)</operator><name>tCloneSMqConsumerEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pLogNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tDeleteSMqSubActionLogObj</name><parameter_list>(<parameter><decl><type><name>SMqSubActionLogObj</name> <modifier>*</modifier></type><name>pLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>logs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSMqConsumerEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSMqSubActionLogObj</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqSubActionLogObj</name> <modifier>*</modifier></type><name>pLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>logs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FEncode</name><operator>)</operator><name>tEncodeSMqSubActionLogEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tDecodeSMqSubActionLogObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SMqSubActionLogObj</name> <modifier>*</modifier></type><name>pLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeStringTo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pLog</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pLog</name><operator>-&gt;</operator><name>logs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDecode</name><operator>)</operator><name>tDecodeSMqSubActionLogEntry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqSubActionLogEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeSMqOffsetObj</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqOffsetObj</name> <modifier>*</modifier></type><name>pOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tDecodeSMqOffsetObj</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SMqOffsetObj</name> <modifier>*</modifier></type><name>pOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeStringTo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOffset</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
</unit>
