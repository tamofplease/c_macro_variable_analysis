<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndSma.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndInfoSchema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndMnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndScheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndStb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndStream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndUser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndVgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDB_SMA_VER_NUMBER</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDB_SMA_RESERVE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>SSdbRaw</name> <modifier>*</modifier></type><name>mndSmaActionEncode</name><parameter_list>(<parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndSmaActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndSmaActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndSmaActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSpSmatb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndSmaActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessCreateSmaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessDropSmaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessGetSmaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessGetTbSmaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndRetrieveSma</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>mndCancelGetNextSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>mndDestroySmaObj</name><parameter_list>(<parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSmaObj</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbTable</name></type> <name>table</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>sdbType</name> <operator>=</operator> <name>SDB_SMA</name></expr>,
      <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>SDB_KEY_BINARY</name></expr>,
      <expr><operator>.</operator><name>encodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbEncodeFp</name><operator>)</operator><name>mndSmaActionEncode</name></expr>,
      <expr><operator>.</operator><name>decodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbDecodeFp</name><operator>)</operator><name>mndSmaActionDecode</name></expr>,
      <expr><operator>.</operator><name>insertFp</name> <operator>=</operator> <operator>(</operator><name>SdbInsertFp</name><operator>)</operator><name>mndSmaActionInsert</name></expr>,
      <expr><operator>.</operator><name>updateFp</name> <operator>=</operator> <operator>(</operator><name>SdbUpdateFp</name><operator>)</operator><name>mndSmaActionUpdate</name></expr>,
      <expr><operator>.</operator><name>deleteFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeleteFp</name><operator>)</operator><name>mndSmaActionDelete</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_SMA</name></expr></argument>, <argument><expr><name>mndProcessCreateSmaReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_SMA</name></expr></argument>, <argument><expr><name>mndProcessDropSmaReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_CREATE_SMA_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_DROP_SMA_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_GET_INDEX</name></expr></argument>, <argument><expr><name>mndProcessGetSmaReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_GET_TABLE_INDEX</name></expr></argument>, <argument><expr><name>mndProcessGetTbSmaReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_INDEX</name></expr></argument>, <argument><expr><name>mndRetrieveSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_INDEX</name></expr></argument>, <argument><expr><name>mndCancelGetNextSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sdbSetTable</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRaw</name> <modifier>*</modifier></type><name>mndSmaActionEncode</name><parameter_list>(<parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>=
      <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaObj</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pSma</name><operator>-&gt;</operator><name>exprLen</name></name> <operator>+</operator> <name><name>pSma</name><operator>-&gt;</operator><name>tagsFilterLen</name></name> <operator>+</operator> <name><name>pSma</name><operator>-&gt;</operator><name>sqlLen</name></name> <operator>+</operator> <name><name>pSma</name><operator>-&gt;</operator><name>astLen</name></name> <operator>+</operator> <name>TSDB_SMA_RESERVE_SIZE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>sdbAllocRaw</name><argument_list>(<argument><expr><name>SDB_SMA</name></expr></argument>, <argument><expr><name>TSDB_SMA_VER_NUMBER</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;name</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;stb</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;db</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;dstTbName</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;uid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;stbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;dbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;dstTbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;intervalUnit</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;slidingUnit</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;timezone</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;dstVgId</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;interval</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;offset</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;sliding</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;exprLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;tagsFilterLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;sqlLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;astLen</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>exprLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;expr</argument>, <argument>pSma-&gt;exprLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>tagsFilterLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;tagsFilter</argument>, <argument>pSma-&gt;tagsFilterLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>sqlLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;sql</argument>, <argument>pSma-&gt;sqlLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>astLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;ast</argument>, <argument>pSma-&gt;astLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <macro><name>SDB_SET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>TSDB_SMA_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_DATALEN</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"sma:%s, failed to encode to raw:%p since %s"</literal></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"sma:%s, encode to raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRaw</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndSmaActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbGetRawSoftVer</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>!=</operator> <name>TSDB_SMA_VER_NUMBER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>sdbAllocRow</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pSma</name> <operator>=</operator> <call><name>sdbGetRowObj</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSma</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;name</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;stb</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;db</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;dstTbName</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;uid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;stbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;dbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;dstTbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;intervalUnit</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;slidingUnit</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;timezone</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;dstVgId</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;interval</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;offset</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;sliding</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;exprLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;tagsFilterLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;sqlLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSma-&gt;astLen</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>exprLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>exprLen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>expr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;expr</argument>, <argument>pSma-&gt;exprLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>tagsFilterLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>tagsFilter</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>tagsFilterLen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>tagsFilter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;tagsFilter</argument>, <argument>pSma-&gt;tagsFilterLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>sqlLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>sql</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;sql</argument>, <argument>pSma-&gt;sqlLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>astLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>ast</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>astLen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>ast</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSma-&gt;ast</argument>, <argument>pSma-&gt;astLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <macro><name>SDB_GET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>TSDB_SMA_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"sma:%s, failed to decode from raw:%p since %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pSma</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>tagsFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"sma:%s, decode from raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSmaActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"sma:%s, perform insert action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSmaActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"sma:%s, perform delete action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>tagsFilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSmaActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"sma:%s, perform update action, old row:%p new row:%p"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSmaObj</name> <modifier>*</modifier></type><name>mndAcquireSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>smaName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>    <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name> <init>= <expr><call><name>sdbAcquire</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_SMA</name></expr></argument>, <argument><expr><name>smaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSma</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>==</operator> <name>TSDB_CODE_SDB_OBJ_NOT_THERE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_SMA_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pSma</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndReleaseSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SDbObj</name> <modifier>*</modifier></type><name>mndAcquireDbBySma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>smaName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>smaName</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>db</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mndBuildVCreateSmaReq</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pContLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>    <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVCreateTSmaReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>intervalUnit</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>slidingUnit</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>timezoneInt</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>timezone</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>indexName</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_INDEX_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>exprLen</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>exprLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>tagsFilterLen</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>tagsFilterLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>indexUid</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>tableUid</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>stbUid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>dstVgId</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>dstVgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>dstTbUid</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>dstTbUid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>interval</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sliding</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>sliding</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>tagsFilter</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>tagsFilter</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaRow</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>schemaRow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaTag</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>dstTbName</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>dstTbName</name></name></expr>;</expr_stmt>

  <comment type="line">// get length</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateTSmaReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>contLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>contLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeSVCreateTSmaReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pContLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <return>return <expr><name>pHead</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mndBuildVDropSmaReq</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pContLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>contLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>    <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVDropTSmaReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>indexUid</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>indexName</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_INDEX_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// get length</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVDropTSmaReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>contLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>contLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeSVDropTSmaReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pContLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <return>return <expr><name>pHead</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateSmaRedoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRedoRaw</name> <init>= <expr><call><name>mndSmaActionEncode</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRedoRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRedoRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRedoRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_CREATING</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateSmaCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndSmaActionEncode</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateSmaVgroupRedoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pVgRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_CREATING</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateSmaVgroupCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pVgRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetUpdateSmaStbCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStbObj</name></type> <name>stbObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStbObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>numOfColumns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>pColumns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>numOfTags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>pTags</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>numOfFuncs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>pFuncs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>smaVer</name></name><operator>++</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndStbActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateSmaVgroupRedoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>,
                                                <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name></name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetDnodeEpset</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// todo add sma info here</comment>
  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pAst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAst</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>qExtractResultSchema</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSma</name><operator>-&gt;</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSma</name><operator>-&gt;</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>schemaRow</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// TODO: the schemaTag generated by qExtractResultXXX later.</comment>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>nCols</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>colId</name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>+</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"groupId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>smaContLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pSmaReq</name> <init>= <expr><call><name>mndBuildVCreateSmaReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smaContLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSmaReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>pTsma</name></name> <operator>=</operator> <name>pSmaReq</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildCreateVnodeReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSmaReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_DND_CREATE_VNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>acceptableCode</name></name> <operator>=</operator> <name>TSDB_CODE_VND_ALREADY_EXIST</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndDestroySmaObj</name><parameter_list>(<parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSmaObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSmaObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSmaObj</name><operator>-&gt;</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSmaObj</name><operator>-&gt;</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCreateSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SMCreateSmaReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>streamName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaObj</name></type> <name>smaObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>smaObj</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>smaObj</name><operator>.</operator><name>stb</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>smaObj</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <call><name>mndGenerateUid</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>smaObj</name><operator>.</operator><name>uid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>resultTbName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>resultTbName</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"%s_td_tsma_rst_tb"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>smaObj</name><operator>.</operator><name>dstTbName</name></name></expr></argument>, <argument><expr><name>resultTbName</name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>dstTbUid</name></name> <operator>=</operator> <call><name>mndGenerateUid</name><argument_list>(<argument><expr><name><name>smaObj</name><operator>.</operator><name>dstTbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>stbUid</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>dbUid</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>dbUid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>intervalUnit</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>slidingUnit</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  smaObj.timezone = pCreate-&gt;timezone;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>timezone</name></name> <operator>=</operator> <name>tsTimezone</name></expr>;</expr_stmt>  <comment type="line">// use timezone of server</comment>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>interval</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>sliding</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>sliding</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>exprLen</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>exprLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>tagsFilterLen</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>tagsFilterLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>sqlLen</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>sqlLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>astLen</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>astLen</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>smaObj</name><operator>.</operator><name>exprLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>smaObj</name><operator>.</operator><name>tagsFilterLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>tagsFilter</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>tagsFilter</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>smaObj</name><operator>.</operator><name>sqlLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>sql</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>smaObj</name><operator>.</operator><name>astLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>ast</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>ast</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStreamObj</name></type> <name>streamObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>streamObj</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>streamName</name></expr></argument>, <argument><expr><name>TSDB_STREAM_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>streamObj</name><operator>.</operator><name>sourceDb</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>streamObj</name><operator>.</operator><name>targetDb</name></name></expr></argument>, <argument><expr><name><name>streamObj</name><operator>.</operator><name>sourceDb</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>createTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <name><name>streamObj</name><operator>.</operator><name>createTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <call><name>mndGenerateUid</name><argument_list>(<argument><expr><name>streamName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>streamName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>sourceDbUid</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>targetDbUid</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>smaId</name></name> <operator>=</operator> <name><name>smaObj</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>watermark</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>watermark</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>deleteMark</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>deleteMark</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>fillHistory</name></name> <operator>=</operator> <name>STREAM_FILL_HISTORY_ON</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>trigger</name></name> <operator>=</operator> <name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>triggerParam</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>maxDelay</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>ast</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>smaObj</name><operator>.</operator><name>ast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// check the maxDelay</comment>
  <if_stmt><if>if <condition>(<expr><name><name>streamObj</name><operator>.</operator><name>triggerParam</name></name> <operator>&lt;</operator> <name>TSDB_MIN_ROLLUP_MAX_DELAY</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>msInterval</name> <init>= <expr><call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name>TIME_UNIT_MILLISECOND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>triggerParam</name></name> <operator>=</operator> <ternary><condition><expr><name>msInterval</name> <operator>&gt;</operator> <name>TSDB_MIN_ROLLUP_MAX_DELAY</name></expr> ?</condition><then> <expr><name>msInterval</name></expr> </then><else>: <expr><name>TSDB_MIN_ROLLUP_MAX_DELAY</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>streamObj</name><operator>.</operator><name>triggerParam</name></name> <operator>&gt;</operator> <name>TSDB_MAX_ROLLUP_MAX_DELAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>triggerParam</name></name> <operator>=</operator> <name>TSDB_MAX_ROLLUP_MAX_DELAY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndAllocSmaVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>streamObj</name><operator>.</operator><name>fixedSinkVg</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"sma:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>smaObj</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>smaObj</name><operator>.</operator><name>dstVgId</name></name> <operator>=</operator> <name><name>streamObj</name><operator>.</operator><name>fixedSinkVg</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamObj</name><operator>.</operator><name>fixedSinkVgId</name></name> <operator>=</operator> <name><name>smaObj</name><operator>.</operator><name>dstVgId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pAst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name><name>streamObj</name><operator>.</operator><name>ast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAst</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// extract output schema from ast</comment>
  <if_stmt><if>if <condition>(<expr><call><name>qExtractResultSchema</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>streamObj</name><operator>.</operator><name>outputSchema</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>streamObj</name><operator>.</operator><name>outputSchema</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQueryPlan</name>  <modifier>*</modifier></type><name>pPlan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SPlanContext</name></type> <name>cxt</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>pAstRoot</name> <operator>=</operator> <name>pAst</name></expr>,
      <expr><operator>.</operator><name>topicQuery</name> <operator>=</operator> <name>false</name></expr>,
      <expr><operator>.</operator><name>streamQuery</name> <operator>=</operator> <name>true</name></expr>,
      <expr><operator>.</operator><name>triggerType</name> <operator>=</operator> <name><name>streamObj</name><operator>.</operator><name>trigger</name></name></expr>,
      <expr><operator>.</operator><name>watermark</name> <operator>=</operator> <name><name>streamObj</name><operator>.</operator><name>watermark</name></name></expr>,
      <expr><operator>.</operator><name>deleteMark</name> <operator>=</operator> <name><name>streamObj</name><operator>.</operator><name>deleteMark</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qCreateQueryPlan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPlan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// save physcial plan</comment>
  <if_stmt><if>if <condition>(<expr><call><name>nodesNodeToString</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>streamObj</name><operator>.</operator><name>physicalPlan</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pAst</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_DB</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"create-sma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mndTransSetDbName</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransSetSerial</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to create sma:%s stream:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>streamObj</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateSmaRedoLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smaObj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateSmaVgroupRedoLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>streamObj</name><operator>.</operator><name>fixedSinkVg</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateSmaCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smaObj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateSmaVgroupCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>streamObj</name><operator>.</operator><name>fixedSinkVg</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetUpdateSmaStbCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateSmaVgroupRedoActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>streamObj</name><operator>.</operator><name>fixedSinkVg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smaObj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndScheduleStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>streamObj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndPersistStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>streamObj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"sma:%s, uid:%"</literal> <name>PRIi64</name> <literal type="string">" create on stb:%"</literal> <name>PRIi64</name> <literal type="string">", dstSuid:%"</literal> <name>PRIi64</name> <literal type="string">" dstTb:%s dstVg:%d"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
        <argument><expr><name><name>smaObj</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>smaObj</name><operator>.</operator><name>stbUid</name></name></expr></argument>, <argument><expr><name><name>smaObj</name><operator>.</operator><name>dstTbUid</name></name></expr></argument>, <argument><expr><name><name>smaObj</name><operator>.</operator><name>dstTbName</name></name></expr></argument>, <argument><expr><name><name>smaObj</name><operator>.</operator><name>dstVgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>tFreeStreamObj</name><argument_list>(<argument><expr><operator>&amp;</operator><name>streamObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndDestroySmaObj</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smaObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckCreateSmaReq</name><parameter_list>(<parameter><decl><type><name>SMCreateSmaReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_SMA_OPTION</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>stb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>igExists</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>igExists</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>slidingUnit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>timezone</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>interval</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>sliding</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>exprLen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>tagsFilterLen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>sqlLen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>astLen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>exprLen</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>exprLen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>tagsFilterLen</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>tagsFilter</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>tagsFilterLen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>sqlLen</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>sqlLen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>astLen</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>astLen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>smaName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smaName</name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smaName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndGetStreamNameFromSmaName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>streamName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>smaName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>smaName</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>streamName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>streamName</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessCreateSmaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>        <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStbObj</name>       <modifier>*</modifier></type><name>pStb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaObj</name>       <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamObj</name>    <modifier>*</modifier></type><name>pStream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name>        <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMCreateSmaReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMCreateSmaReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"sma:%s, start to create"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckCreateSmaReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pStb</name> <operator>=</operator> <call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>stb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"sma:%s, failed to create since stb:%s not exist"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>stb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>streamName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mndGetStreamNameFromSmaName</name><argument_list>(<argument><expr><name>streamName</name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pStream</name> <operator>=</operator> <call><name>mndAcquireStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>streamName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"sma:%s, failed to create since stream:%s already exist"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>streamName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_STREAM_ALREADY_EXIST</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pSma</name> <operator>=</operator> <call><name>mndAcquireSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSma</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>createReq</name><operator>.</operator><name>igExists</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"sma:%s, already exist in sma:%s, ignore exist is set"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_SMA_ALREADY_EXIST</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDbBySma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_NOT_SELECTED</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_WRITE_DB</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndCreateSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><name>streamName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"sma:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMCreateSmaReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropSmaRedoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRedoRaw</name> <init>= <expr><call><name>mndSmaActionEncode</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRedoRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRedoRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRedoRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPING</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropSmaCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndSmaActionEncode</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropSmaVgroupRedoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pVgRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPING</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropSmaVgroupCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pVgRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropSmaVgroupRedoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name></name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetDnodeEpset</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildDropVnodeReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_DND_DROP_VNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>acceptableCode</name></name> <operator>=</operator> <name>TSDB_CODE_VND_NOT_EXIST</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDropSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name>  <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name>  <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pVgroup</name> <operator>=</operator> <call><name>mndAcquireVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>dstVgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgroup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pStb</name> <operator>=</operator> <call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>stb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pTrans</name> <operator>=</operator> <call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_DB</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"drop-sma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to drop sma:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransSetDbName</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransSetSerial</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>streamName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mndGetStreamNameFromSmaName</name><argument_list>(<argument><expr><name>streamName</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SStreamObj</name> <modifier>*</modifier></type><name>pStream</name> <init>= <expr><call><name>mndAcquireStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>streamName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStream</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>smaId</name></name> <operator>!=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mndDropStreamTasks</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stream:%s, failed to drop task since %s"</literal></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// drop stream</comment>
    <if_stmt><if>if <condition>(<expr><call><name>mndPersistDropStreamLog</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSmaRedoLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSmaVgroupRedoLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSmaCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSmaVgroupCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetUpdateSmaStbCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSmaVgroupRedoActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndDropSmasByStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>    <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name>  <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_SMA</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>stbUid</name></name> <operator>==</operator> <name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mndTransSetSerial</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pVgroup</name> <operator>=</operator> <call><name>mndAcquireVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>dstVgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pVgroup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>char</name></type> <name><name>streamName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>mndGetStreamNameFromSmaName</name><argument_list>(<argument><expr><name>streamName</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SStreamObj</name> <modifier>*</modifier></type><name>pStream</name> <init>= <expr><call><name>mndAcquireStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>streamName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pStream</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pStream</name><operator>-&gt;</operator><name>smaId</name></name> <operator>==</operator> <name><name>pSma</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mndDropStreamTasks</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stream:%s, failed to drop task since %s"</literal></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>_OVER</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mndPersistDropStreamLog</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <goto>goto <name>_OVER</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSmaVgroupCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSmaVgroupRedoActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSmaCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>mndReleaseVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pVgroup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndDropSmasByDb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_SMA</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>==</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSmaCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessDropSmaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>      <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name>      <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaObj</name>     <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMDropSmaReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMDropSmaReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"sma:%s, start to drop"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pSma</name> <operator>=</operator> <call><name>mndAcquireSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSma</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>dropReq</name><operator>.</operator><name>igNotExists</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"sma:%s, not exist, ignore not exist is set"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_SMA_NOT_EXIST</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDbBySma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_NOT_SELECTED</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_WRITE_DB</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndDropSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"sma:%s, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndGetSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SUserIndexReq</name> <modifier>*</modifier></type><name>indexReq</name></decl></parameter>, <parameter><decl><type><name>SUserIndexRsp</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>exist</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pSma</name> <operator>=</operator> <call><name>mndAcquireSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>indexReq</name><operator>-&gt;</operator><name>indexFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSma</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>exist</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>tblFName</name></name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>stb</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>stb</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>indexType</name></name></expr></argument>, <argument><expr><name>TSDB_INDEX_TYPE_SMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>extOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>nodesStringToList</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>node</argument>, <argument>pList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SFunctionNode</name> <modifier>*</modifier></type><name>pFunc</name> <init>= <expr><operator>(</operator><name>SFunctionNode</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>extOffset</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>indexExts</name></name> <operator>+</operator> <name>extOffset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>indexExts</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>extOffset</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
                            <argument><expr><operator>(</operator><ternary><condition><expr><name>extOffset</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><operator>*</operator><name>exist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndGetTableSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbFName</name></decl></parameter>, <parameter><decl><type><name>STableIndexRsp</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>exist</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaObj</name>        <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>           <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableIndexInfo</name></type> <name>info</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name> <init>= <expr><call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pStb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>exist</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>smaVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_SMA</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>stb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>tbFName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>stb</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>intervalUnit</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>slidingUnit</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>interval</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>sliding</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>sliding</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>dstTbUid</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>dstTbUid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>dstVgId</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>dstVgId</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVg</name> <init>= <expr><call><name>mndAcquireVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>dstVgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>exprLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>expr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>expr</name></name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>exprLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>expr</name><index>[<expr><name><name>pSma</name><operator>-&gt;</operator><name>exprLen</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>exist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessGetSmaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUserIndexReq</name></type> <name>indexReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMnode</name>       <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserIndexRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>exist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSUserIndexReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndGetSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>exist</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO GET INDEX FROM FULLTEXT</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_INDEX_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSUserIndexRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tSerializeSUserIndexRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to get index %s since %s"</literal></expr></argument>, <argument><expr><name><name>indexReq</name><operator>.</operator><name>indexFName</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessGetTbSmaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableIndexReq</name></type> <name>indexReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMnode</name>        <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableIndexRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>exist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSTableIndexReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>pIndex</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndexInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>rsp</name><operator>.</operator><name>pIndex</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndGetTableSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>indexReq</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>exist</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_INDEX_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSTableIndexRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tSerializeSTableIndexRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to get table index %s since %s"</literal></expr></argument>, <argument><expr><name><name>indexReq</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tFreeSerializeSTableIndexRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveSma</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>  <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>    <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_SMA</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pDb</name> <operator>&amp;&amp;</operator> <name><name>pSma</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>!=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SName</name></type> <name>smaName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smaName</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>n1</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smaName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>n2</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n2</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>mndGetDbStr</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SName</name></type> <name>stbName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbName</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>stb</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>n3</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>n3</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>n1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>n2</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>n3</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSma</name><operator>-&gt;</operator><name>dstVgId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSma</name><operator>-&gt;</operator><name>createdTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
