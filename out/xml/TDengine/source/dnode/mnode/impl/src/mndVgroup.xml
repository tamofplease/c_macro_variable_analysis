<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndVgroup.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndVgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndMnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndUser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmisce.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VGROUP_VER_NUMBER</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VGROUP_RESERVE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndVgroupActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndVgroupActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndVgroupActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndVgroupActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveVgroups</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndCancelGetNextVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveVnodes</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndCancelGetNextVnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessRedistributeVgroupMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessSplitVgroupMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessBalanceVgroupMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbTable</name></type> <name>table</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>sdbType</name> <operator>=</operator> <name>SDB_VGROUP</name></expr>,
      <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>SDB_KEY_INT32</name></expr>,
      <expr><operator>.</operator><name>encodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbEncodeFp</name><operator>)</operator><name>mndVgroupActionEncode</name></expr>,
      <expr><operator>.</operator><name>decodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbDecodeFp</name><operator>)</operator><name>mndVgroupActionDecode</name></expr>,
      <expr><operator>.</operator><name>insertFp</name> <operator>=</operator> <operator>(</operator><name>SdbInsertFp</name><operator>)</operator><name>mndVgroupActionInsert</name></expr>,
      <expr><operator>.</operator><name>updateFp</name> <operator>=</operator> <operator>(</operator><name>SdbUpdateFp</name><operator>)</operator><name>mndVgroupActionUpdate</name></expr>,
      <expr><operator>.</operator><name>deleteFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeleteFp</name><operator>)</operator><name>mndVgroupActionDelete</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_DND_CREATE_VNODE_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_REPLICA_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_CONFIG_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_CONFIRM_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_HASHRANGE_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_DND_DROP_VNODE_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_COMPACT_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_REDISTRIBUTE_VGROUP</name></expr></argument>, <argument><expr><name>mndProcessRedistributeVgroupMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_SPLIT_VGROUP</name></expr></argument>, <argument><expr><name>mndProcessSplitVgroupMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_BALANCE_VGROUP</name></expr></argument>, <argument><expr><name>mndProcessBalanceVgroupMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_VGROUP</name></expr></argument>, <argument><expr><name>mndRetrieveVgroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_VGROUP</name></expr></argument>, <argument><expr><name>mndCancelGetNextVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_VNODES</name></expr></argument>, <argument><expr><name>mndRetrieveVnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_VNODES</name></expr></argument>, <argument><expr><name>mndCancelGetNextVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>sdbSetTable</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>mndVgroupActionEncode</name><parameter_list>(<parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>sdbAllocRaw</name><argument_list>(<argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>VGROUP_VER_NUMBER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgObj</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>VGROUP_RESERVE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;vgId</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;version</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;hashBegin</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;hashEnd</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;dbName</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;dbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;isTsma</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;replica</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgid-&gt;dnodeId</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></for>
  <macro><name>SDB_SET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>VGROUP_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_DATALEN</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to encode to raw:%p since %s"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, encode to raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRaw</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSdbRow</name> <modifier>*</modifier></type><name>mndVgroupActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name>  <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbGetRawSoftVer</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>!=</operator> <name>VGROUP_VER_NUMBER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>sdbAllocRow</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pVgroup</name> <operator>=</operator> <call><name>sdbGetRowObj</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgroup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgroup-&gt;vgId</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgroup-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgroup-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgroup-&gt;version</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgroup-&gt;hashBegin</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgroup-&gt;hashEnd</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pVgroup-&gt;dbName</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgroup-&gt;dbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgroup-&gt;isTsma</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgroup-&gt;replica</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pVgid-&gt;dnodeId</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVgid</name><operator>-&gt;</operator><name>syncState</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <macro><name>SDB_GET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>VGROUP_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to decode from raw:%p since %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pVgroup</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, decode from raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndVgroupActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, perform insert action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndVgroupActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, perform delete action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndVgroupActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, perform update action, old row:%p new row:%p"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>updateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>hashBegin</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>hashBegin</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>hashEnd</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>hashEnd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>replica</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>replica</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>isTsma</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>isTsma</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pNewGid</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pOld</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pOldGid</name> <init>= <expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pNewGid</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>==</operator> <name><name>pOldGid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pNewGid</name><operator>-&gt;</operator><name>syncState</name></name> <operator>=</operator> <name><name>pOldGid</name><operator>-&gt;</operator><name>syncState</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNewGid</name><operator>-&gt;</operator><name>syncRestore</name></name> <operator>=</operator> <name><name>pOldGid</name><operator>-&gt;</operator><name>syncRestore</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNewGid</name><operator>-&gt;</operator><name>syncCanRead</name></name> <operator>=</operator> <name><name>pOldGid</name><operator>-&gt;</operator><name>syncCanRead</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name><name>pOld</name><operator>-&gt;</operator><name>numOfTables</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfTimeSeries</name></name> <operator>=</operator> <name><name>pOld</name><operator>-&gt;</operator><name>numOfTimeSeries</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>totalStorage</name></name> <operator>=</operator> <name><name>pOld</name><operator>-&gt;</operator><name>totalStorage</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>compStorage</name></name> <operator>=</operator> <name><name>pOld</name><operator>-&gt;</operator><name>compStorage</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pointsWritten</name></name> <operator>=</operator> <name><name>pOld</name><operator>-&gt;</operator><name>pointsWritten</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>compact</name></name> <operator>=</operator> <name><name>pOld</name><operator>-&gt;</operator><name>compact</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>vnodeGid</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>vnodeGid</name></name></expr></argument>, <argument><expr><name>TSDB_MAX_REPLICA</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SVgObj</name> <modifier>*</modifier></type><name>mndAcquireVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><call><name>sdbAcquire</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgroup</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>==</operator> <name>TSDB_CODE_SDB_OBJ_NOT_THERE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_VGROUP_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pVgroup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndReleaseVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>mndBuildCreateVnodeReq</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pContLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCreateVnodeReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>createReq</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>dbUid</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>numOfStables</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfStables</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>pageSize</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>pageSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>pages</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>pages</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>cacheLastSize</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>cacheLastSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>daysPerFile</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>daysPerFile</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>daysToKeep0</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>daysToKeep0</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>daysToKeep1</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>daysToKeep1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>daysToKeep2</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>daysToKeep2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>minRows</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>minRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>maxRows</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>maxRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>walFsyncPeriod</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>walFsyncPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>walLevel</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>walLevel</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>compression</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>compression</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>strict</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>strict</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>cacheLast</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>cacheLast</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>replica</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>selfIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>hashBegin</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>hashBegin</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>hashEnd</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>hashEnd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>hashMethod</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>hashMethod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>numOfRetensions</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfRetensions</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>pRetensions</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>pRetensions</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>isTsma</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>isTsma</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>pTsma</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>pTsma</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>walRetentionPeriod</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>walRetentionPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>walRetentionSize</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>walRetentionSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>walRollPeriod</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>walRollPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>walSegmentSize</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>walSegmentSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>sstTrigger</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>sstTrigger</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>hashPrefix</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>hashPrefix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>hashSuffix</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>hashSuffix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>tsdbPageSize</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>tsdbPageSize</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SReplica</name>  <modifier>*</modifier></type><name>pReplica</name> <init>= <expr><operator>&amp;</operator><name><name>createReq</name><operator>.</operator><name>replicas</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pVgidDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVgidDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pReplica</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>pVgidDnode</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReplica</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>pVgidDnode</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pVgidDnode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgidDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>createReq</name><operator>.</operator><name>selfIndex</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>createReq</name><operator>.</operator><name>selfIndex</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, build create vnode req, replica:%d selfIndex:%d strict:%d"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>replica</name></name></expr></argument>,
        <argument><expr><name><name>createReq</name><operator>.</operator><name>selfIndex</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>strict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>createReq</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, replica:%d ep:%s:%u"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSCreateVnodeReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSCreateVnodeReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pContLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <return>return <expr><name>pReq</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mndBuildAlterVnodeConfigReq</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pContLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterVnodeConfigReq</name></type> <name>alterReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>vgVersion</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>pageSize</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>pageSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>pages</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>pages</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>cacheLastSize</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>cacheLastSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>daysPerFile</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>daysPerFile</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>daysToKeep0</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>daysToKeep0</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>daysToKeep1</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>daysToKeep1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>daysToKeep2</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>daysToKeep2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>walFsyncPeriod</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>walFsyncPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>walLevel</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>walLevel</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>strict</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>strict</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>cacheLast</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>cacheLast</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, build alter vnode config req"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSAlterVnodeConfigReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>contLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><name>pReq</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tSerializeSAlterVnodeConfigReq</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pReq</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pContLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <return>return <expr><name>pReq</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mndBuildAlterVnodeReplicaReq</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl></parameter>,
                                          <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pContLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterVnodeReplicaReq</name></type> <name>alterReq</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr>,
      <expr><operator>.</operator><name>strict</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>strict</name></name></expr>,
      <expr><operator>.</operator><name>replica</name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>,
      <expr><operator>.</operator><name>selfIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SReplica</name>  <modifier>*</modifier></type><name>pReplica</name> <init>= <expr><operator>&amp;</operator><name><name>alterReq</name><operator>.</operator><name>replicas</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pVgidDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVgidDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pReplica</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name><name>pVgidDnode</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReplica</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>pVgidDnode</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pVgidDnode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgidDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>dnodeId</name> <operator>==</operator> <name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>selfIndex</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>alterReq</name><operator>.</operator><name>replica</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, build alter vnode req, replica:%d selfIndex:%d strict:%d"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>replica</name></name></expr></argument>,
        <argument><expr><name><name>alterReq</name><operator>.</operator><name>selfIndex</name></name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>strict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>alterReq</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, replica:%d ep:%s:%u"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>selfIndex</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSAlterVnodeReplicaReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSAlterVnodeReplicaReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pContLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <return>return <expr><name>pReq</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>mndBuildDropVnodeReq</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pContLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDropVnodeReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dropReq</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dropReq</name><operator>.</operator><name>dbUid</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, build drop vnode req"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSDropVnodeReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSDropVnodeReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pContLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <return>return <expr><name>pReq</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndResetDnodesArrayFp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>pObj</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndBuildDnodesArrayFp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>pObj</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>    <modifier>*</modifier></type><name>pArray</name> <init>= <expr><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>exceptDnodeId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>exceptDnodeId</name> <operator>==</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>curMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>online</name> <init>= <expr><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>isMnode</name> <init>= <expr><call><name>mndIsMnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name> <operator>=</operator> <call><name>mndGetVnodesNum</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>=</operator> <call><name>mndGetVnodesMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, vnodes:%d supportVnodes:%d isMnode:%d online:%d memory avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
        <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></argument>, <argument><expr><name>isMnode</name></expr></argument>, <argument><expr><name>online</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>isMnode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>online</name> <operator>&amp;&amp;</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name> <modifier>*</modifier></type><name>mndBuildDnodesArray</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>exceptDnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfDnodes</name> <init>= <expr><call><name>mndGetDnodeSize</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfDnodes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDnodeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sdbTraverse</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><name>mndResetDnodesArrayFp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbTraverse</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><name>mndBuildDnodesArrayFp</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exceptDnodeId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pArray</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCompareDnodeId</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dnode1Id</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dnode2Id</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>*</operator><name>dnode1Id</name> <operator>&gt;=</operator> <operator>*</operator><name>dnode2Id</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCompareDnodeVnodes</name><parameter_list>(<parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode1</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>float</name></type> <name>d1Score</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>pDnode1</name><operator>-&gt;</operator><name>numOfVnodes</name></name> <operator>/</operator> <name><name>pDnode1</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type> <name>d2Score</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>pDnode2</name><operator>-&gt;</operator><name>numOfVnodes</name></name> <operator>/</operator> <name><name>pDnode2</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>d1Score</name> <operator>&gt;=</operator> <name>d2Score</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndSortVnodeGid</name><parameter_list>(<parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&gt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndGetAvailableDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>allocedVnodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><name>__compar_fn_t</name><operator>)</operator><name>mndCompareDnodeVnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, no enough online dnodes:%d to alloc %d replica"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
           <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_DNODES</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name> <operator>&gt;=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_DNODES</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>vgMem</name> <init>= <expr><call><name>mndGetVgroupMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name> <operator>-</operator> <name>vgMem</name> <operator>-</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, no enough memory:%"</literal> <name>PRId64</name> <literal type="string">" in dnode:%d, avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>vgMem</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_MEM_IN_DNODE</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>+=</operator> <name>vgMem</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVgid</name><operator>-&gt;</operator><name>syncState</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pVgid</name><operator>-&gt;</operator><name>syncState</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_FOLLOWER</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, vn:%d is alloced, memory:%"</literal> <name>PRId64</name> <literal type="string">", dnode:%d avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>,
          <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vgMem</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>mndSortVnodeGid</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAllocSmaVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>mndBuildDnodesArray</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>sdbGetMaxId</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>isTsma</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>createdTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndGetAvailableDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, sma vgId:%d is alloced"</literal></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAllocVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVgroups</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroups</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pVgroups</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfVgroups</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgroups</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>mndBuildDnodesArray</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, total %d dnodes used to create %d vgroups (%d vnodes)"</literal></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfVgroups</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfVgroups</name></name> <operator>*</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replications</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>allocedVgroups</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>maxVgId</name> <init>= <expr><call><name>sdbGetMaxId</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashMin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashMax</name> <init>= <expr><name>UINT32_MAX</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashInterval</name> <init>= <expr><operator>(</operator><name>hashMax</name> <operator>-</operator> <name>hashMin</name><operator>)</operator> <operator>/</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfVgroups</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>maxVgId</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxVgId</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfVgroups</name></name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroups</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name>maxVgId</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <name><name>pVgroups</name><operator>-&gt;</operator><name>createdTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>hashBegin</name></name> <operator>=</operator> <name>hashMin</name> <operator>+</operator> <name>hashInterval</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfVgroups</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>hashEnd</name></name> <operator>=</operator> <name>hashMax</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>hashEnd</name></name> <operator>=</operator> <name>hashMin</name> <operator>+</operator> <name>hashInterval</name> <operator>*</operator> <operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replications</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndGetAvailableDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>allocedVgroups</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>ppVgroups</name> <operator>=</operator> <name>pVgroups</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, total %d vgroups is alloced, replica:%d"</literal></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfVgroups</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replications</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVgroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SEpSet</name></type> <name>mndGetVgroupEpset</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epset</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDnodeObj</name>       <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pVgid</name><operator>-&gt;</operator><name>syncState</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>epset</name><operator>.</operator><name>inUse</name></name> <operator>=</operator> <name><name>epset</name><operator>.</operator><name>numOfEps</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>addEpIntoEpSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epset</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>epset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveVgroups</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>curMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>!=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>  <name><name>db</name><index>[<expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>numOfTables</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// default 3 replica, add 1 replica if move vnode</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int16_t</name></type> <name>dnodeId</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dnodeId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>bool</name></type>       <name>exist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>       <name>online</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>exist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>online</name> <operator>=</operator> <call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>role</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><literal type="string">"offline"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>exist</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>role</name></expr></argument>, <argument><expr><literal type="string">"dropping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>online</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>star</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syncState</name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syncRestore</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syncCanRead</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>star</name> <operator>=</operator> <literal type="string">"**"</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syncRestore</name> <operator>&amp;&amp;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syncCanRead</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>star</name> <operator>=</operator> <literal type="string">"*"</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>role</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syncState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>cacheUsage</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>cacheUsage</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cacheUsage</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>isTsma</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndGetVnodesNumFp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgObj</name>  <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>pObj</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>dnodeId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pNumOfVnodes</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>==</operator> <name>dnodeId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pNumOfVnodes</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndGetVnodesNum</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVnodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbTraverse</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>mndGetVnodesNumFp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfVnodes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>numOfVnodes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>mndGetVgroupMemory</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDbInput</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>pDbInput</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDbInput</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>vgroupMemroy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>vgroupMemroy</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>buffer</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>pages</name></name> <operator>*</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>pageSize</name></name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>cacheLast</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>vgroupMemroy</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>cacheLastSize</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pDbInput</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>vgroupMemroy</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndGetVnodeMemroyFp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgObj</name>  <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>pObj</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>dnodeId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pVnodeMemory</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>==</operator> <name>dnodeId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pVnodeMemory</name> <operator>+=</operator> <call><name>mndGetVgroupMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>mndGetVnodesMemory</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>vnodeMemory</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbTraverse</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>mndGetVnodeMemroyFp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vnodeMemory</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>vnodeMemory</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveVnodes</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>&amp;&amp;</operator> <name>numOfRows</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVnodeGid</name>       <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>syncState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbname</name> <init>= <expr><call><name>mndGetDbStr</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>        <name><name>b1</name><index>[<expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>dbname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>, <argument><expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>b1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>       <name><name>b2</name><index>[<expr><name>TSDB_EP_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>b2</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextVnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAddVnodeToVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><name>__compar_fn_t</name><operator>)</operator><name>mndCompareDnodeVnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, equivalent vnodes:%d"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>d</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>used</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>vn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>vn</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>vn</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>vn</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>used</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name> <operator>&gt;=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_DNODES</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>vgMem</name> <init>= <expr><call><name>mndGetVgroupMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name> <operator>-</operator> <name>vgMem</name> <operator>-</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, no enough memory:%"</literal> <name>PRId64</name> <literal type="string">" in dnode:%d avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>vgMem</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_MEM_IN_DNODE</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>+=</operator> <name>vgMem</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgid</name><operator>-&gt;</operator><name>syncState</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_OFFLINE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, vn:%d is added, memory:%"</literal> <name>PRId64</name> <literal type="string">", dnode:%d avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>,
          <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr></argument>, <argument><expr><name>vgMem</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pVgRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVgRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></for>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_DNODES</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"db:%s, failed to add vnode to vgId:%d since %s"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRemoveVnodeFromVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>,
                                        <parameter><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pDelVgid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><name>__compar_fn_t</name><operator>)</operator><name>mndCompareDnodeVnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, equivalent vnodes:%d"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>d</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>d</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>vn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>vn</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>vn</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>vn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>==</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>vgMem</name> <init>= <expr><call><name>mndGetVgroupMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>-=</operator> <name>vgMem</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, vn:%d is removed, memory:%"</literal> <name>PRId64</name> <literal type="string">", dnode:%d avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>,
              <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>vn</name></expr></argument>, <argument><expr><name>vgMem</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pDelVgid</name> <operator>=</operator> <operator>*</operator><name>pVgid</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pVgid</name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"db:%s, failed to remove vnode from vgId:%d since %s"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>vn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>vn</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>vn</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>vn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, vn:%d dnode:%d is reserved"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>vn</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pVgRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddCreateVnodeAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetDnodeEpset</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildCreateVnodeReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_DND_CREATE_VNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>acceptableCode</name></name> <operator>=</operator> <name>TSDB_CODE_VND_ALREADY_EXIST</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddAlterVnodeConfirmAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>contLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pHead</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_ALTER_CONFIRM</name></expr>;</expr_stmt>
  <comment type="line">// incorrect redirect result will cause this erro</comment>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>retryCode</name></name> <operator>=</operator> <name>TSDB_CODE_VND_INVALID_VGROUP_ID</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddAlterVnodeHashRangeAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddAlterVnodeConfigAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildAlterVnodeConfigReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_ALTER_CONFIG</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddAlterVnodeReplicaAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>dnodeId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetDnodeEpset</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildAlterVnodeReplicaReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>dnodeId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_ALTER_REPLICA</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddDropVnodeAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgid</name></decl></parameter>,
                              <parameter><decl><type><name>bool</name></type> <name>isRedo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgid</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetDnodeEpset</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildDropVnodeReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_DND_DROP_VNODE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>acceptableCode</name></name> <operator>=</operator> <name>TSDB_CODE_VND_NOT_EXIST</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>isRedo</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendUndoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSetMoveVgroupInfoToTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vnIndex</name></decl></parameter>,
                                    <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgObj</name></type> <name>newVg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info before move, replica:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>newVg</name><operator>.</operator><name>replica</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, will add 1 vnode, replca:1"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddVnodeToVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddCreateVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name><name>newVg</name><operator>.</operator><name>replica</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, will remove 1 vnode, replca:2"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newVg</name><operator>.</operator><name>replica</name></name><operator>--</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SVnodeGid</name></type> <name>del</name> <init>= <expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>vnIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>vnIndex</name></expr>]</index></name> <operator>=</operator> <name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <block>{<block_content>
        <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>

      <if_stmt><if>if <condition>(<expr><call><name>mndAddDropVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// new replica == 3</comment>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, will add 1 vnode, replca:3"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddVnodeToVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, will remove 1 vnode, replca:4"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>newVg</name><operator>.</operator><name>replica</name></name><operator>--</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SVnodeGid</name></type> <name>del</name> <init>= <expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>vnIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>vnIndex</name></expr>]</index></name> <operator>=</operator> <name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <block>{<block_content>
        <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>

      <if_stmt><if>if <condition>(<expr><call><name>mndAddDropVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>vnIndex</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddCreateVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>vnIndex</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, will add 1 vnode and force remove 1 vnode"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddVnodeToVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>newVg</name><operator>.</operator><name>replica</name></name><operator>--</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SVnodeGid</name></type> <name>del</name> <init>= <expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>vnIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>vnIndex</name></expr>]</index></name> <operator>=</operator> <name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
      <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>vnIndex</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddCreateVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>vnIndex</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>newVg</name><operator>.</operator><name>replica</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, all data is dropped since replica=1"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info after move, replica:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSetMoveVgroupsInfoToTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>delDnodeId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>mndBuildDnodesArray</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>delDnodeId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>vnIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>==</operator> <name>delDnodeId</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>vnIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vnIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d will be removed from dnode:%d, force:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>vnIndex</name></expr></argument>, <argument><expr><name>delDnodeId</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndSetMoveVgroupInfoToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>vnIndex</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAddIncVgroupReplicaToTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>,
                                             <parameter><decl><type><name>int32_t</name></type> <name>newDnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, will add 1 vnode, replica:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr></argument>, <argument><expr><name>newDnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pGid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGid</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name>newDnodeId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGid</name><operator>-&gt;</operator><name>syncState</name></name> <operator>=</operator> <name>TAOS_SYNC_STATE_OFFLINE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pVgRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>mndAddCreateVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pGid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAddDecVgroupReplicaFromTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>,
                                               <parameter><decl><type><name>int32_t</name></type> <name>delDnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, will remove 1 vnode, replica:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr></argument>, <argument><expr><name>delDnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pGid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeGid</name></type>  <name>delGid</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>==</operator> <name>delDnodeId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pGid</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>pGid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delGid</name></expr></argument>, <argument><expr><name>pGid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pGid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pVgRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndAddDropVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delGid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRedistributeVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pNew1</name></decl></parameter>,
                                     <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pOld1</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pNew2</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pOld2</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pNew3</name></decl></parameter>,
                                     <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pOld3</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pTrans</name> <operator>=</operator> <call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_GLOBAL</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"red-vgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mndTransSetSerial</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to redistribute vgroup, vgId:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgObj</name></type> <name>newVg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info before redistribute, replica:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d role:%s"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>,
          <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syncState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>pNew1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pOld1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVnodes</name> <init>= <expr><call><name>mndGetVnodesNum</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pNew1</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfVnodes</name> <operator>&gt;=</operator> <name><name>pNew1</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no enough vnodes in dnode:%d, numOfVnodes:%d support:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pNew1</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>numOfVnodes</name></expr></argument>,
             <argument><expr><name><name>pNew1</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_DNODES</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>vgMem</name> <init>= <expr><call><name>mndGetVgroupMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pNew1</name><operator>-&gt;</operator><name>memAvail</name></name> <operator>-</operator> <name>vgMem</name> <operator>-</operator> <name><name>pNew1</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, no enough memory:%"</literal> <name>PRId64</name> <literal type="string">" in dnode:%d avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>vgMem</name></expr></argument>, <argument><expr><name><name>pNew1</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pNew1</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pNew1</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_MEM_IN_DNODE</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pNew1</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>+=</operator> <name>vgMem</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndAddIncVgroupReplicaToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>pNew1</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddDecVgroupReplicaFromTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>pOld1</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNew2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pOld2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVnodes</name> <init>= <expr><call><name>mndGetVnodesNum</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pNew2</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfVnodes</name> <operator>&gt;=</operator> <name><name>pNew2</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no enough vnodes in dnode:%d, numOfVnodes:%d support:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pNew2</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>numOfVnodes</name></expr></argument>,
             <argument><expr><name><name>pNew2</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_DNODES</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>vgMem</name> <init>= <expr><call><name>mndGetVgroupMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pNew2</name><operator>-&gt;</operator><name>memAvail</name></name> <operator>-</operator> <name>vgMem</name> <operator>-</operator> <name><name>pNew2</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, no enough memory:%"</literal> <name>PRId64</name> <literal type="string">" in dnode:%d avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>vgMem</name></expr></argument>, <argument><expr><name><name>pNew2</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pNew2</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pNew2</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_MEM_IN_DNODE</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pNew2</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>+=</operator> <name>vgMem</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddIncVgroupReplicaToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>pNew2</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddDecVgroupReplicaFromTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>pOld2</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNew3</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pOld3</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVnodes</name> <init>= <expr><call><name>mndGetVnodesNum</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pNew3</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfVnodes</name> <operator>&gt;=</operator> <name><name>pNew3</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no enough vnodes in dnode:%d, numOfVnodes:%d support:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pNew3</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>numOfVnodes</name></expr></argument>,
             <argument><expr><name><name>pNew3</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_DNODES</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>vgMem</name> <init>= <expr><call><name>mndGetVgroupMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pNew3</name><operator>-&gt;</operator><name>memAvail</name></name> <operator>-</operator> <name>vgMem</name> <operator>-</operator> <name><name>pNew3</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, no enough memory:%"</literal> <name>PRId64</name> <literal type="string">" in dnode:%d avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>vgMem</name></expr></argument>, <argument><expr><name><name>pNew3</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pNew3</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pNew3</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_MEM_IN_DNODE</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pNew3</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>+=</operator> <name>vgMem</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddIncVgroupReplicaToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>pNew3</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddDecVgroupReplicaFromTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>pOld3</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info after redistribute, replica:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessRedistributeVgroupMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>    <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pNew1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pNew2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pNew3</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pOld1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pOld2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pOld3</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name>    <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name>    <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>curMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name><name>newDnodeId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name><name>oldDnodeId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>newIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>oldIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRedistributeVgroupReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSRedistributeVgroupReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to redistribute vgroup to dnode %d:%d:%d"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dnodeId2</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dnodeId3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_REDISTRIBUTE_VGROUP</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pVgroup</name> <operator>=</operator> <call><name>mndAcquireVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgroup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_REPLICA</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>==</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// terrno = TSDB_CODE_MND_VGROUP_UN_CHANGED;</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pNew1</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pNew1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pNew1</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_HAS_OFFLINE_DNODE</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pOld1</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pOld1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pOld1</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_HAS_OFFLINE_DNODE</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndRedistributeVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pNew1</name></expr></argument>, <argument><expr><name>pOld1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_REPLICA</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>==</operator> <name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>||</operator> <name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>==</operator> <name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>||</operator> <name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>==</operator> <name><name>req</name><operator>.</operator><name>dnodeId3</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_REPLICA</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator>
        <name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>newDnodeId</name><index>[<expr><operator>++</operator><name>newIndex</name></expr>]</index></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>dnodeId1</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, dnode:%d will be added, index:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newDnodeId</name><index>[<expr><name>newIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>newIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator>
        <name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>newDnodeId</name><index>[<expr><operator>++</operator><name>newIndex</name></expr>]</index></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>dnodeId2</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, dnode:%d will be added, index:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newDnodeId</name><index>[<expr><name>newIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>newIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator>
        <name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>newDnodeId</name><index>[<expr><operator>++</operator><name>newIndex</name></expr>]</index></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>dnodeId3</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, dnode:%d will be added, index:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newDnodeId</name><index>[<expr><name>newIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>newIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator>
        <name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>oldDnodeId</name><index>[<expr><operator>++</operator><name>oldIndex</name></expr>]</index></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, dnode:%d will be removed, index:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>oldDnodeId</name><index>[<expr><name>oldIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>oldIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator>
        <name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>oldDnodeId</name><index>[<expr><operator>++</operator><name>oldIndex</name></expr>]</index></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, dnode:%d will be removed, index:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>oldDnodeId</name><index>[<expr><name>oldIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>oldIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>.</operator><name>dnodeId2</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name> <operator>&amp;&amp;</operator>
        <name><name>req</name><operator>.</operator><name>dnodeId3</name></name> <operator>!=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>oldDnodeId</name><index>[<expr><operator>++</operator><name>oldIndex</name></expr>]</index></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, dnode:%d will be removed, index:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>oldDnodeId</name><index>[<expr><name>oldIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>oldIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>newDnodeId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNew1</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>newDnodeId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pNew1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pNew1</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_HAS_OFFLINE_DNODE</name></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>newDnodeId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNew2</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>newDnodeId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pNew2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pNew2</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_HAS_OFFLINE_DNODE</name></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>newDnodeId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pNew3</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>newDnodeId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pNew3</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pNew3</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_HAS_OFFLINE_DNODE</name></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>oldDnodeId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pOld1</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>oldDnodeId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pOld1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pOld1</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_HAS_OFFLINE_DNODE</name></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>oldDnodeId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pOld2</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>oldDnodeId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pOld2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pOld2</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_HAS_OFFLINE_DNODE</name></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>oldDnodeId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pOld3</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>oldDnodeId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pOld3</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pOld3</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_HAS_OFFLINE_DNODE</name></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pNew1</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pOld1</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pNew2</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pOld2</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pNew3</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pOld3</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// terrno = TSDB_CODE_MND_VGROUP_UN_CHANGED;</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndRedistributeVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pNew1</name></expr></argument>, <argument><expr><name>pOld1</name></expr></argument>, <argument><expr><name>pNew2</name></expr></argument>, <argument><expr><name>pOld2</name></expr></argument>, <argument><expr><name>pNew3</name></expr></argument>, <argument><expr><name>pOld3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_REPLICA</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to redistribute to dnode %d:%d:%d since %s"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dnodeId1</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dnodeId2</name></name></expr></argument>,
           <argument><expr><name><name>req</name><operator>.</operator><name>dnodeId3</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pNew1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pNew2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pNew3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOld2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOld3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckDnodeMemory</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pOldDb</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pNewDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pOldVgroup</name></decl></parameter>,
                                   <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pNewVgroup</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>       <name>inVgroup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pOldVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgId</name> <init>= <expr><operator>&amp;</operator><name><name>pOldVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>pVgId</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>-=</operator> <call><name>mndGetVgroupMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOldDb</name></expr></argument>, <argument><expr><name>pOldVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>inVgroup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pNewVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pVgId</name> <init>= <expr><operator>&amp;</operator><name><name>pNewVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>pVgId</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>+=</operator> <call><name>mndGetVgroupMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><name>pNewVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>inVgroup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name> <operator>-</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, no enough memory in dnode:%d, avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pNewVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>,
             <argument><expr><name><name>pNewVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_ENOUGH_MEM_IN_DNODE</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>inVgroup</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, memory in dnode:%d, avail:%"</literal> <name>PRId64</name> <literal type="string">" used:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pNewVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pNewVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
            <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndBuildAlterVgroupAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pOldDb</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pNewDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>,
                                  <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgObj</name></type> <name>newVgroup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name> <operator>==</operator> <name><name>pNewDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replications</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfigAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndCheckDnodeMemory</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOldDb</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndTransSetSerial</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>newVgroup</name><operator>.</operator><name>replica</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pNewDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replications</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, will add 2 vnodes, vn:0 dnode:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
          <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndAddVnodeToVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name><name>newVgroup</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddCreateVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newVgroup</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndAddVnodeToVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name><name>newVgroup</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name><name>newVgroup</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddCreateVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newVgroup</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>newVgroup</name><operator>.</operator><name>replica</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>pNewDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>replications</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, vgId:%d, will remove 2 vnodes, vn:0 dnode:%d vn:1 dnode:%d vn:2 dnode:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>,
          <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SVnodeGid</name></type> <name>del1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVnodeGid</name></type> <name>del2</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndRemoveVnodeFromVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddDropVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name><name>newVgroup</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name><name>newVgroup</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndRemoveVnodeFromVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddDropVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>, <argument><expr><name><name>newVgroup</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pNewDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pVgRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVgRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pVgRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAddAdjustVnodeHashRangeAction</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSplitVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>mndBuildDnodesArray</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pTrans</name> <operator>=</operator> <call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_GLOBAL</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"split-vgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mndTransSetSerial</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to split vgroup, vgId:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgObj</name></type> <name>newVg1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info before split, replica:%d hashBegin:%u hashEnd:%u"</literal></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>replica</name></name></expr></argument>,
        <argument><expr><name><name>newVg1</name><operator>.</operator><name>hashBegin</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>hashEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg1</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>newVg1</name><operator>.</operator><name>replica</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddVnodeToVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddCreateVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>newVg1</name><operator>.</operator><name>replica</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeGid</name></type> <name>del1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndRemoveVnodeFromVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddDropVnodeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeReplicaAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeConfirmAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info after adjust replica, replica:%d hashBegin:%u hashEnd:%u vnode:0 dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vgId</name></name></expr></argument>,
        <argument><expr><name><name>newVg1</name><operator>.</operator><name>replica</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>hashBegin</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>hashEnd</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg1</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SVgObj</name></type> <name>newVg2</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newVg1</name><operator>.</operator><name>replica</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newVg1</name><operator>.</operator><name>hashEnd</name></name> <operator>=</operator> <name><name>newVg1</name><operator>.</operator><name>hashBegin</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>newVg1</name><operator>.</operator><name>hashEnd</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>newVg2</name><operator>.</operator><name>replica</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newVg2</name><operator>.</operator><name>hashBegin</name></name> <operator>=</operator> <name><name>newVg1</name><operator>.</operator><name>hashEnd</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newVg2</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newVg2</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newVg2</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeGid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info after adjust hash, replica:%d hashBegin:%u hashEnd:%u vnode:0 dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vgId</name></name></expr></argument>,
        <argument><expr><name><name>newVg1</name><operator>.</operator><name>replica</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>hashBegin</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>hashEnd</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info after adjust hash, replica:%d hashBegin:%u hashEnd:%u vnode:0 dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>vgId</name></name></expr></argument>,
        <argument><expr><name><name>newVg2</name><operator>.</operator><name>replica</name></name></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>hashBegin</name></name></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>hashEnd</name></name></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeHashRangeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndAddAlterVnodeHashRangeAction</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  <comment type="line">// adjust vgroup replica</comment>
  if (pDb-&gt;cfg.replications != newVg1.replica) {
    if (mndBuildAlterVgroupAction(pMnode, pTrans, pDb, pDb, &amp;newVg1, pArray) != 0) goto _OVER;
  }
  if (pDb-&gt;cfg.replications != newVg2.replica) {
    if (mndBuildAlterVgroupAction(pMnode, pTrans, pDb, pDb, &amp;newVg2, pArray) != 0) goto _OVER;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info after adjust hash, replica:%d hashBegin:%u hashEnd:%u vnode:0 dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vgId</name></name></expr></argument>,
        <argument><expr><name><name>newVg1</name><operator>.</operator><name>replica</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>hashBegin</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>hashEnd</name></name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg1</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg1</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info after adjust hash, replica:%d hashBegin:%u hashEnd:%u vnode:0 dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>vgId</name></name></expr></argument>,
        <argument><expr><name><name>newVg2</name><operator>.</operator><name>replica</name></name></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>hashBegin</name></name></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>hashEnd</name></name></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>vnodeGid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg1</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg2</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessSplitVgroupMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vgId</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to split"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_SPLIT_VGROUP</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pVgroup</name> <operator>=</operator> <call><name>mndAcquireVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgroup</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndSplitVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndReleaseVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetBalanceVgroupInfoToTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>,
                                              <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgObj</name></type> <name>newVg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info before balance, replica:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>mndAddIncVgroupReplicaToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndAddDecVgroupReplicaFromTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndVgroupActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newVg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vgroup info after balance, replica:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>replica</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newVg</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode:%d dnode:%d"</literal></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newVg</name><operator>.</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndBalanceVgroupBetweenDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDst</name></decl></parameter>,
                                            <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pBalancedVgroups</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pBalancedVgroups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>existInSrc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>existInDst</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pGid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pGid</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>==</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>existInSrc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pGid</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>==</operator> <name><name>pDst</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>existInDst</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>existInSrc</name> <operator>||</operator> <name>existInDst</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndSetBalanceVgroupInfoToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>pDst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashPut</name><argument_list>(<argument><expr><name>pBalancedVgroups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></while>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndBalanceVgroup</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfVgroups</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name>   <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pBalancedVgroups</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pBalancedVgroups</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBalancedVgroups</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pTrans</name> <operator>=</operator> <call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_GLOBAL</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"balance-vgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mndTransSetSerial</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to balance vgroup"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>(</operator><name>__compar_fn_t</name><operator>)</operator><name>mndCompareDnodeVnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, equivalent vnodes:%d support:%d, score:%f"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name></expr></argument>,
            <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>pDnode</name><operator>-&gt;</operator><name>numOfVnodes</name></name> <operator>/</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>srcScore</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>pSrc</name><operator>-&gt;</operator><name>numOfVnodes</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>dstScore</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>pDst</name><operator>-&gt;</operator><name>numOfVnodes</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>pDst</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, after balance, src dnode:%d score:%f, dst dnode:%d score:%f"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>srcScore</name></expr></argument>,
          <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>dstScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>srcScore</name> <operator>&gt;</operator> <name>dstScore</name> <operator>-</operator> <literal type="number">0.000001</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndBalanceVgroupBetweenDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pBalancedVgroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pSrc</name><operator>-&gt;</operator><name>numOfVnodes</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfVnodes</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>numOfVgroups</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, no vgroup need to balance from dnode:%d to dnode:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, no vgroup need to balance any more"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>numOfVgroups</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"no need to balance vgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"start to balance vgroup, numOfVgroups:%d"</literal></expr></argument>, <argument><expr><name>numOfVgroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pBalancedVgroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessBalanceVgroupMsg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>curMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBalanceVgroupReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSBalanceVgroupReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"start to balance vgroup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_BALANCE_VGROUP</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_HAS_OFFLINE_DNODE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to balance vgroup since %s, dnode:%d"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>mndBuildDnodesArray</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"no need to balance vgroup since dnode num less than 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndBalanceVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to balance vgroup since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mndVgroupInDb</name><parameter_list>(<parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dbUid</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>isTsma</name></name> <operator>&amp;&amp;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>==</operator> <name>dbUid</name></expr>;</return> </block_content>}</block></function>
</unit>
