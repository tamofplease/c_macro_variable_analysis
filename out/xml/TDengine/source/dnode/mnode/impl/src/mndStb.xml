<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndStb.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndStb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndInfoSchema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndMnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPerfSchema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndScheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTopic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndUser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndVgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VER_NUMBER</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_RESERVE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndStbActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndStbActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndStbActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndStbActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessTtlTimer</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessCreateStbReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessAlterStbReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessDropStbReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessTableMetaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndRetrieveStb</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>mndCancelGetNextStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessTableCfgReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndAlterStbImp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>needRsp</name></decl></parameter>,
                               <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alterOriData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>alterOriDataLen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndCheckColAndTagModifiable</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbname</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbTable</name></type> <name>table</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>sdbType</name> <operator>=</operator> <name>SDB_STB</name></expr>,
      <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>SDB_KEY_BINARY</name></expr>,
      <expr><operator>.</operator><name>encodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbEncodeFp</name><operator>)</operator><name>mndStbActionEncode</name></expr>,
      <expr><operator>.</operator><name>decodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbDecodeFp</name><operator>)</operator><name>mndStbActionDecode</name></expr>,
      <expr><operator>.</operator><name>insertFp</name> <operator>=</operator> <operator>(</operator><name>SdbInsertFp</name><operator>)</operator><name>mndStbActionInsert</name></expr>,
      <expr><operator>.</operator><name>updateFp</name> <operator>=</operator> <operator>(</operator><name>SdbUpdateFp</name><operator>)</operator><name>mndStbActionUpdate</name></expr>,
      <expr><operator>.</operator><name>deleteFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeleteFp</name><operator>)</operator><name>mndStbActionDelete</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_STB</name></expr></argument>, <argument><expr><name>mndProcessCreateStbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_ALTER_STB</name></expr></argument>, <argument><expr><name>mndProcessAlterStbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_STB</name></expr></argument>, <argument><expr><name>mndProcessDropStbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_CREATE_STB_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_STB_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_VND_DROP_STB_RSP</name></expr></argument>, <argument><expr><name>mndTransProcessRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TABLE_META</name></expr></argument>, <argument><expr><name>mndProcessTableMetaReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TTL_TIMER</name></expr></argument>, <argument><expr><name>mndProcessTtlTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TABLE_CFG</name></expr></argument>, <argument><expr><name>mndProcessTableCfgReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_STB</name></expr></argument>, <argument><expr><name>mndRetrieveStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_STB</name></expr></argument>, <argument><expr><name>mndCancelGetNextStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>sdbSetTable</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>mndStbActionEncode</name><parameter_list>(<parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStbObj</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pStb</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>+</operator>
                 <name><name>pStb</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>+</operator> <name><name>pStb</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>+</operator> <name>STB_RESERVE_SIZE</name> <operator>+</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>TSDB_FUNC_NAME_LEN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>sdbAllocRaw</name><argument_list>(<argument><expr><name>SDB_STB</name></expr></argument>, <argument><expr><name>STB_VER_NUMBER</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;name</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;db</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;uid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;dbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;tagVer</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;colVer</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;smaVer</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;nextColId</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;maxdelay[<literal type="number">0</literal>]</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;maxdelay[<literal type="number">1</literal>]</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;watermark[<literal type="number">0</literal>]</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;watermark[<literal type="number">1</literal>]</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;ttl</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;numOfColumns</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;numOfTags</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;numOfFuncs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;commentLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;ast1Len</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;ast2Len</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;type</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;flags</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;colId</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;bytes</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;name</argument>, <argument>TSDB_COL_NAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;type</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;flags</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;colId</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;bytes</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;name</argument>, <argument>TSDB_COL_NAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfFuncs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>func</argument>, <argument>TSDB_FUNC_NAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;comment</argument>, <argument>pStb-&gt;commentLen + <literal type="number">1</literal></argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;pAst1</argument>, <argument>pStb-&gt;ast1Len</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;pAst2</argument>, <argument>pStb-&gt;ast2Len</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <macro><name>SDB_SET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>STB_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_DATALEN</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to encode to raw:%p since %s"</literal></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, encode to raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRaw</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndStbActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbGetRawSoftVer</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>!=</operator> <name>STB_VER_NUMBER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>sdbAllocRow</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStbObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pStb</name> <operator>=</operator> <call><name>sdbGetRowObj</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;name</argument>, <argument>TSDB_TABLE_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;db</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;uid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;dbUid</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;tagVer</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;colVer</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;smaVer</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;nextColId</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;maxdelay[<literal type="number">0</literal>]</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;maxdelay[<literal type="number">1</literal>]</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;watermark[<literal type="number">0</literal>]</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;watermark[<literal type="number">1</literal>]</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;ttl</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;numOfColumns</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;numOfTags</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;numOfFuncs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;commentLen</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;ast1Len</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pStb-&gt;ast2Len</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStb</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStb</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>numOfFuncs</name></name></expr></argument>, <argument><expr><name>TSDB_FUNC_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pStb</name><operator>-&gt;</operator><name>pTags</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pStb</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSchema-&gt;type</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSchema-&gt;flags</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSchema-&gt;colId</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSchema-&gt;bytes</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;name</argument>, <argument>TSDB_COL_NAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSchema-&gt;type</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSchema-&gt;flags</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSchema-&gt;colId</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pSchema-&gt;bytes</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pSchema-&gt;name</argument>, <argument>TSDB_COL_NAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfFuncs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>funcName</name><index>[<expr><name>TSDB_FUNC_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>funcName</argument>, <argument>TSDB_FUNC_NAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStb</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>comment</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;comment</argument>, <argument>pStb-&gt;commentLen + <literal type="number">1</literal></argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStb</name><operator>-&gt;</operator><name>pAst1</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>ast1Len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>pAst1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;pAst1</argument>, <argument>pStb-&gt;ast1Len</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStb</name><operator>-&gt;</operator><name>pAst2</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>ast2Len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>pAst2</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pStb-&gt;pAst2</argument>, <argument>pStb-&gt;ast2Len</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>
  <macro><name>SDB_GET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>STB_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to decode from raw:%p since %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pStb</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, decode from raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndFreeStb</name><parameter_list>(<parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pAst1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pAst2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndStbActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, perform insert action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndStbActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, perform delete action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndFreeStb</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndStbActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, perform update action, old row:%p new row:%p"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>&lt;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pColumns</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pColumns</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>=</operator> <name>pColumns</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to perform update action since %s"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>&lt;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pTags</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTags</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <name>pTags</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to perform update action since %s"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&lt;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&amp;&amp;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <name>comment</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to perform update action since %s"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>&lt;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>ast1Len</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pAst1</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pAst1</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pAst1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>pAst1</name></name> <operator>=</operator> <name>pAst1</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to perform update action since %s"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>&lt;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>ast2Len</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pAst2</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pAst2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pAst2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>pAst2</name></name> <operator>=</operator> <name>pAst2</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to perform update action since %s"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>updateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>tagVer</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>tagVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>colVer</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>colVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>smaVer</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>smaVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>nextColId</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>nextColId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pAst1</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pAst1</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>ast1Len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>ast1Len</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pAst2</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pAst2</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>ast2Len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>ast2Len</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SStbObj</name> <modifier>*</modifier></type><name>mndAcquireStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>    <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name> <init>= <expr><call><name>sdbAcquire</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_STB</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>==</operator> <name>TSDB_CODE_SDB_OBJ_NOT_THERE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_STB_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pStb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndReleaseStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SDbObj</name> <modifier>*</modifier></type><name>mndAcquireDbByStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>db</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>schemaExColIdCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>colId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>col_id_t</name> <operator>*</operator><operator>)</operator><name>colId</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SSchema</name> <operator>*</operator><operator>)</operator><name>pSchema</name><operator>)</operator><operator>-&gt;</operator><name>colId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>col_id_t</name> <operator>*</operator><operator>)</operator><name>colId</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SSchema</name> <operator>*</operator><operator>)</operator><name>pSchema</name><operator>)</operator><operator>-&gt;</operator><name>colId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mndBuildVCreateStbReq</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pContLen</name></decl></parameter>,
                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alterOriData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>alterOriDataLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEncoder</name></type>       <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>contLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>          <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>rollup</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pStb</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterOriData</name></name> <operator>=</operator> <name>alterOriData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>alterOriDataLen</name></name> <operator>=</operator> <name>alterOriDataLen</name></expr>;</expr_stmt>
  <comment type="line">// todo</comment>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>colVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>nCols</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>tagVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>pTags</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>rollup</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>maxdelay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>maxdelay</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>watermark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>watermark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>mndConvertRsmaTask</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>qmsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>qmsgLen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pAst1</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
                             <argument><expr><name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>watermark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                             <argument><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>deleteMark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>mndConvertRsmaTask</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>qmsg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>qmsgLen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pAst2</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
                             <argument><expr><name>STREAM_TRIGGER_WINDOW_CLOSE</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>watermark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
                             <argument><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>deleteMark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// get length</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateStbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>contLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>contLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeSVCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pContLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>qmsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>qmsg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pHead</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>qmsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>rsmaParam</name><operator>.</operator><name>qmsg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mndBuildVDropStbReq</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pContLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type>        <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVDropStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgHead</name>    <modifier>*</modifier></type><name>pHead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type>     <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVDropStbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>contLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name>pHead</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>contLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSVDropStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pContLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <return>return <expr><name>pHead</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndCheckCreateStbReq</name><parameter_list>(<parameter><decl><type><name>SMCreateStbReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>igExists</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>igExists</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>&lt;</operator> <name>TSDB_MIN_COLUMNS</name> <operator>||</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>+</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>&gt;</operator> <name>TSDB_MAX_COLUMNS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_INVALID_COLUMNS_NUM</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCreate</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>&gt;</operator> <name>TSDB_MAX_TAGS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>pField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pField</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_INVALID_FIRST_COLUMN</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>pField1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pField1</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>TSDB_DATA_TYPE_MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pField1</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pField1</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>pField1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pField1</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>TSDB_DATA_TYPE_MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pField1</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pField1</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateStbRedoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRedoRaw</name> <init>= <expr><call><name>mndStbActionEncode</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRedoRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRedoRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRedoRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRedoRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_CREATING</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateStbUndoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pUndoRaw</name> <init>= <expr><call><name>mndStbActionEncode</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pUndoRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendUndolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pUndoRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pUndoRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pUndoRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateStbCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndStbActionEncode</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateStbRedoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildVCreateStbReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_CREATE_STB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>acceptableCode</name></name> <operator>=</operator> <name>TSDB_CODE_TDB_STB_ALREADY_EXIST</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>retryCode</name></name> <operator>=</operator> <name>TSDB_CODE_TDB_STB_NOT_EXIST</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetCreateStbUndoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildVDropStbReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_DROP_STB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>acceptableCode</name></name> <operator>=</operator> <name>TSDB_CODE_TDB_STB_NOT_EXIST</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendUndoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSchema</name> <modifier>*</modifier></type><name>mndFindStbColumns</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>colName</name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>pSchema</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndBuildStbFromReq</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pDst</name></decl></parameter>, <parameter><decl><type><name>SMCreateStbReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <name><name>pDst</name><operator>-&gt;</operator><name>createdTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator>
      <ternary><condition><expr><operator>(</operator><name><name>pCreate</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>TD_REQ_FROM_TAOX</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pCreate</name><operator>-&gt;</operator><name>suid</name></name></expr> </then><else>: <expr><call><name>mndGenerateUid</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>tagVer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>colVer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>smaVer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>nextColId</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>delay1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>delay2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>watermark1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>watermark2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfFuncs</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>numOfFuncs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>commentLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>pFuncs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>comment</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pComment</name></name></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>ast1Len</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>ast1Len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pAst1</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>ast1Len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>pAst1</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pAst1</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pAst1</name></name></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>ast1Len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>ast2Len</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>ast2Len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pAst2</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>ast2Len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>pAst2</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pAst2</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pAst2</name></name></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>ast2Len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pDst</name><operator>-&gt;</operator><name>pTags</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pDst</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SField</name>  <modifier>*</modifier></type><name>pField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pDst</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pDst</name><operator>-&gt;</operator><name>nextColId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>nextColId</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pDst</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SField</name>  <modifier>*</modifier></type><name>pField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pDst</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pDst</name><operator>-&gt;</operator><name>nextColId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>nextColId</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCreateStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SMCreateStbReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStbObj</name></type> <name>stbObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_ROLLBACK</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_DB_INSIDE</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"create-stb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to create stb:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndBuildStbFromReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name>pCreate</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndAddStbToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndStbActionDelete</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddStbToTrans</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mndTransSetDbName</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateStbRedoLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateStbUndoLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateStbCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateStbRedoActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetCreateStbUndoActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessTtlTimer</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>           <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>             <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name>           <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>             <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVDropTtlTableReq</name></type> <name>ttlReq</name> <init>= <expr><block>{<expr><operator>.</operator><name>timestamp</name> <operator>=</operator> <macro><name>taosGetTimestampSec</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>reqLen</name> <init>= <expr><call><name>tSerializeSVDropTtlTableReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttlReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>contLen</name> <init>= <expr><name>reqLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"start to process ttl timer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pHead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tSerializeSVDropTtlTableReq</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pHead</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttlReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_VND_DROP_TTL_TABLE</name></expr>, <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pHead</name></expr>, <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>contLen</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SEpSet</name></type>  <name>epSet</name> <init>= <expr><call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgSendReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to send drop ttl table request to vnode since 0x%x"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, send drop ttl table request to vnode, time:%d"</literal></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>ttlReq</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndFindSuperTableTagIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tagName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tag</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><name>tag</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>tagName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>tag</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndFindSuperTableColumnIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>col</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndBuildStbFromAlter</name><parameter_list>(<parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pDst</name></decl></parameter>, <parameter><decl><type><name>SMCreateStbReq</name> <modifier>*</modifier></type><name>createReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStbObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>createReq</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>createReq</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pDst</name><operator>-&gt;</operator><name>pTags</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pDst</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SField</name>  <modifier>*</modifier></type><name>pField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>createReq</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pDst</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>cIndex</name> <init>= <expr><call><name>mndFindSuperTableColumnIndex</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>cIndex</name></expr>]</index></name><operator>.</operator><name>colId</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pDst</name><operator>-&gt;</operator><name>nextColId</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pDst</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SField</name>  <modifier>*</modifier></type><name>pField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>createReq</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pDst</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>cIndex</name> <init>= <expr><call><name>mndFindSuperTableTagIndex</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>cIndex</name></expr>]</index></name><operator>.</operator><name>colId</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pDst</name><operator>-&gt;</operator><name>nextColId</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>tagVer</name></name> <operator>=</operator> <name><name>createReq</name><operator>-&gt;</operator><name>tagVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>colVer</name></name> <operator>=</operator> <name><name>createReq</name><operator>-&gt;</operator><name>colVer</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessCreateStbReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>        <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStbObj</name>       <modifier>*</modifier></type><name>pStb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name>        <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMCreateStbReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>isAlter</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMCreateStbReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to create"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pStb</name> <operator>=</operator> <call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>createReq</name><operator>.</operator><name>igExists</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>createReq</name><operator>.</operator><name>source</name></name> <operator>==</operator> <name>TD_REQ_FROM_APP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, already exist, ignore exist is set"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>createReq</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s, already exist while create, input suid:%"</literal> <name>PRId64</name> <literal type="string">" not match with exist suid:%"</literal> <name>PRId64</name></expr></argument>,
               <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_STABLE_UID_NOT_MATCH</name></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>createReq</name><operator>.</operator><name>tagVer</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>createReq</name><operator>.</operator><name>colVer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>tagDelta</name> <init>= <expr><name><name>createReq</name><operator>.</operator><name>tagVer</name></name> <operator>-</operator> <name><name>pStb</name><operator>-&gt;</operator><name>tagVer</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>colDelta</name> <init>= <expr><name><name>createReq</name><operator>.</operator><name>colVer</name></name> <operator>-</operator> <name><name>pStb</name><operator>-&gt;</operator><name>colVer</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>verDelta</name> <init>= <expr><name>tagDelta</name> <operator>+</operator> <name>colDelta</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, already exist while create, input tagVer:%d colVer:%d, exist tagVer:%d colVer:%d"</literal></expr></argument>,
              <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>tagVer</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>colVer</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>tagVer</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>colVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tagDelta</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>colDelta</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, schema version is not incremented and nothing needs to be done"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <goto>goto <name>_OVER</name>;</goto>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tagDelta</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>colDelta</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>verDelta</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>isAlter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, schema version is only increased by 1 number, do alter operation"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s, schema version increase more than 1 number, error is returned"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_SCHEMA_VER</name></expr>;</expr_stmt>
          <goto>goto <name>_OVER</name>;</goto>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s, already exist while create, input tagVer:%d colVer:%d is invalid, origin tagVer:%d colVer:%d"</literal></expr></argument>,
               <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>tagVer</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>colVer</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>tagVer</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>colVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_SCHEMA_VER</name></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_STB_ALREADY_EXIST</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_MND_STB_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>createReq</name><operator>.</operator><name>source</name></name> <operator>==</operator> <name>TD_REQ_FROM_TAOX</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>createReq</name><operator>.</operator><name>tagVer</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>createReq</name><operator>.</operator><name>colVer</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, alter table does not need to be done, because table is deleted"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDbByStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_NOT_SELECTED</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_WRITE_DB</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfStbs</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndGetNumOfStbs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfStbs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfStables</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>numOfStbs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_SINGLE_STB_MODE_DB</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>grantCheck</name><argument_list>(<argument><expr><name>TSDB_GRANT_STABLE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>isAlter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>    <name>needRsp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SStbObj</name></type> <name>pDst</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndBuildStbFromAlter</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDst</name><operator>.</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDst</name><operator>.</operator><name>pColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndAlterStbImp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDst</name></expr></argument>, <argument><expr><name>needRsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDst</name><operator>.</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pDst</name><operator>.</operator><name>pColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndCreateStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckAlterStbReq</name><parameter_list>(<parameter><decl><type><name>SMAlterStbReq</name> <modifier>*</modifier></type><name>pAlter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pAlter</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pAlter</name><operator>-&gt;</operator><name>ttl</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pAlter</name><operator>-&gt;</operator><name>numOfFields</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pAlter</name><operator>-&gt;</operator><name>numOfFields</name></name> <operator>!=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pAlter</name><operator>-&gt;</operator><name>numOfFields</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>pField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pField</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAllocStbSchemas</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pNew</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pOld</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pOld</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndUpdateStbCommentAndTTL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pComment</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>commentLen</name></decl></parameter>,
                                         <parameter><decl><type><name>int32_t</name></type> <name>ttl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>commentLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <name>commentLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>comment</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>commentLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pNew</name><operator>-&gt;</operator><name>comment</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>, <argument><expr><name>pComment</name></expr></argument>, <argument><expr><name>commentLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>commentLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ttl</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndAllocStbSchemas</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAddSuperTableTag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pFields</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ntags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>+</operator> <name>ntags</name> <operator>&gt;</operator> <name>TSDB_MAX_TAGS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOO_MANY_TAGS</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name>ntags</name> <operator>+</operator> <name><name>pOld</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>&gt;</operator> <name>TSDB_MAX_COLUMNS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOO_MANY_COLUMNS</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>+</operator> <name>ntags</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndAllocStbSchemas</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>pField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pFields</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndFindSuperTableColumnIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_COLUMN_ALREADY_EXIST</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndFindSuperTableTagIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TAG_ALREADY_EXIST</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>nextColId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nextColId</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to add tag %s"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>tagVer</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckAlterColForTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbFullName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_TOPIC</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"topic:%s, check tag and column modifiable, stb:%s suid:%"</literal> <name>PRId64</name> <literal type="string">" colId:%d, subType:%d sql:%s"</literal></expr></argument>,
          <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>colId</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>subType</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>subType</name></name> <operator>!=</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pAst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pNodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>nodesCollectColumns</name><argument_list>(<argument><expr><operator>(</operator><name>SSelectStmt</name> <operator>*</operator><operator>)</operator><name>pAst</name></expr></argument>, <argument><expr><name>SQL_CLAUSE_FROM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COLLECT_COL_TYPE_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pNodeList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"topic:%s, check colId:%d tableId:%"</literal> <name>PRId64</name> <literal type="string">" ctbStbUid:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>,
            <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ctbStbUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>tableId</name></name> <operator>!=</operator> <name>suid</name> <operator>&amp;&amp;</operator> <name><name>pTopic</name><operator>-&gt;</operator><name>ctbStbUid</name></name> <operator>!=</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"topic:%s, check colId:%d passed"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>NEXT</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>colId</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_FIELD_CONFLICT_WITH_TOPIC</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"topic:%s, check colId:%d conflicted"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"topic:%s, check colId:%d passed"</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

  <label><name>NEXT</name>:</label>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckAlterColForStream</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbFullName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamObj</name> <modifier>*</modifier></type><name>pStream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_STREAM</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pAst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pNodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>nodesCollectColumns</name><argument_list>(<argument><expr><operator>(</operator><name>SSelectStmt</name> <operator>*</operator><operator>)</operator><name>pAst</name></expr></argument>, <argument><expr><name>SQL_CLAUSE_FROM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COLLECT_COL_TYPE_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pNodeList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>tableId</name></name> <operator>!=</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stream:%s, check colId:%d passed"</literal></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>NEXT</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>colId</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_STREAM_MUST_BE_DELETED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stream:%s, check colId:%d conflicted"</literal></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stream:%s, check colId:%d passed"</literal></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

  <label><name>NEXT</name>:</label>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckAlterColForTSma</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbFullName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmaObj</name> <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_SMA</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"tsma:%s, check tag and column modifiable, stb:%s suid:%"</literal> <name>PRId64</name> <literal type="string">" colId:%d, sql:%s"</literal></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>,
          <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>colId</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pAst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_CONTENT</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"tsma:%s, check tag and column modifiable, stb:%s suid:%"</literal> <name>PRId64</name> <literal type="string">" colId:%d failed since parse AST err"</literal></expr></argument>,
             <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pNodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>nodesCollectColumns</name><argument_list>(<argument><expr><operator>(</operator><name>SSelectStmt</name> <operator>*</operator><operator>)</operator><name>pAst</name></expr></argument>, <argument><expr><name>SQL_CLAUSE_FROM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COLLECT_COL_TYPE_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pNodeList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"tsma:%s, check colId:%d tableId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>tableId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pCol</name><operator>-&gt;</operator><name>tableId</name></name> <operator>!=</operator> <name>suid</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pSma</name><operator>-&gt;</operator><name>stbUid</name></name> <operator>!=</operator> <name>suid</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"tsma:%s, check colId:%d passed"</literal></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>NEXT</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>colId</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_FIELD_CONFLICT_WITH_TSMA</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"tsma:%s, check colId:%d conflicted"</literal></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"tsma:%s, check colId:%d passed"</literal></expr></argument>, <argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

  <label><name>NEXT</name>:</label>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndCheckColAndTagModifiable</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbFullName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckAlterColForTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckAlterColForStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckAlterColForTSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDropSuperTableTag</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tagName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tag</name> <init>= <expr><call><name>mndFindSuperTableTagIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TAG_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>col_id_t</name></type> <name>colId</name> <init>= <expr><name><name>pOld</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>colId</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckColAndTagModifiable</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndAllocStbSchemas</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name> <operator>+</operator> <name>tag</name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name> <operator>+</operator> <name>tag</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pNew</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>-</operator> <name>tag</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfTags</name></name><operator>--</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>tagVer</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to drop tag %s"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAlterStbTagName</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pFields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pFields</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>pField0</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pFields</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>pField1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pFields</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldTagName</name> <init>= <expr><name><name>pField0</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newTagName</name> <init>= <expr><name><name>pField1</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tag</name> <init>= <expr><call><name>mndFindSuperTableTagIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>oldTagName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TAG_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>col_id_t</name></type> <name>colId</name> <init>= <expr><name><name>pOld</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>colId</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckColAndTagModifiable</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndFindSuperTableTagIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>newTagName</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TAG_ALREADY_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndFindSuperTableColumnIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>newTagName</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_COLUMN_ALREADY_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndAllocStbSchemas</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>(</operator><name>SSchema</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name> <operator>+</operator> <name>tag</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>newTagName</name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>tagVer</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to modify tag %s to %s"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>oldTagName</name></expr></argument>, <argument><expr><name>newTagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAlterStbTagBytes</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SField</name> <modifier>*</modifier></type><name>pField</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tag</name> <init>= <expr><call><name>mndFindSuperTableTagIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TAG_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>col_id_t</name></type> <name>colId</name> <init>= <expr><name><name>pOld</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>colId</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckColAndTagModifiable</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndAllocStbSchemas</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pTag</name> <init>= <expr><name><name>pNew</name><operator>-&gt;</operator><name>pTags</name></name> <operator>+</operator> <name>tag</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pTag</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name><name>pTag</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;=</operator> <name><name>pTag</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_ROW_BYTES</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTag</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>tagVer</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to modify tag len %s to %d"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAddSuperTableColumn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pFields</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ncols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name>ncols</name> <operator>+</operator> <name><name>pOld</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>&gt;</operator> <name>TSDB_MAX_COLUMNS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOO_MANY_COLUMNS</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name>ncols</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndAllocStbSchemas</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>pField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pFields</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndFindSuperTableColumnIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_COLUMN_ALREADY_EXIST</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mndFindSuperTableTagIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TAG_ALREADY_EXIST</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>nextColId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nextColId</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to add column %s"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>colVer</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDropSuperTableColumn</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><call><name>mndFindSuperTableColumnIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_COLUMN_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_ALTER_OPTION</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOld</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_ALTER_OPTION</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>col_id_t</name></type> <name>colId</name> <init>= <expr><name><name>pOld</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>colId</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckColAndTagModifiable</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndAllocStbSchemas</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>+</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pNew</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>-</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>numOfColumns</name></name><operator>--</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>colVer</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to drop col %s"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAlterStbColumnBytes</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SField</name> <modifier>*</modifier></type><name>pField</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><call><name>mndFindSuperTableColumnIndex</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_COLUMN_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>nLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pOld</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>nLen</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>pOld</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name> <operator>==</operator> <name>col</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr> </then><else>: <expr><name><name>pOld</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>nLen</name> <operator>&gt;</operator> <name>TSDB_MAX_BYTES_PER_ROW</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_ROW_BYTES</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>col_id_t</name></type> <name>colId</name> <init>= <expr><name><name>pOld</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>colId</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckColAndTagModifiable</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndAllocStbSchemas</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><name><name>pNew</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name><name>pCol</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_STB_OPTION</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_ROW_BYTES</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>colVer</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to modify col len %s to %d"</literal></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pField</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetAlterStbRedoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRedoRaw</name> <init>= <expr><call><name>mndStbActionEncode</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRedoRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRedoRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRedoRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRedoRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetAlterStbCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndStbActionEncode</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetAlterStbRedoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alterOriData</name></decl></parameter>,
                                         <parameter><decl><type><name>int32_t</name></type> <name>alterOriDataLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildVCreateStbReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>, <argument><expr><name>alterOriData</name></expr></argument>, <argument><expr><name>alterOriDataLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_ALTER_STB</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndBuildStbSchemaImp</name><parameter_list>(<parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalCols</name> <init>= <expr><name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>totalCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name>TSDB_SUPER_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>colVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tversion</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>tagVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tuid</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSrcSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pSrcSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSrcSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pSrcSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndBuildStbCfgImp</name><parameter_list>(<parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>STableCfgRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalCols</name> <init>= <expr><name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>totalCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name>TSDB_SUPER_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>delay1</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>delay2</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>watermark1</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>watermark2</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>commentLen</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pComment</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSrcSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>pColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pSrcSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSrcSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pSrcSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pSrcSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>numOfFuncs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pFuncs</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndBuildStbSchema</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>,
                                 <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>smaVer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbFName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_NOT_SELECTED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name> <init>= <expr><call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>smaVer</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>smaVer</name> <operator>=</operator> <name><name>pStb</name><operator>-&gt;</operator><name>smaVer</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndBuildStbSchemaImp</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndBuildStbCfg</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>STableCfgRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbFName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_NOT_SELECTED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name> <init>= <expr><call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndBuildStbCfgImp</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndBuildSMAlterStbRsp</name><parameter_list>(<parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCont</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type>      <name>ec</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMAlterStbRsp</name></type> <name>alterRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>         <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>alterRsp</name><operator>.</operator><name>pMeta</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>alterRsp</name><operator>.</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mndBuildStbSchemaImp</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>alterRsp</name><operator>.</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tFreeSMAlterStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alterRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSMAlterStbRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterRsp</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tFreeSMAlterStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alterRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSMAlterStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSMAlterStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alterRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCont</name> <operator>=</operator> <name>cont</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndBuildSMCreateStbRsp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbFName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stbFName</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCont</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDb</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>stbFName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObj</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SEncoder</name></type>       <name>ec</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>       <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMCreateStbRsp</name></type> <name>stbRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>          <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>stbRsp</name><operator>.</operator><name>pMeta</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>stbRsp</name><operator>.</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mndBuildStbSchemaImp</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>stbRsp</name><operator>.</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tFreeSMCreateStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSMCreateStbRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbRsp</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tFreeSMCreateStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSMCreateStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSMCreateStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCont</name> <operator>=</operator> <name>cont</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pLen</name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pDb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAlterStbImp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>needRsp</name></decl></parameter>,
                              <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alterOriData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>alterOriDataLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_DB_INSIDE</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"alter-stb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to alter stb:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransSetDbName</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>needRsp</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pCont</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndBuildSMAlterStbRsp</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mndTransSetRpcRsp</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndSetAlterStbRedoLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetAlterStbCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetAlterStbRedoActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><name>alterOriData</name></expr></argument>, <argument><expr><name>alterOriDataLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAlterStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMAlterStbReq</name> <modifier>*</modifier></type><name>pAlter</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>needRsp</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>pField0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStbObj</name></type> <name>stbObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStbObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>pColumns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>pTags</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stbObj</name><operator>.</operator><name>lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pAlter</name><operator>-&gt;</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_TAG</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndAddSuperTableTag</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>numOfFields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_TAG</name></expr>:</case>
      <expr_stmt><expr><name>pField0</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndDropSuperTableTag</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name><name>pField0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_NAME</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndAlterStbTagName</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_BYTES</name></expr>:</case>
      <expr_stmt><expr><name>pField0</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndAlterStbTagBytes</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name>pField0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_COLUMN</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndAddSuperTableColumn</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>numOfFields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_COLUMN</name></expr>:</case>
      <expr_stmt><expr><name>pField0</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndDropSuperTableColumn</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name><name>pField0</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name></expr>:</case>
      <expr_stmt><expr><name>pField0</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>pFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndAlterStbColumnBytes</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name>pField0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_OPTIONS</name></expr>:</case>
      <expr_stmt><expr><name>needRsp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndUpdateStbCommentAndTTL</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>, <argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>commentLen</name></name></expr></argument>, <argument><expr><name><name>pAlter</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>needRsp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OPS_NOT_SUPPORT</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndAlterStbImp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbObj</name></expr></argument>, <argument><expr><name>needRsp</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>stbObj</name><operator>.</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>stbObj</name><operator>.</operator><name>pColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pAlter</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>stbObj</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessAlterStbReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>       <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name>       <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStbObj</name>      <modifier>*</modifier></type><name>pStb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMAlterStbReq</name></type> <name>alterReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMAlterStbReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to alter"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckAlterStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDbByStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_DB</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pStb</name> <operator>=</operator> <call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_STB_NOT_EXIST</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_WRITE_DB</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndAlterStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to alter since %s"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMAltertbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropStbRedoLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRedoRaw</name> <init>= <expr><call><name>mndStbActionEncode</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRedoRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRedoRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRedoRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRedoRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPING</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropStbCommitLogs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndStbActionEncode</name><argument_list>(<argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndSetDropStbRedoActions</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>mndBuildVDropStbReq</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STransAction</name></type> <name>action</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_DROP_STB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>action</name><operator>.</operator><name>acceptableCode</name></name> <operator>=</operator> <name>TSDB_CODE_TDB_STB_NOT_EXIST</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedoAction</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDropStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_DB_INSIDE</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"drop-stb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to drop stb:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndTransSetDbName</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndSetDropStbRedoLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetDropStbCommitLogs</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndSetDropStbRedoActions</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndDropSmasByStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckDropStbForTopic</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbFullName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_TOPIC</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>stbUid</name></name> <operator>==</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>subType</name></name> <operator>!=</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pAst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pNodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>nodesCollectColumns</name><argument_list>(<argument><expr><operator>(</operator><name>SSelectStmt</name> <operator>*</operator><operator>)</operator><name>pAst</name></expr></argument>, <argument><expr><name>SQL_CLAUSE_FROM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COLLECT_COL_TYPE_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pNodeList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>tableId</name></name> <operator>==</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <goto>goto <name>NEXT</name>;</goto>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
  <label><name>NEXT</name>:</label>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckDropStbForStream</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbFullName</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamObj</name> <modifier>*</modifier></type><name>pStream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_STREAM</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>smaId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>targetStbUid</name></name> <operator>==</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pAst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>ast</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNodeList</name> <modifier>*</modifier></type><name>pNodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>nodesCollectColumns</name><argument_list>(<argument><expr><operator>(</operator><name>SSelectStmt</name> <operator>*</operator><operator>)</operator><name>pAst</name></expr></argument>, <argument><expr><name>SQL_CLAUSE_FROM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COLLECT_COL_TYPE_ALL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <macro><name>FOREACH</name><argument_list>(<argument>pNode</argument>, <argument>pNodeList</argument>)</argument_list></macro> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnNode</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>(</operator><name>SColumnNode</name> <operator>*</operator><operator>)</operator><name>pNode</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>tableId</name></name> <operator>==</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <goto>goto <name>NEXT</name>;</goto>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
  <label><name>NEXT</name>:</label>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nodesDestroyList</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessDropStbReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>      <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name>      <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStbObj</name>     <modifier>*</modifier></type><name>pStb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMDropStbReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMDropStbReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, start to drop"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pStb</name> <operator>=</operator> <call><name>mndAcquireStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>dropReq</name><operator>.</operator><name>igNotExists</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s, not exist, ignore not exist is set"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_STB_NOT_EXIST</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dropReq</name><operator>.</operator><name>source</name></name> <operator>==</operator> <name>TD_REQ_FROM_TAOX</name> <operator>&amp;&amp;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>dropReq</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDbByStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_NOT_SELECTED</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckDbPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_WRITE_DB</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckDropStbForTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOPIC_MUST_BE_DELETED</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckDropStbForStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_STREAM_MUST_BE_DELETED</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndDropStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseStb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessTableMetaReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>       <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableInfoReq</name></type> <name>infoReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMetaRsp</name></type> <name>metaRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><call><name>mndAcquireUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pUser</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>sysinfo</name> <init>= <expr><name><name>pUser</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSTableInfoReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"information_schema table:%s.%s, start to retrieve meta"</literal></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndBuildInsTableSchema</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>sysinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"performance_schema table:%s.%s, start to retrieve meta"</literal></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndBuildPerfsTableSchema</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s.%s, start to retrieve meta"</literal></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndBuildStbSchema</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspLen</name> <init>= <expr><call><name>tSerializeSTableMetaRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rspLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSTableMetaRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>rspLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"%s.%s, meta is retrieved"</literal></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s.%s, failed to retrieve meta since %s"</literal></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSTableMetaRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessTableCfgReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>      <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableCfgReq</name></type> <name>cfgReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableCfgRsp</name></type> <name>cfgRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSTableCfgReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"information_schema table:%s.%s, start to retrieve cfg"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndBuildInsTableCfg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"performance_schema table:%s.%s, start to retrieve cfg"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndBuildPerfsTableCfg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s.%s, start to retrieve cfg"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndBuildStbCfg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspLen</name> <init>= <expr><call><name>tSerializeSTableCfgRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rspLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSTableCfgRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>rspLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"%s.%s, cfg is retrieved"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"stb:%s.%s, failed to retrieve cfg since %s"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tFreeSTableCfgRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfgRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndValidateStbInfo</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SSTableVersion</name> <modifier>*</modifier></type><name>pStbVersions</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfStbs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRsp</name></decl></parameter>,
                           <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pRspLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSTbHbRsp</name></type> <name>hbRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hbRsp</name><operator>.</operator><name>pMetaRsp</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfStbs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>hbRsp</name><operator>.</operator><name>pMetaRsp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hbRsp</name><operator>.</operator><name>pIndexRsp</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfStbs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndexRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>hbRsp</name><operator>.</operator><name>pIndexRsp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>hbRsp</name><operator>.</operator><name>pMetaRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfStbs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSTableVersion</name> <modifier>*</modifier></type><name>pStbVersion</name> <init>= <expr><operator>&amp;</operator><name><name>pStbVersions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>be64toh</name><argument_list>(<argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>tversion</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>tversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>smaVer</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>smaVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STableMetaRsp</name></type> <name>metaRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>smaVer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"stb:%s.%s, start to retrieve meta"</literal></expr></argument>, <argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndBuildStbSchema</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smaVer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>numOfColumns</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pStbVersion</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>hbRsp</name><operator>.</operator><name>pMetaRsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>sversion</name></name> <operator>!=</operator> <name><name>metaRsp</name><operator>.</operator><name>sversion</name></name> <operator>||</operator> <name><name>pStbVersion</name><operator>-&gt;</operator><name>tversion</name></name> <operator>!=</operator> <name><name>metaRsp</name><operator>.</operator><name>tversion</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>hbRsp</name><operator>.</operator><name>pMetaRsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tFreeSTableMetaRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>smaVer</name></name> <operator>&amp;&amp;</operator> <name><name>pStbVersion</name><operator>-&gt;</operator><name>smaVer</name></name> <operator>!=</operator> <name>smaVer</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type>           <name>exist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>           <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STableIndexRsp</name></type> <name>indexRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>indexRsp</name><operator>.</operator><name>pIndex</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableIndexInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>indexRsp</name><operator>.</operator><name>pIndex</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbFName</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndGetTableSma</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>||</operator> <operator>!</operator><name>exist</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>indexRsp</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pStbVersion</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>indexRsp</name><operator>.</operator><name>version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>indexRsp</name><operator>.</operator><name>pIndex</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>indexRsp</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>indexRsp</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pStbVersion</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>hbRsp</name><operator>.</operator><name>pIndexRsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indexRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspLen</name> <init>= <expr><call><name>tSerializeSSTbHbRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hbRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rspLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tFreeSSTbHbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tFreeSSTbHbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSSTbHbRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSSTbHbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppRsp</name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRspLen</name> <operator>=</operator> <name>rspLen</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndGetNumOfStbs</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pNumOfStbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DB_NOT_SELECTED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfStbs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_STB</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>==</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfStbs</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>pNumOfStbs</name> <operator>=</operator> <name>numOfStbs</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndExtractDbNameFromStbFullName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbFullName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tNameGetFullDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndExtractTbNameFromStbFullName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stbFullName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dstSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>stbFullName</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>pos</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>stbFullName</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <name><name>TS_PATH_DELIMITER</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stbFullName</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dstSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveStb</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>  <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>    <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStbObj</name> <modifier>*</modifier></type><name>pStb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>terrno</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_STB</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pStb</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>!=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>  <name><name>stbName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mndExtractTbNameFromStbFullName</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stbName</name><index>[<expr><name>VARSTR_HEADER_SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>stbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stbName</name><index>[<expr><name>VARSTR_HEADER_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>stbName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>db</name><index>[<expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>createdTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pStb</name><operator>-&gt;</operator><name>updateTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// number of tables</comment>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>TSDB_TB_COMMENT_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pStb</name><operator>-&gt;</operator><name>commentLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>comment</name><index>[<expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>watermark</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>watermark</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">"a,%"</literal> <name>PRId64</name> <literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>watermark</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>watermark</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>watermark</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>maxDelay</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>maxDelay</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">"a,%"</literal> <name>PRId64</name> <literal type="string">"a"</literal></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>maxDelay</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>maxDelay</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>maxDelay</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type>    <name><name>rollup</name><index>[<expr><literal type="number">160</literal> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rollupNum</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">", "</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>sepLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rollupLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>rollup</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rollupNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>funcName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pStb</name><operator>-&gt;</operator><name>pFuncs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>rollup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>rollupLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rollupLen</name> <operator>-=</operator> <name>sepLen</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>rollup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>funcName</name></expr></argument>, <argument><expr><name>rollupLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rollupLen</name> <operator>-=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>rollup</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>rollup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>rollup</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pStb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextStb</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mndGetStbStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>posDb</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>TS_PATH_DELIMITER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>posDb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>posDb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>posDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>src</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>posStb</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>posDb</name></expr></argument>, <argument><expr><name>TS_PATH_DELIMITER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>posStb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>posStb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>posStb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>posDb</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>posStb</name></expr>;</return>
</block_content>}</block></function>
</unit>
