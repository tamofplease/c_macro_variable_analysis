<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndAcct.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndAcct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCT_VER_NUMBER</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCT_RESERVE_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndCreateDefaultAcct</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSdbRaw</name> <modifier>*</modifier></type><name>mndAcctActionEncode</name><parameter_list>(<parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pAcct</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndAcctActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndAcctActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pAcct</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndAcctActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pAcct</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndAcctActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessCreateAcctReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessAlterAcctReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessDropAcctReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitAcct</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbTable</name></type> <name>table</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>sdbType</name> <operator>=</operator> <name>SDB_ACCT</name></expr>,
      <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>SDB_KEY_BINARY</name></expr>,
      <expr><operator>.</operator><name>deployFp</name> <operator>=</operator> <name>mndCreateDefaultAcct</name></expr>,
      <expr><operator>.</operator><name>encodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbEncodeFp</name><operator>)</operator><name>mndAcctActionEncode</name></expr>,
      <expr><operator>.</operator><name>decodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbDecodeFp</name><operator>)</operator><name>mndAcctActionDecode</name></expr>,
      <expr><operator>.</operator><name>insertFp</name> <operator>=</operator> <operator>(</operator><name>SdbInsertFp</name><operator>)</operator><name>mndAcctActionInsert</name></expr>,
      <expr><operator>.</operator><name>updateFp</name> <operator>=</operator> <operator>(</operator><name>SdbUpdateFp</name><operator>)</operator><name>mndAcctActionUpdate</name></expr>,
      <expr><operator>.</operator><name>deleteFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeleteFp</name><operator>)</operator><name>mndAcctActionDelete</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_ACCT</name></expr></argument>, <argument><expr><name>mndProcessCreateAcctReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_ALTER_ACCT</name></expr></argument>, <argument><expr><name>mndProcessAlterAcctReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_ACCT</name></expr></argument>, <argument><expr><name>mndProcessDropAcctReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>sdbSetTable</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupAcct</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCreateDefaultAcct</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAcctObj</name></type> <name>acctObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>acctObj</name><operator>.</operator><name>acct</name></name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>acctObj</name><operator>.</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>acctObj</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <name><name>acctObj</name><operator>.</operator><name>createdTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>acctObj</name><operator>.</operator><name>acctId</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>acctObj</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>acctObj</name><operator>.</operator><name>cfg</name></name> <operator>=</operator> <operator>(</operator><name>SAcctCfg</name><operator>)</operator><block>{
      <expr><operator>.</operator><name>maxUsers</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxDbs</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxStbs</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxTbs</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxTimeSeries</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxStreams</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxFuncs</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxConsumers</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxConns</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxTopics</name> <operator>=</operator> <name>INT32_MAX</name></expr>,
      <expr><operator>.</operator><name>maxStorage</name> <operator>=</operator> <name>INT64_MAX</name></expr>,
      <expr><operator>.</operator><name>accessState</name> <operator>=</operator> <name>TSDB_VN_ALL_ACCCESS</name></expr>,
  }</block></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndAcctActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acctObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"acct:%s, will be created when deploying, raw:%p"</literal></expr></argument>, <argument><expr><name><name>acctObj</name><operator>.</operator><name>acct</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"create-acct"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"acct:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>acctObj</name><operator>.</operator><name>acct</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to create acct:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>acctObj</name><operator>.</operator><name>acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to commit redo log since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRaw</name> <modifier>*</modifier></type><name>mndAcctActionEncode</name><parameter_list>(<parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pAcct</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>sdbAllocRaw</name><argument_list>(<argument><expr><name>SDB_ACCT</name></expr></argument>, <argument><expr><name>ACCT_VER_NUMBER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SAcctObj</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>ACCT_RESERVE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;acct</argument>, <argument>TSDB_USER_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;acctId</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;status</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxUsers</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxDbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxStbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxTbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxTimeSeries</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxStreams</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxFuncs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxConsumers</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxConns</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxTopics</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.maxStorage</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;cfg.accessState</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>ACCT_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_DATALEN</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"acct:%s, failed to encode to raw:%p since %s"</literal></expr></argument>, <argument><expr><name><name>pAcct</name><operator>-&gt;</operator><name>acct</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"acct:%s, encode to raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pAcct</name><operator>-&gt;</operator><name>acct</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pAcct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRaw</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndAcctActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pAcct</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name>  <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbGetRawSoftVer</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>!=</operator> <name>ACCT_VER_NUMBER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>sdbAllocRow</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SAcctObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pAcct</name> <operator>=</operator> <call><name>sdbGetRowObj</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pAcct</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pAcct-&gt;acct</argument>, <argument>TSDB_USER_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;acctId</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;status</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxUsers</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxDbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxStbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxTbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxTimeSeries</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxStreams</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxFuncs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxConsumers</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxConns</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxTopics</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.maxStorage</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pAcct-&gt;cfg.accessState</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>ACCT_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"acct:%s, failed to decode from raw:%p since %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pAcct</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name><name>pAcct</name><operator>-&gt;</operator><name>acct</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"acct:%s, decode from raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pAcct</name><operator>-&gt;</operator><name>acct</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pAcct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAcctActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pAcct</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"acct:%s, perform insert action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pAcct</name><operator>-&gt;</operator><name>acct</name></name></expr></argument>, <argument><expr><name>pAcct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAcctActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pAcct</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"acct:%s, perform delete action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pAcct</name><operator>-&gt;</operator><name>acct</name></name></expr></argument>, <argument><expr><name>pAcct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAcctActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"acct:%s, perform update action, old row:%p new row:%p"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>acct</name></name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>updateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>status</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>cfg</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SAcctCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessCreateAcctReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_CREATE_ACCT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OPS_NOT_SUPPORT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to process create acct request since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessAlterAcctReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_ALTER_ACCT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OPS_NOT_SUPPORT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to process create acct request since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessDropAcctReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_DROP_ACCT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OPS_NOT_SUPPORT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to process create acct request since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function></unit>
