<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndShow.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_STEP_SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>SShowObj</name> <modifier>*</modifier></type><name>mndCreateShowObj</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>mndFreeShowObj</name><parameter_list>(<parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SShowObj</name> <modifier>*</modifier></type><name>mndAcquireShowObj</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>showId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>      <name>mndReleaseShowObj</name><parameter_list>(<parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forceRemove</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>      <name>mndCheckRetrieveFinished</name><parameter_list>(<parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>   <name>mndProcessRetrieveSysTableReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitShow</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>showMgmt</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>taosCacheInit</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>(</operator><name>__cache_free_fn_t</name><operator>)</operator><name>mndFreeShowObj</name></expr></argument>, <argument><expr><literal type="string">"show"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>cache</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to alloc show cache since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_SYSTABLE_RETRIEVE</name></expr></argument>, <argument><expr><name>mndProcessRetrieveSysTableReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupShow</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>showMgmt</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>cache</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCacheCleanup</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>convertToRetrieveType</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_DNODES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_DNODE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_MNODES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_MNODE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_MODULES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_MODULE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_QNODES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_QNODE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_SNODES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_SNODE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_CLUSTER</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_CLUSTER</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_DATABASES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_DB</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_FUNCTIONS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_FUNC</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_INDEXES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_INDEX</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_STABLES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_STB</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TABLES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_TABLE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TAGS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_TAG</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TABLE_DISTRIBUTED</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">//    type = TSDB_MGMT_TABLE_DIST;</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_USERS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_USER</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_LICENCES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_GRANTS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_VGROUPS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_VGROUP</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_PERFS_TABLE_CONSUMERS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_CONSUMERS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_SUBSCRIPTIONS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_SUBSCRIPTIONS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_PERFS_TABLE_TRANS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_TRANS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_PERFS_TABLE_SMAS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_SMAS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_CONFIGS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_CONFIGS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_PERFS_TABLE_CONNECTIONS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_CONNS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_PERFS_TABLE_QUERIES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_QUERIES</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_VNODES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_VNODES</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_TOPICS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_TOPICS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_STREAMS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_STREAMS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_PERFS_TABLE_APPS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_APPS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_STREAM_TASKS</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_STREAM_TASKS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_USER_PRIVILEGES</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_MGMT_TABLE_PRIVILEGES</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">//    ASSERT(0);</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SShowObj</name> <modifier>*</modifier></type><name>mndCreateShowObj</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>showMgmt</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>showId</name> <init>= <expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>showId</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>showId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>showId</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SShowObj</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SShowObj</name></type> <name>showObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>showObj</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>showId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>showObj</name><operator>.</operator><name>pMnode</name></name> <operator>=</operator> <name>pMnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>showObj</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>convertToRetrieveType</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>tb</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>tb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>showObj</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>keepTime</name> <init>= <expr><name>tsShellActivityTimer</name> <operator>*</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name> <init>= <expr><call><name>taosCachePut</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>showId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>showObj</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>keepTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pShow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", failed to put into cache since %s"</literal></expr></argument>, <argument><expr><name>showId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", is created, data:%p"</literal></expr></argument>, <argument><expr><name>showId</name></expr></argument>, <argument><expr><name>pShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pShow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndFreeShowObj</name><parameter_list>(<parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>    <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pShow</name><operator>-&gt;</operator><name>pMnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SShowMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>showMgmt</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>ShowFreeIterFp</name></type> <name>freeFp</name> <init>= <expr><name><name>pMgmt</name><operator>-&gt;</operator><name>freeIterFps</name><index>[<expr><name><name>pShow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>freeFp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call>(<modifier>*</modifier><name>freeFp</name>)<argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", is destroyed, data:%p"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SShowObj</name> <modifier>*</modifier></type><name>mndAcquireShowObj</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>showId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>showMgmt</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name> <init>= <expr><call><name>taosCacheAcquireByKey</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>showId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>showId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pShow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", already destroyed"</literal></expr></argument>, <argument><expr><name>showId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", acquired from cache, data:%p"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pShow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndReleaseShowObj</name><parameter_list>(<parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forceRemove</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pShow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", released from cache, data:%p force:%d"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pShow</name></expr></argument>, <argument><expr><name>forceRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// A bug in tcache.c</comment>
  <expr_stmt><expr><name>forceRemove</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMnode</name>    <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pShow</name><operator>-&gt;</operator><name>pMnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SShowMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>showMgmt</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosCacheRelease</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>pShow</name><operator>)</operator></expr></argument>, <argument><expr><name>forceRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessRetrieveSysTableReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>    <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SShowMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>showMgmt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SShowObj</name>  <modifier>*</modifier></type><name>pShow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>rowsToRead</name> <init>= <expr><name>SHOW_STEP_SIZE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>rowsRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRetrieveTableReq</name></type> <name>retrieveReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSRetrieveTableReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retrieveReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>retrieveReq</name><operator>.</operator><name>showId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>infosMeta</name></name></expr></argument>, <argument><expr><name><name>retrieveReq</name><operator>.</operator><name>tb</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>retrieveReq</name><operator>.</operator><name>tb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pMeta</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pMeta</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>perfsMeta</name></name></expr></argument>, <argument><expr><name><name>retrieveReq</name><operator>.</operator><name>tb</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>retrieveReq</name><operator>.</operator><name>tb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pMeta</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_SYS_TABLENAME</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to process show-retrieve req:%p since %s"</literal></expr></argument>, <argument><expr><name>pShow</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pShow</name> <operator>=</operator> <call><name>mndCreateShowObj</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retrieveReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pShow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to process show-meta req since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pShow</name> <operator>=</operator> <call><name>mndAcquireShowObj</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>retrieveReq</name><operator>.</operator><name>showId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pShow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_SHOWOBJ</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to process show-retrieve req:%p since %s"</literal></expr></argument>, <argument><expr><name>pShow</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>ShowRetrieveFp</name></type> <name>retrieveFp</name> <init>= <expr><name><name>pMgmt</name><operator>-&gt;</operator><name>retrieveFps</name><index>[<expr><name><name>pShow</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>retrieveFp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseShowObj</name><argument_list>(<argument><expr><name>pShow</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MSG_NOT_PROCESSED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", failed to retrieve data since %s"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", start retrieve data, type:%d"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>retrieveReq</name><operator>.</operator><name>user</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>retrieveReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>retrieveReq</name><operator>.</operator><name>db</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>mndCheckShowPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>retrieveReq</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>idata</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>idata</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>idata</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>idata</name><operator>.</operator><name>info</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>rowsToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckRetrieveFinished</name><argument_list>(<argument><expr><name>pShow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", read finished, numOfRows:%d"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rowsRead</name> <operator>=</operator> <call>(<modifier>*</modifier><name>retrieveFp</name>)<argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pShow</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>rowsToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rowsRead</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>rowsRead</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", retrieve completed"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndReleaseShowObj</name><argument_list>(<argument><expr><name>pShow</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>rowsRead</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", stop retrieve data, rowsRead:%d numOfRows:%d"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>rowsRead</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveMetaTableRsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSysTableSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>+</operator>
         <call><name>blockDataGetSize</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>blockDataGetSerialMetaSize</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRetrieveMetaTableRsp</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndReleaseShowObj</name><argument_list>(<argument><expr><name>pShow</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", failed to retrieve data since %s"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rowsRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>pStart</name> <init>= <expr><name><name>pRsp</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>pStart</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>  <comment type="line">// number of columns</comment>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSysTableSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>(</operator><name>SSysTableSchema</name> <operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSysTableSchema</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>blockEncode</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>numOfColumns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>rowsRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>;</expr_stmt>  <comment type="line">// millisecond time precision</comment>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rowsRead</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>rowsRead</name> <operator>&lt;</operator> <name>rowsToRead</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>completed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", retrieve completed"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseShowObj</name><argument_list>(<argument><expr><name>pShow</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"show:0x%"</literal> <name>PRIx64</name> <literal type="string">", retrieve not completed yet"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseShowObj</name><argument_list>(<argument><expr><name>pShow</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mndCheckRetrieveFinished</name><parameter_list>(<parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndAddShowRetrieveHandle</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>EShowType</name></type> <name>showType</name></decl></parameter>, <parameter><decl><type><name>ShowRetrieveFp</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>showMgmt</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>retrieveFps</name><index>[<expr><name>showType</name></expr>]</index></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndAddShowFreeIterHandle</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>EShowType</name></type> <name>showType</name></decl></parameter>, <parameter><decl><type><name>ShowFreeIterFp</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>showMgmt</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>freeIterFps</name><index>[<expr><name>showType</name></expr>]</index></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
