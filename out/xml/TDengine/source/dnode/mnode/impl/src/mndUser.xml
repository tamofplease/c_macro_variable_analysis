<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndUser.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndUser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTopic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tbase64.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_VER_NUMBER</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_RESERVE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndCreateDefaultUsers</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndUserActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndUserActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndUserActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndUserActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndCreateUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>acct</name></decl></parameter>, <parameter><decl><type><name>SCreateUserReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessCreateUserReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessAlterUserReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessDropUserReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessGetUserAuthReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndRetrieveUsers</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>mndCancelGetNextUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndRetrievePrivileges</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>mndCancelGetNextPrivileges</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbTable</name></type> <name>table</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>sdbType</name> <operator>=</operator> <name>SDB_USER</name></expr>,
      <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>SDB_KEY_BINARY</name></expr>,
      <expr><operator>.</operator><name>deployFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeployFp</name><operator>)</operator><name>mndCreateDefaultUsers</name></expr>,
      <expr><operator>.</operator><name>encodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbEncodeFp</name><operator>)</operator><name>mndUserActionEncode</name></expr>,
      <expr><operator>.</operator><name>decodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbDecodeFp</name><operator>)</operator><name>mndUserActionDecode</name></expr>,
      <expr><operator>.</operator><name>insertFp</name> <operator>=</operator> <operator>(</operator><name>SdbInsertFp</name><operator>)</operator><name>mndUserActionInsert</name></expr>,
      <expr><operator>.</operator><name>updateFp</name> <operator>=</operator> <operator>(</operator><name>SdbUpdateFp</name><operator>)</operator><name>mndUserActionUpdate</name></expr>,
      <expr><operator>.</operator><name>deleteFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeleteFp</name><operator>)</operator><name>mndUserActionDelete</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_USER</name></expr></argument>, <argument><expr><name>mndProcessCreateUserReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_ALTER_USER</name></expr></argument>, <argument><expr><name>mndProcessAlterUserReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_USER</name></expr></argument>, <argument><expr><name>mndProcessDropUserReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_GET_USER_AUTH</name></expr></argument>, <argument><expr><name>mndProcessGetUserAuthReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_USER</name></expr></argument>, <argument><expr><name>mndRetrieveUsers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_USER</name></expr></argument>, <argument><expr><name>mndCancelGetNextUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_PRIVILEGES</name></expr></argument>, <argument><expr><name>mndRetrievePrivileges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_PRIVILEGES</name></expr></argument>, <argument><expr><name>mndCancelGetNextPrivileges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sdbSetTable</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCreateDefaultUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>acct</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUserObj</name></type> <name>userObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosEncryptPass_c</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>userObj</name><operator>.</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>userObj</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>userObj</name><operator>.</operator><name>acct</name></name></expr></argument>, <argument><expr><name>acct</name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <name><name>userObj</name><operator>.</operator><name>createdTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>sysInfo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>enable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>superUser</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>mndUserActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>userObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"user:%s, will be created when deploying, raw:%p"</literal></expr></argument>, <argument><expr><name><name>userObj</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"create-user"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>userObj</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to create user:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>userObj</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to commit redo log since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCreateDefaultUsers</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>mndCreateDefaultUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_PASS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>mndUserActionEncode</name><parameter_list>(<parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfReadDbs</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfWriteDbs</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTopics</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUserObj</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>USER_RESERVE_SIZE</name> <operator>+</operator> <operator>(</operator><name>numOfReadDbs</name> <operator>+</operator> <name>numOfWriteDbs</name><operator>)</operator> <operator>*</operator> <name>TSDB_DB_FNAME_LEN</name> <operator>+</operator>
                 <name>numOfTopics</name> <operator>*</operator> <name>TSDB_TOPIC_FNAME_LEN</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>sdbAllocRaw</name><argument_list>(<argument><expr><name>SDB_USER</name></expr></argument>, <argument><expr><name>USER_VER_NUMBER</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;user</argument>, <argument>TSDB_USER_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;pass</argument>, <argument>TSDB_PASSWORD_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;acct</argument>, <argument>TSDB_USER_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;superUser</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;sysInfo</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;enable</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;reserve</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;authVersion</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>numOfReadDbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>numOfWriteDbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>numOfTopics</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>topic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SDB_SET_BINARY</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>topic</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <macro><name>SDB_SET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>USER_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_DATALEN</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to encode to raw:%p since %s"</literal></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"user:%s, encode to raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRaw</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndUserActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name>  <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbGetRawSoftVer</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>sver</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>sdbAllocRow</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUserObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pUser</name> <operator>=</operator> <call><name>sdbGetRowObj</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pUser</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;user</argument>, <argument>TSDB_USER_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;pass</argument>, <argument>TSDB_PASSWORD_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pUser-&gt;acct</argument>, <argument>TSDB_USER_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pUser-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pUser-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pUser-&gt;superUser</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pUser-&gt;sysInfo</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pUser-&gt;enable</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT8</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pUser-&gt;reserve</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pUser-&gt;authVersion</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfReadDbs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfWriteDbs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTopics</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;numOfReadDbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;numOfWriteDbs</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;numOfTopics</argument>, <argument>_OVER</argument>)</argument_list></macro>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>numOfReadDbs</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><name>numOfWriteDbs</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>numOfTopics</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfReadDbs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>db</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>db</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfWriteDbs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>db</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>db</argument>, <argument>TSDB_DB_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTopics</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>topic</name><index>[<expr><name>TSDB_TOPIC_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>topic</argument>, <argument>TSDB_TOPIC_FNAME_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>topic</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>, <argument><expr><name>topic</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <macro><name>SDB_GET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>USER_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <expr_stmt><expr><call><name>taosInitRWLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to decode from raw:%p since %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pUser</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pUser</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"user:%s, decode from raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndUserActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"user:%s, perform insert action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SAcctObj</name> <modifier>*</modifier></type><name>pAcct</name> <init>= <expr><call><name>sdbAcquire</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_ACCT</name></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>acct</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pAcct</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_ACCT_NOT_EXIST</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to perform insert action since %s"</literal></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>acctId</name></name> <operator>=</operator> <name><name>pAcct</name><operator>-&gt;</operator><name>acctId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pAcct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndUserActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"user:%s, perform delete action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndUserActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"user:%s, perform update action, old row:%p new row:%p"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>updateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>authVersion</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>authVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>sysInfo</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>sysInfo</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>enable</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>enable</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>, <argument><expr><name>TSDB_PASSWORD_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOld</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SUserObj</name> <modifier>*</modifier></type><name>mndAcquireUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>     <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><call><name>sdbAcquire</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_USER</name></expr></argument>, <argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pUser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_USER_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pUser</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndReleaseUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCreateUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>acct</name></decl></parameter>, <parameter><decl><type><name>SCreateUserReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUserObj</name></type> <name>userObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosEncryptPass_c</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pCreate</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>userObj</name><operator>.</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>userObj</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>userObj</name><operator>.</operator><name>acct</name></name></expr></argument>, <argument><expr><name>acct</name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <name><name>userObj</name><operator>.</operator><name>createdTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>superUser</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// pCreate-&gt;superUser;</comment>
  <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>sysInfo</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>sysInfo</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>userObj</name><operator>.</operator><name>enable</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>enable</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_ROLLBACK</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"create-user"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to create user:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndUserActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>userObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to commit redo log since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessCreateUserReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>        <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name>      <modifier>*</modifier></type><name>pUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name>      <modifier>*</modifier></type><name>pOperUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCreateUserReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSCreateUserReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"user:%s, start to create"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_CREATE_USER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>createReq</name><operator>.</operator><name>user</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_USER_FORMAT</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>createReq</name><operator>.</operator><name>pass</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_PASS_FORMAT</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pUser</name> <operator>=</operator> <call><name>mndAcquireUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pUser</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_USER_ALREADY_EXIST</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pOperUser</name> <operator>=</operator> <call><name>mndAcquireUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOperUser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_USER_FROM_CONN</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>grantCheck</name><argument_list>(<argument><expr><name>TSDB_GRANT_USER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndCreateUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pOperUser</name><operator>-&gt;</operator><name>acct</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOperUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAlterUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_ROLLBACK</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"alter-user"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to alter since %s"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to alter user:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndUserActionEncode</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to append commit log since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SHashObj</name> <modifier>*</modifier></type><name>mndDupObjHash</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pNew</name> <init>=
      <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SHashObj</name> <modifier>*</modifier></type><name>mndDupDbHash</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mndDupObjHash</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>SHashObj</name> <modifier>*</modifier></type><name>mndDupTopicHash</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mndDupObjHash</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessAlterUserReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>       <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>         <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name>     <modifier>*</modifier></type><name>pUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name>     <modifier>*</modifier></type><name>pOperUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name></type>      <name>newUser</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAlterUserReq</name></type> <name>alterReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSAlterUserReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"user:%s, start to alter"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>user</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_USER_FORMAT</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_ALTER_USER_PASSWD</name> <operator>==</operator> <name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>&amp;&amp;</operator> <name><name>alterReq</name><operator>.</operator><name>pass</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_PASS_FORMAT</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pUser</name> <operator>=</operator> <call><name>mndAcquireUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pUser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_USER_NOT_EXIST</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pOperUser</name> <operator>=</operator> <call><name>mndAcquireUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOperUser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_USER_FROM_CONN</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckAlterUserPrivilege</name><argument_list>(<argument><expr><name>pOperUser</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newUser</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUserObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newUser</name><operator>.</operator><name>authVersion</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newUser</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newUser</name><operator>.</operator><name>readDbs</name></name> <operator>=</operator> <call><name>mndDupDbHash</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newUser</name><operator>.</operator><name>writeDbs</name></name> <operator>=</operator> <call><name>mndDupDbHash</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newUser</name><operator>.</operator><name>topics</name></name> <operator>=</operator> <call><name>mndDupTopicHash</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>newUser</name><operator>.</operator><name>readDbs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>newUser</name><operator>.</operator><name>writeDbs</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>newUser</name><operator>.</operator><name>topics</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_PASSWD</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>pass</name><index>[<expr><name>TSDB_PASSWORD_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosEncryptPass_c</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>alterReq</name><operator>.</operator><name>pass</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>pass</name></name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>TSDB_PASSWORD_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_SUPERUSER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>newUser</name><operator>.</operator><name>superUser</name></name> <operator>=</operator> <name><name>alterReq</name><operator>.</operator><name>superUser</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_ENABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>newUser</name><operator>.</operator><name>enable</name></name> <operator>=</operator> <name><name>alterReq</name><operator>.</operator><name>enable</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_SYSINFO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>newUser</name><operator>.</operator><name>sysInfo</name></name> <operator>=</operator> <name><name>alterReq</name><operator>.</operator><name>sysInfo</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_ADD_READ_DB</name> <operator>||</operator> <name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_ADD_ALL_DB</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><literal type="string">"1.*"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DB</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_ADD_WRITE_DB</name> <operator>||</operator> <name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_ADD_ALL_DB</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><literal type="string">"1.*"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DB</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_REMOVE_READ_DB</name> <operator>||</operator> <name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_REMOVE_ALL_DB</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><literal type="string">"1.*"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_REMOVE_WRITE_DB</name> <operator>||</operator> <name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_REMOVE_ALL_DB</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><literal type="string">"1.*"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_ADD_SUBSCRIBE_TOPIC</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>      <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><call><name>mndAcquireTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTopic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>topics</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>alterType</name></name> <operator>==</operator> <name>TSDB_ALTER_USER_REMOVE_SUBSCRIBE_TOPIC</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>      <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMqTopicObj</name> <modifier>*</modifier></type><name>pTopic</name> <init>= <expr><call><name>mndAcquireTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTopic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mndReleaseTopic</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>topics</name></name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>objname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndAlterUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newUser</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to alter since %s"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pOperUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>newUser</name><operator>.</operator><name>topics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDropUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_ROLLBACK</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_NOTHING</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"drop-user"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to drop user:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pCommitRaw</name> <init>= <expr><call><name>mndUserActionEncode</name><argument_list>(<argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCommitRaw</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pCommitRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to append commit log since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pCommitRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"trans:%d, failed to prepare since %s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessDropUserReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>      <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name>    <modifier>*</modifier></type><name>pUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDropUserReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSDropUserReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"user:%s, start to drop"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_DROP_USER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dropReq</name><operator>.</operator><name>user</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_USER_FORMAT</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pUser</name> <operator>=</operator> <call><name>mndAcquireUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pUser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_USER_NOT_EXIST</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndDropUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessGetUserAuthReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>         <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name>       <modifier>*</modifier></type><name>pUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGetUserAuthReq</name></type> <name>authReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SGetUserAuthRsp</name></type> <name>authRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSGetUserAuthReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>authReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"user:%s, start to get auth"</literal></expr></argument>, <argument><expr><name><name>authReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pUser</name> <operator>=</operator> <call><name>mndAcquireUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>authReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pUser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_USER_NOT_EXIST</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndSetUserAuthRsp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>authRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSGetUserAuthRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>authRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSGetUserAuthRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>authRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>

  <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSGetUserAuthRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>authRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveUsers</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>   <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>     <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>pWrite</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_USER</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>             <name><name>name</name><index>[<expr><name>TSDB_USER_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cols</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>superUser</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cols</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>enable</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cols</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cols</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pUser</name><operator>-&gt;</operator><name>createdTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextUser</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrievePrivileges</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>   <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>     <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>pWrite</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_USER</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfReadDbs</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfWriteDbs</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTopics</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>+</operator> <name>numOfReadDbs</name> <operator>+</operator> <name>numOfWriteDbs</name> <operator>+</operator> <name>numOfTopics</name> <operator>&gt;=</operator> <name>rows</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pUser</name><operator>-&gt;</operator><name>superUser</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>             <name><name>userName</name><index>[<expr><name>TSDB_USER_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>userName</name></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>userName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>char</name></type> <name><name>privilege</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>privilege</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>privilege</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>char</name></type> <name><name>objName</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>objName</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>objName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>             <name><name>userName</name><index>[<expr><name>TSDB_USER_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>userName</name></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>userName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>char</name></type> <name><name>privilege</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>privilege</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>privilege</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>  <name><name>objName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>objName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>objName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>objName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>objName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>readDbs</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>             <name><name>userName</name><index>[<expr><name>TSDB_USER_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>userName</name></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>userName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>char</name></type> <name><name>privilege</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>privilege</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>privilege</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>  <name><name>objName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>objName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>objName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>objName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>objName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>writeDbs</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>topic</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>             <name><name>userName</name><index>[<expr><name>TSDB_USER_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>userName</name></expr></argument>, <argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>userName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>char</name></type> <name><name>privilege</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>privilege</name></expr></argument>, <argument><expr><literal type="string">"subscribe"</literal></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>privilege</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>char</name></type> <name><name>topicName</name><index>[<expr><name>TSDB_TOPIC_NAME_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>topicName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mndGetDbStr</name><argument_list>(<argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_TOPIC_NAME_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>topicName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>topicName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>topicName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>topic</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pUser</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextPrivileges</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndValidateUserAuthInfo</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SUserAuthVersion</name> <modifier>*</modifier></type><name>pUsers</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfUses</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRsp</name></decl></parameter>,
                                <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pRspLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUserAuthBatchRsp</name></type> <name>batchRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>batchRsp</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfUses</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SGetUserAuthRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>batchRsp</name><operator>.</operator><name>pArray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfUses</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SUserObj</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><call><name>mndAcquireUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pUsers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pUser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"user:%s, failed to auth user since %s"</literal></expr></argument>, <argument><expr><name><name>pUsers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>user</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pUsers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>version</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pUsers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pUser</name><operator>-&gt;</operator><name>authVersion</name></name> <operator>&lt;=</operator> <name><name>pUsers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>version</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SGetUserAuthRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndSetUserAuthRsp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tFreeSGetUserAuthRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseUser</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppRsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRspLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tFreeSUserAuthBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspLen</name> <init>= <expr><call><name>tSerializeSUserAuthBatchRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSUserAuthBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tSerializeSUserAuthBatchRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppRsp</name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRspLen</name> <operator>=</operator> <name>rspLen</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSUserAuthBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_OVER</name>:</label>

  <expr_stmt><expr><operator>*</operator><name>ppRsp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRspLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSUserAuthBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
