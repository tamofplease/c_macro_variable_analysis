<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndScheduler.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndScheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndMnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndStb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndStream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSubscribe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTopic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndUser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndVgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuuid.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>tsDeployOnSnode</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndAddTaskToTaskSet</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>childId</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name> <operator>=</operator> <name>childId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndConvertRsmaTask</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pDstLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ast</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>triggerType</name></decl></parameter>,
                           <parameter><decl><type><name>int64_t</name></type> <name>watermark</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>deleteMark</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNode</name><modifier>*</modifier></type>      <name>pAst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pPlan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>nodesStringToNode</name><argument_list>(<argument><expr><name>ast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAst</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qSetSTableIdForRsma</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SPlanContext</name></type> <name>cxt</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>pAstRoot</name> <operator>=</operator> <name>pAst</name></expr>,
      <expr><operator>.</operator><name>topicQuery</name> <operator>=</operator> <name>false</name></expr>,
      <expr><operator>.</operator><name>streamQuery</name> <operator>=</operator> <name>true</name></expr>,
      <expr><operator>.</operator><name>rSmaQuery</name> <operator>=</operator> <name>true</name></expr>,
      <expr><operator>.</operator><name>triggerType</name> <operator>=</operator> <name>triggerType</name></expr>,
      <expr><operator>.</operator><name>watermark</name> <operator>=</operator> <name>watermark</name></expr>,
      <expr><operator>.</operator><name>deleteMark</name> <operator>=</operator> <name>deleteMark</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qCreateQueryPlan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPlan</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>levelNum</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>levelNum</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>inner</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>opNum</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>inner</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>opNum</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>plan</name> <init>= <expr><operator>(</operator><name>SSubplan</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>inner</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>qSubPlanToString</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pDstLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>END</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pAst</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><name>pAst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pPlan</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>nodesDestroyNode</name><argument_list>(<argument><expr><operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>terrno</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddSinkToTask</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SStreamObj</name><modifier>*</modifier></type> <name>pStream</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>smaId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name>TASK_OUTPUT__SMA</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>smaSink</name><operator>.</operator><name>smaId</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>smaId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name>TASK_OUTPUT__TABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>stbUid</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>targetStbUid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>stbFullName</name></name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>targetSTbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pSchemaWrapper</name></name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>outputSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddDispatcherToInnerTask</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SStreamObj</name><modifier>*</modifier></type> <name>pStream</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>isShuffle</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>fixedSinkVgId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDbObj</name><modifier>*</modifier></type> <name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>targetDb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfVgroups</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>isShuffle</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name>TASK_OUTPUT__SHUFFLE_DISPATCH</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>dispatchMsgType</name></name> <operator>=</operator> <name>TDMT_STREAM_TASK_DISPATCH</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mndExtractDbInfo</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>shuffleDispatcher</name><operator>.</operator><name>dbInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>isShuffle</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>shuffleDispatcher</name><operator>.</operator><name>stbFullName</name></name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>targetSTbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVgs</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>shuffleDispatcher</name><operator>.</operator><name>dbInfo</name><operator>.</operator><name>pVgroupInfos</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>sinkLv</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>sinkLvSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>sinkLv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pVgInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pVgs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sinkLvSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pLastLevelTask</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>sinkLv</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pLastLevelTask</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>==</operator> <name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>vgId</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <name><name>pLastLevelTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pVgInfo</name><operator>-&gt;</operator><name>taskId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name>TASK_OUTPUT__FIXED_DISPATCH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>dispatchMsgType</name></name> <operator>=</operator> <name>TDMT_STREAM_TASK_DISPATCH</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// one sink only</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>lastLevelTask</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>lastLevelTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>lastLevelTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <name><name>lastLevelTask</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAssignTaskToVg</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVgObj</name><modifier>*</modifier></type> <name>pVgroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qSubPlanToString</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSnodeObj</name><modifier>*</modifier></type> <name>mndSchedFetchOneSnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSnodeObj</name><modifier>*</modifier></type> <name>pObj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>      <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// TODO random fetch</comment>
  <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_SNODE</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAssignTaskToSnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>plan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSnodeObj</name><modifier>*</modifier></type> <name>pSnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>=</operator> <name>SNODE_HANDLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndAcquireEpFromSnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pSnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name>SNODE_HANDLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qSubPlanToString</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SVgObj</name><modifier>*</modifier></type> <name>mndSchedFetchOneVg</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>dbUid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name><modifier>*</modifier></type> <name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbUid</name></name> <operator>!=</operator> <name>dbUid</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>pVgroup</name></expr>;</return>
  </block_content>}</block></while>
  <return>return <expr><name>pVgroup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddShuffleSinkTasksToStream</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SStreamObj</name><modifier>*</modifier></type> <name>pStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name><modifier>*</modifier></type>   <name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tasks</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgObj</name><modifier>*</modifier></type> <name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>targetDbUid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>tNewSStreamTask</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fillHistory</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>fillHistory</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndAddTaskToTaskSet</name><argument_list>(<argument><expr><name>tasks</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// type</comment>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>=</operator> <name>TASK_LEVEL__SINK</name></expr>;</expr_stmt>

    <comment type="line">// sink</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>smaId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name>TASK_OUTPUT__SMA</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>smaSink</name><operator>.</operator><name>smaId</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>smaId</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name>TASK_OUTPUT__TABLE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>stbUid</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>targetStbUid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>stbFullName</name></name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>targetSTbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pSchemaWrapper</name></name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>outputSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pSchemaWrapper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndAddFixedSinkTaskToStream</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SStreamObj</name><modifier>*</modifier></type> <name>pStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>fixedSinkVgId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>tasks</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>tNewSStreamTask</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fillHistory</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>fillHistory</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddTaskToTaskSet</name><argument_list>(<argument><expr><name>tasks</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>fixedSinkVg</name><operator>.</operator><name>vgId</name></name> <operator>==</operator> <name><name>pStream</name><operator>-&gt;</operator><name>fixedSinkVgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>fixedSinkVgId</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  SVgObj* pVgroup = mndAcquireVgroup(pMnode, pStream-&gt;fixedSinkVgId);
  if (pVgroup == NULL) {
    return -1;
  }
  pTask-&gt;epSet = mndGetVgroupEpset(pMnode, pVgroup);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>fixedSinkVg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>=</operator> <name>TASK_LEVEL__SINK</name></expr>;</expr_stmt>

  <comment type="line">// sink</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>smaId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name>TASK_OUTPUT__SMA</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>smaSink</name><operator>.</operator><name>smaId</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>smaId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name>TASK_OUTPUT__TABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>stbUid</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>targetStbUid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>stbFullName</name></name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>targetSTbName</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pSchemaWrapper</name></name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStream</name><operator>-&gt;</operator><name>outputSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndScheduleStream</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SStreamObj</name><modifier>*</modifier></type> <name>pStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name><modifier>*</modifier></type>       <name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pPlan</name> <init>= <expr><call><name>qStringToQueryPlan</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pPlan</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>planTotLevel</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>planTotLevel</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>planTotLevel</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>hasExtraSink</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>externalTargetDB</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>sourceDb</name></name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>targetDb</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDbObj</name><modifier>*</modifier></type> <name>pDbObj</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>targetDb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pDbObj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>multiTarget</name> <init>= <expr><name><name>pDbObj</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>numOfVgroups</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pDbObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>planTotLevel</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>externalTargetDB</name> <operator>||</operator> <name>multiTarget</name> <operator>||</operator> <name><name>pStream</name><operator>-&gt;</operator><name>fixedSinkVgId</name></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/*if (true) {*/</comment>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>taskOneLevel</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskOneLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// add extra sink</comment>
    <expr_stmt><expr><name>hasExtraSink</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStream</name><operator>-&gt;</operator><name>fixedSinkVgId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddShuffleSinkTasksToStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// TODO free</comment>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddFixedSinkTaskToStream</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// TODO free</comment>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pStream</name><operator>-&gt;</operator><name>totalLevel</name></name> <operator>=</operator> <name>planTotLevel</name> <operator>+</operator> <name>hasExtraSink</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>planTotLevel</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pInnerTask</name></decl>;</decl_stmt>
    <comment type="line">// inner level</comment>
    <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>taskInnerLevel</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskInnerLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>inner</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type>      <name>plan</name> <init>= <expr><operator>(</operator><name>SSubplan</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>inner</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>subplanType</name></name> <operator>==</operator> <name>SUBPLAN_TYPE_MERGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pInnerTask</name> <operator>=</operator> <call><name>tNewSStreamTask</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pInnerTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pInnerTask</name><operator>-&gt;</operator><name>fillHistory</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>fillHistory</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndAddTaskToTaskSet</name><argument_list>(<argument><expr><name>taskInnerLevel</name></expr></argument>, <argument><expr><name>pInnerTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInnerTask</name><operator>-&gt;</operator><name>childEpInfo</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pInnerTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>=</operator> <name>TASK_LEVEL__AGG</name></expr>;</expr_stmt>

      <comment type="line">// trigger</comment>
      <expr_stmt><expr><name><name>pInnerTask</name><operator>-&gt;</operator><name>triggerParam</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>triggerParam</name></name></expr>;</expr_stmt>

      <comment type="line">// dispatch</comment>
      <if_stmt><if>if <condition>(<expr><call><name>mndAddDispatcherToInnerTask</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pInnerTask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>tsDeployOnSnode</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSnodeObj</name><modifier>*</modifier></type> <name>pSnode</name> <init>= <expr><call><name>mndSchedFetchOneSnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pSnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SVgObj</name><modifier>*</modifier></type> <name>pVgroup</name> <init>= <expr><call><name>mndSchedFetchOneVg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>sourceDbUid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>mndAssignTaskToVg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pInnerTask</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>mndAssignTaskToSnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pInnerTask</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>pSnode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pSnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SVgObj</name><modifier>*</modifier></type> <name>pVgroup</name> <init>= <expr><call><name>mndSchedFetchOneVg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>sourceDbUid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>mndAssignTaskToVg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pInnerTask</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <comment type="line">// source level</comment>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>taskSourceLevel</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskSourceLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>inner</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type>      <name>plan</name> <init>= <expr><operator>(</operator><name>SSubplan</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>inner</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>subplanType</name></name> <operator>==</operator> <name>SUBPLAN_TYPE_SCAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgObj</name><modifier>*</modifier></type> <name>pVgroup</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>sourceDbUid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>tNewSStreamTask</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fillHistory</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>fillHistory</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndAddTaskToTaskSet</name><argument_list>(<argument><expr><name>taskSourceLevel</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>triggerParam</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <comment type="line">// source</comment>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>=</operator> <name>TASK_LEVEL__SOURCE</name></expr>;</expr_stmt>

      <comment type="line">// add fixed vg dispatch</comment>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>dispatchMsgType</name></name> <operator>=</operator> <name>TDMT_STREAM_TASK_DISPATCH</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>=</operator> <name>TASK_OUTPUT__FIXED_DISPATCH</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>pInnerTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>pInnerTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fixedEpDispatcher</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <name><name>pInnerTask</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>mndAssignTaskToVg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SStreamChildEpInfo</name><modifier>*</modifier></type> <name>pEpInfo</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamChildEpInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pEpInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pEpInfo</name><operator>-&gt;</operator><name>childId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pEpInfo</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pEpInfo</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pEpInfo</name><operator>-&gt;</operator><name>taskId</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInnerTask</name><operator>-&gt;</operator><name>childEpInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEpInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>planTotLevel</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>taskOneLevel</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskOneLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>inner</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>inner</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type> <name>plan</name> <init>= <expr><operator>(</operator><name>SSubplan</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>inner</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>subplanType</name></name> <operator>==</operator> <name>SUBPLAN_TYPE_SCAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgObj</name><modifier>*</modifier></type> <name>pVgroup</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>sourceDbUid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>tNewSStreamTask</name><argument_list>(<argument><expr><name><name>pStream</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>fillHistory</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>fillHistory</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mndAddTaskToTaskSet</name><argument_list>(<argument><expr><name>taskOneLevel</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// source</comment>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>=</operator> <name>TASK_LEVEL__SOURCE</name></expr>;</expr_stmt>

      <comment type="line">// trigger</comment>
      <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>triggerParam</name></name> <operator>=</operator> <name><name>pStream</name><operator>-&gt;</operator><name>triggerParam</name></name></expr>;</expr_stmt>

      <comment type="line">// sink or dispatch</comment>
      <if_stmt><if>if <condition>(<expr><name>hasExtraSink</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mndAddDispatcherToInnerTask</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>mndAddSinkToTask</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pStream</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>mndAssignTaskToVg</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndSchedInitSubEp</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqTopicObj</name><modifier>*</modifier></type> <name>pTopic</name></decl></parameter>, <parameter><decl><type><name>SMqSubscribeObj</name><modifier>*</modifier></type> <name>pSub</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name><modifier>*</modifier></type>       <name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgObj</name><modifier>*</modifier></type>     <name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pPlan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubplan</name><modifier>*</modifier></type>   <name>plan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pPlan</name> <operator>=</operator> <call><name>qStringToQueryPlan</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>physicalPlan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pPlan</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>levelNum</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>levelNum</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_TOPIC_QUERY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SNodeListNode</name><modifier>*</modifier></type> <name>inner</name> <init>= <expr><operator>(</operator><name>SNodeListNode</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>pPlan</name><operator>-&gt;</operator><name>pSubplans</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>opNum</name> <init>= <expr><call><name>LIST_LENGTH</name><argument_list>(<argument><expr><name><name>inner</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>opNum</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_TOPIC_QUERY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>plan</name> <operator>=</operator> <operator>(</operator><name>SSubplan</name><operator>*</operator><operator>)</operator><call><name>nodesListGetNode</name><argument_list>(<argument><expr><name><name>inner</name><operator>-&gt;</operator><name>pNodeList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>unassignedVgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndVgroupInDb</name><argument_list>(<argument><expr><name>pVgroup</name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>dbUid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pSub</name><operator>-&gt;</operator><name>vgNum</name></name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SMqVgEp</name><modifier>*</modifier></type> <name>pVgEp</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqVgEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>epSet</name></name> <operator>=</operator> <call><name>mndGetVgroupEpset</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>unassignedVgs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mDebug</name><argument_list>(<argument><expr><literal type="string">"init subscription %s, assign vg: %d"</literal></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <name><name>pVgEp</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>execNode</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>qSubPlanToString</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgEp</name><operator>-&gt;</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_INVALID_INPUT</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>qmsg</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>unassignedVgs</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>consumerHash</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>qDestroyQueryPlan</name><argument_list>(<argument><expr><name>pPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
