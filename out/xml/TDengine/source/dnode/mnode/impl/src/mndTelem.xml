<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndTelem.c"><comment type="block">/*
 * Copyright (c) 2020 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTelem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndCluster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tbuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thttp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tjson.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfDnode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfMnode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfVgroup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfDatabase</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfSuperTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfChildTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfNormalTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfColumn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalPoints</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalStorage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>compStorage</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMnodeStat</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndGetStat</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SMnodeStat</name><modifier>*</modifier></type> <name>pStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMnodeStat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdb</name><modifier>*</modifier></type> <name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfDnode</name></name> <operator>=</operator> <call><name>sdbGetSize</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfMnode</name></name> <operator>=</operator> <call><name>sdbGetSize</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_MNODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfVgroup</name></name> <operator>=</operator> <call><name>sdbGetSize</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfDatabase</name></name> <operator>=</operator> <call><name>sdbGetSize</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfSuperTable</name></name> <operator>=</operator> <call><name>sdbGetSize</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_STB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgObj</name><modifier>*</modifier></type> <name>pVgroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_VGROUP</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfChildTable</name></name> <operator>+=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>numOfTables</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfColumn</name></name> <operator>+=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>numOfTimeSeries</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>totalPoints</name></name> <operator>+=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>pointsWritten</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>totalStorage</name></name> <operator>+=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>totalStorage</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>compStorage</name></name> <operator>+=</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>compStorage</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfChildTable</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>numOfColumn</name></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>totalPoints</name></name> <operator>=</operator> <literal type="number">300</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>totalStorage</name></name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStat</name><operator>-&gt;</operator><name>compStorage</name></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndBuildRuntimeInfo</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnodeStat</name></type> <name>mstat</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mndGetStat</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfDnode"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>numOfDnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfMnode"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>numOfMnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfVgroup"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>numOfVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfDatabase"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>numOfDatabase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfSuperTable"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>numOfSuperTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfChildTable"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>numOfChildTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfColumn"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>numOfColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfPoint"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>totalPoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"totalStorage"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>totalStorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"compStorage"</literal></expr></argument>, <argument><expr><name><name>mstat</name><operator>.</operator><name>compStorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>mndBuildTelemetryReport</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>tmp</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STelemMgmt</name><modifier>*</modifier></type> <name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>telemMgmt</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SJson</name><modifier>*</modifier></type> <name>pJson</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>clusterName</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mndGetClusterName</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>clusterName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"instanceId"</literal></expr></argument>, <argument><expr><name>clusterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"reportVersion"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosGetOsReleaseName</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"os"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>float</name></type> <name>numOfCores</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosGetCpuInfo</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCores</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"cpuModel"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfCpu"</literal></expr></argument>, <argument><expr><name>numOfCores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tjsonAddDoubleToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"numOfCpu"</literal></expr></argument>, <argument><expr><name>tsNumOfCores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" kB"</literal></expr></argument>, <argument><expr><name>tsTotalMemoryKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"memory"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"buildInfo"</literal></expr></argument>, <argument><expr><name>buildinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"gitInfo"</literal></expr></argument>, <argument><expr><name>gitinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"email"</literal></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>email</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndBuildRuntimeInfo</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pCont</name> <init>= <expr><call><name>tjsonToString</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pCont</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessTelemTimer</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name><modifier>*</modifier></type>     <name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STelemMgmt</name><modifier>*</modifier></type> <name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>telemMgmt</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tsEnableTelem</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pCont</name> <init>= <expr><call><name>mndBuildTelemetryReport</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pCont</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosSendHttpReport</name><argument_list>(<argument><expr><name>tsTelemServer</name></expr></argument>, <argument><expr><name>tsTelemPort</name></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pCont</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_FLAT</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to send telemetry report"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"succeed to send telemetry report"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndInitTelem</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STelemMgmt</name><modifier>*</modifier></type> <name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>telemMgmt</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetEmail</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>email</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>email</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_TELEM_TIMER</name></expr></argument>, <argument><expr><name>mndProcessTelemTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupTelem</name><parameter_list>(<parameter><decl><type><name>SMnode</name><modifier>*</modifier></type> <name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STelemMgmt</name><modifier>*</modifier></type> <name>pMgmt</name> <init>= <expr><operator>&amp;</operator><name><name>pMnode</name><operator>-&gt;</operator><name>telemMgmt</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
