<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mnode/impl/src/mndDnode.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndDb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndMnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndPrivilege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndQnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndShow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndSnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndTrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndUser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mndVgroup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmisce.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDB_DNODE_VER_NUMBER</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSDB_DNODE_RESERVE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>offlineReason</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">""</literal></expr>,
    <expr><literal type="string">"status msg timeout"</literal></expr>,
    <expr><literal type="string">"status not received"</literal></expr>,
    <expr><literal type="string">"version not match"</literal></expr>,
    <expr><literal type="string">"dnodeId not match"</literal></expr>,
    <expr><literal type="string">"clusterId not match"</literal></expr>,
    <expr><literal type="string">"interval not match"</literal></expr>,
    <expr><literal type="string">"timezone not match"</literal></expr>,
    <expr><literal type="string">"locale not match"</literal></expr>,
    <expr><literal type="string">"charset not match"</literal></expr>,
    <expr><literal type="string">"unknown"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndCreateDefaultDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSdbRaw</name> <modifier>*</modifier></type><name>mndDnodeActionEncode</name><parameter_list>(<parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndDnodeActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndDnodeActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndDnodeActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndDnodeActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessDnodeListReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>mndProcessShowVariablesReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessCreateDnodeReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessDropDnodeReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConfigDnodeReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConfigDnodeRsp</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessStatusReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveConfigs</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndCancelGetNextConfig</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveDnodes</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>mndCancelGetNextDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>mndInitDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdbTable</name></type> <name>table</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>sdbType</name> <operator>=</operator> <name>SDB_DNODE</name></expr>,
      <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>SDB_KEY_INT32</name></expr>,
      <expr><operator>.</operator><name>deployFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeployFp</name><operator>)</operator><name>mndCreateDefaultDnode</name></expr>,
      <expr><operator>.</operator><name>encodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbEncodeFp</name><operator>)</operator><name>mndDnodeActionEncode</name></expr>,
      <expr><operator>.</operator><name>decodeFp</name> <operator>=</operator> <operator>(</operator><name>SdbDecodeFp</name><operator>)</operator><name>mndDnodeActionDecode</name></expr>,
      <expr><operator>.</operator><name>insertFp</name> <operator>=</operator> <operator>(</operator><name>SdbInsertFp</name><operator>)</operator><name>mndDnodeActionInsert</name></expr>,
      <expr><operator>.</operator><name>updateFp</name> <operator>=</operator> <operator>(</operator><name>SdbUpdateFp</name><operator>)</operator><name>mndDnodeActionUpdate</name></expr>,
      <expr><operator>.</operator><name>deleteFp</name> <operator>=</operator> <operator>(</operator><name>SdbDeleteFp</name><operator>)</operator><name>mndDnodeActionDelete</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_CREATE_DNODE</name></expr></argument>, <argument><expr><name>mndProcessCreateDnodeReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_DROP_DNODE</name></expr></argument>, <argument><expr><name>mndProcessDropDnodeReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_CONFIG_DNODE</name></expr></argument>, <argument><expr><name>mndProcessConfigDnodeReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_DND_CONFIG_DNODE_RSP</name></expr></argument>, <argument><expr><name>mndProcessConfigDnodeRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_STATUS</name></expr></argument>, <argument><expr><name>mndProcessStatusReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_DNODE_LIST</name></expr></argument>, <argument><expr><name>mndProcessDnodeListReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndSetMsgHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TDMT_MND_SHOW_VARIABLES</name></expr></argument>, <argument><expr><name>mndProcessShowVariablesReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_CONFIGS</name></expr></argument>, <argument><expr><name>mndRetrieveConfigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_CONFIGS</name></expr></argument>, <argument><expr><name>mndCancelGetNextConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowRetrieveHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_DNODE</name></expr></argument>, <argument><expr><name>mndRetrieveDnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndAddShowFreeIterHandle</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TSDB_MGMT_TABLE_DNODE</name></expr></argument>, <argument><expr><name>mndCancelGetNextDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>sdbSetTable</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndCleanupDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCreateDefaultDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name>  <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDnodeObj</name></type> <name>dnodeObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dnodeObj</name><operator>.</operator><name>id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dnodeObj</name><operator>.</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dnodeObj</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <name><name>dnodeObj</name><operator>.</operator><name>createdTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dnodeObj</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>tsServerPort</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>dnodeObj</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dnodeObj</name><operator>.</operator><name>fqdn</name><index>[<expr><name>TSDB_FQDN_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>dnodeObj</name><operator>.</operator><name>ep</name></name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pTrans</name> <operator>=</operator> <call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_GLOBAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"create-dnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to create dnode:%s on first deploy"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>dnodeObj</name><operator>.</operator><name>ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRaw</name> <operator>=</operator> <call><name>mndDnodeActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnodeObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRaw</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRaw</name> <modifier>*</modifier></type><name>mndDnodeActionEncode</name><parameter_list>(<parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><call><name>sdbAllocRaw</name><argument_list>(<argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><name>TSDB_DNODE_VER_NUMBER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDnodeObj</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>TSDB_DNODE_RESERVE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_SET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pDnode-&gt;id</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pDnode-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pDnode-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pDnode-&gt;port</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pDnode-&gt;fqdn</argument>, <argument>TSDB_FQDN_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_SET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>TSDB_DNODE_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <expr_stmt><expr><call><name>SDB_SET_DATALEN</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>dataPos</name></expr></argument>, <argument><expr><name>_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, failed to encode to raw:%p since %s"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, encode to raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRaw</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSdbRow</name> <modifier>*</modifier></type><name>mndDnodeActionDecode</name><parameter_list>(<parameter><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSdbRow</name>   <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>sver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sdbGetRawSoftVer</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sver</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>!=</operator> <name>TSDB_DNODE_VER_NUMBER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SDB_INVALID_DATA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>sdbAllocRow</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDnodeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pDnode</name> <operator>=</operator> <call><name>sdbGetRowObj</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>SDB_GET_INT32</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pDnode-&gt;id</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pDnode-&gt;createdTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT64</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pDnode-&gt;updateTime</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_INT16</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>&amp;pDnode-&gt;port</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_BINARY</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>pDnode-&gt;fqdn</argument>, <argument>TSDB_FQDN_LEN</argument>, <argument>_OVER</argument>)</argument_list></macro>
  <macro><name>SDB_GET_RESERVE</name><argument_list>(<argument>pRaw</argument>, <argument>dataPos</argument>, <argument>TSDB_DNODE_RESERVE_SIZE</argument>, <argument>_OVER</argument>)</argument_list></macro>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, failed to decode from raw:%p since %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, decode from raw:%p, row:%p"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRow</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDnodeActionInsert</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, perform insert action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name> <operator>=</operator> <name>DND_REASON_STATUS_NOT_RECEIVED</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>ep</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDnodeActionDelete</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, perform delete action, row:%p"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDnodeActionUpdate</name><parameter_list>(<parameter><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mTrace</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, perform update action, old row:%p new row:%p"</literal></expr></argument>, <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOld</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>updateTime</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>mndAcquireDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name>      <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>sdbAcquire</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DNODE_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pDnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndReleaseDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SEpSet</name></type> <name>mndGetDnodeEpset</name><parameter_list>(<parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>addEpIntoEpSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>epSet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SDnodeObj</name> <modifier>*</modifier></type><name>mndAcquireDnodeByEp</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pEpStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>pEpStr</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>pDnode</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DNODE_NOT_EXIST</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mndGetDnodeSize</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sdbGetSize</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mndIsDnodeOnline</name><parameter_list>(<parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>curMs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>interval</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>lastAccessTime</name></name> <operator>-</operator> <name>curMs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>interval</name> <operator>&gt;</operator> <literal type="number">5000</literal> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>tsStatusInterval</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>rebootTime</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name> <operator>=</operator> <name>DND_REASON_STATUS_MSG_TIMEOUT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mndGetDnodeData</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pDnodeEps</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfEps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SDnodeEp</name></type> <name>dnodeEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dnodeEp</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dnodeEp</name><operator>.</operator><name>ep</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>dnodeEp</name><operator>.</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>dnodeEp</name><operator>.</operator><name>isMnode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndIsMnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>dnodeEp</name><operator>.</operator><name>isMnode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pDnodeEps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCheckClusterCfgPara</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SClusterCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>statusInterval</name></name> <operator>!=</operator> <name>tsStatusInterval</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, statusInterval:%d inconsistent with cluster:%d"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>statusInterval</name></name></expr></argument>,
           <argument><expr><name>tsStatusInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DND_REASON_STATUS_INTERVAL_NOT_MATCH</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>timezone</name></name></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pMnode</name><operator>-&gt;</operator><name>checkTime</name></name> <operator>!=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>checkTime</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, timezone:%s checkTime:%"</literal> <name>PRId64</name> <literal type="string">" inconsistent with cluster %s %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
           <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>timezone</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>checkTime</name></name></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>checkTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DND_REASON_TIME_ZONE_NOT_MATCH</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>locale</name></name></expr></argument>, <argument><expr><name>tsLocale</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, locale:%s inconsistent with cluster:%s"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>locale</name></name></expr></argument>, <argument><expr><name>tsLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DND_REASON_LOCALE_NOT_MATCH</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, charset:%s inconsistent with cluster:%s"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>charset</name></name></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DND_REASON_CHARSET_NOT_MATCH</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessStatusReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>    <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStatusReq</name></type> <name>statusReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSStatusReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>statusReq</name><operator>.</operator><name>dnodeId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDnode</name> <operator>=</operator> <call><name>mndAcquireDnodeByEp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>dnodeEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%s, not created yet"</literal></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>dnodeEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pDnode</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pDnode</name> <operator>=</operator> <call><name>mndAcquireDnodeByEp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>dnodeEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name> <operator>=</operator> <name>DND_REASON_DNODE_ID_NOT_MATCH</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, %s not exist"</literal></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>dnodeEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>dnodeVer</name> <init>= <expr><call><name>sdbGetTableVer</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sdbGetTableVer</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_MNODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>curMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>online</name> <init>= <expr><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>dnodeChanged</name> <init>= <expr><operator>(</operator><name><name>statusReq</name><operator>.</operator><name>dnodeVer</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>statusReq</name><operator>.</operator><name>dnodeVer</name></name> <operator>!=</operator> <name>dnodeVer</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>reboot</name> <init>= <expr><operator>(</operator><name><name>pDnode</name><operator>-&gt;</operator><name>rebootTime</name></name> <operator>!=</operator> <name><name>statusReq</name><operator>.</operator><name>rebootTime</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>needCheck</name> <init>= <expr><operator>!</operator><name>online</name> <operator>||</operator> <name>dnodeChanged</name> <operator>||</operator> <name>reboot</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>accessTimes</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>lastAccessTime</name></name> <operator>=</operator> <name>curMs</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mGTrace</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, status received, accessTimes:%d check:%d online:%d reboot:%d changed:%d statusSeq:%d"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
          <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>accessTimes</name></name></expr></argument>, <argument><expr><name>needCheck</name></expr></argument>, <argument><expr><name>online</name></expr></argument>, <argument><expr><name>reboot</name></expr></argument>, <argument><expr><name>dnodeChanged</name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>statusSeq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>statusReq</name><operator>.</operator><name>pVloads</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeLoad</name> <modifier>*</modifier></type><name>pVload</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>statusReq</name><operator>.</operator><name>pVloads</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SVgObj</name> <modifier>*</modifier></type><name>pVgroup</name> <init>= <expr><call><name>mndAcquireVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVload</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pVgroup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pVload</name><operator>-&gt;</operator><name>syncState</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>cacheUsage</name></name> <operator>=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>cacheUsage</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>numOfTables</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>numOfTimeSeries</name></name> <operator>=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>numOfTimeSeries</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>totalStorage</name></name> <operator>=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>totalStorage</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>compStorage</name></name> <operator>=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>compStorage</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>pointsWritten</name></name> <operator>=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>pointsWritten</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>roleChanged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>vg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>vg</name> <operator>&lt;</operator> <name><name>pVgroup</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>vg</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SVnodeGid</name> <modifier>*</modifier></type><name>pGid</name> <init>= <expr><operator>&amp;</operator><name><name>pVgroup</name><operator>-&gt;</operator><name>vnodeGid</name><index>[<expr><name>vg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pGid</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>==</operator> <name><name>statusReq</name><operator>.</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pGid</name><operator>-&gt;</operator><name>syncState</name></name> <operator>!=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>syncState</name></name> <operator>||</operator> <name><name>pGid</name><operator>-&gt;</operator><name>syncRestore</name></name> <operator>!=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>syncRestore</name></name> <operator>||</operator>
              <name><name>pGid</name><operator>-&gt;</operator><name>syncCanRead</name></name> <operator>!=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>syncCanRead</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mInfo</name><argument_list>(
                <argument><expr><literal type="string">"vgId:%d, state changed by status msg, old state:%s restored:%d canRead:%d new state:%s restored:%d "</literal>
                <literal type="string">"canRead:%d, dnode:%d"</literal></expr></argument>,
                <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pGid</name><operator>-&gt;</operator><name>syncState</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pGid</name><operator>-&gt;</operator><name>syncRestore</name></name></expr></argument>, <argument><expr><name><name>pGid</name><operator>-&gt;</operator><name>syncCanRead</name></name></expr></argument>,
                <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pVload</name><operator>-&gt;</operator><name>syncState</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pVload</name><operator>-&gt;</operator><name>syncRestore</name></name></expr></argument>, <argument><expr><name><name>pVload</name><operator>-&gt;</operator><name>syncCanRead</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pGid</name><operator>-&gt;</operator><name>syncState</name></name> <operator>=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>syncState</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pGid</name><operator>-&gt;</operator><name>syncRestore</name></name> <operator>=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>syncRestore</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pGid</name><operator>-&gt;</operator><name>syncCanRead</name></name> <operator>=</operator> <name><name>pVload</name><operator>-&gt;</operator><name>syncCanRead</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>roleChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name>roleChanged</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDbObj</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>mndAcquireDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pVgroup</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pDb</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>stateTs</name></name> <operator>!=</operator> <name>curMs</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"db:%s, stateTs changed by status msg, old stateTs:%"</literal> <name>PRId64</name> <literal type="string">" new stateTs:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>stateTs</name></name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stateTs</name></name> <operator>=</operator> <name>curMs</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>mndReleaseDb</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mndReleaseVgroup</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pVgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SMnodeObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>mndAcquireMnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pObj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pObj</name><operator>-&gt;</operator><name>syncState</name></name> <operator>!=</operator> <name><name>statusReq</name><operator>.</operator><name>mload</name><operator>.</operator><name>syncState</name></name> <operator>||</operator> <name><name>pObj</name><operator>-&gt;</operator><name>syncRestore</name></name> <operator>!=</operator> <name><name>statusReq</name><operator>.</operator><name>mload</name><operator>.</operator><name>syncRestore</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, mnode syncState from %s to %s, restoreState from %d to %d"</literal></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>syncState</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>statusReq</name><operator>.</operator><name>mload</name><operator>.</operator><name>syncState</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>syncRestore</name></name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>mload</name><operator>.</operator><name>syncRestore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>syncState</name></name> <operator>=</operator> <name><name>statusReq</name><operator>.</operator><name>mload</name><operator>.</operator><name>syncState</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>syncRestore</name></name> <operator>=</operator> <name><name>statusReq</name><operator>.</operator><name>mload</name><operator>.</operator><name>syncRestore</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>stateStartTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>mndReleaseMnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQnodeObj</name> <modifier>*</modifier></type><name>pQnode</name> <init>= <expr><call><name>mndAcquireQnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>qload</name><operator>.</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pQnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pQnode</name><operator>-&gt;</operator><name>load</name></name> <operator>=</operator> <name><name>statusReq</name><operator>.</operator><name>qload</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndReleaseQnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pQnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>needCheck</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>statusReq</name><operator>.</operator><name>sver</name></name> <operator>!=</operator> <name>tsVersion</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name> <operator>=</operator> <name>DND_REASON_VERSION_NOT_MATCH</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, status msg version:%d not match cluster:%d"</literal></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>sver</name></name></expr></argument>, <argument><expr><name>tsVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VERSION_NOT_COMPATIBLE</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>statusReq</name><operator>.</operator><name>dnodeId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, %s first access, clusterId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>statusReq</name><operator>.</operator><name>clusterId</name></name> <operator>!=</operator> <name><name>pMnode</name><operator>-&gt;</operator><name>clusterId</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name> <operator>=</operator> <name>DND_REASON_CLUSTER_ID_NOT_MATCH</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, clusterId %"</literal> <name>PRId64</name> <literal type="string">" not match exist %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>clusterId</name></name></expr></argument>,
               <argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_CLUSTER_ID</name></expr>;</expr_stmt>
        <goto>goto <name>_OVER</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Verify whether the cluster parameters are consistent when status change from offline to ready</comment>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name> <operator>=</operator> <call><name>mndCheckClusterCfgPara</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>statusReq</name><operator>.</operator><name>clusterCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, cluster cfg inconsistent since:%s"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>offlineReason</name><index>[<expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_CLUSTER_CFG</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>online</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, from offline to online, memory avail:%"</literal> <name>PRId64</name> <literal type="string">" total:%"</literal> <name>PRId64</name> <literal type="string">" cores:%.2f"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
            <argument><expr><name><name>statusReq</name><operator>.</operator><name>memAvail</name></name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>memTotal</name></name></expr></argument>, <argument><expr><name><name>statusReq</name><operator>.</operator><name>numOfCores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, send dnode epset, online:%d dnodeVer:%"</literal> <name>PRId64</name> <literal type="string">":%"</literal> <name>PRId64</name> <literal type="string">" reboot:%d"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>online</name></expr></argument>,
            <argument><expr><name><name>statusReq</name><operator>.</operator><name>dnodeVer</name></name></expr></argument>, <argument><expr><name>dnodeVer</name></expr></argument>, <argument><expr><name>reboot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>rebootTime</name></name> <operator>=</operator> <name><name>statusReq</name><operator>.</operator><name>rebootTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfCores</name></name> <operator>=</operator> <name><name>statusReq</name><operator>.</operator><name>numOfCores</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name> <operator>=</operator> <name><name>statusReq</name><operator>.</operator><name>numOfSupportVnodes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memAvail</name></name> <operator>=</operator> <name><name>statusReq</name><operator>.</operator><name>memAvail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>memTotal</name></name> <operator>=</operator> <name><name>statusReq</name><operator>.</operator><name>memTotal</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SStatusRsp</name></type> <name>statusRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>statusRsp</name><operator>.</operator><name>statusSeq</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>statusRsp</name><operator>.</operator><name>dnodeVer</name></name> <operator>=</operator> <name>dnodeVer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>statusRsp</name><operator>.</operator><name>dnodeCfg</name><operator>.</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>statusRsp</name><operator>.</operator><name>dnodeCfg</name><operator>.</operator><name>clusterId</name></name> <operator>=</operator> <name><name>pMnode</name><operator>-&gt;</operator><name>clusterId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>statusRsp</name><operator>.</operator><name>pDnodeEps</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>mndGetDnodeSize</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDnodeEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>statusRsp</name><operator>.</operator><name>pDnodeEps</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mndGetDnodeData</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>statusRsp</name><operator>.</operator><name>pDnodeEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSStatusRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pHead</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tSerializeSStatusRsp</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>statusRsp</name><operator>.</operator><name>pDnodeEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pHead</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>statusReq</name><operator>.</operator><name>pVloads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndCreateDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SCreateDnodeReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name>  <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDnodeObj</name></type> <name>dnodeObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dnodeObj</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>sdbGetMaxId</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dnodeObj</name><operator>.</operator><name>createdTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dnodeObj</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <name><name>dnodeObj</name><operator>.</operator><name>createdTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dnodeObj</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>dnodeObj</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>dnodeObj</name><operator>.</operator><name>ep</name></name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pTrans</name> <operator>=</operator> <call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_ROLLBACK</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_GLOBAL</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"create-dnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to create dnode:%s"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>dnodeObj</name><operator>.</operator><name>ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRaw</name> <operator>=</operator> <call><name>mndDnodeActionEncode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dnodeObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRaw</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessDnodeListReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>       <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>         <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name>    <modifier>*</modifier></type><name>pObj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>         <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeListRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>dnodeList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>rsp</name><operator>.</operator><name>dnodeList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to alloc epSet while process dnode list req"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>dnodeList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspLen</name> <init>= <expr><call><name>tSerializeSDnodeListRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSDnodeListRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>rspLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to get dnode list since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tFreeSDnodeListRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessShowVariablesReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShowVariablesRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_SHOW_VARIBALES</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>variables</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVariablesInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>rsp</name><operator>.</operator><name>variables</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to alloc SVariablesInfo array while process show variables req"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVariablesInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"statusInterval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>tsStatusInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>variables</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"timezone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>variables</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"locale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tsLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>variables</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"charset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>variables</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspLen</name> <init>= <expr><call><name>tSerializeSShowVariablesRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSShowVariablesRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>rspLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"failed to get show variables info since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tFreeSShowVariablesRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessCreateDnodeReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>         <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name>      <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCreateDnodeReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>grantCheck</name><argument_list>(<argument><expr><name>TSDB_GRANT_DNODE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSCreateDnodeReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%s:%d, start to create"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_CREATE_DNODE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>createReq</name><operator>.</operator><name>fqdn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>createReq</name><operator>.</operator><name>port</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>createReq</name><operator>.</operator><name>port</name></name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_INVALID_DNODE_EP</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>ep</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDnode</name> <operator>=</operator> <call><name>mndAcquireDnodeByEp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndCreateDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%s:%d, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>createReq</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndDropDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SMnodeObj</name> <modifier>*</modifier></type><name>pMObj</name></decl></parameter>, <parameter><decl><type><name>SQnodeObj</name> <modifier>*</modifier></type><name>pQObj</name></decl></parameter>,
                            <parameter><decl><type><name>SSnodeObj</name> <modifier>*</modifier></type><name>pSObj</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfVnodes</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdbRaw</name> <modifier>*</modifier></type><name>pRaw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STrans</name>  <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pTrans</name> <operator>=</operator> <call><name>mndTransCreate</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>TRN_POLICY_RETRY</name></expr></argument>, <argument><expr><name>TRN_CONFLICT_GLOBAL</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="string">"drop-dnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTrans</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mndTransSetSerial</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, used to drop dnode:%d, force:%d"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRaw</name> <operator>=</operator> <call><name>mndDnodeActionEncode</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendRedolog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRaw</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRaw</name> <operator>=</operator> <call><name>mndDnodeActionEncode</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRaw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndTransAppendCommitlog</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pRaw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sdbSetRawStatus</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>, <argument><expr><name>SDB_STATUS_DROPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRaw</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMObj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, mnode on dnode:%d will be dropped"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndSetDropMnodeInfoToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pMObj</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pQObj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, qnode on dnode:%d will be dropped"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndSetDropQnodeInfoToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pQObj</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pSObj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, snode on dnode:%d will be dropped"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndSetDropSnodeInfoToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name>pSObj</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfVnodes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"trans:%d, %d vnodes on dnode:%d will be dropped"</literal></expr></argument>, <argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>numOfVnodes</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mndSetMoveVgroupsInfoToTrans</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mndTransPrepare</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pTrans</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <expr_stmt><expr><call><name>mndTransDrop</name><argument_list>(<argument><expr><name>pTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sdbFreeRaw</name><argument_list>(<argument><expr><name>pRaw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessDropDnodeReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>       <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name>    <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMnodeObj</name>    <modifier>*</modifier></type><name>pMObj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQnodeObj</name>    <modifier>*</modifier></type><name>pQObj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSnodeObj</name>    <modifier>*</modifier></type><name>pSObj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDropDnodeReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSDropDnodeReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, start to drop, ep:%s:%d"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_DROP_MNODE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pDnode</name> <operator>=</operator> <call><name>mndAcquireDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ep</name><index>[<expr><name>TSDB_EP_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDnode</name> <operator>=</operator> <call><name>mndAcquireDnodeByEp</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DNODE_NOT_EXIST</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pQObj</name> <operator>=</operator> <call><name>mndAcquireQnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pSObj</name> <operator>=</operator> <call><name>mndAcquireSnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pMObj</name> <operator>=</operator> <call><name>mndAcquireMnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMObj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sdbGetSize</name><argument_list>(<argument><expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></argument>, <argument><expr><name>SDB_MNODE</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_TOO_FEW_MNODES</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMnode</name><operator>-&gt;</operator><name>selfDnodeId</name></name> <operator>==</operator> <name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_CANT_DROP_LEADER</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVnodes</name> <init>= <expr><call><name>mndGetVnodesNum</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>numOfVnodes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pMObj</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>pSObj</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>pQObj</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dropReq</name><operator>.</operator><name>force</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_DNODE_OFFLINE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, failed to drop since %s, vnodes:%d mnode:%d qnode:%d snode:%d"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><name>numOfVnodes</name></expr></argument>, <argument><expr><name>pMObj</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>pQObj</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>pSObj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mndDropDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>pMObj</name></expr></argument>, <argument><expr><name>pQObj</name></expr></argument>, <argument><expr><name>pSObj</name></expr></argument>, <argument><expr><name>numOfVnodes</name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>force</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mndReleaseDnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseMnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pMObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseQnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pQObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndReleaseSnode</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name>pSObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConfigDnodeReq</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>     <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>options</name><index>[]</index></name> <init>= <expr><block>{
      <expr><literal type="string">"debugFlag"</literal></expr>,   <expr><literal type="string">"dDebugFlag"</literal></expr>,   <expr><literal type="string">"vDebugFlag"</literal></expr>,   <expr><literal type="string">"mDebugFlag"</literal></expr>,   <expr><literal type="string">"wDebugFlag"</literal></expr>,    <expr><literal type="string">"sDebugFlag"</literal></expr>,   <expr><literal type="string">"tsdbDebugFlag"</literal></expr>,
      <expr><literal type="string">"tqDebugFlag"</literal></expr>, <expr><literal type="string">"fsDebugFlag"</literal></expr>,  <expr><literal type="string">"udfDebugFlag"</literal></expr>, <expr><literal type="string">"smaDebugFlag"</literal></expr>, <expr><literal type="string">"idxDebugFlag"</literal></expr>,  <expr><literal type="string">"tdbDebugFlag"</literal></expr>, <expr><literal type="string">"tmrDebugFlag"</literal></expr>,
      <expr><literal type="string">"uDebugFlag"</literal></expr>,  <expr><literal type="string">"smaDebugFlag"</literal></expr>, <expr><literal type="string">"rpcDebugFlag"</literal></expr>, <expr><literal type="string">"qDebugFlag"</literal></expr>,   <expr><literal type="string">"metaDebugFlag"</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>optionSize</name> <init>= <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMCfgDnodeReq</name></type> <name>cfgReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMCfgDnodeReq</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, start to config, option:%s, value:%s"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndCheckOperPrivilege</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>MND_OPER_CONFIG_DNODE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDCfgDnodeReq</name></type> <name>dcfgReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"resetlog"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dcfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"resetlog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>cfgReq</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>flag</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>config</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>flag</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>flag</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, failed to config monitor since value:%d"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_CFG</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dcfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>dcfgReq</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>TSDB_DNODE_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>findOpt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>optionSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>d</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optName</name> <init>= <expr><name><name>options</name><index>[<expr><name>d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>     <name>optLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>optName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>optName</name></expr></argument>, <argument><expr><name>optLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>cfgReq</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>     <name>flag</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>config</name></name> <operator>+</operator> <name>optLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>flag</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, failed to config %s since value:%d"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name>optName</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_CFG</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>dcfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>optName</name></expr></argument>, <argument><expr><name>optLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>dcfgReq</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>TSDB_DNODE_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>findOpt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>findOpt</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_CFG</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, failed to config since %s"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>   <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>cfgReq</name><operator>.</operator><name>dnodeId</name></name> <operator>||</operator> <name><name>cfgReq</name><operator>.</operator><name>dnodeId</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>cfgReq</name><operator>.</operator><name>dnodeId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SEpSet</name></type>  <name>epSet</name> <init>= <expr><call><name>mndGetDnodeEpset</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>bufLen</name> <init>= <expr><call><name>tSerializeSDCfgDnodeReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dcfgReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>pBuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tSerializeSDCfgDnodeReq</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dcfgReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, send config req to dnode, app:%p config:%s value:%s"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>,
              <argument><expr><name><name>dcfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>dcfgReq</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_DND_CONFIG_DNODE</name></expr>, <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pBuf</name></expr>, <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>bufLen</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tmsgSendReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_DNODE_NOT_EXIST</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndProcessConfigDnodeRsp</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mInfo</name><argument_list>(<argument><expr><literal type="string">"config rsp from dnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveConfigs</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name><name>cfgOpts</name><index>[<expr><name>TSDB_CONFIG_NUMBER</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>cfgVals</name><index>[<expr><name>TSDB_CONFIG_NUMBER</name></expr>]</index><index>[<expr><name>TSDB_CONFIG_VALUE_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pWrite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>cfgOpts</name><index>[<expr><name>totalRows</name></expr>]</index></name> <operator>=</operator> <literal type="string">"statusInterval"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cfgVals</name><index>[<expr><name>totalRows</name></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>tsStatusInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>totalRows</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cfgOpts</name><index>[<expr><name>totalRows</name></expr>]</index></name> <operator>=</operator> <literal type="string">"timezone"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cfgVals</name><index>[<expr><name>totalRows</name></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>totalRows</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cfgOpts</name><index>[<expr><name>totalRows</name></expr>]</index></name> <operator>=</operator> <literal type="string">"locale"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cfgVals</name><index>[<expr><name>totalRows</name></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tsLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>totalRows</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cfgOpts</name><index>[<expr><name>totalRows</name></expr>]</index></name> <operator>=</operator> <literal type="string">"charset"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cfgVals</name><index>[<expr><name>totalRows</name></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>totalRows</name><operator>++</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TSDB_CONFIG_OPTION_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>bufVal</name><index>[<expr><name>TSDB_CONFIG_VALUE_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>cfgOpts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_OPTION_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>bufVal</name></expr></argument>, <argument><expr><name><name>cfgVals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>bufVal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextConfig</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mndRetrieveDnodes</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SShowObj</name> <modifier>*</modifier></type><name>pShow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnode</name>    <modifier>*</modifier></type><name>pMnode</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSdb</name>      <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeObj</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>curMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>sdbFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>SDB_DNODE</name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pShow</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>online</name> <init>= <expr><call><name>mndIsDnodeOnline</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name><name>pShow</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><name>cols</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>id</name> <init>= <expr><call><name>mndGetVnodesNum</name><argument_list>(<argument><expr><name>pMnode</name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>numOfSupportVnodes</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>b1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><ternary><condition><expr><name>online</name></expr> ?</condition><then> <expr><literal type="string">"ready"</literal></expr> </then><else>: <expr><literal type="string">"offline"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>createdTime</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>offlineReason</name><index>[<expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><ternary><condition><expr><name>online</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>offlineReason</name><index>[<expr><name><name>pDnode</name><operator>-&gt;</operator><name>offlineReason</name></name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>cols</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sdbRelease</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pShow</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mndCancelGetNextDnode</name><parameter_list>(<parameter><decl><type><name>SMnode</name> <modifier>*</modifier></type><name>pMnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSdb</name> <modifier>*</modifier></type><name>pSdb</name> <init>= <expr><name><name>pMnode</name><operator>-&gt;</operator><name>pSdb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sdbCancelFetch</name><argument_list>(<argument><expr><name>pSdb</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
