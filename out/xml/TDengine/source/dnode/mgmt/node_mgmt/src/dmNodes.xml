<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/node_mgmt/src/dmNodes.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmMgmt.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>dmOpenNode</name><parameter_list>(<parameter><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pDnode</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"node:%s, failed to create dir:%s since %s"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMgmtOutputOpt</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMgmtInputOpt</name></type>  <name>input</name> <init>= <expr><call><name>dmBuildMgmtInputOpt</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"node:%s, start to open"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmsgSetDefault</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>input</name><operator>.</operator><name>msgCb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>openFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"node:%s, failed to open since %s"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"node:%s, has been opened"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>deployed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>output</name><operator>.</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>=</operator> <name><name>output</name><operator>.</operator><name>pMgmt</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dmReportStartup</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"openned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmStartNode</name><parameter_list>(<parameter><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>startFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"node:%s, start to start"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>startFp</name></name>)<argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"node:%s, failed to start since %s"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"node:%s, has been started"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dmReportStartup</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmStopNode</name><parameter_list>(<parameter><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>stopFp</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"node:%s, start to stop"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>stopFp</name></name>)<argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"node:%s, has been stopped"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmCloseNode</name><parameter_list>(<parameter><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"node:%s, start to close"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>deployed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <while>while <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>refCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>closeFp</name></name>)<argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"node:%s, has been closed"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dmOpenNodes</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>EDndNodeType</name></type> <name>ntype</name> <init>= <expr><name>DNODE</name></expr></init></decl>;</init> <condition><expr><name>ntype</name> <operator>&lt;</operator> <name>NODE_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>ntype</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>ntype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>dmOpenNode</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"node:%s, failed to open since %s"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>dmSetStatus</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>DND_STAT_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dmStartNodes</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>EDndNodeType</name></type> <name>ntype</name> <init>= <expr><name>DNODE</name></expr></init></decl>;</init> <condition><expr><name>ntype</name> <operator>&lt;</operator> <name>NODE_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>ntype</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>ntype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>dmStartNode</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"node:%s, failed to start since %s"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"TDengine initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmReportStartup</name><argument_list>(<argument><expr><literal type="string">"TDengine"</literal></expr></argument>, <argument><expr><literal type="string">"initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmStopNodes</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>EDndNodeType</name></type> <name>n</name> <init>= <expr><name>DNODE</name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>NODE_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dmStopNode</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmCloseNodes</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>EDndNodeType</name></type> <name>n</name> <init>= <expr><name>DNODE</name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>NODE_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dmCloseNode</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmRunDnode</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmOpenNodes</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to open nodes since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmStartNodes</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to start nodes since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"TDengine is about to stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dmSetStatus</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>DND_STAT_STOPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dmStopNodes</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dmCloseNodes</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>osUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>
</unit>
