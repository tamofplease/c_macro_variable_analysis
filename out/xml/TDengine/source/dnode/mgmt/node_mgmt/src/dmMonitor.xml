<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/node_mgmt/src/dmMonitor.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmMgmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmNodes.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetMonitorBasicInfo</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SMonBasicInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dnode_id</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dnodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>cluster_id</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>clusterId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dnode_ep</name></name></expr></argument>, <argument><expr><name>tsLocalEp</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetMonitorDnodeInfo</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SMonDnodeInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uptime</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>rebootTime</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">86400000.0f</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>has_mnode</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>MNODE</name></expr>]</index></name><operator>.</operator><name>required</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>has_qnode</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>QNODE</name></expr>]</index></name><operator>.</operator><name>required</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>has_snode</name></name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>SNODE</name></expr>]</index></name><operator>.</operator><name>required</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>logdir</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>logdir</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>logdir</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>tsLogSpace</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tempdir</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tempdir</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tempdir</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>tsTempSpace</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetDmMonitorInfo</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonDmInfo</name></type> <name>dmInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dmGetMonitorBasicInfo</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dmInfo</name><operator>.</operator><name>basic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmGetMonitorDnodeInfo</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dmInfo</name><operator>.</operator><name>dnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmGetMonitorSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dmInfo</name><operator>.</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monSetDmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetMmMonitorInfo</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>MNODE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmMarkWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMonMmInfo</name></type> <name>mmInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mmGetMonitorInfo</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>monSetMmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSMonMmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetVmMonitorInfo</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>VNODE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmMarkWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMonVmInfo</name></type> <name>vmInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vmGetMonitorInfo</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>monSetVmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSMonVmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetQmMonitorInfo</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>QNODE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmMarkWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMonQmInfo</name></type> <name>qmInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qmGetMonitorInfo</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>monSetQmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSMonQmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qmInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetSmMonitorInfo</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>SNODE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmMarkWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMonSmInfo</name></type> <name>smInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smGetMonitorInfo</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>monSetSmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSMonSmInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmSendMonitorReport</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tsEnableMonitor</name> <operator>||</operator> <name><name>tsMonitorFqdn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>tsMonitorPort</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>dTrace</name><argument_list>(<argument><expr><literal type="string">"send monitor report to %s:%u"</literal></expr></argument>, <argument><expr><name>tsMonitorFqdn</name></expr></argument>, <argument><expr><name>tsMonitorPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dmGetDmMonitorInfo</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmGetMmMonitorInfo</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmGetVmMonitorInfo</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmGetQmMonitorInfo</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmGetSmMonitorInfo</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monSendReport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmGetVnodeLoads</name><parameter_list>(<parameter><decl><type><name>SMonVloadInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnode</name>       <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>VNODE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmMarkWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vmGetVnodeLoads</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmGetMnodeLoads</name><parameter_list>(<parameter><decl><type><name>SMonMloadInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnode</name>       <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>MNODE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmMarkWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mmGetMnodeLoads</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmGetQnodeLoads</name><parameter_list>(<parameter><decl><type><name>SQnodeLoad</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnode</name>       <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>QNODE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmMarkWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qmGetQnodeLoads</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
