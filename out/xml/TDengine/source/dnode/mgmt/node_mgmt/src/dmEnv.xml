<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/node_mgmt/src/dmEnv.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmMgmt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SDnode</name></type> <name>global</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>SDnode</name> <modifier>*</modifier></type><name>dmInstance</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>global</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dmCheckRepeatInit</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>once</name></name></expr></argument>, <argument><expr><name>DND_ENV_INIT</name></expr></argument>, <argument><expr><name>DND_ENV_READY</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DND_ENV_INIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"env is already initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_REPEAT_INIT</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dmInitSystem</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosIgnSIGPIPE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosBlockSIGPIPE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosResolveCRC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dmInitMonitor</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonCfg</name></type> <name>monCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>monCfg</name><operator>.</operator><name>maxLogs</name></name> <operator>=</operator> <name>tsMonitorMaxLogs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>monCfg</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name>tsMonitorPort</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>monCfg</name><operator>.</operator><name>server</name></name> <operator>=</operator> <name>tsMonitorFqdn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>monCfg</name><operator>.</operator><name>comp</name></name> <operator>=</operator> <name>tsMonitorComp</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>monInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>monCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init monitor since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dmCheckDiskSpace</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>osUpdate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// sufficiency</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osDataSpaceSufficient</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dWarn</name><argument_list>(<argument><expr><literal type="string">"free data disk size: %f GB, not sufficient, expected %f GB at least"</literal></expr></argument>,
          <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>tsDataSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>avail</name></name> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,
          <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>tsDataSpace</name><operator>.</operator><name>reserved</name></name> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osLogSpaceSufficient</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dWarn</name><argument_list>(<argument><expr><literal type="string">"free log disk size: %f GB, not sufficient, expected %f GB at least"</literal></expr></argument>,
          <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>tsLogSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>avail</name></name> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,
          <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>tsLogSpace</name><operator>.</operator><name>reserved</name></name> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceSufficient</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dWarn</name><argument_list>(<argument><expr><literal type="string">"free temp disk size: %f GB, not sufficient, expected %f GB at least"</literal></expr></argument>,
          <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>tsTempSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>avail</name></name> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>,
          <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>tsTempSpace</name><operator>.</operator><name>reserved</name></name> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// availability</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osDataSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"data disk space unavailable, i.e. %s"</literal></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_DISKSPACE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osLogSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"log disk space unavailable, i.e. %s"</literal></expr></argument>, <argument><expr><name>tsLogDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_DISKSPACE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"temp disk space unavailable, i.e. %s"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_DISKSPACE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dmCheckDataDirVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>checkDataDirJsonFileName</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>checkDataDirJsonFileName</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s/dnode/dnodeCfg.json"</literal></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>checkDataDirJsonFileName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"The default data directory %s contains old data of tdengine 2.x, please clear it before running!"</literal></expr></argument>,
           <argument><expr><name>tsDataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"start to init dnode env"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dmCheckDataDirVersion</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dmCheckDiskSpace</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmCheckRepeatInit</name><argument_list>(<argument><expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmInitSystem</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmInitMonitor</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmInitDnode</name><argument_list>(<argument><expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"dnode env is initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dmCheckRepeatCleanup</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>once</name></name></expr></argument>, <argument><expr><name>DND_ENV_READY</name></expr></argument>, <argument><expr><name>DND_ENV_CLEANUP</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DND_ENV_READY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"dnode env is already cleaned up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmCleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"start to cleanup dnode env"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmCheckRepeatCleanup</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>dmCleanupDnode</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>monCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncCleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>walCleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>udfcClose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>udfStopUdfd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosStopCacheRefreshWorker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"dnode env is cleaned up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosCleanupCfg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmStop</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmRun</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>dmRunDnode</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dmProcessCreateNodeReq</name><parameter_list>(<parameter><decl><type><name>EDndNodeType</name></type> <name>ntype</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><call><name>dmAcquireWrapper</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>ntype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWrapper</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>ntype</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>MNODE</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MNODE_ALREADY_DEPLOYED</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>QNODE</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QNODE_ALREADY_DEPLOYED</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SNODE</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SNODE_ALREADY_DEPLOYED</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to create node since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pWrapper</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>ntype</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to create dir:%s since %s"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMgmtInputOpt</name></type> <name>input</name> <init>= <expr><call><name>dmBuildMgmtInputOpt</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"node:%s, start to create"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>createFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"node:%s, failed to create since %s"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"node:%s, has been created"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dmOpenNode</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dmStartNode</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>deployed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>required</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dmProcessDropNodeReq</name><parameter_list>(<parameter><decl><type><name>EDndNodeType</name></type> <name>ntype</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><call><name>dmAcquireWrapper</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>ntype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWrapper</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>ntype</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>MNODE</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MNODE_NOT_DEPLOYED</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>QNODE</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QNODE_NOT_DEPLOYED</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SNODE</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SNODE_NOT_DEPLOYED</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to drop node since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SMgmtInputOpt</name></type> <name>input</name> <init>= <expr><call><name>dmBuildMgmtInputOpt</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"node:%s, start to drop"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>dropFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"node:%s, failed to drop since %s"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"node:%s, has been dropped"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>required</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>deployed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dmStopNode</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dmCloseNode</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosRemoveDir</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMgmtInputOpt</name></type> <name>dmBuildMgmtInputOpt</name><parameter_list>(<parameter><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtInputOpt</name></type> <name>opt</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>path</name> <operator>=</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>path</name></name></expr>,
      <expr><operator>.</operator><name>name</name> <operator>=</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr>,
      <expr><operator>.</operator><name>pData</name> <operator>=</operator> <operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>pDnode</name><operator>-&gt;</operator><name>data</name></name></expr>,
      <expr><operator>.</operator><name>processCreateNodeFp</name> <operator>=</operator> <name>dmProcessCreateNodeReq</name></expr>,
      <expr><operator>.</operator><name>processDropNodeFp</name> <operator>=</operator> <name>dmProcessDropNodeReq</name></expr>,
      <expr><operator>.</operator><name>sendMonitorReportFp</name> <operator>=</operator> <name>dmSendMonitorReport</name></expr>,
      <expr><operator>.</operator><name>getVnodeLoadsFp</name> <operator>=</operator> <name>dmGetVnodeLoads</name></expr>,
      <expr><operator>.</operator><name>getMnodeLoadsFp</name> <operator>=</operator> <name>dmGetMnodeLoads</name></expr>,
      <expr><operator>.</operator><name>getQnodeLoadsFp</name> <operator>=</operator> <name>dmGetQnodeLoads</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>opt</name><operator>.</operator><name>msgCb</name></name> <operator>=</operator> <call><name>dmGetMsgcb</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pDnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>opt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmReportStartup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pDesc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStartupInfo</name> <modifier>*</modifier></type><name>pStartup</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><call><name>dmInstance</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>startup</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pStartup</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name>TSDB_STEP_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pStartup</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>pDesc</name></expr></argument>, <argument><expr><name>TSDB_STEP_DESC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"step:%s, %s"</literal></expr></argument>, <argument><expr><name><name>pStartup</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pStartup</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
