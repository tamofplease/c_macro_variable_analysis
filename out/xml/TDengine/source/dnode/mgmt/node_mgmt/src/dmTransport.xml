<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/node_mgmt/src/dmTransport.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmMgmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dmSendRsp</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>rpcSendResponse</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dmBuildMnodeRedirectRsp</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dmGetMnodeEpSetForRedirect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSEpSet</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tSerializeSEpSet</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmProcessNodeMsg</name><parameter_list>(<parameter><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>NodeMsgFp</name></type> <name>msgFp</name> <init>= <expr><name><name>pWrapper</name><operator>-&gt;</operator><name>msgFps</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgFp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MSG_NOT_PROCESSED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"msg:%p, not processed since no handler"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, will be processed by %s"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>wrapper</name></name> <operator>=</operator> <name>pWrapper</name></expr>;</expr_stmt>
  <return>return <expr><call>(<modifier>*</modifier><name>msgFp</name>)<argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dmFailFastFp</name><parameter_list>(<parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// add more msg type later</comment>
  <return>return <expr><name>msgType</name> <operator>==</operator> <name>TDMT_SYNC_HEARTBEAT</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SYNC_APPEND_ENTRIES</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmProcessRpcMsg</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRpc</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeTrans</name>  <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>trans</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name>      <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDnodeHandle</name> <modifier>*</modifier></type><name>pHandle</name> <init>= <expr><operator>&amp;</operator><name><name>pTrans</name><operator>-&gt;</operator><name>msgHandles</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pRpc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%s is received, handle:%p len:%d code:0x%x app:%p refId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_DND_NET_TEST</name></expr>:</case>
      <expr_stmt><expr><call><name>dmProcessNetTestReq</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    <case>case <expr><name>TDMT_MND_SYSTABLE_RETRIEVE_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_DND_SYSTABLE_RETRIEVE_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_FETCH_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_FETCH_RSP</name></expr>:</case>
    <case>case <expr><name>TDMT_VND_SUBMIT_RSP</name></expr>:</case>
      <expr_stmt><expr><call><name>qWorkerProcessRspMsg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    <case>case <expr><name>TDMT_MND_STATUS_RSP</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>pEpSet</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dmSetMnodeEpSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>DND_STAT_RUNNING</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_DND_SERVER_STATUS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dmProcessServerStartupStatus</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DND_STAT_INIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_IS_STARTING</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_IS_STOPPING</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IsReq</name><argument_list>(<argument><expr><name>pRpc</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pRpc</name><operator>-&gt;</operator><name>contLen</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"msg:%p, type:%s pCont is NULL"</literal></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG_LEN</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>defaultNtype</name></name> <operator>==</operator> <name>NODE_END</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"msg:%p, type:%s not processed since no handle"</literal></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MSG_NOT_PROCESSED</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pWrapper</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name><name>pHandle</name><operator>-&gt;</operator><name>defaultNtype</name></name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>needCheckVgId</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pRpc</name><operator>-&gt;</operator><name>contLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type>   <name>vgId</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><name>vgId</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>QNODE_HANDLE</name></expr>:</case>
          <expr_stmt><expr><name>pWrapper</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>QNODE</name></expr>]</index></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>SNODE_HANDLE</name></expr>:</case>
          <expr_stmt><expr><name>pWrapper</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>SNODE</name></expr>]</index></name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>MNODE_HANDLE</name></expr>:</case>
          <expr_stmt><expr><name>pWrapper</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>MNODE</name></expr>]</index></name></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"msg:%p, type:%s contLen is 0"</literal></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG_LEN</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmMarkWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pWrapper</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>wrapper</name></name> <operator>=</operator> <name>pWrapper</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pMsg</name> <operator>=</operator> <call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>RPC_QITEM</name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, is created, type:%s handle:%p len:%d"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>dmProcessNodeMsg</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pMsg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, failed to process %s since %s"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, failed to process empty msg since %s"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IsReq</name><argument_list>(<argument><expr><name>pRpc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>, <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pRpc</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_MNODE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dmBuildMnodeRedirectRsp</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>pWrapper</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dmSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>rpcSendResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, is freed"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dmReleaseWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmInitMsgHandle</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeTrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>trans</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>EDndNodeType</name></type> <name>ntype</name> <init>= <expr><name>DNODE</name></expr></init></decl>;</init> <condition><expr><name>ntype</name> <operator>&lt;</operator> <name>NODE_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>ntype</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>ntype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name>       <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>getHandlesFp</name></name>)<argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMgmtHandle</name>  <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDnodeHandle</name> <modifier>*</modifier></type><name>pHandle</name> <init>= <expr><operator>&amp;</operator><name><name>pTrans</name><operator>-&gt;</operator><name>msgHandles</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>needCheckVgId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>needCheckVgId</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>needCheckVgId</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>needCheckVgId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>defaultNtype</name></name> <operator>=</operator> <name>ntype</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>msgFps</name><index>[<expr><call><name>TMSG_INDEX</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>msgFp</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>dmSendReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name> <init>= <expr><call><name>dmInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>DND_STAT_RUNNING</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>&lt;</operator> <name>TDMT_SYNC_MSG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DND_STAT_INIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_IS_STARTING</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_IS_STOPPING</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to send rpc msg:%s since %s, handle:%p"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>rpcSendRequest</name><argument_list>(<argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>clientRpc</name></name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dmRegisterBrokenLinkArg</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>rpcRegisterBrokenLinkArg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dmReleaseHandle</name><parameter_list>(<parameter><decl><type><name>SRpcHandleInfo</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>rpcReleaseHandle</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>rpcRfp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_RPC_NETWORK_UNAVAIL</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_RPC_BROKEN_LINK</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_MNODE_NOT_FOUND</name> <operator>||</operator>
      <name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_RESTORING</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_VND_STOPPED</name> <operator>||</operator>
      <name>code</name> <operator>==</operator> <name>TSDB_CODE_APP_IS_STARTING</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_APP_IS_STOPPING</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_SCH_QUERY</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_MERGE_QUERY</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_FETCH</name> <operator>||</operator>
        <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_MERGE_FETCH</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmInitClient</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeTrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>trans</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcInit</name></type> <name>rpcInit</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"DND-C"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <name>tsNumOfRpcThreads</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <operator>(</operator><name>RpcCfp</name><operator>)</operator><name>dmProcessRpcMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>TAOS_CONN_CLIENT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>idleTime</name></name> <operator>=</operator> <name>tsShellActivityTimer</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>pDnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>rfp</name></name> <operator>=</operator> <name>rpcRfp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>compressSize</name></name> <operator>=</operator> <name>tsCompressMsgSize</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryLimit</name></name> <operator>=</operator> <name>tsRpcRetryLimit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryInterval</name></name> <operator>=</operator> <name>tsRpcRetryInterval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryMinInterval</name></name> <operator>=</operator> <name>tsRedirectPeriod</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryStepFactor</name></name> <operator>=</operator> <name>tsRedirectFactor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryMaxInterval</name></name> <operator>=</operator> <name>tsRedirectMaxPeriod</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryMaxTimouet</name></name> <operator>=</operator> <name>tsMaxRetryWaitTime</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>failFastInterval</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>  <comment type="line">// interval threshold(ms)</comment>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>failFastThreshold</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>    <comment type="line">// failed threshold</comment>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>ffp</name></name> <operator>=</operator> <name>dmFailFastFp</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>clientRpc</name></name> <operator>=</operator> <call><name>rpcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>clientRpc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init dnode rpc client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"dnode rpc client is initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmCleanupClient</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeTrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>trans</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>clientRpc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcClose</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>clientRpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>clientRpc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"dnode rpc client is closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmInitServer</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeTrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>trans</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRpcInit</name></type> <name>rpcInit</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>rpcInit</name><operator>.</operator><name>localFqdn</name></name></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>localPort</name></name> <operator>=</operator> <name>tsServerPort</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"DND-S"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <name>tsNumOfRpcThreads</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <operator>(</operator><name>RpcCfp</name><operator>)</operator><name>dmProcessRpcMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <name>tsMaxShellConns</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>TAOS_CONN_SERVER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>idleTime</name></name> <operator>=</operator> <name>tsShellActivityTimer</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>pDnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>compressSize</name></name> <operator>=</operator> <name>tsCompressMsgSize</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>serverRpc</name></name> <operator>=</operator> <call><name>rpcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>serverRpc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init dnode rpc server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"dnode rpc server is initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmCleanupServer</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeTrans</name> <modifier>*</modifier></type><name>pTrans</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>trans</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTrans</name><operator>-&gt;</operator><name>serverRpc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcClose</name><argument_list>(<argument><expr><name><name>pTrans</name><operator>-&gt;</operator><name>serverRpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrans</name><operator>-&gt;</operator><name>serverRpc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"dnode rpc server is closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SMsgCb</name></type> <name>dmGetMsgcb</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgCb</name></type> <name>msgCb</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>clientRpc</name> <operator>=</operator> <name><name>pDnode</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>clientRpc</name></name></expr>,
      <expr><operator>.</operator><name>sendReqFp</name> <operator>=</operator> <name>dmSendReq</name></expr>,
      <expr><operator>.</operator><name>sendRspFp</name> <operator>=</operator> <name>dmSendRsp</name></expr>,
      <expr><operator>.</operator><name>registerBrokenLinkArgFp</name> <operator>=</operator> <name>dmRegisterBrokenLinkArg</name></expr>,
      <expr><operator>.</operator><name>releaseHandleFp</name> <operator>=</operator> <name>dmReleaseHandle</name></expr>,
      <expr><operator>.</operator><name>reportStartupFp</name> <operator>=</operator> <name>dmReportStartup</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>msgCb</name></expr>;</return>
</block_content>}</block></function>
</unit>
