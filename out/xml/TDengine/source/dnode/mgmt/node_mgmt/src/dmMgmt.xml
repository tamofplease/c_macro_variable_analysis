<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/node_mgmt/src/dmMgmt.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmMgmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmNodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dmRequireNode</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtInputOpt</name></type> <name>input</name> <init>= <expr><call><name>dmBuildMgmtInputOpt</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>required</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call>(<modifier>*</modifier><name><name>pWrapper</name><operator>-&gt;</operator><name>func</name><operator>.</operator><name>requiredFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>required</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>required</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"node:%s, does not require startup"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"node:%s, required to startup"</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>required</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dmInitVars</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>clusterId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeVer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>rebootTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init dnode hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmReadEps</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read file since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>dropped</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"dnode will not start since its already dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmClearVars</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>EDndNodeType</name></type> <name>ntype</name> <init>= <expr><name>DNODE</name></expr></init></decl>;</init> <condition><expr><name>ntype</name> <operator>&lt;</operator> <name>NODE_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>ntype</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>ntype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>lockfile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosUnLockFile</name><argument_list>(<argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>lockfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>lockfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>lockfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeHash</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeHash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmInitDnode</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"start to create dnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>path</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmInitVars</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>DNODE</name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <call><name>dmGetMgmtFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>MNODE</name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <call><name>mmGetMgmtFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>VNODE</name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <call><name>vmGetMgmtFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>QNODE</name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <call><name>qmGetMgmtFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>SNODE</name></expr>]</index></name><operator>.</operator><name>func</name> <operator>=</operator> <call><name>smGetMgmtFunc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>EDndNodeType</name></type> <name>ntype</name> <init>= <expr><name>DNODE</name></expr></init></decl>;</init> <condition><expr><name>ntype</name> <operator>&lt;</operator> <name>NODE_END</name></expr>;</condition> <incr><expr><operator>++</operator><name>ntype</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>ntype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pDnode</name></name> <operator>=</operator> <name>pDnode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>dmNodeName</name><argument_list>(<argument><expr><name>ntype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>ntype</name></name> <operator>=</operator> <name>ntype</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>required</name></name> <operator>=</operator> <call><name>dmRequireNode</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>dmInitMsgHandle</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init msg handles since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>lockfile</name></name> <operator>=</operator> <call><name>dmCheckRunning</name><argument_list>(<argument><expr><name>tsDataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>lockfile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmInitServer</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init transport since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmInitClient</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>indexInit</name><argument_list>(<argument><expr><name>tsNumOfCommitThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dmReportStartup</name><argument_list>(<argument><expr><literal type="string">"dnode-transport"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"dnode is created, ptr:%p"</literal></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pDnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dmClearVars</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDnode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to create dnode since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmCleanupDnode</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pDnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>dmCleanupClient</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmCleanupServer</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmClearVars</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>indexCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosConvDestroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"dnode is closed, ptr:%p"</literal></expr></argument>, <argument><expr><name>pDnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmSetStatus</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>EDndRunStatus</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>status</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"dnode status set from %s to %s"</literal></expr></argument>, <argument><expr><call><name>dmStatStr</name><argument_list>(<argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dmStatStr</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDnode</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>dmAcquireWrapper</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>EDndNodeType</name></type> <name>ntype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>&amp;</operator><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>ntype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pRetWrapper</name> <init>= <expr><name>pWrapper</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>deployed</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>refCount</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// dTrace("node:%s, is acquired, ref:%d", pWrapper-&gt;name, refCount);</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pRetWrapper</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pRetWrapper</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmMarkWrapper</name><parameter_list>(<parameter><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>deployed</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>refCount</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// dTrace("node:%s, is marked, ref:%d", pWrapper-&gt;name, refCount);</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>ntype</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>MNODE</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MNODE_NOT_FOUND</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>QNODE</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QNODE_NOT_FOUND</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SNODE</name></expr>:</case>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SNODE_NOT_FOUND</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_IS_STOPPING</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmReleaseWrapper</name><parameter_list>(<parameter><decl><type><name>SMgmtWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pWrapper</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>refCount</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// dTrace("node:%s, is released, ref:%d", pWrapper-&gt;name, refCount);</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetServerStartupStatus</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SServerStatusRsp</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><name><name>pDnode</name><operator>-&gt;</operator><name>wrappers</name><index>[<expr><name>DNODE</name></expr>]</index></name><operator>.</operator><name>pMgmt</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>details</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DND_STAT_INIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>statusCode</name></name> <operator>=</operator> <name>TSDB_SRV_STATUS_NETWORK_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>details</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>details</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>startup</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pDnode</name><operator>-&gt;</operator><name>startup</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pDnode</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DND_STAT_STOPPED</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>statusCode</name></name> <operator>=</operator> <name>TSDB_SRV_STATUS_EXTING</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>statusCode</name></name> <operator>=</operator> <name>TSDB_SRV_STATUS_SERVICE_OK</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmProcessNetTestReq</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"msg:%p, net test req will be processed"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>rpcSendResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmProcessServerStartupStatus</name><parameter_list>(<parameter><decl><type><name>SDnode</name> <modifier>*</modifier></type><name>pDnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"msg:%p, server startup status req will be processed"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SServerStatusRsp</name></type> <name>statusRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dmGetServerStartupStatus</name><argument_list>(<argument><expr><name>pDnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSServerStatusRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tSerializeSServerStatusRsp</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>rpcSendResponse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
