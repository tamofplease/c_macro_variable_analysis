<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/mgmt_qnode/src/qmHandle.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http:www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qmInt.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>qmGetMonitorInfo</name><parameter_list>(<parameter><decl><type><name>SQnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SMonQmInfo</name> <modifier>*</modifier></type><name>qmInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQnodeLoad</name></type> <name>qload</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qndGetLoad</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pQnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>qload</name><operator>.</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qmGetQnodeLoads</name><parameter_list>(<parameter><decl><type><name>SQnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SQnodeLoad</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qndGetLoad</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pQnode</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qmProcessCreateReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDCreateQnodeReq</name></type> <name>createReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSCreateDropMQSNodeReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>createReq</name><operator>.</operator><name>dnodeId</name></name> <operator>!=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_OPTION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to create qnode since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>deployed</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmWriteFile</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>deployed</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to write qnode file since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qmProcessDropReq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDDropQnodeReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSCreateDropMQSNodeReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name> <operator>!=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_OPTION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to drop qnode since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>deployed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmWriteFile</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>deployed</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to write qnode file since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name> <modifier>*</modifier></type><name>qmGetMsgHandles</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMgmtHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// Requests handled by VNODE</comment>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY</name></expr></argument>, <argument><expr><name>qmPutNodeMsgToQueryQueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_MERGE_QUERY</name></expr></argument>, <argument><expr><name>qmPutNodeMsgToQueryQueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY_CONTINUE</name></expr></argument>, <argument><expr><name>qmPutNodeMsgToQueryQueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_FETCH</name></expr></argument>, <argument><expr><name>qmPutNodeMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_MERGE_FETCH</name></expr></argument>, <argument><expr><name>qmPutNodeMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_FETCH_RSP</name></expr></argument>, <argument><expr><name>qmPutNodeMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr></argument>, <argument><expr><name>qmPutNodeMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_CANCEL_TASK</name></expr></argument>, <argument><expr><name>qmPutNodeMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_DROP_TASK</name></expr></argument>, <argument><expr><name>qmPutNodeMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>pArray</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
