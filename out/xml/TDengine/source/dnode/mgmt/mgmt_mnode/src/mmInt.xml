<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/mgmt_mnode/src/mmInt.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http:www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mmDeployRequired</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>clusterId</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tsLocalEp</name></expr></argument>, <argument><expr><name>tsFirst</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mmRequire</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>required</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnodeOpt</name></type> <name>option</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mmReadFile</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>option</name><operator>.</operator><name>deploy</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>required</name> <operator>=</operator> <call><name>mmDeployRequired</name><argument_list>(<argument><expr><name>pInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>required</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmBuildOptionForDeploy</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>SMnodeOpt</name> <modifier>*</modifier></type><name>pOption</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>deploy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>msgCb</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>selfIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>numOfReplicas</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>replicas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>replicas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <name>tsServerPort</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pOption</name><operator>-&gt;</operator><name>replicas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmBuildOptionForOpen</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SMnodeOpt</name> <modifier>*</modifier></type><name>pOption</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>deploy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>msgCb</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmClose</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mmStopWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mndClose</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mmOpen</name><parameter_list>(<parameter><decl><type><name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>SMgmtOutputOpt</name> <modifier>*</modifier></type><name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>walInit</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init wal since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncInit</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init sync since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMnodeMgmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMgmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>putToQueueFp</name></name> <operator>=</operator> <operator>(</operator><name>PutToQueueFp</name><operator>)</operator><name>mmPutMsgToQueue</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>mgmt</name></name> <operator>=</operator> <name>pMgmt</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMnodeOpt</name></type> <name>option</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mmReadFile</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read file since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mmClose</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>option</name><operator>.</operator><name>deploy</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"mnode start to deploy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mmBuildOptionForDeploy</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pInput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"mnode start to open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mmBuildOptionForOpen</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name> <operator>=</operator> <call><name>mndOpen</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to open mnode since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mmClose</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"mnode-impl"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mmStartWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to start mnode worker since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mmClose</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"mnode-worker"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>.</operator><name>numOfReplicas</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>option</name><operator>.</operator><name>deploy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>option</name><operator>.</operator><name>numOfReplicas</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mmWriteFile</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to write mnode file since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>=</operator> <name>pMgmt</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mmStart</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"mnode-mgmt start to run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>mndStart</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmStop</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"mnode-mgmt start to stop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mndPreClose</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>stopped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>mndStop</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SMgmtFunc</name></type> <name>mmGetMgmtFunc</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtFunc</name></type> <name>mgmtFunc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>openFp</name></name> <operator>=</operator> <name>mmOpen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>closeFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeCloseFp</name><operator>)</operator><name>mmClose</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>startFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeStartFp</name><operator>)</operator><name>mmStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>stopFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeStopFp</name><operator>)</operator><name>mmStop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>createFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeCreateFp</name><operator>)</operator><name>mmProcessCreateReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>dropFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeDropFp</name><operator>)</operator><name>mmProcessDropReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>requiredFp</name></name> <operator>=</operator> <name>mmRequire</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>getHandlesFp</name></name> <operator>=</operator> <name>mmGetMsgHandles</name></expr>;</expr_stmt>

  <return>return <expr><name>mgmtFunc</name></expr>;</return>
</block_content>}</block></function>
</unit>
