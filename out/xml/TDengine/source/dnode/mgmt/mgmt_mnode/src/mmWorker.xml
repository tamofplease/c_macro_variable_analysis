<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/mgmt_mnode/src/mmWorker.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http:www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmInt.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mmAcquire</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>stopped</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mmRelease</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mmSendRsp</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmProcessRpcMsg</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, get from mnode queue"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndProcessRpcMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IsReq</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mmSendRsp</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_RESTORING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mndPostProcessQueryMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p is freed, code:%s"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmProcessSyncMsg</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, get from mnode-sync queue"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mndProcessSyncMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, is freed, code:0x%x"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mmPutMsgToWorker</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SSingleWorker</name> <modifier>*</modifier></type><name>pWorker</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mmAcquire</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, put into %s queue, type:%s"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pWorker</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pWorker</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mmRelease</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, failed to put into %s queue since %s, type:%s"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pWorker</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mmPutMsgToWriteQueue</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>mmPutMsgToWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>writeWorker</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mmPutMsgToSyncQueue</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>mmPutMsgToWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncWorker</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mmPutMsgToSyncCtrlQueue</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>mmPutMsgToWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncCtrlWorker</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mmPutMsgToReadQueue</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>mmPutMsgToWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>readWorker</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mmPutMsgToQueryQueue</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pMnode</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>mndPreProcessQueryMsg</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"msg:%p, failed to pre-process in mnode since %s, type:%s"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>mmPutMsgToWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>queryWorker</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mmPutMsgToFetchQueue</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>mmPutMsgToWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>fetchWorker</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mmPutMsgToQueue</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>EQueueType</name></type> <name>qtype</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRpc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSingleWorker</name> <modifier>*</modifier></type><name>pWorker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>qtype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>WRITE_QUEUE</name></expr>:</case>
      <expr_stmt><expr><name>pWorker</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>writeWorker</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_QUEUE</name></expr>:</case>
      <expr_stmt><expr><name>pWorker</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>queryWorker</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>FETCH_QUEUE</name></expr>:</case>
      <expr_stmt><expr><name>pWorker</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>fetchWorker</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>READ_QUEUE</name></expr>:</case>
      <expr_stmt><expr><name>pWorker</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>readWorker</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SYNC_QUEUE</name></expr>:</case>
      <expr_stmt><expr><name>pWorker</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncWorker</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SYNC_CTRL_QUEUE</name></expr>:</case>
      <expr_stmt><expr><name>pWorker</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncCtrlWorker</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>pWorker</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>RPC_QITEM</name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, is created and will put into %s queue, type:%s len:%d"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pWorker</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>mmPutMsgToWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pWorker</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, is freed"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mmStartWorker</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSingleWorkerCfg</name></type> <name>qCfg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>min</name> <operator>=</operator> <name>tsNumOfMnodeQueryThreads</name></expr>,
      <expr><operator>.</operator><name>max</name> <operator>=</operator> <name>tsNumOfMnodeQueryThreads</name></expr>,
      <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mnode-query"</literal></expr>,
      <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItem</name><operator>)</operator><name>mmProcessRpcMsg</name></expr>,
      <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pMgmt</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSingleWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>queryWorker</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to start mnode-query worker since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSingleWorkerCfg</name></type> <name>fCfg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>min</name> <operator>=</operator> <name>tsNumOfMnodeFetchThreads</name></expr>,
      <expr><operator>.</operator><name>max</name> <operator>=</operator> <name>tsNumOfMnodeFetchThreads</name></expr>,
      <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mnode-fetch"</literal></expr>,
      <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItem</name><operator>)</operator><name>mmProcessRpcMsg</name></expr>,
      <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pMgmt</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSingleWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>fetchWorker</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to start mnode-fetch worker since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSingleWorkerCfg</name></type> <name>rCfg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>min</name> <operator>=</operator> <name>tsNumOfMnodeReadThreads</name></expr>,
      <expr><operator>.</operator><name>max</name> <operator>=</operator> <name>tsNumOfMnodeReadThreads</name></expr>,
      <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mnode-read"</literal></expr>,
      <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItem</name><operator>)</operator><name>mmProcessRpcMsg</name></expr>,
      <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pMgmt</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSingleWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>readWorker</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to start mnode-read worker since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSingleWorkerCfg</name></type> <name>wCfg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>min</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>max</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mnode-write"</literal></expr>,
      <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItem</name><operator>)</operator><name>mmProcessRpcMsg</name></expr>,
      <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pMgmt</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSingleWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>writeWorker</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to start mnode-write worker since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSingleWorkerCfg</name></type> <name>sCfg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>min</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>max</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mnode-sync"</literal></expr>,
      <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItem</name><operator>)</operator><name>mmProcessSyncMsg</name></expr>,
      <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pMgmt</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSingleWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncWorker</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to start mnode mnode-sync worker since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSingleWorkerCfg</name></type> <name>scCfg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>min</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>max</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mnode-sync-ctrl"</literal></expr>,
      <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItem</name><operator>)</operator><name>mmProcessSyncMsg</name></expr>,
      <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pMgmt</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSingleWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncCtrlWorker</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to start mnode mnode-sync-ctrl worker since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"mnode workers are initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mmStopWorker</name><parameter_list>(<parameter><decl><type><name>SMnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>refCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><call><name>tSingleWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>queryWorker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSingleWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>fetchWorker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSingleWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>readWorker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSingleWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>writeWorker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSingleWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncWorker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSingleWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>syncCtrlWorker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"mnode workers are closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
