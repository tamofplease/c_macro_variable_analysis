<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/mgmt_vnode/src/vmHandle.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http:www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vmInt.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>vmGetVnodeLoads</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SMonVloadInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isReset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pVloads</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>totalVnodes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeLoad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pVloads</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVnode</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ppVnode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ppVnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><operator>*</operator><name>ppVnode</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVnodeLoad</name></type> <name>vload</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vnodeGetLoad</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isReset</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vnodeResetLoad</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pVloads</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vmGetMonitorInfo</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SMonVmInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMonVloadInfo</name></type> <name>vloads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vmGetVnodeLoads</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vloads</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pVloads</name> <init>= <expr><name><name>vloads</name><operator>.</operator><name>pVloads</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVloads</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalVnodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>masterNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfSelectReqs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfInsertReqs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfInsertSuccessReqs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfBatchInsertReqs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfBatchInsertSuccessReqs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pVloads</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeLoad</name> <modifier>*</modifier></type><name>pLoad</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pVloads</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>numOfSelectReqs</name> <operator>+=</operator> <name><name>pLoad</name><operator>-&gt;</operator><name>numOfSelectReqs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfInsertReqs</name> <operator>+=</operator> <name><name>pLoad</name><operator>-&gt;</operator><name>numOfInsertReqs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfInsertSuccessReqs</name> <operator>+=</operator> <name><name>pLoad</name><operator>-&gt;</operator><name>numOfInsertSuccessReqs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfBatchInsertReqs</name> <operator>+=</operator> <name><name>pLoad</name><operator>-&gt;</operator><name>numOfBatchInsertReqs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfBatchInsertSuccessReqs</name> <operator>+=</operator> <name><name>pLoad</name><operator>-&gt;</operator><name>numOfBatchInsertSuccessReqs</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pLoad</name><operator>-&gt;</operator><name>syncState</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>masterNum</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>totalVnodes</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vstat</name><operator>.</operator><name>totalVnodes</name></name> <operator>=</operator> <name>totalVnodes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vstat</name><operator>.</operator><name>masterNum</name></name> <operator>=</operator> <name>masterNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vstat</name><operator>.</operator><name>numOfSelectReqs</name></name> <operator>=</operator> <name>numOfSelectReqs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vstat</name><operator>.</operator><name>numOfInsertReqs</name></name> <operator>=</operator> <name>numOfInsertReqs</name></expr>;</expr_stmt>                          <comment type="line">// delta</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vstat</name><operator>.</operator><name>numOfInsertSuccessReqs</name></name> <operator>=</operator> <name>numOfInsertSuccessReqs</name></expr>;</expr_stmt>            <comment type="line">// delta</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vstat</name><operator>.</operator><name>numOfBatchInsertReqs</name></name> <operator>=</operator> <name>numOfBatchInsertReqs</name></expr>;</expr_stmt>                <comment type="line">// delta</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vstat</name><operator>.</operator><name>numOfBatchInsertSuccessReqs</name></name> <operator>=</operator> <name>numOfBatchInsertSuccessReqs</name></expr>;</expr_stmt>  <comment type="line">// delta</comment>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>totalVnodes</name></name> <operator>=</operator> <name>totalVnodes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>masterNum</name></name> <operator>=</operator> <name>masterNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>numOfSelectReqs</name></name> <operator>=</operator> <name>numOfSelectReqs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>numOfInsertReqs</name></name> <operator>=</operator> <name>numOfInsertReqs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>numOfInsertSuccessReqs</name></name> <operator>=</operator> <name>numOfInsertSuccessReqs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>numOfBatchInsertReqs</name></name> <operator>=</operator> <name>numOfBatchInsertReqs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>numOfBatchInsertSuccessReqs</name></name> <operator>=</operator> <name>numOfBatchInsertSuccessReqs</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tfsGetMonitorInfo</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>tfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pVloads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmGenerateVnodeCfg</name><parameter_list>(<parameter><decl><type><name>SCreateVnodeReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>, <parameter><decl><type><name>SVnodeCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vnodeCfgDefault</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>dbUid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>pageSize</name></name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>szCache</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>pages</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>cacheLast</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>cacheLast</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>cacheLastSize</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>cacheLastSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>szBuf</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pCreate</name><operator>-&gt;</operator><name>buffer</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isWeak</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isTsma</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>isTsma</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>compression</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>compression</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>days</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>daysPerFile</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>keep0</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>daysToKeep0</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>keep1</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>daysToKeep1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>keep2</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>daysToKeep2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>minRows</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>minRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>maxRows</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>maxRows</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pRetensions</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRetention</name> <modifier>*</modifier></type><name>pRetention</name> <init>= <expr><operator>&amp;</operator><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pRetention</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>pRetensions</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetention</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pRetention</name><operator>-&gt;</operator><name>freq</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pRetention</name><operator>-&gt;</operator><name>keep</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isRsma</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>fsyncPeriod</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>walFsyncPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>retentionPeriod</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>walRetentionPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>rollPeriod</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>walRollPeriod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>retentionSize</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>walRetentionSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>segSize</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>walSegmentSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>walLevel</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>sttTrigger</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>sstTrigger</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashBegin</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>hashBegin</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashEnd</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>hashEnd</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashMethod</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>hashMethod</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashPrefix</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>hashPrefix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashSuffix</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>hashSuffix</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbPageSize</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>tsdbPageSize</name></name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>standby</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>myIndex</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>selfIndex</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>replicaNum</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>replica</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>nodeInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>nodeInfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeInfo</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><operator>&amp;</operator><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodePort</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmGenerateWrapperCfg</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SCreateVnodeReq</name> <modifier>*</modifier></type><name>pCreate</name></decl></parameter>, <parameter><decl><type><name>SWrapperCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>=</operator> <name><name>pCreate</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%svnode%d"</literal></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pCreate</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vmTsmaAdjustDays</name><parameter_list>(<parameter><decl><type><name>SVnodeCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>SCreateVnodeReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>isTsma</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>smaMsg</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>pTsma</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>  <name>contLen</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>htonl</name><argument_list>(<argument><expr><name><name>smaMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>smaGetTSmaDays</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>smaMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>days</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vmTsmaProcessCreate</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SCreateVnodeReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>isTsma</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>smaMsg</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>pTsma</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>  <name>contLen</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>htonl</name><argument_list>(<argument><expr><name><name>smaMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>vnodeProcessCreateTSma</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>smaMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmProcessCreateVnodeReq</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCreateVnodeReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeCfg</name></type>       <name>vnodeCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWrapperCfg</name></type>     <name>wrapperCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>            <name><name>path</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSCreateVnodeReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to create vnode, page:%d pageSize:%d buffer:%d szPage:%d szBuf:%"</literal> <name>PRIu64</name>
        <literal type="string">", cacheLast:%d cacheLastSize:%d sstTrigger:%d tsdbPageSize:%d %d dbname:%s dbId:%"</literal> <name>PRId64</name>
        <literal type="string">", days:%d keep0:%d keep1:%d keep2:%d tsma:%d precision:%d compression:%d minRows:%d maxRows:%d"</literal>
        <literal type="string">", wal fsync:%d level:%d retentionPeriod:%d retentionSize:%"</literal> <name>PRId64</name> <literal type="string">" rollPeriod:%d segSize:%"</literal> <name>PRId64</name>
        <literal type="string">", hash method:%d begin:%u end:%u prefix:%d surfix:%d replica:%d selfIndex:%d strict:%d"</literal></expr></argument>,
        <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>pages</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>pageSize</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>pageSize</name></name> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>req</name><operator>.</operator><name>buffer</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>,
        <argument><expr><name><name>req</name><operator>.</operator><name>cacheLast</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>cacheLastSize</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>sstTrigger</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>tsdbPageSize</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>tsdbPageSize</name></name> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dbUid</name></name></expr></argument>,
        <argument><expr><name><name>req</name><operator>.</operator><name>daysPerFile</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>daysToKeep0</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>daysToKeep1</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>daysToKeep2</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>isTsma</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>compression</name></name></expr></argument>,
        <argument><expr><name><name>req</name><operator>.</operator><name>minRows</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>maxRows</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>walFsyncPeriod</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>walLevel</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>walRetentionPeriod</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>walRetentionSize</name></name></expr></argument>,
        <argument><expr><name><name>req</name><operator>.</operator><name>walRollPeriod</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>walSegmentSize</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>hashMethod</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>hashBegin</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>hashEnd</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>hashPrefix</name></name></expr></argument>,
        <argument><expr><name><name>req</name><operator>.</operator><name>hashSuffix</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>replica</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>selfIndex</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>strict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, replica:%d id:%d fqdn:%s port:%u"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>,
          <argument><expr><name><name>req</name><operator>.</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SReplica</name> <modifier>*</modifier></type><name>pReplica</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>replicas</name><index>[<expr><name><name>req</name><operator>.</operator><name>selfIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReplica</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>||</operator> <name><name>pReplica</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <name>tsServerPort</name> <operator>||</operator>
      <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, dnodeId:%d ep:%s:%u not matched with local dnode"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>,
           <argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>vmGenerateVnodeCfg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vnodeCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vmTsmaAdjustDays</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vnodeCfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to adjust tsma days since %s"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>vmGenerateWrapperCfg</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrapperCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><call><name>vmAcquireVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, already exist"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeSCreateVnodeReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vmReleaseVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_ALREADY_EXIST</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"vnode%svnode%d"</literal></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>vnodeCfg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>vnodeCreate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vnodeCfg</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tFreeSCreateVnodeReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create vnode since %s"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pImpl</name> <init>= <expr><call><name>vnodeOpen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pImpl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open vnode since %s"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vmOpenVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrapperCfg</name></expr></argument>, <argument><expr><name>pImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open vnode since %s"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vmTsmaProcessCreate</name><argument_list>(<argument><expr><name>pImpl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create tsma since %s"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodeStart</name><argument_list>(<argument><expr><name>pImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to start sync since %s"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vmWriteVnodeListToFile</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vnodeClose</name><argument_list>(<argument><expr><name>pImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vnodeDestroy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode is created"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tFreeSCreateVnodeReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmProcessAlterVnodeReq</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAlterVnodeReplicaReq</name></type> <name>alterReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSAlterVnodeReplicaReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>vgId</name> <init>= <expr><name><name>alterReq</name><operator>.</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to alter vnode, replica:%d selfIndex:%d strict:%d"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>replica</name></name></expr></argument>,
        <argument><expr><name><name>alterReq</name><operator>.</operator><name>selfIndex</name></name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>strict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>alterReq</name><operator>.</operator><name>replica</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, replica:%d ep:%s:%u"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>replicas</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>alterReq</name><operator>.</operator><name>replica</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>alterReq</name><operator>.</operator><name>selfIndex</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>alterReq</name><operator>.</operator><name>selfIndex</name></name> <operator>&gt;=</operator> <name><name>alterReq</name><operator>.</operator><name>replica</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to alter replica since invalid msg"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReplica</name> <modifier>*</modifier></type><name>pReplica</name> <init>= <expr><operator>&amp;</operator><name><name>alterReq</name><operator>.</operator><name>replicas</name><index>[<expr><name><name>alterReq</name><operator>.</operator><name>selfIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReplica</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>||</operator> <name><name>pReplica</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <name>tsServerPort</name> <operator>||</operator>
      <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, dnodeId:%d ep:%s:%u not matched with local dnode"</literal></expr></argument>, <argument><expr><name><name>alterReq</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>,
           <argument><expr><name><name>pReplica</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><call><name>vmAcquireVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to alter replica since %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to close vnode"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWrapperCfg</name></type> <name>wrapperCfg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>dropped</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>dropped</name></name></expr>,
      <expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr>,
      <expr><operator>.</operator><name>vgVersion</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>wrapperCfg</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>wrapperCfg</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vmCloseVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"vnode%svnode%d"</literal></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to alter vnode replica at %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>vnodeAlter</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterReq</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to alter vnode at %s since %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to open vnode"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pImpl</name> <init>= <expr><call><name>vnodeOpen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pImpl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open vnode at %s since %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vmOpenVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrapperCfg</name></expr></argument>, <argument><expr><name>pImpl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open vnode mgmt since %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vnodeStart</name><argument_list>(<argument><expr><name>pImpl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to start sync since %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode config is altered"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmProcessDropVnodeReq</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDropVnodeReq</name></type> <name>dropReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSDropVnodeReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>vgId</name> <init>= <expr><name><name>dropReq</name><operator>.</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to drop vnode"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name> <operator>!=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, dnodeId:%d not matched with local dnode"</literal></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>dropReq</name><operator>.</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><call><name>vmAcquireVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to drop since %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>vmWriteVnodeListToFile</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vmReleaseVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>vmCloseVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vmWriteVnodeListToFile</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name> <modifier>*</modifier></type><name>vmGetMsgHandles</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMgmtHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_SUBMIT</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY</name></expr></argument>, <argument><expr><name>vmPutMsgToQueryQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_MERGE_QUERY</name></expr></argument>, <argument><expr><name>vmPutMsgToQueryQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY_CONTINUE</name></expr></argument>, <argument><expr><name>vmPutMsgToQueryQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_FETCH_RSMA</name></expr></argument>, <argument><expr><name>vmPutMsgToQueryQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_EXEC_RSMA</name></expr></argument>, <argument><expr><name>vmPutMsgToQueryQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_FETCH</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_MERGE_FETCH</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_TABLE</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_UPDATE_TAG_VAL</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TABLE_META</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TABLE_CFG</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_BATCH_META</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TABLES_META</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_CANCEL_TASK</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_DROP_TASK</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_CREATE_STB</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_DROP_TTL_TABLE</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_STB</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_DROP_STB</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_CREATE_TABLE</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_DROP_TABLE</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_CREATE_SMA</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_CANCEL_SMA</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_DROP_SMA</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_SUBMIT_RSMA</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TMQ_SUBSCRIBE</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TMQ_DELETE_SUB</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TMQ_COMMIT_OFFSET</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TMQ_ADD_CHECKINFO</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TMQ_DEL_CHECKINFO</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TMQ_CONSUME</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_DELETE</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_BATCH_DEL</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_COMMIT</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr></argument>, <argument><expr><name>vmPutMsgToFetchQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_TASK_DROP</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_TASK_DEPLOY</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_TASK_RUN</name></expr></argument>, <argument><expr><name>vmPutMsgToStreamQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_TASK_DISPATCH</name></expr></argument>, <argument><expr><name>vmPutMsgToStreamQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_TASK_DISPATCH_RSP</name></expr></argument>, <argument><expr><name>vmPutMsgToStreamQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_RETRIEVE</name></expr></argument>, <argument><expr><name>vmPutMsgToStreamQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_RETRIEVE_RSP</name></expr></argument>, <argument><expr><name>vmPutMsgToStreamQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_RECOVER_FINISH</name></expr></argument>, <argument><expr><name>vmPutMsgToStreamQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_TASK_CHECK</name></expr></argument>, <argument><expr><name>vmPutMsgToStreamQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_STREAM_TASK_CHECK_RSP</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_STREAM_TRIGGER</name></expr></argument>, <argument><expr><name>vmPutMsgToStreamQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_REPLICA</name></expr></argument>, <argument><expr><name>vmPutMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_CONFIG</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_CONFIRM</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_ALTER_HASHRANGE</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_COMPACT</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_VND_TRIM</name></expr></argument>, <argument><expr><name>vmPutMsgToWriteQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_CREATE_VNODE</name></expr></argument>, <argument><expr><name>vmPutMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_DROP_VNODE</name></expr></argument>, <argument><expr><name>vmPutMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_TIMEOUT</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_CLIENT_REQUEST</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_CLIENT_REQUEST_BATCH</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_CLIENT_REQUEST_REPLY</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_REQUEST_VOTE</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_REQUEST_VOTE_REPLY</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_APPEND_ENTRIES</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_APPEND_ENTRIES_BATCH</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_APPEND_ENTRIES_REPLY</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_SNAPSHOT_SEND</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_SNAPSHOT_RSP</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_PRE_SNAPSHOT</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_PRE_SNAPSHOT_REPLY</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_HEARTBEAT</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncCtrlQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_SYNC_HEARTBEAT_REPLY</name></expr></argument>, <argument><expr><name>vmPutMsgToSyncCtrlQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>pArray</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
