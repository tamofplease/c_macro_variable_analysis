<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/mgmt_vnode/src/vmWorker.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http:www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vmInt.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vmSendRsp</name><parameter_list>(<parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmProcessMgmtQueue</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeMgmt</name>     <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, get from vnode-mgmt queue"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_DND_CREATE_VNODE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vmProcessCreateVnodeReq</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_DND_DROP_VNODE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vmProcessDropVnodeReq</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_ALTER_REPLICA</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vmProcessAlterVnodeReq</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MSG_NOT_PROCESSED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"msg:%p, not processed in vnode-mgmt queue"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><call><name>IsReq</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"msg:%p, failed to process since %s"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>vmSendRsp</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, is freed, code:0x%x"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmProcessQueryQueue</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeObj</name>      <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p get from vnode-query queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeProcessQueryMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to query since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vmSendRsp</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p is freed, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmProcessStreamQueue</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeObj</name>      <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p get from vnode-stream queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeProcessFetchMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pMsg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to process stream msg %s since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to process stream empty msg since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>vmSendRsp</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p is freed, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmProcessFetchQueue</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfMsgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name>   <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfMsgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pMsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p get from vnode-fetch queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeProcessFetchMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to fetch since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vmSendRsp</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p is freed, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmProcessSyncQueue</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfMsgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name>   <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfMsgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pMsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p get from vnode-sync queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeProcessSyncMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// no response here</comment>
    <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p is freed, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vmPutMsgToQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>EQueueType</name></type> <name>qtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgHead</name>       <modifier>*</modifier></type><name>pHead</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><call><name>vmAcquireVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to put into vnode queue since %s, type:%s qtype:%d contLen:%d"</literal></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>terrno</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>qtype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_QUEUE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodePreprocessQueryMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p preprocess query msg failed since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p put into vnode-query queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQueryQ</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>STREAM_QUEUE</name></expr>:</case>
      <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p put into vnode-stream queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_STREAM_TASK_DISPATCH</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>vnodeEnqueueStreamMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pStreamQ</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>FETCH_QUEUE</name></expr>:</case>
      <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p put into vnode-fetch queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>WRITE_QUEUE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osDataSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_DISKSPACE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p put into vnode-write queue failed since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_VND_SUBMIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>grantCheck</name><argument_list>(<argument><expr><name>TSDB_GRANT_STORAGE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_NO_WRITE_AUTH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p put into vnode-write queue failed since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p put into vnode-write queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWriteW</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SYNC_QUEUE</name></expr>:</case>
      <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p put into vnode-sync queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncW</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SYNC_CTRL_QUEUE</name></expr>:</case>
      <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p put into vnode-sync-ctrl queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncCtrlW</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>APPLY_QUEUE</name></expr>:</case>
      <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p put into vnode-apply queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pApplyW</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>vmReleaseVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmPutMsgToSyncCtrlQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>vmPutMsgToQueue</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>SYNC_CTRL_QUEUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmPutMsgToSyncQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>vmPutMsgToQueue</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>SYNC_QUEUE</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmPutMsgToWriteQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>vmPutMsgToQueue</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmPutMsgToQueryQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>vmPutMsgToQueue</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>QUERY_QUEUE</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmPutMsgToFetchQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>vmPutMsgToQueue</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>FETCH_QUEUE</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmPutMsgToStreamQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>vmPutMsgToQueue</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>STREAM_QUEUE</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmPutMsgToMgmtQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, put into vnode-mgmt queue"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>mgmtWorker</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmPutRpcMsgToQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>EQueueType</name></type> <name>qtype</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRpc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>RPC_QITEM</name></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p is created, type:%s len:%d"</literal></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRpc</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pRpc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRpc</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vmPutMsgToQueue</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dTrace</name><argument_list>(<argument><expr><literal type="string">"msg:%p, is freed"</literal></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmGetQueueSize</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>EQueueType</name></type> <name>qtype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><call><name>vmAcquireVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>qtype</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>WRITE_QUEUE</name></expr>:</case>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWriteW</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SYNC_QUEUE</name></expr>:</case>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncW</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>APPLY_QUEUE</name></expr>:</case>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pApplyW</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>QUERY_QUEUE</name></expr>:</case>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQueryQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>FETCH_QUEUE</name></expr>:</case>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>STREAM_QUEUE</name></expr>:</case>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pStreamQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>vmReleaseVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, can't get size from queue since %s, qtype:%d"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmAllocQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMultiWorkerCfg</name></type> <name>wcfg</name> <init>= <expr><block>{<expr><operator>.</operator><name>max</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vnode-write"</literal></expr>, <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItems</name><operator>)</operator><name>vnodeProposeWriteMsg</name></expr>, <expr><operator>.</operator><name>param</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMultiWorkerCfg</name></type> <name>scfg</name> <init>= <expr><block>{<expr><operator>.</operator><name>max</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vnode-sync"</literal></expr>, <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItems</name><operator>)</operator><name>vmProcessSyncQueue</name></expr>, <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pVnode</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMultiWorkerCfg</name></type> <name>sccfg</name> <init>= <expr><block>{<expr><operator>.</operator><name>max</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vnode-sync-ctrl"</literal></expr>, <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItems</name><operator>)</operator><name>vmProcessSyncQueue</name></expr>, <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pVnode</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMultiWorkerCfg</name></type> <name>acfg</name> <init>= <expr><block>{<expr><operator>.</operator><name>max</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vnode-apply"</literal></expr>, <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItems</name><operator>)</operator><name>vnodeApplyWriteMsg</name></expr>, <expr><operator>.</operator><name>param</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tMultiWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pWriteW</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wcfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tMultiWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncW</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tMultiWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncCtrlW</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tMultiWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pApplyW</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>acfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQueryQ</name></name> <operator>=</operator> <call><name>tQWorkerAllocQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>queryPool</name></name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>, <argument><expr><operator>(</operator><name>FItem</name><operator>)</operator><name>vmProcessQueryQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pStreamQ</name></name> <operator>=</operator> <call><name>tQWorkerAllocQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>streamPool</name></name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>, <argument><expr><operator>(</operator><name>FItem</name><operator>)</operator><name>vmProcessStreamQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name></name> <operator>=</operator> <call><name>tWWorkerAllocQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>fetchPool</name></name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>, <argument><expr><operator>(</operator><name>FItems</name><operator>)</operator><name>vmProcessFetchQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWriteW</name><operator>.</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pSyncW</name><operator>.</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pSyncCtrlW</name><operator>.</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
      <name><name>pVnode</name><operator>-&gt;</operator><name>pApplyW</name><operator>.</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pQueryQ</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pStreamQ</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, write-queue:%p is alloced, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWriteW</name><operator>.</operator><name>queue</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWriteW</name><operator>.</operator><name>queue</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync-queue:%p is alloced, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncW</name><operator>.</operator><name>queue</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncW</name><operator>.</operator><name>queue</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync-ctrl-queue:%p is alloced, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncCtrlW</name><operator>.</operator><name>queue</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncCtrlW</name><operator>.</operator><name>queue</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, apply-queue:%p is alloced, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pApplyW</name><operator>.</operator><name>queue</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pApplyW</name><operator>.</operator><name>queue</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, query-queue:%p is alloced"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQueryQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, fetch-queue:%p is alloced, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, stream-queue:%p is alloced"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pStreamQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vmFreeQueue</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tQWorkerFreeQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>queryPool</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQueryQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tQWorkerFreeQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>streamPool</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pStreamQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tWWorkerFreeQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>fetchPool</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQueryQ</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pStreamQ</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, queue is freed"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmStartWorker</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQWorkerPool</name> <modifier>*</modifier></type><name>pQPool</name> <init>= <expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>queryPool</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pQPool</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"vnode-query"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQPool</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>tsNumOfVnodeQueryThreads</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQPool</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>tsNumOfVnodeQueryThreads</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tQWorkerInit</name><argument_list>(<argument><expr><name>pQPool</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SQWorkerPool</name> <modifier>*</modifier></type><name>pStreamPool</name> <init>= <expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>streamPool</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pStreamPool</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"vnode-stream"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStreamPool</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>tsNumOfVnodeStreamThreads</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStreamPool</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>tsNumOfVnodeStreamThreads</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tQWorkerInit</name><argument_list>(<argument><expr><name>pStreamPool</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SWWorkerPool</name> <modifier>*</modifier></type><name>pFPool</name> <init>= <expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>fetchPool</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFPool</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"vnode-fetch"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFPool</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>tsNumOfVnodeFetchThreads</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tWWorkerInit</name><argument_list>(<argument><expr><name>pFPool</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SSingleWorkerCfg</name></type> <name>mgmtCfg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>min</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>max</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vnode-mgmt"</literal></expr>,
      <expr><operator>.</operator><name>fp</name> <operator>=</operator> <operator>(</operator><name>FItem</name><operator>)</operator><name>vmProcessMgmtQueue</name></expr>,
      <expr><operator>.</operator><name>param</name> <operator>=</operator> <name>pMgmt</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSingleWorkerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>mgmtWorker</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mgmtCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"vnode workers are initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vmStopWorker</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tQWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>queryPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tQWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>streamPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tWWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>fetchPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"vnode workers are closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
