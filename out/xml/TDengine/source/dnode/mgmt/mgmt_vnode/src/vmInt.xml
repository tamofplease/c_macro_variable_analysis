<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/mgmt_vnode/src/vmInt.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http:www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vmInt.h"</cpp:file></cpp:include>

<function><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>vmAcquireVnode</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashGetDup</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>dropped</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_INVALID_VGROUP_ID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pVnode</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>refCount</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// dTrace("vgId:%d, acquire vnode, ref:%d", pVnode-&gt;vgId, refCount);</comment>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pVnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vmReleaseVnode</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>refCount</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>refCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// dTrace("vgId:%d, release vnode, ref:%d", pVnode-&gt;vgId, refCount);</comment>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vmOpenVnode</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SWrapperCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pImpl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>refCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>tstrdup</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name> <operator>=</operator> <name>pImpl</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vmAllocQueue</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVnode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeObj</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vmCloseVnode</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vmReleaseVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, pre close"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vnodePreClose</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wait for vnode ref become 0"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>refCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wait for vnode write queue:%p is empty, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWriteW</name><operator>.</operator><name>queue</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWriteW</name><operator>.</operator><name>queue</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMultiWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pWriteW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wait for vnode sync queue:%p is empty, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncW</name><operator>.</operator><name>queue</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncW</name><operator>.</operator><name>queue</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMultiWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wait for vnode sync ctrl queue:%p is empty, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncCtrlW</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncCtrlW</name><operator>.</operator><name>queue</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMultiWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pSyncCtrlW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wait for vnode apply queue:%p is empty, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pApplyW</name><operator>.</operator><name>queue</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pApplyW</name><operator>.</operator><name>queue</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMultiWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pApplyW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wait for vnode query queue:%p is empty"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQueryQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>taosQueueEmpty</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQueryQ</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wait for vnode fetch queue:%p is empty, thread:%08"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name></name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name><operator>-&gt;</operator><name>threadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>taosQueueEmpty</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pFetchQ</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, wait for vnode stream queue:%p is empty"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pStreamQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>taosQueueEmpty</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pStreamQ</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, all vnode queues is empty"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>vmFreeQueue</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vnodeClose</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode is closed"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>dropped</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode is destroyed, dropped:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>dropped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"vnode%svnode%d"</literal></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vnodeDestroy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vmOpenVnodeInThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeMgmt</name>   <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><name><name>pThread</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>path</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"thread:%d, start to open %d vnodes"</literal></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"open-vnodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWrapperCfg</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><operator>&amp;</operator><name><name>pThread</name><operator>-&gt;</operator><name>pCfgs</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>stepDesc</name><index>[<expr><name>TSDB_STEP_DESC_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>stepDesc</name></expr></argument>, <argument><expr><name>TSDB_STEP_DESC_LEN</name></expr></argument>, <argument><expr><literal type="string">"vgId:%d, start to restore, %d of %d have been opened"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>openVnodes</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>totalVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"vnode-open"</literal></expr></argument>, <argument><expr><name>stepDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"vnode%svnode%d"</literal></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pImpl</name> <init>= <expr><call><name>vnodeOpen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pImpl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open vnode by thread:%d"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pThread</name><operator>-&gt;</operator><name>failed</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>vmOpenVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>pImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, is opened by thread:%d"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pThread</name><operator>-&gt;</operator><name>opened</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>openVnodes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"thread:%d, numOfVnodes:%d, opened:%d failed:%d"</literal></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>opened</name></name></expr></argument>,
         <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>failed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vmOpenVnodes</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name>TSDB_MIN_VNODES</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init vnode hash since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SWrapperCfg</name> <modifier>*</modifier></type><name>pCfgs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfVnodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>vmGetVnodeListFromFile</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCfgs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfVnodes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"failed to get vnode list from disk since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>totalVnodes</name></name> <operator>=</operator> <name>numOfVnodes</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>threadNum</name> <init>= <expr><name>tsNumOfCores</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>threadNum</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>threadNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vnodesPerThread</name> <init>= <expr><name>numOfVnodes</name> <operator>/</operator> <name>threadNum</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>threadNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeThread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>threadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>threadIndex</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pMgmt</name> <operator>=</operator> <name>pMgmt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pCfgs</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>vnodesPerThread</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWrapperCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>numOfVnodes</name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>t</name> <init>= <expr><name>v</name> <operator>%</operator> <name>threadNum</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pThread</name><operator>-&gt;</operator><name>pCfgs</name><index>[<expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pCfgs</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"open %d vnodes with %d threads"</literal></expr></argument>, <argument><expr><name>numOfVnodes</name></expr></argument>, <argument><expr><name>threadNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>threadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thAttr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>vmOpenVnodeInThread</name></expr></argument>, <argument><expr><name>pThread</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"thread:%d, failed to create thread to open vnode, reason:%s"</literal></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>threadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>pCfgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCfgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>openVnodes</name></name> <operator>!=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>totalVnodes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"there are total vnodes:%d, opened:%d"</literal></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>totalVnodes</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>openVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"successfully opened %d vnodes"</literal></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>totalVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vmCloseVnodeInThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeMgmt</name>   <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><name><name>pThread</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"thread:%d, start to close %d vnodes"</literal></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"close-vnodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pThread</name><operator>-&gt;</operator><name>ppVnodes</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>stepDesc</name><index>[<expr><name>TSDB_STEP_DESC_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>stepDesc</name></expr></argument>, <argument><expr><name>TSDB_STEP_DESC_LEN</name></expr></argument>, <argument><expr><literal type="string">"vgId:%d, start to close, %d of %d have been closed"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>openVnodes</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>totalVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"vnode-close"</literal></expr></argument>, <argument><expr><name>stepDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>vmCloseVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"thread:%d, numOfVnodes:%d is closed"</literal></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmCloseVnodes</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"start to close all vnodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tSingleWorkerCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>mgmtWorker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"vnodes mgmt worker is stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfVnodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVnodes</name> <init>= <expr><call><name>vmGetVnodeListFromHash</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfVnodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>threadNum</name> <init>= <expr><name>tsNumOfCores</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>threadNum</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>threadNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vnodesPerThread</name> <init>= <expr><name>numOfVnodes</name> <operator>/</operator> <name>threadNum</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>threadNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeThread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>threadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>threadIndex</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pMgmt</name> <operator>=</operator> <name>pMgmt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>ppVnodes</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>vnodesPerThread</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>numOfVnodes</name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>t</name> <init>= <expr><name>v</name> <operator>%</operator> <name>threadNum</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pThread</name><operator>-&gt;</operator><name>ppVnodes</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ppVnodes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pThread</name><operator>-&gt;</operator><name>ppVnodes</name><index>[<expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ppVnodes</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>openVnodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"close %d vnodes with %d threads"</literal></expr></argument>, <argument><expr><name>numOfVnodes</name></expr></argument>, <argument><expr><name>threadNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>threadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thAttr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>vmCloseVnodeInThread</name></expr></argument>, <argument><expr><name>pThread</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"thread:%d, failed to create thread to close vnode since %s"</literal></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>threadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>ppVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ppVnodes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ppVnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"total vnodes:%d are all closed"</literal></expr></argument>, <argument><expr><name>numOfVnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmCleanup</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vmCloseVnodes</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vmStopWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vnodeCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tfsClose</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vmInit</name><parameter_list>(<parameter><decl><type><name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>SMgmtOutputOpt</name> <modifier>*</modifier></type><name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeMgmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMgmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>putToQueueFp</name></name> <operator>=</operator> <operator>(</operator><name>PutToQueueFp</name><operator>)</operator><name>vmPutRpcMsgToQueue</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>qsizeFp</name></name> <operator>=</operator> <operator>(</operator><name>GetQueueSizeFp</name><operator>)</operator><name>vmGetQueueSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>mgmt</name></name> <operator>=</operator> <name>pMgmt</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDiskCfg</name></type> <name>dCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>dCfg</name><operator>.</operator><name>dir</name></name></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dCfg</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dCfg</name><operator>.</operator><name>primary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDiskCfg</name> <modifier>*</modifier></type><name>pDisks</name> <init>= <expr><name>tsDiskCfg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfDisks</name> <init>= <expr><name>tsDiskCfgNum</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfDisks</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>pDisks</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDisks</name> <operator>=</operator> <operator>&amp;</operator><name>dCfg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfDisks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name> <operator>=</operator> <call><name>tfsOpen</name><argument_list>(<argument><expr><name>pDisks</name></expr></argument>, <argument><expr><name>numOfDisks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pTfs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init tfs since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"vnode-tfs"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>walInit</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init wal since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"vnode-wal"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>syncInit</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to open sync since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"vnode-sync"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vnodeInit</name><argument_list>(<argument><expr><name>tsNumOfCommitThreads</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init vnode since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"vnode-commit"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vmStartWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init workers since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"vnode-worker"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vmOpenVnodes</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to open vnode since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"vnode-vnodes"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>udfcOpen</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to open udfc in vnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>=</operator> <name>pMgmt</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to init vnodes-mgmt since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vmCleanup</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vmRequire</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>required</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>required</name> <operator>=</operator> <name>tsNumOfSupportVnodes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vmRestoreVnodeInThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeMgmt</name>   <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><name><name>pThread</name><operator>-&gt;</operator><name>pMgmt</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"thread:%d, start to restore %d vnodes"</literal></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"restore-vnodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pThread</name><operator>-&gt;</operator><name>ppVnodes</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>stepDesc</name><index>[<expr><name>TSDB_STEP_DESC_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>stepDesc</name></expr></argument>, <argument><expr><name>TSDB_STEP_DESC_LEN</name></expr></argument>, <argument><expr><literal type="string">"vgId:%d, start to restore, %d of %d have been restored"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
             <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>openVnodes</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>totalVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"vnode-restore"</literal></expr></argument>, <argument><expr><name>stepDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeStart</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pImpl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to restore vnode by thread:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pThread</name><operator>-&gt;</operator><name>failed</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, is restored by thread:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pThread</name><operator>-&gt;</operator><name>opened</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>openVnodes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"thread:%d, numOfVnodes:%d, restored:%d failed:%d"</literal></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>opened</name></name></expr></argument>,
        <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>failed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vmStartVnodes</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfVnodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeObj</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVnodes</name> <init>= <expr><call><name>vmGetVnodeListFromHash</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfVnodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>threadNum</name> <init>= <expr><name>tsNumOfCores</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>threadNum</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>threadNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vnodesPerThread</name> <init>= <expr><name>numOfVnodes</name> <operator>/</operator> <name>threadNum</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>threads</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>threadNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnodeThread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>threadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>threadIndex</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pMgmt</name> <operator>=</operator> <name>pMgmt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>ppVnodes</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>vnodesPerThread</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVnode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>numOfVnodes</name></expr>;</condition> <incr><expr><operator>++</operator><name>v</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>t</name> <init>= <expr><name>v</name> <operator>%</operator> <name>threadNum</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pThread</name><operator>-&gt;</operator><name>ppVnodes</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ppVnodes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pThread</name><operator>-&gt;</operator><name>ppVnodes</name><index>[<expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ppVnodes</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>openVnodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"restore %d vnodes with %d threads"</literal></expr></argument>, <argument><expr><name>numOfVnodes</name></expr></argument>, <argument><expr><name>threadNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>threadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thAttr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>vmRestoreVnodeInThread</name></expr></argument>, <argument><expr><name>pThread</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"thread:%d, failed to create thread to restore vnode since %s"</literal></expr></argument>, <argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>threadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeThread</name> <modifier>*</modifier></type><name>pThread</name> <init>= <expr><operator>&amp;</operator><name><name>threads</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pThread</name><operator>-&gt;</operator><name>vnodeNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pThread</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pThread</name><operator>-&gt;</operator><name>ppVnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfVnodes</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ppVnodes</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ppVnodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>vmReleaseVnode</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><name><name>ppVnodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>ppVnodes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ppVnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vmStop</name><parameter_list>(<parameter><decl><type><name>SVnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// process inside the vnode</comment>
</block_content>}</block></function>

<function><type><name>SMgmtFunc</name></type> <name>vmGetMgmtFunc</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtFunc</name></type> <name>mgmtFunc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>openFp</name></name> <operator>=</operator> <name>vmInit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>closeFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeCloseFp</name><operator>)</operator><name>vmCleanup</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>startFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeStartFp</name><operator>)</operator><name>vmStartVnodes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>stopFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeStopFp</name><operator>)</operator><name>vmStop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>requiredFp</name></name> <operator>=</operator> <name>vmRequire</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>getHandlesFp</name></name> <operator>=</operator> <name>vmGetMsgHandles</name></expr>;</expr_stmt>

  <return>return <expr><name>mgmtFunc</name></expr>;</return>
</block_content>}</block></function>
</unit>
