<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/mgmt_dnode/src/dmHandle.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http:www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tgrant.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SConfig</name> <modifier>*</modifier></type><name>tsCfg</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmUpdateDnodeCfg</name><parameter_list>(<parameter><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SDnodeCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>clusterId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"set local info, dnodeId:%d clusterId:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>clusterId</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>clusterId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dmWriteEps</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmProcessStatusRsp</name><parameter_list>(<parameter><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dGTrace</name><argument_list>(<argument><expr><literal type="string">"status rsp received from mnode, statusSeq:%d code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>statusSeq</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_MND_DNODE_NOT_EXIST</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dropped</name></name> <operator>&amp;&amp;</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dGInfo</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, set to dropped since not exist in mnode, statusSeq:%d"</literal></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>,
             <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>statusSeq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dmWriteEps</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SStatusRsp</name></type> <name>statusRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <call><name>tDeserializeSStatusRsp</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeVer</name></name> <operator>!=</operator> <name><name>statusRsp</name><operator>.</operator><name>dnodeVer</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>dGInfo</name><argument_list>(<argument><expr><literal type="string">"status rsp received from mnode, statusSeq:%d:%d dnodeVer:%"</literal> <name>PRId64</name> <literal type="string">":%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>statusSeq</name></name></expr></argument>,
               <argument><expr><name><name>statusRsp</name><operator>.</operator><name>statusSeq</name></name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeVer</name></name></expr></argument>, <argument><expr><name><name>statusRsp</name><operator>.</operator><name>dnodeVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeVer</name></name> <operator>=</operator> <name><name>statusRsp</name><operator>.</operator><name>dnodeVer</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dmUpdateDnodeCfg</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>statusRsp</name><operator>.</operator><name>dnodeCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dmUpdateEps</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>statusRsp</name><operator>.</operator><name>pDnodeEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tFreeSStatusRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmSendStatusReq</name><parameter_list>(<parameter><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStatusReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>sver</name></name> <operator>=</operator> <name>tsVersion</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>dnodeVer</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>clusterId</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>clusterId</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>clusterId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>req</name><operator>.</operator><name>dnodeId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>rebootTime</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>rebootTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>updateTime</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>updateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>numOfCores</name></name> <operator>=</operator> <name>tsNumOfCores</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>numOfSupportVnodes</name></name> <operator>=</operator> <name>tsNumOfSupportVnodes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>memTotal</name></name> <operator>=</operator> <name>tsTotalMemoryKB</name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>memAvail</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>memTotal</name></name> <operator>-</operator> <name>tsRpcQueueMemoryAllowed</name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>dnodeEp</name></name></expr></argument>, <argument><expr><name>tsLocalEp</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>clusterCfg</name><operator>.</operator><name>statusInterval</name></name> <operator>=</operator> <name>tsStatusInterval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>clusterCfg</name><operator>.</operator><name>checkTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>timestr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"1970-01-01 00:00:00.00"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosParseTime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>clusterCfg</name><operator>.</operator><name>checkTime</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>clusterCfg</name><operator>.</operator><name>timezone</name></name></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>, <argument><expr><name>TD_TIMEZONE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>clusterCfg</name><operator>.</operator><name>locale</name></name></expr></argument>, <argument><expr><name>tsLocale</name></expr></argument>, <argument><expr><name>TD_LOCALE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>clusterCfg</name><operator>.</operator><name>charset</name></name></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>, <argument><expr><name>TD_LOCALE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMonVloadInfo</name></type> <name>vinfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pMgmt</name><operator>-&gt;</operator><name>getVnodeLoadsFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>vinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pVloads</name></name> <operator>=</operator> <name><name>vinfo</name><operator>.</operator><name>pVloads</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMonMloadInfo</name></type> <name>minfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pMgmt</name><operator>-&gt;</operator><name>getMnodeLoadsFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>minfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>mload</name></name> <operator>=</operator> <name><name>minfo</name><operator>.</operator><name>load</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pMgmt</name><operator>-&gt;</operator><name>getQnodeLoadsFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>qload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>statusSeq</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>statusSeq</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>statusSeq</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSStatusReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pHead</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSStatusReq</name><argument_list>(<argument><expr><name>pHead</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSStatusReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pHead</name></expr>,
                    <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>contLen</name></expr>,
                    <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_MND_STATUS</name></expr>,
                    <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0x9527</literal></expr>,
                    <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>refId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>,
                    <expr><operator>.</operator><name><name>info</name><operator>.</operator><name>noResp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dTrace</name><argument_list>(<argument><expr><literal type="string">"send status req to mnode, dnodeVer:%"</literal> <name>PRId64</name> <literal type="string">" statusSeq:%d"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>dnodeVer</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>statusSeq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dmGetMnodeEpSet</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>clientRpc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to send status req since %s, numOfEps:%d inUse:%d"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>,
           <argument><expr><name><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"index:%d, mnode ep:%s:%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>dmProcessStatusRsp</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmProcessAuthRsp</name><parameter_list>(<parameter><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"auth rsp is received, but not supported yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmProcessGrantRsp</name><parameter_list>(<parameter><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"grant rsp is received, but not supported yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmProcessConfigReq</name><parameter_list>(<parameter><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDCfgDnodeReq</name></type> <name>cfgReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSDCfgDnodeReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"start to config, option:%s, value:%s"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCfgDynamicOptions</name><argument_list>(<argument><expr><name><name>cfgReq</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetServerRunStatus</name><parameter_list>(<parameter><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SServerStatusRsp</name> <modifier>*</modifier></type><name>pStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>statusCode</name></name> <operator>=</operator> <name>TSDB_SRV_STATUS_SERVICE_OK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>details</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SServerStatusRsp</name></type> <name>statusRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMonMloadInfo</name></type>    <name>minfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pMgmt</name><operator>-&gt;</operator><name>getMnodeLoadsFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>minfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>minfo</name><operator>.</operator><name>isMnode</name></name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>minfo</name><operator>.</operator><name>load</name><operator>.</operator><name>syncState</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_ERROR</name> <operator>||</operator> <name><name>minfo</name><operator>.</operator><name>load</name><operator>.</operator><name>syncState</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_OFFLINE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>statusCode</name></name> <operator>=</operator> <name>TSDB_SRV_STATUS_SERVICE_DEGRADED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>details</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>details</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mnode sync state is %s"</literal></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>minfo</name><operator>.</operator><name>load</name><operator>.</operator><name>syncState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMonVloadInfo</name></type> <name>vinfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call>(<modifier>*</modifier><name><name>pMgmt</name><operator>-&gt;</operator><name>getVnodeLoadsFp</name></name>)<argument_list>(<argument><expr><operator>&amp;</operator><name>vinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>vinfo</name><operator>.</operator><name>pVloads</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeLoad</name> <modifier>*</modifier></type><name>pLoad</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>vinfo</name><operator>.</operator><name>pVloads</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pLoad</name><operator>-&gt;</operator><name>syncState</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_ERROR</name> <operator>||</operator> <name><name>pLoad</name><operator>-&gt;</operator><name>syncState</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_OFFLINE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>statusCode</name></name> <operator>=</operator> <name>TSDB_SRV_STATUS_SERVICE_DEGRADED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>details</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>details</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"vnode:%d sync state is %s"</literal></expr></argument>, <argument><expr><name><name>pLoad</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
               <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pLoad</name><operator>-&gt;</operator><name>syncState</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>vinfo</name><operator>.</operator><name>pVloads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmProcessServerRunStatus</name><parameter_list>(<parameter><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"server run status req is received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SServerStatusRsp</name></type> <name>statusRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dmGetServerRunStatus</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rspMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspLen</name> <init>= <expr><call><name>tSerializeSServerStatusRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rspLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>rspMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>rspMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tSerializeSServerStatusRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>rspLen</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>dmBuildVariablesBlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name>         <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>               <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSysTableMeta</name> <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getInfosDbMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pMeta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_DNODE_VARIABLES</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pMeta</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>colNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMeta</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>colInfoData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>colInfoData</name><operator>.</operator><name>info</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>colInfoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pMeta</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>colInfoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pMeta</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmAppendVariablesToBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCfg</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tsCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>numOfCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCfg</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tsCfg</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>GRANT_CFG_SKIP</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>c</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dnodeId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>TSDB_CONFIG_OPTION_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_OPTION_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>c</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type>    <name><name>value</name><index>[<expr><name>TSDB_CONFIG_VALUE_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>valueLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cfgDumpItemValue</name><argument_list>(<argument><expr><name>pItem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><index>[<expr><name>VARSTR_HEADER_SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valueLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valueLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>c</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmProcessRetrieve</name><parameter_list>(<parameter><decl><type><name>SDnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowsRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRetrieveTableReq</name></type> <name>retrieveReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSRetrieveTableReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retrieveReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>retrieveReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MND_NO_RIGHTS</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>retrieveReq</name><operator>.</operator><name>tb</name></name></expr></argument>, <argument><expr><name>TSDB_INS_TABLE_DNODE_VARIABLES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><call><name>dmBuildVariablesBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dmAppendVariablesToBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveMetaTableRsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSysTableSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name> <operator>+</operator>
         <call><name>blockDataGetSize</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>blockDataGetSerialMetaSize</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRetrieveMetaTableRsp</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to retrieve data since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pStart</name> <init>= <expr><name><name>pRsp</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>pStart</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>  <comment type="line">// number of columns</comment>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSysTableSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>(</operator><name>SSysTableSchema</name> <operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name> <modifier>*</modifier></type><name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSysTableSchema</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>blockEncode</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>;</expr_stmt>  <comment type="line">// millisecond time precision</comment>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>completed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rspLen</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"dnode variables retrieve completed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name> <modifier>*</modifier></type><name>dmGetMsgHandles</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMgmtHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// Requests handled by DNODE</comment>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_CREATE_MNODE</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_DROP_MNODE</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_CREATE_QNODE</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_DROP_QNODE</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_CREATE_SNODE</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_DROP_SNODE</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_CONFIG_DNODE</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_SERVER_STATUS</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_DND_SYSTABLE_RETRIEVE</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// Requests handled by MNODE</comment>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_MND_GRANT</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>dmSetMgmtHandle</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>TDMT_MND_AUTH_RSP</name></expr></argument>, <argument><expr><name>dmPutNodeMsgToMgmtQueue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_OVER</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>pArray</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
