<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/mgmt_snode/src/smInt.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http:www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"smInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libs/function/function.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smRequire</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>required</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>dmReadFile</name><argument_list>(<argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>required</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smInitOption</name><parameter_list>(<parameter><decl><type><name>SSnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>, <parameter><decl><type><name>SSnodeOpt</name> <modifier>*</modifier></type><name>pOption</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pOption</name><operator>-&gt;</operator><name>msgCb</name></name> <operator>=</operator> <name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smClose</name><parameter_list>(<parameter><decl><type><name>SSnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pSnode</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smStopWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sndClose</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pSnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pSnode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>smOpen</name><parameter_list>(<parameter><decl><type><name>SMgmtInputOpt</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>SMgmtOutputOpt</name> <modifier>*</modifier></type><name>pOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSnodeMgmt</name> <modifier>*</modifier></type><name>pMgmt</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnodeMgmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMgmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name></name> <operator>=</operator> <name><name>pInput</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>mgmt</name></name> <operator>=</operator> <name>pMgmt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>putToQueueFp</name></name> <operator>=</operator> <operator>(</operator><name>PutToQueueFp</name><operator>)</operator><name>smPutMsgToQueue</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSnodeOpt</name></type> <name>option</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>smInitOption</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pSnode</name></name> <operator>=</operator> <call><name>sndOpen</name><argument_list>(<argument><expr><name><name>pMgmt</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMgmt</name><operator>-&gt;</operator><name>pSnode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to open snode since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smClose</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"snode-impl"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>smStartWorker</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to start snode worker since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smClose</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tmsgReportStartup</name><argument_list>(<argument><expr><literal type="string">"snode-worker"</literal></expr></argument>, <argument><expr><literal type="string">"initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>udfcOpen</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to open udfc in snode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smClose</name><argument_list>(<argument><expr><name>pMgmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pOutput</name><operator>-&gt;</operator><name>pMgmt</name></name> <operator>=</operator> <name>pMgmt</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMgmtFunc</name></type> <name>smGetMgmtFunc</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtFunc</name></type> <name>mgmtFunc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>openFp</name></name> <operator>=</operator> <name>smOpen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>closeFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeCloseFp</name><operator>)</operator><name>smClose</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>createFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeCreateFp</name><operator>)</operator><name>smProcessCreateReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>dropFp</name></name> <operator>=</operator> <operator>(</operator><name>NodeDropFp</name><operator>)</operator><name>smProcessDropReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>requiredFp</name></name> <operator>=</operator> <name>smRequire</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtFunc</name><operator>.</operator><name>getHandlesFp</name></name> <operator>=</operator> <name>smGetMsgHandles</name></expr>;</expr_stmt>

  <return>return <expr><name>mgmtFunc</name></expr>;</return>
</block_content>}</block></function>
</unit>
