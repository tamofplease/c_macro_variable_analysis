<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/node_util/src/dmEps.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmUtil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmisce.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dmPrintEps</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>dmIsEpChanged</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dmResetEps</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>dnodeEps</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmGetDnodeEp</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pEp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pFqdn</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pPort</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDnodeEp</name> <modifier>*</modifier></type><name>pDnodeEp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnodeEp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pPort</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pPort</name> <operator>=</operator> <name><name>pDnodeEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pFqdn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>pFqdn</name></expr></argument>, <argument><expr><name><name>pDnodeEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pEp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pEp</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>pDnodeEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pDnodeEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmReadEps</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><name>TSDB_CODE_INVALID_JSON_FORMAT</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>maxLen</name> <init>= <expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>maxLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name>    <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>file</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDnodeEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to calloc dnodeEp array since %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%sdnode%sdnode.json"</literal></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since content is null"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>content</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since invalid json format"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>dnodeId</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"dnodeId"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dnodeId</name> <operator>||</operator> <name><name>dnodeId</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since dnodeId not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name> <operator>=</operator> <name><name>dnodeId</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>dnodeVer</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"dnodeVer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dnodeVer</name> <operator>||</operator> <name><name>dnodeVer</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_String</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since dnodeVer not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeVer</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>dnodeVer</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>clusterId</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"clusterId"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clusterId</name> <operator>||</operator> <name><name>clusterId</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_String</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since clusterId not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>clusterId</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>clusterId</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>dropped</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"dropped"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dropped</name> <operator>||</operator> <name><name>dropped</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since dropped not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <name><name>dropped</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>dnodes</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"dnodes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dnodes</name> <operator>||</operator> <name><name>dnodes</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_Array</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since dnodes not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfDnodes</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>dnodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfDnodes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since numOfDnodes:%d invalid"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>numOfDnodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfDnodes</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name>dnodes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SDnodeEp</name></type> <name>dnodeEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>did</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>did</name> <operator>||</operator> <name><name>did</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since dnodeId not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>dnodeEp</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>did</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>dnodeFqdn</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"fqdn"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dnodeFqdn</name> <operator>||</operator> <name><name>dnodeFqdn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_String</name> <operator>||</operator> <name><name>dnodeFqdn</name><operator>-&gt;</operator><name>valuestring</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since dnodeFqdn not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>dnodeEp</name><operator>.</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>dnodeFqdn</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>dnodePort</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dnodePort</name> <operator>||</operator> <name><name>dnodePort</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since dnodePort not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>dnodeEp</name><operator>.</operator><name>ep</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>dnodePort</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>isMnode</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"isMnode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isMnode</name> <operator>||</operator> <name><name>isMnode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since isMnode not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_OVER</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>dnodeEp</name><operator>.</operator><name>isMnode</name></name> <operator>=</operator> <name><name>isMnode</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"succcessed to read file %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>content</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeEp</name></type> <name>dnodeEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dnodeEp</name><operator>.</operator><name>isMnode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dnodeEp</name><operator>.</operator><name>ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"reset dnode list on startup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmResetEps</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>dmIsEpChanged</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>, <argument><expr><name>tsLocalEp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"localEp %s different with %s and need reconfigured"</literal></expr></argument>, <argument><expr><name>tsLocalEp</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmWriteEps</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>file</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>realfile</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%sdnode%sdnode.json.bak"</literal></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>realfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>realfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%sdnode%sdnode.json"</literal></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to write %s since %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxLen</name> <init>= <expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>maxLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"  \"dnodeId\": %d,\n"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"  \"dnodeVer\": \"%"</literal> <name>PRId64</name> <literal type="string">"\",\n"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"  \"clusterId\": \"%"</literal> <name>PRId64</name> <literal type="string">"\",\n"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"  \"dropped\": %d,\n"</literal></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dropped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"  \"dnodes\": [{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfEps</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfEps</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeEp</name> <modifier>*</modifier></type><name>pDnodeEp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"    \"id\": %d,\n"</literal></expr></argument>, <argument><expr><name><name>pDnodeEp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"    \"fqdn\": \"%s\",\n"</literal></expr></argument>, <argument><expr><name><name>pDnodeEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"    \"port\": %u,\n"</literal></expr></argument>, <argument><expr><name><name>pDnodeEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"    \"isMnode\": %d\n"</literal></expr></argument>, <argument><expr><name><name>pDnodeEp</name><operator>-&gt;</operator><name>isMnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numOfEps</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"  },{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"  }]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxLen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosRenameFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>realfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to rename %s since %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>updateTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"successed to write %s, dnodeVer:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>realfile</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmUpdateEps</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>eps</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"new dnode list get from mnode, dnodeVer:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmResetEps</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dmWriteEps</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmResetEps</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>dnodeEps</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name> <operator>!=</operator> <name>dnodeEps</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name>dnodeEps</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>mnodeEps</name><operator>.</operator><name>inUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>mnodeEps</name><operator>.</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>mIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfEps</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>dnodeEps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfEps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeEp</name> <modifier>*</modifier></type><name>pDnodeEp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>dnodeEps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pDnodeEp</name><operator>-&gt;</operator><name>isMnode</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mIndex</name> <operator>&gt;=</operator> <name>TSDB_MAX_REPLICA</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>mnodeEps</name><operator>.</operator><name>numOfEps</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>mnodeEps</name><operator>.</operator><name>eps</name><index>[<expr><name>mIndex</name></expr>]</index></name> <operator>=</operator> <name><name>pDnodeEp</name><operator>-&gt;</operator><name>ep</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mIndex</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfEps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeEp</name> <modifier>*</modifier></type><name>pDnodeEp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>dnodeEps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDnodeEp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pDnodeEp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDnodeEp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>dmPrintEps</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dmPrintEps</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfEps</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"print dnode list, num:%d"</literal></expr></argument>, <argument><expr><name>numOfEps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfEps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDnodeEp</name> <modifier>*</modifier></type><name>pEp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeEps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, fqdn:%s port:%u isMnode:%d"</literal></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>pEp</name><operator>-&gt;</operator><name>isMnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>dmIsEpChanged</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dnodeId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dnodeId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>changed</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDnodeEp</name> <modifier>*</modifier></type><name>pDnodeEp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>dnodeHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dnodeId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnodeEp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>epstr</name><index>[<expr><name>TSDB_EP_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>epstr</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>pDnodeEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pDnodeEp</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>changed</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epstr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"dnode:%d, localEp %s different from %s"</literal></expr></argument>, <argument><expr><name>dnodeId</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>epstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>changed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmGetMnodeEpSet</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pEpSet</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>mnodeEps</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmGetMnodeEpSetForRedirect</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>dmGetMnodeEpSet</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dTrace</name><argument_list>(<argument><expr><literal type="string">"msg is redirected, handle:%p num:%d use:%d"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>dTrace</name><argument_list>(<argument><expr><literal type="string">"mnode index:%d %s:%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name> <operator>==</operator> <name>tsServerPort</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmSetMnodeEpSet</name><parameter_list>(<parameter><decl><type><name>SDnodeData</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>mnodeEps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>mnodeEps</name></name> <operator>=</operator> <operator>*</operator><name>pEpSet</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"mnode is changed, num:%d use:%d"</literal></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"mnode index:%d %s:%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
