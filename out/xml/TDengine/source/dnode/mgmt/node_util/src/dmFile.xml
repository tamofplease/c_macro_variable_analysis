<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/node_util/src/dmFile.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http:www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmUtil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXLEN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><name>int32_t</name></type> <name>dmReadFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pDeployed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><name>TSDB_CODE_INVALID_JSON_FORMAT</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>content</name><index>[<expr><name>MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name>    <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>file</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s%s.json"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>MAXLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since content is null"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since invalid json format"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>deployed</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"deployed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>deployed</name> <operator>||</operator> <name><name>deployed</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_Number</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to read %s since deployed not found"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pDeployed</name> <operator>=</operator> <name><name>deployed</name><operator>-&gt;</operator><name>valueint</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"succcessed to read file %s, deployed:%d"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>*</operator><name>pDeployed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>root</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dmWriteFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>deployed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>content</name><index>[<expr><name>MAXLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>file</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>realfile</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s%s.json"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>realfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>realfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s%s.json"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to write %s since %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>MAXLEN</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>MAXLEN</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"  \"deployed\": %d\n"</literal></expr></argument>, <argument><expr><name>deployed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>content</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>MAXLEN</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to write file:%s since %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to fsync file:%s since %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosRenameFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>realfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to rename %s since %s"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>dInfo</name><argument_list>(<argument><expr><literal type="string">"successed to write %s, deployed:%d"</literal></expr></argument>, <argument><expr><name>realfile</name></expr></argument>, <argument><expr><name>deployed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TdFilePtr</name></type> <name>dmCheckRunning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dataDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>filepath</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s.running"</literal></expr></argument>, <argument><expr><name>dataDir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to open file:%s since %s"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>retryTimes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosLockFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>retryTimes</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dError</name><argument_list>(<argument><expr><literal type="string">"failed to lock file:%s since %s, retryTimes:%d"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>retryTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>retryTimes</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition>;</do>

  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dDebug</name><argument_list>(<argument><expr><literal type="string">"lock file:%s to prevent repeated starts"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pFile</name></expr>;</return>
</block_content>}</block></function>
</unit>
