<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/mgmt/node_util/src/dmUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dmUtil.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dmStatStr</name><parameter_list>(<parameter><decl><type><name>EDndRunStatus</name></type> <name>stype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>stype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>DND_STAT_INIT</name></expr>:</case>
      <return>return <expr><literal type="string">"init"</literal></expr>;</return>
    <case>case <expr><name>DND_STAT_RUNNING</name></expr>:</case>
      <return>return <expr><literal type="string">"running"</literal></expr>;</return>
    <case>case <expr><name>DND_STAT_STOPPED</name></expr>:</case>
      <return>return <expr><literal type="string">"stopped"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dmNodeName</name><parameter_list>(<parameter><decl><type><name>EDndNodeType</name></type> <name>ntype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>ntype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>VNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"vnode"</literal></expr>;</return>
    <case>case <expr><name>QNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"qnode"</literal></expr>;</return>
    <case>case <expr><name>SNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"snode"</literal></expr>;</return>
    <case>case <expr><name>MNODE</name></expr>:</case>
      <return>return <expr><literal type="string">"mnode"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"dnode"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>dmSetMgmtHandle</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>nodeMsgFp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>needCheckVgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMgmtHandle</name></type> <name>handle</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>msgType</name></expr>,
      <expr><operator>.</operator><name>msgFp</name> <operator>=</operator> <operator>(</operator><name>NodeMsgFp</name><operator>)</operator><name>nodeMsgFp</name></expr>,
      <expr><operator>.</operator><name>needCheckVgId</name> <operator>=</operator> <name>needCheckVgId</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dmGetMonitorSystemInfo</name><parameter_list>(<parameter><decl><type><name>SMonSysInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosGetCpuUsage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>cpu_system</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>cpu_engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetCpuCores</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>cpu_cores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetProcMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>mem_engine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetSysMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>mem_system</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>mem_total</name></name> <operator>=</operator> <name>tsTotalMemoryKB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>disk_engine</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>disk_used</name></name> <operator>=</operator> <name><name>tsDataSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>used</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>disk_total</name></name> <operator>=</operator> <name><name>tsDataSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>total</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetCardInfoDelta</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>net_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>net_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetProcIODelta</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>io_read</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>io_write</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>io_read_disk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>io_write_disk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
