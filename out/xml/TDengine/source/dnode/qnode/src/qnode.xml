<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/qnode/src/qnode.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libs/function/function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qndInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>

<function><type><name>SQnode</name> <modifier>*</modifier></type><name>qndOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SQnodeOpt</name> <modifier>*</modifier></type><name>pOption</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQnode</name> <modifier>*</modifier></type><name>pQnode</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQnode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pQnode</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"calloc SQnode failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qWorkerInit</name><argument_list>(<argument><expr><name>NODE_TYPE_QNODE</name></expr></argument>, <argument><expr><name><name>pQnode</name><operator>-&gt;</operator><name>qndId</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pQnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOption</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pQnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pQnode</name><operator>-&gt;</operator><name>msgCb</name></name> <operator>=</operator> <name><name>pOption</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt>
  <return>return <expr><name>pQnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>qndClose</name><parameter_list>(<parameter><decl><type><name>SQnode</name> <modifier>*</modifier></type><name>pQnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>qWorkerDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pQnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pQnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qndGetLoad</name><parameter_list>(<parameter><decl><type><name>SQnode</name> <modifier>*</modifier></type><name>pQnode</name></decl></parameter>, <parameter><decl><type><name>SQnodeLoad</name> <modifier>*</modifier></type><name>pLoad</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SReadHandle</name></type>  <name>handle</name> <init>= <expr><block>{<expr><operator>.</operator><name>pMsgCb</name> <operator>=</operator> <operator>&amp;</operator><name><name>pQnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQWorkerStat</name></type> <name>stat</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qWorkerGetStat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name><name>pQnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfQueryInQueue</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>numOfQueryInQueue</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfFetchInQueue</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>numOfFetchInQueue</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>timeInQueryQueue</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>timeInQueryQueue</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>timeInFetchQueue</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>timeInFetchQueue</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>cacheDataSize</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>cacheDataSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfProcessedQuery</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>queryProcessed</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfProcessedCQuery</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>cqueryProcessed</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfProcessedFetch</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>fetchProcessed</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfProcessedDrop</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>dropProcessed</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfProcessedHb</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>hbProcessed</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfProcessedDelete</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>deleteProcessed</name></name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qndPreprocessQueryMsg</name><parameter_list>(<parameter><decl><type><name>SQnode</name> <modifier>*</modifier></type><name>pQnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TDMT_SCH_QUERY</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>&amp;&amp;</operator> <name>TDMT_SCH_MERGE_QUERY</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>qWorkerPreprocessQueryMsg</name><argument_list>(<argument><expr><name><name>pQnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>qndProcessQueryMsg</name><parameter_list>(<parameter><decl><type><name>SQnode</name> <modifier>*</modifier></type><name>pQnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SReadHandle</name></type> <name>handle</name> <init>= <expr><block>{<expr><operator>.</operator><name>pMsgCb</name> <operator>=</operator> <operator>&amp;</operator><name><name>pQnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qTrace</name><argument_list>(<argument><expr><literal type="string">"message in qnode queue is processing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_SCH_QUERY</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_QUERY</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name><name>pQnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_QUERY_CONTINUE</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessCQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name><name>pQnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_FETCH</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_FETCH</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessFetchMsg</name><argument_list>(<argument><expr><name>pQnode</name></expr></argument>, <argument><expr><name><name>pQnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_CANCEL_TASK</name></expr>:</case>
      <comment type="line">// code = qWorkerProcessCancelMsg(pQnode, pQnode-&gt;pQuery, pMsg, ts);</comment>
      <break>break;</break>
    <case>case <expr><name>TDMT_SCH_DROP_TASK</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessDropMsg</name><argument_list>(<argument><expr><name>pQnode</name></expr></argument>, <argument><expr><name><name>pQnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_TMQ_CONSUME</name></expr>:</case>
      <comment type="line">// code =  tqProcessConsumeReq(pQnode-&gt;pTq, pMsg);</comment>
      <comment type="line">// break;</comment>
    <case>case <expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessHbMsg</name><argument_list>(<argument><expr><name>pQnode</name></expr></argument>, <argument><expr><name><name>pQnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"unknown msg type:%d in qnode queue"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_ACTION_IN_PROGRESS</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
