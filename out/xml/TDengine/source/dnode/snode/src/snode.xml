<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/snode/src/snode.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sndInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuuid.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>sndEnqueueStreamDispatch</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>msgStr</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>msgBody</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>msgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStreamDispatchReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>           <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>msgBody</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeStreamDispatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_MSG_DECODE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStreamTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
        <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamProcessDispatchReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

<label><name>FAIL</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndExpandTask</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name> <modifier>*</modifier></type><name>pTask</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__AGG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>childEpInfo</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>refCnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>schedStatus</name></name> <operator>=</operator> <name>TASK_SCHED_STATUS__INACTIVE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>inputQueue</name></name> <operator>=</operator> <call><name>streamQueueOpen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputQueue</name></name> <operator>=</operator> <call><name>streamQueueOpen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>inputQueue</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTask</name><operator>-&gt;</operator><name>outputQueue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>inputStatus</name></name> <operator>=</operator> <name>TASK_INPUT_STATUS__NORMAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputStatus</name></name> <operator>=</operator> <name>TASK_OUTPUT_STATUS__NORMAL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>pMsgCb</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pSnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>startVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>pState</name></name> <operator>=</operator> <call><name>streamStateOpen</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>pState</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReadHandle</name></type> <name>mgHandle</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name>NULL</name></expr>,
      <expr><operator>.</operator><name>numOfVgroups</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>childEpInfo</name></name></expr></argument>)</argument_list></call></expr>,
      <expr><operator>.</operator><name>pStateBackend</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>pState</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name> <operator>=</operator> <call><name>qCreateStreamExecTaskInfo</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mgHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSnode</name> <modifier>*</modifier></type><name>sndOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSnodeOpt</name> <modifier>*</modifier></type><name>pOption</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSnode</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSnode</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSnode</name><operator>-&gt;</operator><name>msgCb</name></name> <operator>=</operator> <name><name>pOption</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <call><name>streamMetaOpen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pSnode</name></expr></argument>, <argument><expr><operator>(</operator><name>FTaskExpand</name> <operator>*</operator><operator>)</operator><name>sndExpandTask</name></expr></argument>, <argument><expr><name>SNODE_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pSnode</name></expr>;</return>

<label><name>FAIL</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sndClose</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>streamMetaClose</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndGetLoad</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SSnodeLoad</name> <modifier>*</modifier></type><name>pLoad</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessTaskDeployReq</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>

  <comment type="line">// 1.deserialize msg and build task</comment>
  <decl_stmt><decl><type><name>SStreamTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSStreamTask</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__AGG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 2.save task</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamMetaAddTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 3.go through recover steps to fill history</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>fillHistory</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamSetParamForRecover</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamAggRecoverPrepare</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessTaskDropReq</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVDropStreamTaskReq</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><operator>(</operator><name>SVDropStreamTaskReq</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>streamMetaRemoveTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessTaskRunReq</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamTaskRunReq</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>taskId</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name>       <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamProcessRunReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessTaskDispatchReq</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>exec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>msgStr</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>msgBody</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>msgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamDispatchReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>           <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>msgBody</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeStreamDispatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStreamTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
        <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamProcessDispatchReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessTaskRetrieveReq</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>msgStr</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>              <modifier>*</modifier></type><name>msgBody</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>msgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamRetrieveReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>           <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>msgBody</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeStreamRetrieveReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>taskId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>dstTaskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
        <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamProcessRetrieveReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDeleteStreamRetrieveReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessTaskDispatchRsp</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamDispatchRsp</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>taskId</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name>        <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamProcessDispatchRsp</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessTaskRetrieveRsp</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessWriteMsg</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_STREAM_TASK_DEPLOY</name></expr>:</case>
      <return>return <expr><call><name>sndProcessTaskDeployReq</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_TASK_DROP</name></expr>:</case>
      <return>return <expr><call><name>sndProcessTaskDropReq</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessTaskRecoverFinishReq</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <comment type="line">// deserialize</comment>
  <decl_stmt><decl><type><name>SStreamRecoverFinishReq</name></type> <name>req</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeSStreamRecoverFinishReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// find task</comment>
  <decl_stmt><decl><type><name>SStreamTask</name> <modifier>*</modifier></type><name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// do process request</comment>
  <if_stmt><if>if <condition>(<expr><call><name>streamProcessRecoverFinishReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>childId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pSnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessTaskRecoverFinishRsp</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>sndProcessStreamMsg</name><parameter_list>(<parameter><decl><type><name>SSnode</name> <modifier>*</modifier></type><name>pSnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_STREAM_TASK_RUN</name></expr>:</case>
      <return>return <expr><call><name>sndProcessTaskRunReq</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_TASK_DISPATCH</name></expr>:</case>
      <return>return <expr><call><name>sndProcessTaskDispatchReq</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_TASK_DISPATCH_RSP</name></expr>:</case>
      <return>return <expr><call><name>sndProcessTaskDispatchRsp</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_RETRIEVE</name></expr>:</case>
      <return>return <expr><call><name>sndProcessTaskRetrieveReq</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_RETRIEVE_RSP</name></expr>:</case>
      <return>return <expr><call><name>sndProcessTaskRetrieveRsp</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_RECOVER_FINISH</name></expr>:</case>
      <return>return <expr><call><name>sndProcessTaskRecoverFinishReq</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_RECOVER_FINISH_RSP</name></expr>:</case>
      <return>return <expr><call><name>sndProcessTaskRecoverFinishRsp</name><argument_list>(<argument><expr><name>pSnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
