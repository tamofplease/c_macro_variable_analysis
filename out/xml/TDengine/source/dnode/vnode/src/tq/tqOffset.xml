<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tq/tqOffset.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tq.h"</cpp:file></cpp:include>

<struct>struct <name>STqOffsetStore</name> <block>{
  <decl_stmt><decl><type><name>STQ</name><modifier>*</modifier></type>      <name>pTq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl>;</decl_stmt>  <comment type="line">// SHashObj&lt;subscribeKey, offset&gt;</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>    <name>needCommit</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>char</name><modifier>*</modifier></type> <name>tqOffsetBuildFName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fVer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>fname</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="string">"%s/offset-ver%d"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>fname</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqOffsetRestoreFromFile</name><parameter_list>(<parameter><decl><type><name>STqOffsetStore</name><modifier>*</modifier></type> <name>pStore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STqOffsetHead</name></type> <name>head</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>       <name>code</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqOffsetHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STqOffsetHead</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">// TODO handle error</comment>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>head</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>memBuf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>memBuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// TODO handle error</comment>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>STqOffset</name></type> <name>offset</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDecoder</name></type>  <name>decoder</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>memBuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tDecodeSTqOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqOffset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// TODO</comment>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>memBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STqOffsetStore</name><modifier>*</modifier></type> <name>tqOffsetOpen</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STqOffsetStore</name><modifier>*</modifier></type> <name>pStore</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqOffsetStore</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStore</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pStore</name><operator>-&gt;</operator><name>pTq</name></name> <operator>=</operator> <name>pTq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStore</name><operator>-&gt;</operator><name>needCommit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTq</name><operator>-&gt;</operator><name>pOffsetStore</name></name> <operator>=</operator> <name>pStore</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>MurmurHash3_32</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>fname</name> <init>= <expr><call><name>tqOffsetBuildFName</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pTq</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tqOffsetRestoreFromFile</name><argument_list>(<argument><expr><name>pStore</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pStore</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tqOffsetClose</name><parameter_list>(<parameter><decl><type><name>STqOffsetStore</name><modifier>*</modifier></type> <name>pStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tqOffsetCommitFile</name><argument_list>(<argument><expr><name>pStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STqOffset</name><modifier>*</modifier></type> <name>tqOffsetRead</name><parameter_list>(<parameter><decl><type><name>STqOffsetStore</name><modifier>*</modifier></type> <name>pStore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>subscribeKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>STqOffset</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name>subscribeKey</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>subscribeKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqOffsetWrite</name><parameter_list>(<parameter><decl><type><name>STqOffsetStore</name><modifier>*</modifier></type> <name>pStore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STqOffset</name><modifier>*</modifier></type> <name>pOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pStore</name><operator>-&gt;</operator><name>needCommit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqOffset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqOffsetDelete</name><parameter_list>(<parameter><decl><type><name>STqOffsetStore</name><modifier>*</modifier></type> <name>pStore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>subscribeKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name>subscribeKey</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>subscribeKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqOffsetCommitFile</name><parameter_list>(<parameter><decl><type><name>STqOffsetStore</name><modifier>*</modifier></type> <name>pStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pStore</name><operator>-&gt;</operator><name>needCommit</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <comment type="line">// TODO file name should be with a newer version</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>     <name>fname</name> <init>= <expr><call><name>tqOffsetBuildFName</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pTq</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_APPEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>     <name>err</name> <init>= <expr><name>terrno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errStr</name> <init>= <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>sysErr</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sysErrStr</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot open file %s when commit offset since %s"</literal></expr></argument>, <argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
            <argument><expr><name>sysErrStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>STqOffset</name><modifier>*</modifier></type> <name>pOffset</name> <init>= <expr><operator>(</operator><name>STqOffset</name><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>bodyLen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSTqOffset</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name>bodyLen</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>totLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqOffsetHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>bodyLen</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>totLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqOffsetHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>STqOffsetHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>size</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>bodyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>abuf</name></expr></argument>, <argument><expr><name>bodyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncodeSTqOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// write file</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>writeLen</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>writeLen</name> <operator>=</operator> <call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>totLen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>totLen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"write offset incomplete, len %d, write len %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>bodyLen</name></expr></argument>, <argument><expr><name>writeLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <comment type="line">// close and rename file</comment>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStore</name><operator>-&gt;</operator><name>needCommit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
