<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tq/tqRead.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tq.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>isValValidForTable</name><parameter_list>(<parameter><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SWalCont</name><modifier>*</modifier></type> <name>pHead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>!=</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int16_t</name></type> <name>msgType</name> <init>= <expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>body</name> <init>= <expr><name><name>pHead</name><operator>-&gt;</operator><name>body</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bodyLen</name> <init>= <expr><name><name>pHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>tbSuid</name> <init>= <expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>execTb</name><operator>.</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>realTbSuid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>coder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name> <init>= <expr><name>bodyLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_CREATE_STB</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_VND_ALTER_STB</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVCreateStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>realTbSuid</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_DROP_STB</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVDropStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVDropStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>realTbSuid</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_CREATE_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVCreateTbBatchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>        <name>needRebuild</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>pCreateReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name> <operator>&amp;&amp;</operator> <name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <name>tbSuid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>needRebuild</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>needRebuild</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// do nothing</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>needRebuild</name> <operator>==</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>realTbSuid</name> <operator>=</operator> <name>tbSuid</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>realTbSuid</name> <operator>=</operator> <name>tbSuid</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SVCreateTbBatchReq</name></type> <name>reqNew</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>reqNew</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>nReqs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SVCreateTbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name> <operator>&amp;&amp;</operator> <name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <name>tbSuid</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>reqNew</name><operator>.</operator><name>nReqs</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>reqNew</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pCreateReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>int</name></type>     <name>tlen</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateTbBatchReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqNew</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>reqNew</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SEncoder</name></type> <name>coderNew</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coderNew</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tlen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tEncodeSVCreateTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coderNew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coderNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>body</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>bodyLen</name></name> <operator>=</operator> <name>tlen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>reqNew</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_ALTER_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVAlterTbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVAlterTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>pExecReader</name><operator>-&gt;</operator><name>pVnodeMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>realTbSuid</name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_DROP_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVDropTbBatchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVDropTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>      <name>needRebuild</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVDropTbReq</name><modifier>*</modifier></type> <name>pDropReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pDropReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pDropReq</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name>tbSuid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>needRebuild</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>needRebuild</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// do nothing</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>needRebuild</name> <operator>==</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>realTbSuid</name> <operator>=</operator> <name>tbSuid</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>realTbSuid</name> <operator>=</operator> <name>tbSuid</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SVDropTbBatchReq</name></type> <name>reqNew</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>reqNew</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>nReqs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVDropTbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pDropReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pDropReq</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name>tbSuid</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>reqNew</name><operator>.</operator><name>nReqs</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>reqNew</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pDropReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>int</name></type>     <name>tlen</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVDropTbBatchReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqNew</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>reqNew</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SEncoder</name></type> <name>coderNew</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coderNew</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tlen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tEncodeSVDropTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coderNew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coderNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>body</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>bodyLen</name></name> <operator>=</operator> <name>tlen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>reqNew</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_DELETE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDeleteRes</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeDeleteRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>realTbSuid</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tbSuid</name> <operator>==</operator> <name>realTbSuid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>tqFetchLog</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>fetchOffset</name></decl></parameter>, <parameter><decl><type><name>SWalCkHead</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppCkHead</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><operator>*</operator><name>fetchOffset</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>walFetchHead</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>*</operator><name>ppCkHead</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer:%"</literal> <name>PRId64</name> <literal type="string">", (epoch %d) vgId:%d offset %"</literal> <name>PRId64</name> <literal type="string">", no more log to return"</literal></expr></argument>,
              <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>fetchOffset</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>END</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, taosx get msg ver %"</literal> <name>PRId64</name> <literal type="string">", type: %s"</literal></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppCkHead</name><operator>)</operator><operator>-&gt;</operator><name><name>head</name><operator>.</operator><name>msgType</name></name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>ppCkHead</name><operator>)</operator><operator>-&gt;</operator><name><name>head</name><operator>.</operator><name>msgType</name></name></name> <operator>==</operator> <name>TDMT_VND_SUBMIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walFetchBody</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>, <argument><expr><name>ppCkHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>fetchOffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>END</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>fetchOffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <goto>goto <name>END</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchMeta</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SWalCont</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppCkHead</name><operator>)</operator><operator>-&gt;</operator><name>head</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_META_MSG</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walFetchBody</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>, <argument><expr><name>ppCkHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>fetchOffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>END</name>;</goto>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><call><name>isValValidForTable</name><argument_list>(<argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pHead</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>fetchOffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <goto>goto <name>END</name>;</goto>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>walSkipFetchBody</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ppCkHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>fetchOffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>END</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>offset</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
<label><name>END</name>:</label>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STqReader</name><modifier>*</modifier></type> <name>tqOpenReader</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name></name> <operator>=</operator> <call><name>walOpenReader</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnodeMeta</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pColIdList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaVer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>pReader</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tqCloseReader</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// close wal reader</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>walCloseReader</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// free cached schema</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDeleteSSchemaWrapper</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pColIdList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pColIdList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// free hash</comment>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqSeekVer</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>walReadSeekVer</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>curInvalid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>==</operator> <name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>==</operator> <name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqNextBlock</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SFetchRet</name><modifier>*</modifier></type> <name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>fromProcessedMsg</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fromProcessedMsg</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>walNextValidMsg</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator>
            <name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>curVersion</name></name> <operator>-</operator> <operator>(</operator><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>curInvalid</name></name> <operator>|</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>curStopped</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TMQ_OFFSET__LOG</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ver</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fetchType</name></name> <operator>=</operator> <name>FETCH_TYPE__NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"return offset %"</literal> <name>PRId64</name> <literal type="string">", no more valid"</literal></expr></argument>, <argument><expr><name><name>ret</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>body</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>body</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
      if (pReader-&gt;pWalReader-&gt;pHead-&gt;head.msgType != TDMT_VND_SUBMIT) {
        <comment type="line">// TODO do filter</comment>
        ret-&gt;fetchType = FETCH_TYPE__META;
        ret-&gt;meta = pReader-&gt;pWalReader-&gt;pHead-&gt;head.body;
        return 0;
      } else {
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>tqReaderSetDataMsg</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>pHead</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
      }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><call><name>tqNextDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO mem free</comment>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tqRetrieveDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ret</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fetchType</name></name> <operator>=</operator> <name>FETCH_TYPE__DATA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"return data rows %d"</literal></expr></argument>, <argument><expr><name><name>ret</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>fromProcessedMsg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TMQ_OFFSET__LOG</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ver</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>ver</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fetchType</name></name> <operator>=</operator> <name>FETCH_TYPE__SEP</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"return offset %"</literal> <name>PRId64</name> <literal type="string">", processed finish"</literal></expr></argument>, <argument><expr><name><name>ret</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqReaderSetDataMsg</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSubmitReq</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name>pMsg</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tInitSubmitMsgIter</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tGetSubmitMsgNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>tInitSubmitMsgIter</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>blkIter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlkIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tqNextDataBlock</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tGetSubmitMsgNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/*tqDebug("search uid %" PRId64, pHandle-&gt;msgIter.uid);*/</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/*tqDebug("find   uid %" PRId64, pHandle-&gt;msgIter.uid);*/</comment>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqMaskBlock</name><parameter_list>(<parameter><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pDst</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>nCols</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>colInfo</name> <init>=
          <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tqNextDataBlockFilterOut</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>filterOutUids</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tGetSubmitMsgNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>msgIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>pBlock</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>tbIdHash</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>filterOutUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqRetrieveDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: cache multiple schema</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sversion</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaVer</name></name> <operator>!=</operator> <name>sversion</name> <operator>||</operator>
      <name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>!=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnodeMeta</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>sversion</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqWarn</name><argument_list>(<argument><expr><literal type="string">"cannot found tsschema for table: uid:%"</literal> <name>PRId64</name> <literal type="string">" (suid:%"</literal> <name>PRId64</name> <literal type="string">"), version %d, possibly dropped table"</literal></expr></argument>,
             <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*ASSERT(0);*/</comment>
      <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TQ_TABLE_SCHEMA_NOT_FOUND</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tDeleteSSchemaWrapper</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name> <operator>=</operator> <call><name>metaGetTableSchema</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnodeMeta</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>sversion</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqWarn</name><argument_list>(<argument><expr><literal type="string">"cannot found schema wrapper for table: suid:%"</literal> <name>PRId64</name> <literal type="string">", version %d, possibly dropped table"</literal></expr></argument>,
             <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*ASSERT(0);*/</comment>
      <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TQ_TABLE_SCHEMA_NOT_FOUND</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaVer</name></name> <operator>=</operator> <name>sversion</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type>       <name>pTschema</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSchemaWrapper</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>colNumNeed</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pColIdList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>colNumNeed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>colMeta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>colMeta</name> <operator>&lt;</operator> <name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>nCols</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type>        <name>pColSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>colMeta</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>colInfo</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>FAIL</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>colMeta</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>colNumNeed</name> <operator>&gt;</operator> <name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>nCols</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>colNumNeed</name> <operator>=</operator> <name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>colMeta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>colNeed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>colMeta</name> <operator>&lt;</operator> <name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>nCols</name></name> <operator>&amp;&amp;</operator> <name>colNeed</name> <operator>&lt;</operator> <name>colNumNeed</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pColSchema</name> <init>= <expr><operator>&amp;</operator><name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>colMeta</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>col_id_t</name></type> <name>colIdSchema</name> <init>= <expr><name><name>pColSchema</name><operator>-&gt;</operator><name>colId</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>col_id_t</name></type> <name>colIdNeed</name> <init>= <expr><operator>*</operator><operator>(</operator><name>col_id_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pColIdList</name></name></expr></argument>, <argument><expr><name>colNeed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>colIdSchema</name> <operator>&lt;</operator> <name>colIdNeed</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>colMeta</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>colIdSchema</name> <operator>&gt;</operator> <name>colIdNeed</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>colNeed</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>colInfo</name> <init>= <expr><call><name>createColumnInfoData</name><argument_list>(<argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>pColSchema</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>FAIL</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>colMeta</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>colNeed</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>colActual</name> <init>= <expr><call><name>blockDataGetNumOfCols</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STSRowIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdSTSRowIterInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>pTschema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>curRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tInitSubmitBlkIter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>blkIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>numOfRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pMsg</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>tGetSubmitBlkNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>blkIter</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdSTSRowIterReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// get all wanted col of that block</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>colActual</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SCellVal</name></type>         <name>sVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tdSTSRowIterFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>curRow</name></expr></argument>, <argument><expr><name><name>sVal</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>sVal</name><operator>.</operator><name>valType</name></name> <operator>!=</operator> <name>TD_VTYPE_NORM</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>FAIL</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>curRow</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>FAIL</name>:</label>
  <expr_stmt><expr><call><name>blockDataFreeRes</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqRetrieveTaosxBlock</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>schemas</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sversion</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaVer</name></name> <operator>!=</operator> <name>sversion</name> <operator>||</operator>
      <name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>!=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnodeMeta</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>sversion</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqWarn</name><argument_list>(<argument><expr><literal type="string">"cannot found tsschema for table: uid:%"</literal> <name>PRId64</name> <literal type="string">" (suid:%"</literal> <name>PRId64</name> <literal type="string">"), version %d, possibly dropped table"</literal></expr></argument>,
             <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*ASSERT(0);*/</comment>
      <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TQ_TABLE_SCHEMA_NOT_FOUND</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tDeleteSSchemaWrapper</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name> <operator>=</operator> <call><name>metaGetTableSchema</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnodeMeta</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>sversion</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqWarn</name><argument_list>(<argument><expr><literal type="string">"cannot found schema wrapper for table: suid:%"</literal> <name>PRId64</name> <literal type="string">", version %d, possibly dropped table"</literal></expr></argument>,
             <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*ASSERT(0);*/</comment>
      <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TQ_TABLE_SCHEMA_NOT_FOUND</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaVer</name></name> <operator>=</operator> <name>sversion</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cachedSchemaSuid</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type>       <name>pTschema</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSchemaWrapper</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>colAtMost</name> <init>= <expr><name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>nCols</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>curRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lastRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>assigned</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>assigned</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tInitSubmitBlkIter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>blkIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STSRowIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdSTSRowIterInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>pTschema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>row</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>tGetSubmitBlkNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>blkIter</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>buildNew</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdSTSRowIterReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, row of block %d"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>curRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>colAtMost</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SCellVal</name></type> <name>sVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tdSTSRowIterFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name></expr></argument>, <argument><expr><name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %d col, type %d"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sVal</name><operator>.</operator><name>valType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>curRow</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>assigned</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sVal</name><operator>.</operator><name>valType</name></name> <operator>!=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buildNew</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>currentRowAssigned</name> <init>= <expr><name><name>sVal</name><operator>.</operator><name>valType</name></name> <operator>!=</operator> <name>TD_VTYPE_NONE</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentRowAssigned</name> <operator>!=</operator> <name><name>assigned</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>assigned</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>currentRowAssigned</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>buildNew</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>buildNew</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pLastBlock</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pLastBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>curRow</name> <operator>-</operator> <name>lastRow</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastRow</name> <operator>=</operator> <name>curRow</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>    <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSW</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchemaWrapper</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tqMaskBlock</name><argument_list>(<argument><expr><name>pSW</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pSchemaWrapper</name></expr></argument>, <argument><expr><name>assigned</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>FAIL</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SSDataBlock</name></type> <name>block</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assignOneDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, build new block, col %d"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
              <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>schemas</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pMsg</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, taosx scan, block num: %d"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>numOfRows</name></name> <operator>-</operator> <name>curRow</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>FAIL</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tdSTSRowIterReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SCellVal</name></type>         <name>sVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tdSTSRowIterFetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>sVal</name><operator>.</operator><name>valType</name></name> <operator>!=</operator> <name>TD_VTYPE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>curRow</name></expr></argument>, <argument><expr><name><name>sVal</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>sVal</name><operator>.</operator><name>valType</name></name> <operator>==</operator> <name>TD_VTYPE_NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>FAIL</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, row %d col %d append %d"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pWalReader</name><operator>-&gt;</operator><name>pWal</name><operator>-&gt;</operator><name>cfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>curRow</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
              <argument><expr><name><name>sVal</name><operator>.</operator><name>valType</name></name> <operator>==</operator> <name>TD_VTYPE_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>curRow</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pLastBlock</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pLastBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>curRow</name> <operator>-</operator> <name>lastRow</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>assigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>FAIL</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>assigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tqReaderSetColIdList</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pColIdList</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pColIdList</name></name> <operator>=</operator> <name>pColIdList</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int</name></type> <name>tqReaderSetTbUidList</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>tbUidList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tqReaderAddTbUidList</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>tbUidList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tqReaderRemoveTbUidList</name><parameter_list>(<parameter><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>tbUidList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>tbIdHash</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqUpdateTbUidList</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>tbUidList</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isAdd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pExec</name> <init>= <expr><operator>(</operator><name>STqHandle</name><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pExec</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qUpdateQualifiedTableId</name><argument_list>(<argument><expr><name><name>pExec</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>task</name></name></expr></argument>, <argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>isAdd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExec</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isAdd</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int64_t</name></type> <name>tbUid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pExec</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>execDb</name><operator>.</operator><name>pFilterOutTbUid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbUid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExec</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isAdd</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>qa</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>id</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"failed to get table meta, uid:%"</literal> <name>PRIu64</name> <literal type="string">" code:%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name> <operator>||</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name> <operator>!=</operator> <name><name>pExec</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>execTb</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"table uid %"</literal> <name>PRId64</name> <literal type="string">" does not add to tq handle"</literal></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"table uid %"</literal> <name>PRId64</name> <literal type="string">" add to tq handle"</literal></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>qa</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>qa</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tqReaderAddTbUidList</name><argument_list>(<argument><expr><name><name>pExec</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>pExecReader</name></name></expr></argument>, <argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>qa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// TODO handle delete table from stb</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SStreamTask</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__SOURCE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qUpdateQualifiedTableId</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></argument>, <argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>isAdd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
