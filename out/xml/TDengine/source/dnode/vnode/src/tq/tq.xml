<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tq/tq.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tq.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>tqInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tqMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tqMgmt</name><operator>.</operator><name>timer</name></name> <operator>=</operator> <call><name>taosTmrInit</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="string">"TQ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tqMgmt</name><operator>.</operator><name>timer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tqMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>streamInit</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tqMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tqCleanUp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tqMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosTmrCleanUp</name><argument_list>(<argument><expr><name><name>tqMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamCleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tqMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroySTqHandle</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><name>STqHandle</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>qDestroyTask</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>execCol</name><operator>.</operator><name>qmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqCloseReader</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>pExecReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>walCloseReader</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>execDb</name><operator>.</operator><name>pFilterOutTbUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>walCloseReader</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tqCloseReader</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>pExecReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tqPushEntryFree</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STqPushEntry</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDeleteSMqDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>dataRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STQ</name><modifier>*</modifier></type> <name>tqOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STQ</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pTq</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>MurmurHash3_32</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name>destroySTqHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosInitRWLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pushLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTq</name><operator>-&gt;</operator><name>pPushMgr</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pPushMgr</name></name></expr></argument>, <argument><expr><name>tqPushEntryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTq</name><operator>-&gt;</operator><name>pCheckInfo</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>MurmurHash3_32</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pCheckInfo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSTqCheckInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tqMetaOpen</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTq</name><operator>-&gt;</operator><name>pOffsetStore</name></name> <operator>=</operator> <call><name>tqOffsetOpen</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTq</name><operator>-&gt;</operator><name>pOffsetStore</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name> <operator>=</operator> <call><name>streamMetaOpen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pTq</name></expr></argument>, <argument><expr><operator>(</operator><name>FTaskExpand</name><operator>*</operator><operator>)</operator><name>tqExpandTask</name></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>streamLoadTasks</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pTq</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tqClose</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTq</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqOffsetClose</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pOffsetStore</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pPushMgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pCheckInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tqMetaClose</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaClose</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqSendMetaPollRsp</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqPollReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqMetaRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSMqMetaRsp</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>mqMsgType</name> <operator>=</operator> <name>TMQ_MSG_TYPE__POLL_META_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>epoch</name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>consumerId</name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>abuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSMqMetaRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>resp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>buf</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>tlen</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, from consumer:%"</literal> <name>PRId64</name> <literal type="string">", (epoch %d) send rsp, res msg type %d, offset type:%d"</literal></expr></argument>,
          <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>resMsgType</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqPushDataRsp</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>STqPushEntry</name><modifier>*</modifier></type> <name>pPushEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqDataRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><operator>&amp;</operator><name><name>pPushEntry</name><operator>-&gt;</operator><name>dataRsp</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockData</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockDataLen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pRsp</name><operator>-&gt;</operator><name>withSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/*if (pRsp-&gt;blockNum &gt; 0) {*/</comment>
    <comment type="block">/*ASSERT(pRsp-&gt;rspOffset.version &gt; pRsp-&gt;reqOffset.version);*/</comment>
    <comment type="block">/*} else {*/</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*}*/</comment>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSMqDataRsp</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPushEntry</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>head</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>abuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSMqDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pPushEntry</name><operator>-&gt;</operator><name>pInfo</name></name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>buf</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>tlen</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, from consumer:%"</literal> <name>PRId64</name> <literal type="string">", (epoch %d) push rsp, block num: %d, reqOffset:%s, rspOffset:%s"</literal></expr></argument>,
          <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>epoch</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqSendDataRsp</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqPollReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqDataRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockData</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockDataLen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pRsp</name><operator>-&gt;</operator><name>withSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSMqDataRsp</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>mqMsgType</name> <operator>=</operator> <name>TMQ_MSG_TYPE__POLL_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>epoch</name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>consumerId</name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>abuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSMqDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>buf</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>tlen</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, from consumer:%"</literal> <name>PRId64</name> <literal type="string">", (epoch %d) send rsp, block num: %d, reqOffset:%s, rspOffset:%s"</literal></expr></argument>,
          <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqSendTaosxRsp</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqPollReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STaosxRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockData</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockDataLen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>withSchema</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSTaosxRsp</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>mqMsgType</name> <operator>=</operator> <name>TMQ_MSG_TYPE__TAOSX_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>epoch</name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>consumerId</name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>abuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>buf</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>tlen</name></expr>,
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"taosx rsp, vgId:%d, from consumer:%"</literal> <name>PRId64</name>
          <literal type="string">", (epoch %d) send rsp, block num: %d, reqOffset:%s, rspOffset:%s"</literal></expr></argument>,
          <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>tqOffsetLessOrEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STqOffset</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STqOffset</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pLeft</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name> <operator>&amp;&amp;</operator> <name><name>pRight</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name> <operator>&amp;&amp;</operator>
         <name><name>pLeft</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>version</name></name> <operator>&lt;=</operator> <name><name>pRight</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>version</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessOffsetCommitReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STqOffset</name></type> <name>offset</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>  <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSTqOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name> <operator>||</operator> <name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_META</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"receive offset commit msg to %s on vgId:%d, offset(type:snapshot) uid:%"</literal> <name>PRId64</name> <literal type="string">", ts:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><name><name>offset</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"receive offset commit msg to %s on vgId:%d, offset(type:log) version:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>subKey</name></name></expr></argument>,
            <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>version</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>version</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>STqOffset</name><modifier>*</modifier></type> <name>pOffset</name> <init>= <expr><call><name>tqOffsetRead</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pOffsetStore</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOffset</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>tqOffsetLessOrEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tqOffsetWrite</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pOffsetStore</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pHandle</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>walRefVer</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pRef</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>val</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// rsp</comment>

  <comment type="block">/*}*/</comment>
  <comment type="block">/*}*/</comment>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqCheckColModifiable</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>tbUid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pCheckInfo</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>STqCheckInfo</name><modifier>*</modifier></type> <name>pCheck</name> <init>= <expr><operator>(</operator><name>STqCheckInfo</name><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCheck</name><operator>-&gt;</operator><name>ntbUid</name></name> <operator>==</operator> <name>tbUid</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCheck</name><operator>-&gt;</operator><name>colIdList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int16_t</name></type> <name>forbidColId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCheck</name><operator>-&gt;</operator><name>colIdList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>forbidColId</name> <operator>==</operator> <name>colId</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pCheckInfo</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tqInitDataRsp</name><parameter_list>(<parameter><decl><type><name>SMqDataRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqPollReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>subType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>reqOffset</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockData</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockDataLen</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockData</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockDataLen</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>withTbName</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  pRsp-&gt;withTbName = pReq-&gt;withTbName;
  if (pRsp-&gt;withTbName) {
    pRsp-&gt;blockTbName = taosArrayInit(0, sizeof(void*));
    if (pRsp-&gt;blockTbName == NULL) {
      <comment type="line">// TODO free</comment>
      return -1;
    }
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>subType</name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>withSchema</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tqInitTaosxRsp</name><parameter_list>(<parameter><decl><type><name>STaosxRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqPollReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>reqOffset</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>reqOffset</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>withTbName</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>withSchema</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockData</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockDataLen</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockTbName</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockData</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockDataLen</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockTbName</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessPollReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqPollReq</name></type>   <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqOffsetVal</name></type> <name>fetchOffsetNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWalCkHead</name><modifier>*</modifier></type>  <name>pCkHead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMqPollReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSMqPollReq %d failed"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>      <name>consumerId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>consumerId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>reqEpoch</name> <init>= <expr><name><name>req</name><operator>.</operator><name>epoch</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqOffsetVal</name></type> <name>reqOffset</name> <init>= <expr><name><name>req</name><operator>.</operator><name>reqOffset</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// 1.find handle</comment>
  <decl_stmt><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/*ASSERT(pHandle);*/</comment>
  <if_stmt><if>if <condition>(<expr><name>pHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"tmq poll: no consumer handle for consumer:%"</literal> <name>PRId64</name> <literal type="string">", in vgId:%d, subkey %s"</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>,
            <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check rebalance</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>!=</operator> <name>consumerId</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer handle mismatch for consumer:%"</literal> <name>PRId64</name>
            <literal type="string">", in vgId:%d, subkey %s, handle consumer id %"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TMQ_CONSUMER_MISMATCH</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update epoch if need</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>consumerEpoch</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>consumerEpoch</name> <operator>&lt;</operator> <name>reqEpoch</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>consumerEpoch</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>consumerEpoch</name></expr></argument>, <argument><expr><name>reqEpoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer %"</literal> <name>PRId64</name> <literal type="string">" (epoch %d), subkey %s, recv poll req in vg %d, req offset %s"</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>,
          <argument><expr><name><name>req</name><operator>.</operator><name>epoch</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 2.reset offset if needed</comment>
  <if_stmt><if>if <condition>(<expr><name><name>reqOffset</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>fetchOffsetNew</name> <operator>=</operator> <name>reqOffset</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>STqOffset</name><modifier>*</modifier></type> <name>pOffset</name> <init>= <expr><call><name>tqOffsetRead</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pOffsetStore</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pOffset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>fetchOffsetNew</name> <operator>=</operator> <name><name>pOffset</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>formatBuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>formatBuf</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetchOffsetNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer %"</literal> <name>PRId64</name> <literal type="string">", subkey %s, vg %d, offset reset to %s"</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>,
              <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>formatBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>reqOffset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__RESET_EARLIEAST</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>useSnapshot</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchMeta</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tqOffsetResetToMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fetchOffsetNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>tqOffsetResetToData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fetchOffsetNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fetchOffsetNew</name></expr></argument>, <argument><expr><call><name>walGetFirstVer</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>reqOffset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__RESET_LATEST</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SMqDataRsp</name></type> <name>dataRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tqInitDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dataRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dataRsp</name><operator>.</operator><name>rspOffset</name></name></expr></argument>, <argument><expr><call><name>walGetLastVer</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer %"</literal> <name>PRId64</name> <literal type="string">", subkey %s, vg %d, offset reset to %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>,
                  <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dataRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>tqSendDataRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>tDeleteSMqDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dataRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>STaosxRsp</name></type> <name>taosxRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tqInitTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taosxRsp</name><operator>.</operator><name>rspOffset</name></name></expr></argument>, <argument><expr><call><name>walGetLastVer</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>tqSendTaosxRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>reqOffset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__RESET_NONE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"tmq poll: subkey %s, no offset committed for consumer %"</literal> <name>PRId64</name>
                <literal type="string">" in vg %d, subkey %s, reset none failed"</literal></expr></argument>,
                <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TQ_NO_COMMITTED_OFFSET</name></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqDataRsp</name></type> <name>dataRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tqInitDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dataRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// lock</comment>
    <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pushLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tqScanData</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetchOffsetNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>dataRsp</name><operator>.</operator><name>blockNum</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dataRsp</name><operator>.</operator><name>reqOffset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name> <operator>&amp;&amp;</operator>
        <name><name>dataRsp</name><operator>.</operator><name>reqOffset</name><operator>.</operator><name>version</name></name> <operator>==</operator> <name><name>dataRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STqPushEntry</name><modifier>*</modifier></type> <name>pPushEntry</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqPushEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pPushEntry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>pInfo</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><name>TSDB_SUBSCRIBE_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataRsp</name><operator>.</operator><name>withTbName</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPushEntry</name><operator>-&gt;</operator><name>dataRsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataRsp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqDataRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>head</name><operator>.</operator><name>consumerId</name></name> <operator>=</operator> <name>consumerId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>head</name><operator>.</operator><name>epoch</name></name> <operator>=</operator> <name>reqEpoch</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>head</name><operator>.</operator><name>mqMsgType</name></name> <operator>=</operator> <name>TMQ_MSG_TYPE__POLL_RSP</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pPushMgr</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPushEntry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer %"</literal> <name>PRId64</name> <literal type="string">", subkey %s, vg %d save handle to push mgr"</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>,
                <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// unlock</comment>
        <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pushLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pushLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tqSendDataRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer %"</literal> <name>PRId64</name>
            <literal type="string">", subkey %s, vg %d, send data blockNum:%d, offset type:%d, uid/version:%"</literal> <name>PRId64</name> <literal type="string">", ts:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
            <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dataRsp</name><operator>.</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name><name>dataRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>type</name></name></expr></argument>,
            <argument><expr><name><name>dataRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>dataRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tDeleteSMqDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dataRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// for taosx</comment>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>!=</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMqMetaRsp</name></type> <name>metaRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STaosxRsp</name></type> <name>taosxRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tqInitTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fetchOffsetNew</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqScanTaosx</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetchOffsetNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>metaRsp</name><operator>.</operator><name>metaRspLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tqSendMetaPollRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer %"</literal> <name>PRId64</name> <literal type="string">", subkey %s, vg %d, send meta offset type:%d,uid:%"</literal> <name>PRId64</name>
              <literal type="string">",version:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
              <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>metaRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>metaRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>uid</name></name></expr></argument>,
              <argument><expr><name><name>metaRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>taosxRsp</name><operator>.</operator><name>blockNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tqSendTaosxRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>fetchOffsetNew</name> <operator>=</operator> <name><name>taosxRsp</name><operator>.</operator><name>rspOffset</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"taosx poll: consumer %"</literal> <name>PRId64</name> <literal type="string">", subkey %s, vg %d, send data blockNum:%d, offset type:%d,uid:%"</literal> <name>PRId64</name>
            <literal type="string">",version:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
            <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>taosxRsp</name><operator>.</operator><name>blockNum</name></name></expr></argument>, <argument><expr><name><name>taosxRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>type</name></name></expr></argument>,
            <argument><expr><name><name>taosxRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>taosxRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fetchOffsetNew</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>fetchVer</name> <init>= <expr><name><name>fetchOffsetNew</name><operator>.</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pCkHead</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWalCkHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pCkHead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>walSetReaderCapacity</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pWalReader</name></name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>consumerEpoch</name> <operator>=</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>consumerEpoch</name> <operator>&gt;</operator> <name>reqEpoch</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tqWarn</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer %"</literal> <name>PRId64</name> <literal type="string">" (epoch %d), subkey %s, vg %d offset %"</literal> <name>PRId64</name>
               <literal type="string">", found new consumer epoch %d, discard req epoch %d"</literal></expr></argument>,
               <argument><expr><name>consumerId</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>epoch</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>, <argument><expr><name>consumerEpoch</name></expr></argument>, <argument><expr><name>reqEpoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tqFetchLog</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetchVer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCkHead</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taosxRsp</name><operator>.</operator><name>rspOffset</name></name></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tqSendTaosxRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pCkHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SWalCont</name><modifier>*</modifier></type> <name>pHead</name> <init>= <expr><operator>&amp;</operator><name><name>pCkHead</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmq poll: consumer:%"</literal> <name>PRId64</name> <literal type="string">", (epoch %d) iter log, vgId:%d offset %"</literal> <name>PRId64</name> <literal type="string">" msgType %d"</literal></expr></argument>, <argument><expr><name>consumerId</name></expr></argument>,
              <argument><expr><name><name>req</name><operator>.</operator><name>epoch</name></name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_VND_SUBMIT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pCont</name> <init>= <expr><operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pHead</name><operator>-&gt;</operator><name>body</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>tqTaosxScanLog</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>taosxRsp</name><operator>.</operator><name>blockNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> <comment type="block">/* threshold */</comment>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taosxRsp</name><operator>.</operator><name>rspOffset</name></name></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>tqSendTaosxRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pCkHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>fetchVer</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>IS_META_MSG</name><argument_list>(<argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"fetch meta msg, ver:%"</literal> <name>PRId64</name> <literal type="string">", type:%d"</literal></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaRsp</name><operator>.</operator><name>rspOffset</name></name></expr></argument>, <argument><expr><name>fetchVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>metaRspLen</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>bodyLen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>metaRsp</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>body</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tqSendMetaPollRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pCkHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pCkHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taosxRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pCkHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessDeleteSubReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqVDeleteReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><operator>(</operator><name>SMqVDeleteReq</name><operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pushLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pPushMgr</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tq remove push handle %s"</literal></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pushLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHandle</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>pRef</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>walCloseRef</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"cannot process tq delete req %s, since no such handle"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqOffsetDelete</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pOffsetStore</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"cannot process tq delete req %s, since no such offset"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tqMetaDeleteHandle</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"cannot process tq delete req %s, since no such offset in tdb"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessAddCheckInfoReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STqCheckInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>     <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSTqCheckInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pCheckInfo</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>topic</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>topic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqCheckInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tqMetaSaveCheckInfo</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>topic</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessDelCheckInfoReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pCheckInfo</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tqMetaDeleteCheckInfo</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessSubscribeReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqRebVgReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecodeSMqRebVgReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// todo lock</comment>
  <decl_stmt><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>oldConsumerId</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, build new consumer handle %s for consumer %"</literal> <name>PRId64</name> <literal type="string">", but old consumerId is %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
              <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>newConsumerId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>oldConsumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>newConsumerId</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tq invalid rebalance request, new consumerId %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>newConsumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>qmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>STqHandle</name></type> <name>tqHandle</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pHandle</name> <operator>=</operator> <operator>&amp;</operator><name>tqHandle</name></expr>;</expr_stmt>
    <comment type="block">/*taosInitRWLatch(&amp;pExec-&gt;lock);*/</comment>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><name>TSDB_SUBSCRIBE_KEY_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>newConsumerId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>subType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchMeta</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>withMeta</name></name></expr>;</expr_stmt>

    <comment type="line">// TODO version should be assigned and refed during preprocess</comment>
    <decl_stmt><decl><type><name>SWalRef</name><modifier>*</modifier></type> <name>pRef</name> <init>= <expr><call><name>walRefCommittedVer</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRef</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ver</name> <init>= <expr><name><name>pRef</name><operator>-&gt;</operator><name>refVer</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pRef</name></name> <operator>=</operator> <name>pRef</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SReadHandle</name></type> <name>handle</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>meta</name> <operator>=</operator> <name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr>,
        <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr>,
        <expr><operator>.</operator><name>initTableReader</name> <operator>=</operator> <name>true</name></expr>,
        <expr><operator>.</operator><name>initTqReader</name> <operator>=</operator> <name>true</name></expr>,
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>ver</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>snapshotVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>execCol</name><operator>.</operator><name>qmsg</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>qmsg</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>qmsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>task</name></name> <operator>=</operator>
          <call><name>qCreateQueueExecTaskInfo</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>execCol</name><operator>.</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>scanner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>qExtractStreamScanner</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>task</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>pExecReader</name></name> <operator>=</operator> <call><name>qExtractReaderFromStreamScanner</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>pExecReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pWalReader</name></name> <operator>=</operator> <call><name>walOpenReader</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>pExecReader</name></name> <operator>=</operator> <call><name>tqOpenReader</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>execDb</name><operator>.</operator><name>pFilterOutTbUid</name></name> <operator>=</operator>
          <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>buildSnapContext</name><argument_list>(<argument><expr><name><name>handle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchMeta</name></name></expr></argument>,
                       <argument><expr><operator>(</operator><name>SSnapContext</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>handle</name><operator>.</operator><name>sContext</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>task</name></name> <operator>=</operator> <call><name>qCreateQueueExecTaskInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>pWalReader</name></name> <operator>=</operator> <call><name>walOpenReader</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>execTb</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tbUidList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>vnodeGetCtbIdList</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tq try to get all ctb, suid:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>tbUid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, idx %d, uid:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tbUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>pExecReader</name></name> <operator>=</operator> <call><name>tqOpenReader</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tqReaderSetTbUidList</name><argument_list>(<argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>pExecReader</name></name></expr></argument>, <argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>buildSnapContext</name><argument_list>(<argument><expr><name><name>handle</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchMeta</name></name></expr></argument>,
                       <argument><expr><operator>(</operator><name>SSnapContext</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>handle</name><operator>.</operator><name>sContext</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>task</name></name> <operator>=</operator> <call><name>qCreateQueueExecTaskInfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"try to persist handle %s consumer %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tqMetaSaveHandle</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/*ASSERT(pExec-&gt;consumerId == req.oldConsumerId);*/</comment>
    <comment type="line">// TODO handle qmsg and exec modification</comment>
    <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>newConsumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>qmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tqMetaSaveHandle</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO</comment>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// close handle</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqExpandTask</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__AGG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>childEpInfo</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>refCnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>schedStatus</name></name> <operator>=</operator> <name>TASK_SCHED_STATUS__INACTIVE</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>inputQueue</name></name> <operator>=</operator> <call><name>streamQueueOpen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputQueue</name></name> <operator>=</operator> <call><name>streamQueueOpen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>inputQueue</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTask</name><operator>-&gt;</operator><name>outputQueue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>inputStatus</name></name> <operator>=</operator> <name>TASK_INPUT_STATUS__NORMAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>outputStatus</name></name> <operator>=</operator> <name>TASK_OUTPUT_STATUS__NORMAL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>pMsgCb</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>startVer</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

  <comment type="line">// expand executor</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>fillHistory</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name> <operator>=</operator> <name>TASK_STATUS__WAIT_DOWNSTREAM</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__SOURCE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>pState</name></name> <operator>=</operator> <call><name>streamStateOpen</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>pState</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SReadHandle</name></type> <name>handle</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>meta</name> <operator>=</operator> <name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr>,
        <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr>,
        <expr><operator>.</operator><name>initTqReader</name> <operator>=</operator> <literal type="number">1</literal></expr>,
        <expr><operator>.</operator><name>pStateBackend</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>pState</name></name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name> <operator>=</operator> <call><name>qCreateStreamExecTaskInfo</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>==</operator> <name>TASK_LEVEL__AGG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>pState</name></name> <operator>=</operator> <call><name>streamStateOpen</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>pState</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SReadHandle</name></type> <name>mgHandle</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name>NULL</name></expr>,
        <expr><operator>.</operator><name>numOfVgroups</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>childEpInfo</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>pStateBackend</name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>pState</name></name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name> <operator>=</operator> <call><name>qCreateStreamExecTaskInfo</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>qmsg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mgHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>executor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// sink</comment>
  <comment type="block">/*pTask-&gt;ahandle = pTq-&gt;pVnode;*/</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__SMA</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>smaSink</name><operator>.</operator><name>vnode</name></name> <operator>=</operator> <name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>smaSink</name><operator>.</operator><name>smaSink</name></name> <operator>=</operator> <name>smaHandleRes</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>outputType</name></name> <operator>==</operator> <name>TASK_OUTPUT__TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>vnode</name></name> <operator>=</operator> <name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>tbSinkFunc</name></name> <operator>=</operator> <name>tqSinkToTablePipeline</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pSchemaWrapper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pSchemaWrapper</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pTSchema</name></name> <operator>=</operator>
        <call><name>tdGetSTSChemaFromSSChema</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pSchemaWrapper</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pSchemaWrapper</name><operator>-&gt;</operator><name>nCols</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>streamSetupTrigger</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tqInfo</name><argument_list>(<argument><expr><literal type="string">"expand stream task on vg %d, task id %d, child id %d, level %d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>,
         <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>selfChildId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessStreamTaskCheckReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>               <name>msgStr</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>               <name>msgBody</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>msgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTaskCheckReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>            <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>msgBody</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeSStreamTaskCheckReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>taskId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>downstreamTaskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTaskCheckRsp</name></type> <name>rsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>reqId</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>reqId</name></name></expr>,
      <expr><operator>.</operator><name>streamId</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>streamId</name></name></expr>,
      <expr><operator>.</operator><name>childId</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>childId</name></name></expr>,
      <expr><operator>.</operator><name>downstreamNodeId</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>downstreamNodeId</name></name></expr>,
      <expr><operator>.</operator><name>downstreamTaskId</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>downstreamTaskId</name></name></expr>,
      <expr><operator>.</operator><name>upstreamNodeId</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>upstreamNodeId</name></name></expr>,
      <expr><operator>.</operator><name>upstreamTaskId</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>upstreamTaskId</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>&amp;&amp;</operator> <call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TASK_STATUS__NORMAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tq recv task check req(reqId: %"</literal> <name>PRId64</name> <literal type="string">") %d at node %d check req from task %d at node %d, status %d"</literal></expr></argument>,
          <argument><expr><name><name>rsp</name><operator>.</operator><name>reqId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>downstreamTaskId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>downstreamNodeId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>upstreamTaskId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>upstreamNodeId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSStreamTaskCheckRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>upstreamNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>abuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSStreamTaskCheckRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rspMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>buf</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessStreamTaskCheckRsp</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTaskCheckRsp</name></type> <name>rsp</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSStreamTaskCheckRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tq recv task check rsp(reqId: %"</literal> <name>PRId64</name> <literal type="string">") %d at node %d check req from task %d at node %d, status %d"</literal></expr></argument>,
          <argument><expr><name><name>rsp</name><operator>.</operator><name>reqId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>downstreamTaskId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>downstreamNodeId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>upstreamTaskId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>upstreamNodeId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamProcessTaskCheckRsp</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskDeployReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  code = streamMetaAddSerializedTask(pTq-&gt;pStreamMeta, version, msg, msgLen);
  if (code &lt; 0) return code;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// 1.deserialize msg and build task</comment>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSStreamTask</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 2.save task</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamMetaAddTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 3.go through recover steps to fill history</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>fillHistory</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamTaskCheckDownstream</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskRecover1Req</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStreamRecoverStep1Req</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><operator>(</operator><name>SStreamRecoverStep1Req</name><operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type>            <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name> <operator>==</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// check param</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>fillVer1</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>startVer</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fillVer1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// do recovery step 1</comment>
  <expr_stmt><expr><call><name>streamSourceRecoverScanStep1</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// build msg to launch next step</comment>
  <decl_stmt><decl><type><name>SStreamRecoverStep2Req</name></type> <name>req</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamBuildSourceRecover2Req</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// serialize msg</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamRecoverStep1Req</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>serializedReq</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>serializedReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>serializedReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// dispatch msg</comment>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rpcMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>len</name></expr>,
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_VND_STREAM_RECOVER_BLOCKING_STAGE</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>serializedReq</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskRecover2Req</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>                 <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamRecoverStep2Req</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><operator>(</operator><name>SStreamRecoverStep2Req</name><operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type>            <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// do recovery step 2</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamSourceRecoverScanStep2</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// restore param</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamRestoreParam</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set status normal</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamSetStatusNormal</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// dispatch recover finish req to all related downstream task</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>streamDispatchRecoverFinishReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskRecoverFinishReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>msg</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <comment type="line">// deserialize</comment>
  <decl_stmt><decl><type><name>SStreamRecoverFinishReq</name></type> <name>req</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeSStreamRecoverFinishReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// find task</comment>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// do process request</comment>
  <if_stmt><if>if <condition>(<expr><call><name>streamProcessRecoverFinishReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>childId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskRecoverFinishRsp</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessDelReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>        <name>failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name><modifier>*</modifier></type>   <name>pCoder</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SDecoder</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDeleteRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SDeleteRes</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeDeleteRes</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pRes</name><operator>-&gt;</operator><name>affectedRows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDelBlock</name> <init>= <expr><call><name>createSpecialDataBlock</name><argument_list>(<argument><expr><name>STREAM_DELETE_DATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pDelBlock</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDelBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDelBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// start key column</comment>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDelBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pStartCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// end key column</comment>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDelBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pEndCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// uid column</comment>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pUidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDelBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>UID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type>         <name>pUid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pUidCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pUid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDelBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDelBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDelBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>CALCULATE_END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pRef</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SStreamTask</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>!=</operator> <name>TASK_LEVEL__SOURCE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"delete req enqueue stream task: %d, ver: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>failed</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SStreamRefDataBlock</name><modifier>*</modifier></type> <name>pRefBlock</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SStreamRefDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pRefBlock</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STREAM_INPUT__REF_DATA_BLOCK</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRefBlock</name><operator>-&gt;</operator><name>pBlock</name></name> <operator>=</operator> <name>pDelBlock</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRefBlock</name><operator>-&gt;</operator><name>dataRef</name></name> <operator>=</operator> <name>pRef</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><name><name>pRefBlock</name><operator>-&gt;</operator><name>dataRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>streamTaskInput</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>(</operator><name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>pRefBlock</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"stream task input del failed, task id %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><name>pRef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pRefBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>streamSchedExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"stream task launch failed, task id %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>streamTaskInputFail</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><name>pRef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pDelBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    SStreamDataBlock* pStreamBlock = taosAllocateQitem(sizeof(SStreamDataBlock), DEF_QITEM, 0);
    pStreamBlock-&gt;type = STREAM_INPUT__DATA_BLOCK;
    pStreamBlock-&gt;blocks = taosArrayInit(0, sizeof(SSDataBlock));
    SSDataBlock block = {0};
    assignOneDataBlock(&amp;block, pDelBlock);
    block.info.type = STREAM_DELETE_DATA;
    taosArrayPush(pStreamBlock-&gt;blocks, &amp;block);

    if (!failed) {
      if (streamTaskInput(pTask, (SStreamQueueItem*)pStreamBlock) &lt; 0) {
        qError("stream task input del failed, task id %d", pTask-&gt;taskId);
        continue;
      }

      if (streamSchedExec(pTask) &lt; 0) {
        qError("stream task launch failed, task id %d", pTask-&gt;taskId);
        continue;
      }
    } else {
      streamTaskInputFail(pTask);
    }
  }
  blockDataDestroy(pDelBlock);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessSubmitReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>              <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamDataSubmit</name><modifier>*</modifier></type> <name>pSubmit</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pSubmit</name> <operator>=</operator> <call><name>streamDataSubmitNew</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSubmit</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"failed to create data submit for stream since out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SStreamTask</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskLevel</name></name> <operator>!=</operator> <name>TASK_LEVEL__SOURCE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name> <operator>==</operator> <name>TASK_STATUS__RECOVER_PREPARE</name> <operator>||</operator> <name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name> <operator>==</operator> <name>TASK_STATUS__WAIT_DOWNSTREAM</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"skip push task %d, task status %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskStatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"data submit enqueue stream task: %d, ver: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>failed</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>streamTaskInput</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>(</operator><name>SStreamQueueItem</name><operator>*</operator><operator>)</operator><name>pSubmit</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"stream task input failed, task id %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>streamSchedExec</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"stream task launch failed, task id %d"</literal></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>streamTaskInputFail</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pSubmit</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamDataSubmitRefDec</name><argument_list>(<argument><expr><name>pSubmit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pSubmit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><name>failed</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskRunReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamTaskRunReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>taskId</name> <init>= <expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type>       <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamProcessRunReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskDispatchReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>exec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>msgStr</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>msgBody</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>msgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamDispatchReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>           <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>msgBody</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeStreamDispatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
        <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamProcessDispatchReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskDispatchRsp</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStreamDispatchRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>taskId</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type>        <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"recv dispatch rsp, code: %x"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>streamProcessDispatchRsp</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskDropReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVDropStreamTaskReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><operator>(</operator><name>SVDropStreamTaskReq</name><operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>streamMetaRemoveTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskRetrieveReq</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>msgStr</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>msgBody</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>msgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamRetrieveReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>           <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>msgBody</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeStreamRetrieveReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>taskId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>dstTaskId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
        <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamProcessRetrieveReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDeleteStreamRetrieveReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqProcessTaskRetrieveRsp</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeEnqueueStreamMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STQ</name><modifier>*</modifier></type>      <name>pTq</name> <init>= <expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgHead</name><modifier>*</modifier></type> <name>msgStr</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>     <name>msgBody</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>msgStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>msgLen</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStreamDispatchReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>           <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>msgBody</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeStreamDispatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_MSG_DECODE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>taskId</name> <init>= <expr><name><name>req</name><operator>.</operator><name>taskId</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name> <init>= <expr><call><name>streamMetaAcquireTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
        <expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>streamProcessDispatchReq</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>streamMetaReleaseTask</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name></name></expr></argument>, <argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_STREAM_TASK_NOT_EXIST</name></expr>;</expr_stmt>

<label><name>FAIL</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SMsgHead</name><modifier>*</modifier></type> <name>pRspHead</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDispatchRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRspHead</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>,
        <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"send dispatch error rsp, code: %x"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRspHead</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>upstreamNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SStreamDispatchRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pRspHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>streamId</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>streamId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamTaskId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>upstreamTaskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>upstreamNodeId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>upstreamNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamNodeId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>downstreamTaskId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>inputStatus</name></name> <operator>=</operator> <name>TASK_OUTPUT_STATUS__NORMAL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>,
      <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SStreamDispatchRsp</name></expr></argument>)</argument_list></sizeof></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pRspHead</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"send dispatch error rsp, code: %x"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
