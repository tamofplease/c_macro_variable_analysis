<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tq/tqPush.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnd.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
void tqTmrRspFunc(void* param, void* tmrId) {
  STqHandle* pHandle = (STqHandle*)param;
  atomic_store_8(&amp;pHandle-&gt;pushHandle.tmrStopped, 1);
}

static int32_t tqLoopExecFromQueue(STQ* pTq, STqHandle* pHandle, SStreamDataSubmit** ppSubmit, SMqDataRsp* pRsp) {
  SStreamDataSubmit* pSubmit = *ppSubmit;
  while (pSubmit != NULL) {
    ASSERT(pSubmit-&gt;ver == pHandle-&gt;pushHandle.processedVer + 1);
    if (tqLogScanExec(pTq, &amp;pHandle-&gt;execHandle, pSubmit-&gt;data, pRsp, 0) &lt; 0) {
      <comment type="block">/*ASSERT(0);*/</comment>
    }
    <comment type="line">// update processed</comment>
    atomic_store_64(&amp;pHandle-&gt;pushHandle.processedVer, pSubmit-&gt;ver);
    streamQueueProcessSuccess(&amp;pHandle-&gt;pushHandle.inputQ);
    streamDataSubmitRefDec(pSubmit);
    if (pRsp-&gt;blockNum &gt; 0) {
      *ppSubmit = pSubmit;
      return 0;
    } else {
      pSubmit = streamQueueNextItem(&amp;pHandle-&gt;pushHandle.inputQ);
    }
  }
  *ppSubmit = pSubmit;
  return -1;
}

int32_t tqExecFromInputQ(STQ* pTq, STqHandle* pHandle) {
  SMqDataRsp rsp = {0};
  <comment type="line">// 1. guard and set status executing</comment>
  int8_t execStatus = atomic_val_compare_exchange_8(&amp;pHandle-&gt;pushHandle.execStatus, TASK_EXEC_STATUS__IDLE,
                                                    TASK_EXEC_STATUS__EXECUTING);
  if (execStatus == TASK_EXEC_STATUS__IDLE) {
    SStreamDataSubmit* pSubmit = NULL;
    <comment type="line">// 2. check processedVer</comment>
    <comment type="line">// 2.1. if not missed, get msg from queue</comment>
    <comment type="line">// 2.2. if missed, scan wal</comment>
    pSubmit = streamQueueNextItem(&amp;pHandle-&gt;pushHandle.inputQ);
    while (pHandle-&gt;pushHandle.processedVer &lt;= pSubmit-&gt;ver) {
      <comment type="line">// read from wal</comment>
    }
    while (pHandle-&gt;pushHandle.processedVer &gt; pSubmit-&gt;ver + 1) {
      streamQueueProcessSuccess(&amp;pHandle-&gt;pushHandle.inputQ);
      streamDataSubmitRefDec(pSubmit);
      pSubmit = streamQueueNextItem(&amp;pHandle-&gt;pushHandle.inputQ);
      if (pSubmit == NULL) break;
    }
    <comment type="line">// 3. exec, after each success, update processed ver</comment>
    <comment type="line">// first run</comment>
    if (tqLoopExecFromQueue(pTq, pHandle, &amp;pSubmit, &amp;rsp) == 0) {
      goto SEND_RSP;
    }
    <comment type="line">// set exec status closing</comment>
    atomic_store_8(&amp;pHandle-&gt;pushHandle.execStatus, TASK_EXEC_STATUS__CLOSING);
    <comment type="line">// second run</comment>
    if (tqLoopExecFromQueue(pTq, pHandle, &amp;pSubmit, &amp;rsp) == 0) {
      goto SEND_RSP;
    }
    <comment type="line">// set exec status idle</comment>
    atomic_store_8(&amp;pHandle-&gt;pushHandle.execStatus, TASK_EXEC_STATUS__IDLE);
  }
SEND_RSP:
  <comment type="line">// 4. if get result</comment>
  <comment type="line">// 4.1 set exec input status blocked and exec status idle</comment>
  atomic_store_8(&amp;pHandle-&gt;pushHandle.execStatus, TASK_EXEC_STATUS__IDLE);
  <comment type="line">// 4.2 rpc send</comment>
  rsp.rspOffset = pHandle-&gt;pushHandle.processedVer;
  <comment type="block">/*if (tqSendPollRsp(pTq, pMsg, pReq, &amp;rsp) &lt; 0) {*/</comment>
  <comment type="block">/*return -1;*/</comment>
  <comment type="block">/*}*/</comment>
  <comment type="line">// 4.3 clear rpc info</comment>
  memset(&amp;pHandle-&gt;pushHandle.rpcInfo, 0, sizeof(SRpcHandleInfo));
  return 0;
}

int32_t tqOpenPushHandle(STQ* pTq, STqHandle* pHandle) {
  memset(&amp;pHandle-&gt;pushHandle, 0, sizeof(STqPushHandle));
  pHandle-&gt;pushHandle.inputQ.queue = taosOpenQueue();
  pHandle-&gt;pushHandle.inputQ.qall = taosAllocateQall();
  if (pHandle-&gt;pushHandle.inputQ.queue == NULL || pHandle-&gt;pushHandle.inputQ.qall == NULL) {
    if (pHandle-&gt;pushHandle.inputQ.queue) {
      taosCloseQueue(pHandle-&gt;pushHandle.inputQ.queue);
    }
    if (pHandle-&gt;pushHandle.inputQ.qall) {
      taosFreeQall(pHandle-&gt;pushHandle.inputQ.qall);
    }
    return -1;
  }
  return 0;
}

int32_t tqPreparePush(STQ* pTq, STqHandle* pHandle, int64_t reqId, const SRpcHandleInfo* pInfo, int64_t processedVer,
                      int64_t timeout) {
  memcpy(&amp;pHandle-&gt;pushHandle.rpcInfo, pInfo, sizeof(SRpcHandleInfo));
  atomic_store_64(&amp;pHandle-&gt;pushHandle.reqId, reqId);
  atomic_store_64(&amp;pHandle-&gt;pushHandle.processedVer, processedVer);
  atomic_store_8(&amp;pHandle-&gt;pushHandle.inputStatus, TASK_INPUT_STATUS__NORMAL);
  atomic_store_8(&amp;pHandle-&gt;pushHandle.tmrStopped, 0);
  taosTmrReset(tqTmrRspFunc, (int32_t)timeout, pHandle, tqMgmt.timer, &amp;pHandle-&gt;pushHandle.timerId);
  return 0;
}

int32_t tqEnqueue(STqHandle* pHandle, SStreamDataSubmit* pSubmit) {
  int8_t inputStatus = atomic_load_8(&amp;pHandle-&gt;pushHandle.inputStatus);
  if (inputStatus == TASK_INPUT_STATUS__NORMAL) {
    SStreamDataSubmit* pSubmitClone = streamSubmitRefClone(pSubmit);
    if (pSubmitClone == NULL) {
      return -1;
    }
    taosWriteQitem(pHandle-&gt;pushHandle.inputQ.queue, pSubmitClone);
    return 0;
  }
  return -1;
}

int32_t tqSendExecReq(STQ* pTq, STqHandle* pHandle) {
  <comment type="line">//</comment>
  return 0;
}

int32_t tqPushMsgNew(STQ* pTq, void* msg, int32_t msgLen, tmsg_t msgType, int64_t ver, SRpcHandleInfo handleInfo) {
  if (msgType != TDMT_VND_SUBMIT) return 0;
  void*       pIter = NULL;
  STqHandle*  pHandle = NULL;
  SSubmitReq* pReq = (SSubmitReq*)msg;
  int32_t     workerId = 4;
  int64_t     fetchOffset = ver;

  while (1) {
    pIter = taosHashIterate(pTq-&gt;pushMgr, pIter);
    if (pIter == NULL) break;
    pHandle = *(STqHandle**)pIter;

    taosWLockLatch(&amp;pHandle-&gt;pushHandle.lock);

    SMqDataRsp rsp = {0};
    rsp.reqOffset = pHandle-&gt;pushHandle.reqOffset;
    rsp.blockData = taosArrayInit(0, sizeof(void*));
    rsp.blockDataLen = taosArrayInit(0, sizeof(int32_t));

    if (msgType == TDMT_VND_SUBMIT) {
      tqLogScanExec(pTq, &amp;pHandle-&gt;execHandle, pReq, &amp;rsp, workerId);
    } else {
      <comment type="line">// TODO</comment>
      ASSERT(0);
    }

    if (rsp.blockNum == 0) {
      taosWUnLockLatch(&amp;pHandle-&gt;pushHandle.lock);
      continue;
    }

    ASSERT(taosArrayGetSize(rsp.blockData) == rsp.blockNum);
    ASSERT(taosArrayGetSize(rsp.blockDataLen) == rsp.blockNum);

    rsp.rspOffset = fetchOffset;

    int32_t tlen = sizeof(SMqRspHead) + tEncodeSMqDataBlkRsp(NULL, &amp;rsp);
    void*   buf = rpcMallocCont(tlen);
    if (buf == NULL) {
      <comment type="line">// todo free</comment>
      return -1;
    }

    ((SMqRspHead*)buf)-&gt;mqMsgType = TMQ_MSG_TYPE__POLL_RSP;
    ((SMqRspHead*)buf)-&gt;epoch = pHandle-&gt;pushHandle.epoch;
    ((SMqRspHead*)buf)-&gt;consumerId = pHandle-&gt;pushHandle.consumerId;

    void* abuf = POINTER_SHIFT(buf, sizeof(SMqRspHead));
    tEncodeSMqDataBlkRsp(&amp;abuf, &amp;rsp);

    SRpcMsg resp = {
        .info = pHandle-&gt;pushHandle.rpcInfo,
        .pCont = buf,
        .contLen = tlen,
        .code = 0,
    };
    tmsgSendRsp(&amp;resp);

    memset(&amp;pHandle-&gt;pushHandle.rpcInfo, 0, sizeof(SRpcHandleInfo));
    taosWUnLockLatch(&amp;pHandle-&gt;pushHandle.lock);

    tqDebug("vgId:%d, offset %" PRId64 " from consumer:%" PRId64 ", (epoch %d) send rsp, block num: %d, reqOffset:%" PRId64 ", rspOffset:%" PRId64,
            TD_VID(pTq-&gt;pVnode), fetchOffset, pHandle-&gt;pushHandle.consumerId, pHandle-&gt;pushHandle.epoch, rsp.blockNum,
            rsp.reqOffset, rsp.rspOffset);

    <comment type="line">// TODO destroy</comment>
    taosArrayDestroy(rsp.blockData);
    taosArrayDestroy(rsp.blockDataLen);
  }

  return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>tqPushMsg</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgLen</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tq push msg ver %"</literal> <name>PRId64</name> <literal type="string">", type: %s"</literal></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name>msgType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// lock push mgr to avoid potential msg lost</comment>
    <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pushLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, push handle num %d"</literal></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pPushMgr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pPushMgr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>cachedKeys</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>cachedKeyLens</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"failed to copy data for stream since out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>cachedKeys</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>cachedKeyLens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pPushMgr</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>STqPushEntry</name><modifier>*</modifier></type> <name>pPushEntry</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STqPushEntry</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pHandle</name></name></expr></argument>, <argument><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cannot find handle %s"</literal></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>reqOffset</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name>ver</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, push entry req version %"</literal> <name>PRId64</name> <literal type="string">", while push version %"</literal> <name>PRId64</name> <literal type="string">", skip"</literal></expr></argument>,
                  <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>reqOffset</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>STqExecHandle</name><modifier>*</modifier></type> <name>pExec</name> <init>= <expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>qTaskInfo_t</name></type>    <name>task</name> <init>= <expr><name><name>pExec</name><operator>-&gt;</operator><name>task</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SMqDataRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><operator>&amp;</operator><name><name>pPushEntry</name><operator>-&gt;</operator><name>dataRsp</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// prepare scan mem data</comment>
        <expr_stmt><expr><call><name>qStreamScanMemData</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// exec</comment>
        <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>uint64_t</name></type>     <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>qExecTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDataBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name>tqAddBlockDataToRsp</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name><name>pExec</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tq handle push, subkey: %s, block num: %d"</literal></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pPushEntry</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>,
                <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <comment type="line">// set offset</comment>
          <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="line">// remove from hash</comment>
          <decl_stmt><decl><type><name>size_t</name></type> <name>kLen</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>keyCopy</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>kLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>keyCopy</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>cachedKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>cachedKeyLens</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>tqPushDataRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>pPushEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <comment type="line">// delete entry</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cachedKeys</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>key</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cachedKeys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>kLen</name> <init>= <expr><operator>*</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>cachedKeyLens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pPushMgr</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>cachedKeys</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>cachedKeyLens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// unlock</comment>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTq</name><operator>-&gt;</operator><name>pushLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vnodeIsRoleLeader</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pStreamMeta</name><operator>-&gt;</operator><name>pTasks</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_SUBMIT</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"failed to copy data for stream since out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tqProcessSubmitReq</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_DELETE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqProcessDelReq</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msgLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
