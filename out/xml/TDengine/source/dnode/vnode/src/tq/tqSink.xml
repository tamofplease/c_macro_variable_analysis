<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tq/tqSink.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tq.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>tqBuildDeleteReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>stbFullName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>,
                         <parameter><decl><type><name>SBatchDeleteReq</name><modifier>*</modifier></type> <name>deleteReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>totRow</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pStartTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>START_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pEndTsCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>END_TS_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pGidCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>GROUPID_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pTbNameCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>TABLE_NAME_COLUMN_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"stream delete msg: row %d"</literal></expr></argument>, <argument><expr><name>totRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>totRow</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>startTs</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pStartTsCol</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>endTs</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pEndTsCol</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>groupId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pGidCol</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>varTbName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pTbNameCol</name></expr></argument>, <argument><expr><name>totRow</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>varTbName</name> <operator>=</operator> <call><name>colDataGetVarData</name><argument_list>(<argument><expr><name>pTbNameCol</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>varTbName</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>varTbName</name> <operator>!=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>varTbName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>varTbName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>buildCtbNameByGroupId</name><argument_list>(<argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"stream delete msg: vgId:%d, groupId :%"</literal> <name>PRId64</name> <literal type="string">", name: %s, start ts:%"</literal> <name>PRId64</name> <literal type="string">"end ts:%"</literal> <name>PRId64</name></expr></argument>,
            <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>startTs</name></expr></argument>, <argument><expr><name>endTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    SMetaReader mr = {0};
    metaReaderInit(&amp;mr, pVnode-&gt;pMeta, 0);
    if (metaGetTableEntryByName(&amp;mr, name) &lt; 0) {
      metaReaderClear(&amp;mr);
      tqDebug("stream delete msg, skip vgId:%d since no table: %s", pVnode-&gt;config.vgId, name);
      taosMemoryFree(name);
      continue;
    }

    int64_t uid = mr.me.uid;
    metaReaderClear(&amp;mr);
    taosMemoryFree(name);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>SSingleDeleteReq</name></type> <name>req</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>startTs</name> <operator>=</operator> <name>startTs</name></expr>,
        <expr><operator>.</operator><name>endTs</name> <operator>=</operator> <name>endTs</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>tbname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*tqDebug("stream delete msg, active: vgId:%d, ts:%" PRId64 " name:%s", pVnode-&gt;config.vgId, ts, name);*/</comment>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>deleteReq</name><operator>-&gt;</operator><name>deleteReqs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>tqBlockToSubmit</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pBlocks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STSchema</name><modifier>*</modifier></type> <name>pTSchema</name></decl></parameter>,
                            <parameter><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pTagSchemaWrapper</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>createTb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>stbFullName</name></decl></parameter>,
                            <parameter><decl><type><name>SBatchDeleteReq</name><modifier>*</modifier></type> <name>pDeleteReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>schemaReqs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>schemaReqSz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>tagArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tagArray</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>createTb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>schemaReqs</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>schemaReqSz</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>padding1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>padding2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>schemaReqSz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>padding1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>schemaReqs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>padding2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <comment type="line">//      STag* pTag = NULL;</comment>
      <comment type="line">//      taosArrayClear(tagArray);</comment>
      <comment type="line">//      SArray *tagName = taosArrayInit(1, TSDB_COL_NAME_LEN);</comment>
      <comment type="line">//      for(int j = 0; j &lt; pTagSchemaWrapper-&gt;nCols; j++){</comment>
      <comment type="line">//        STagVal tagVal = {</comment>
      <comment type="line">//            .cid = pTagSchemaWrapper-&gt;pSchema[j].colId,</comment>
      <comment type="line">//            .type = pTagSchemaWrapper-&gt;pSchema[j].type,</comment>
      <comment type="line">//            .i64 = (int64_t)pDataBlock-&gt;info.id.groupId,</comment>
      <comment type="line">//        };</comment>
      <comment type="line">//        taosArrayPush(tagArray, &amp;tagVal);</comment>
      <comment type="line">//        taosArrayPush(tagName, pTagSchemaWrapper-&gt;pSchema[j].name);</comment>
      <comment type="line">//      }</comment>
      <comment type="line">//</comment>
      <comment type="line">//      tTagNew(tagArray, 1, false, &amp;pTag);</comment>
      <comment type="line">//      if (pTag == NULL) {</comment>
      <comment type="line">//        terrno = TSDB_CODE_OUT_OF_MEMORY;</comment>
      <comment type="line">//        taosArrayDestroy(tagArray);</comment>
      <comment type="line">//        taosArrayDestroy(tagName);</comment>
      <comment type="line">//        return NULL;</comment>
      <comment type="line">//      }</comment>

      <decl_stmt><decl><type><name>SVCreateTbReq</name></type> <name>createTbReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <comment type="line">// set const</comment>
      <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_CHILD_TABLE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>

      <comment type="line">// set super table name</comment>
      <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>stbName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// strdup(stbFullName);</comment>

      <comment type="line">// set tag content</comment>
      <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>cid</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>,
          <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>,
          <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>,
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagNum</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type> <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tTagNew</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pTag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>schemaReqs</name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>schemaReqSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>pTag</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pTag</name></expr>;</expr_stmt>

      <comment type="line">// set tag name</comment>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type>    <name><name>tagNameStr</name><index>[<expr><name>TSDB_COL_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tagNameStr</name></expr></argument>, <argument><expr><literal type="string">"group_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name>tagNameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name> <operator>=</operator> <name>tagName</name></expr>;</expr_stmt>

      <comment type="line">// set table name</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>buildCtbNameByGroupId</name><argument_list>(<argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// save schema len</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateTbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>schemaReqs</name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>schemaReqSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>schemaReqSz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// save schema str</comment>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>schemaStr</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>schemaStr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>schemaReqs</name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>schemaReqSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>schemaReqs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schemaStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>schemaStr</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tEncodeSVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>schemaReqs</name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>schemaReqSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// cal size</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cap</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/*int32_t rowSize = pDataBlock-&gt;info.rowSize;*/</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>maxLen</name> <init>= <expr><call><name>TD_ROW_MAX_BYTES_FROM_SCHEMA</name><argument_list>(<argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>createTb</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>schemaLen</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>schemaReqSz</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cap</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>rows</name> <operator>*</operator> <name>maxLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// assign data</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>blkHead</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDeleteReq</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDeleteReq</name><operator>-&gt;</operator><name>deleteReqs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSingleDeleteReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tqBuildDeleteReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>pDeleteReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// uid is assigned by vnode</comment>
    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tq sink, convert block1 %d, rows: %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>blkSchema</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>createTb</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>schemaLen</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>schemaReqSz</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>schemaStr</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>schemaReqs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>blkSchema</name></expr></argument>, <argument><expr><name>schemaStr</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>rowData</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkSchema</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SRowBuilder</name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdSRowSetTpInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>STColumn</name><modifier>*</modifier></type>  <name>pColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rowData</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>, <argument><expr><name>rowLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <name>rowLen</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>dataLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>blkHead</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>schemaReqs</name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>schemaReqSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tqSinkToTablePipeline</name><parameter_list>(<parameter><decl><type><name>SStreamTask</name><modifier>*</modifier></type> <name>pTask</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>vnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type>   <name>pBlocks</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SArray</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name><modifier>*</modifier></type>         <name>pVnode</name> <init>= <expr><operator>(</operator><name>SVnode</name><operator>*</operator><operator>)</operator><name>vnode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>suid</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>stbUid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>           <name>stbFullName</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>stbFullName</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type>       <name>pTSchema</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pTSchema</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSchemaWrapper</name> <init>= <expr><name><name>pTask</name><operator>-&gt;</operator><name>tbSink</name><operator>.</operator><name>pSchemaWrapper</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockSz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tagArray</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, task %d write into table, block num: %d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>, <argument><expr><name>blockSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockSz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type>         <name>createTb</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>STREAM_DELETE_RESULT</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SBatchDeleteReq</name></type> <name>deleteReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>deleteReq</name><operator>.</operator><name>deleteReqs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSingleDeleteReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>deleteReq</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tqBuildDeleteReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deleteReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>deleteReq</name><operator>.</operator><name>deleteReqs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>deleteReq</name><operator>.</operator><name>deleteReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSBatchDeleteReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deleteReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">//</comment>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>serializedDeleteReq</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>serializedDeleteReq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>abuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tEncodeSBatchDeleteReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deleteReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>deleteReq</name><operator>.</operator><name>deleteReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>serializedDeleteReq</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>msg</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_VND_BATCH_DEL</name></expr>,
          <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>serializedDeleteReq</name></expr>,
          <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>,
      }</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"failed to put delete req into write-queue since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ctbName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <comment type="line">// set child table name</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ctbName</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>parTbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ctbName</name> <operator>=</operator> <call><name>buildCtbNameByGroupId</name><argument_list>(<argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>schemaStr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type>     <name>uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>ctbName</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, stream write into %s, table auto created"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ctbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SVCreateTbReq</name></type> <name>createTbReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// set const</comment>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_CHILD_TABLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>

        <comment type="line">// set super table name</comment>
        <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>stbFullName</name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>stbName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// strdup(stbFullName);</comment>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>ctbName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ctbName</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="line">// set tag content</comment>
        <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{
            <expr><operator>.</operator><name>cid</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>,
            <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>,
            <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagNum</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type> <name>pTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tTagNew</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pTag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>pTag</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pTag</name></expr>;</expr_stmt>

        <comment type="line">// set tag name</comment>
        <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>    <name><name>tagNameStr</name><index>[<expr><name>TSDB_COL_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tagNameStr</name></expr></argument>, <argument><expr><literal type="string">"group_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name>tagNameStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name> <operator>=</operator> <name>tagName</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateTbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// set schema str</comment>
        <expr_stmt><expr><name>schemaStr</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaStr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>schemaStr</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tEncodeSVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>schemaStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdDestroySVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to write into %s, since table type incorrect, type %d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ctbName</name></expr></argument>,
                  <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ctbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name> <operator>!=</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to write into %s, since suid mismatch, expect suid: %"</literal> <name>PRId64</name>
                  <literal type="string">", actual suid %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>,
                  <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ctbName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ctbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>createTb</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, stream write, table %s, uid %"</literal> <name>PRId64</name> <literal type="string">" already exist, skip create"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ctbName</name></expr></argument>,
                <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>ctbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>cap</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>maxLen</name> <init>= <expr><call><name>TD_ROW_MAX_BYTES_FROM_SCHEMA</name><argument_list>(<argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>cap</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>rows</name> <operator>*</operator> <name>maxLen</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pSubmit</name> <init>= <expr><call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pSubmit</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSubmit</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSubmit</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>blkHead</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pSubmit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// uid is assigned by vnode</comment>
      <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tq sink, convert block2 %d, rows: %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>blkSchema</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkHead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>rowData</name> <init>= <expr><name>blkSchema</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>createTb</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>blkSchema</name></expr></argument>, <argument><expr><name>schemaStr</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowData</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkSchema</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>schemaStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SRowBuilder</name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdSRowSetTpInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><specifier>const</specifier> <name>STColumn</name><modifier>*</modifier></type>  <name>pColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>colData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tq sink, row %d ts %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>colData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>colData</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rowData</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>, <argument><expr><name>rowLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <name>rowLen</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>blkHead</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pSubmit</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>dataLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSubmit</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pSubmit</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>msg</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>,
          <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pSubmit</name></expr>,
          <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pSubmit</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>,
      }</block></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"failed to put into write-queue since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
void tqSinkToTableMerge(SStreamTask* pTask, void* vnode, int64_t ver, void* data) {
  const SArray*   pRes = (const SArray*)data;
  SVnode*         pVnode = (SVnode*)vnode;
  SBatchDeleteReq deleteReq = {0};

  tqDebug("vgId:%d, task %d write into table, block num: %d", TD_VID(pVnode), pTask-&gt;taskId, (int32_t)pRes-&gt;size);

  ASSERT(pTask-&gt;tbSink.pTSchema);
  deleteReq.deleteReqs = taosArrayInit(0, sizeof(SSingleDeleteReq));
  SSubmitReq* submitReq = tqBlockToSubmit(pVnode, pRes, pTask-&gt;tbSink.pTSchema, pTask-&gt;tbSink.pSchemaWrapper, true,
                                          pTask-&gt;tbSink.stbUid, pTask-&gt;tbSink.stbFullName, &amp;deleteReq);

  tqDebug("vgId:%d, task %d convert blocks over, put into write-queue", TD_VID(pVnode), pTask-&gt;taskId);

  if (taosArrayGetSize(deleteReq.deleteReqs) != 0) {
    int32_t code;
    int32_t len;
    tEncodeSize(tEncodeSBatchDeleteReq, &amp;deleteReq, len, code);
    if (code &lt; 0) {
      <comment type="line">//</comment>
      ASSERT(0);
    }
    SEncoder encoder;
    void*    serializedDeleteReq = rpcMallocCont(len + sizeof(SMsgHead));
    void*    abuf = POINTER_SHIFT(serializedDeleteReq, sizeof(SMsgHead));
    tEncoderInit(&amp;encoder, abuf, len);
    tEncodeSBatchDeleteReq(&amp;encoder, &amp;deleteReq);
    tEncoderClear(&amp;encoder);

    ((SMsgHead*)serializedDeleteReq)-&gt;vgId = pVnode-&gt;config.vgId;

    SRpcMsg msg = {
        .msgType = TDMT_VND_BATCH_DEL,
        .pCont = serializedDeleteReq,
        .contLen = len + sizeof(SMsgHead),
    };
    if (tmsgPutToQueue(&amp;pVnode-&gt;msgCb, WRITE_QUEUE, &amp;msg) != 0) {
      rpcFreeCont(serializedDeleteReq);
      tqDebug("failed to put into write-queue since %s", terrstr());
    }
  }
  taosArrayDestroy(deleteReq.deleteReqs);

  <comment type="block">/*tPrintFixedSchemaSubmitReq(pReq, pTask-&gt;tbSink.pTSchema);*/</comment>
  <comment type="line">// build write msg</comment>
  SRpcMsg msg = {
      .msgType = TDMT_VND_SUBMIT,
      .pCont = submitReq,
      .contLen = ntohl(submitReq-&gt;length),
  };

  if (tmsgPutToQueue(&amp;pVnode-&gt;msgCb, WRITE_QUEUE, &amp;msg) != 0) {
    tqDebug("failed to put into write-queue since %s", terrstr());
  }
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
