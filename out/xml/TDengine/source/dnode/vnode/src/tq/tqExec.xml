<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tq/tqExec.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tq.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>tqAddBlockDataToRsp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SMqDataRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataStrLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>blockGetEncodeSize</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dataStrLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRetrieve</name> <init>= <expr><operator>(</operator><name>SRetrieveTableRsp</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>completed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>actualLen</name> <init>= <expr><call><name>blockEncode</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pRetrieve</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>actualLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>actualLen</name> <operator>&lt;=</operator> <name>dataStrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockDataLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tqAddBlockSchemaToRsp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STqExecHandle</name><modifier>*</modifier></type> <name>pExec</name></decl></parameter>, <parameter><decl><type><name>SMqDataRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSW</name> <init>= <expr><call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><name><name>pExec</name><operator>-&gt;</operator><name>pExecReader</name><operator>-&gt;</operator><name>pSchemaWrapper</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSW</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tqAddTbNameToRsp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SMqDataRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// TODO add reference to gurantee success</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tbName</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqScanData</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SMqDataRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><name>STqOffsetVal</name><modifier>*</modifier></type> <name>pOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STqExecHandle</name><modifier>*</modifier></type> <name>pExec</name> <init>= <expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pExec</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>qTaskInfo_t</name></type> <name>task</name> <init>= <expr><name><name>pExec</name><operator>-&gt;</operator><name>task</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qStreamPrepareScan</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"prepare scan failed, return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name> <operator>=</operator> <operator>*</operator><name>pOffset</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>qStreamPrepareScan</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"prepare scan failed, return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name> <operator>=</operator> <operator>*</operator><name>pOffset</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>     <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tmq task start to execute"</literal></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>qExecTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDataBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tmq task executed, get %p"</literal></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tqAddBlockDataToRsp</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name><name>pExec</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rowCnt</name> <operator>+=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rowCnt</name> <operator>&gt;=</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>qStreamExtractOffset</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>withTbName</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name> <init>= <expr><name><name>pExec</name><operator>-&gt;</operator><name>pExecReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tqAddTbNameToRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>withTbName</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>withSchema</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqScanTaosx</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>STaosxRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><name>SMqMetaRsp</name><modifier>*</modifier></type> <name>pMetaRsp</name></decl></parameter>, <parameter><decl><type><name>STqOffsetVal</name><modifier>*</modifier></type> <name>pOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STqExecHandle</name><modifier>*</modifier></type> <name>pExec</name> <init>= <expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>qTaskInfo_t</name></type>          <name>task</name> <init>= <expr><name><name>pExec</name><operator>-&gt;</operator><name>task</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qStreamPrepareScan</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"prepare scan failed, return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name> <operator>=</operator> <operator>*</operator><name>pOffset</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tqOffsetResetToLog</name><argument_list>(<argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>snapshotVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>qStreamPrepareScan</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"prepare scan failed, return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name> <operator>=</operator> <operator>*</operator><name>pOffset</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>     <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap task start to execute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>qExecTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDataBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap task execute end, get %p"</literal></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>withTbName</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>pExec</name><operator>-&gt;</operator><name>pExecReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>tqAddTbNameToRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>(</operator><name>SMqDataRsp</name><operator>*</operator><operator>)</operator><name>pRsp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tbName</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>qExtractTbnameFromTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>withSchema</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tqAddBlockSchemaToRsp</name><argument_list>(<argument><expr><name>pExec</name></expr></argument>, <argument><expr><operator>(</operator><name>SMqDataRsp</name><operator>*</operator><operator>)</operator><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSW</name> <init>= <expr><call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><call><name>qExtractSchemaFromTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tqAddBlockDataToRsp</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><operator>(</operator><name>SMqDataRsp</name><operator>*</operator><operator>)</operator><name>pRsp</name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__LOG</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rowCnt</name> <operator>+=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rowCnt</name> <operator>&lt;=</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pOffset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>qStreamExtractPrepareUid</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap vgId: %d, tsdb consume over, switch to wal, ver %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>snapshotVer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap task exec exited, get data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SMqMetaRsp</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>qStreamExtractMetaMsg</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TMQ_OFFSET__SNAPSHOT_DATA</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tqOffsetResetToData</name><argument_list>(<argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>qStreamPrepareScan</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name><operator>.</operator><name>subType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TMQ_OFFSET__SNAPSHOT_META</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap task exec change to get data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>pMetaRsp</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap task exec exited, get meta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tqDebug</name><argument_list>(<argument><expr><literal type="string">"task exec exited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>qStreamExtractOffset</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rspOffset</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqTaosxScanLog</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>STqHandle</name><modifier>*</modifier></type> <name>pHandle</name></decl></parameter>, <parameter><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>STaosxRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STqExecHandle</name><modifier>*</modifier></type> <name>pExec</name> <init>= <expr><operator>&amp;</operator><name><name>pHandle</name><operator>-&gt;</operator><name>execHandle</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pExec</name><operator>-&gt;</operator><name>subType</name></name> <operator>!=</operator> <name>TOPIC_SUB_TYPE__COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBlocks</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pSchemas</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pExec</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><name><name>pExec</name><operator>-&gt;</operator><name>pExecReader</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tqReaderSetDataMsg</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>tqNextDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="block">/*SSDataBlock block = {0};*/</comment>
      <comment type="block">/*if (tqRetrieveDataBlock(&amp;block, pReader) &lt; 0) {*/</comment>
      <comment type="block">/*if (terrno == TSDB_CODE_TQ_TABLE_SCHEMA_NOT_FOUND) continue;*/</comment>
      <comment type="block">/*}*/</comment>

      <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pSchemas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tqRetrieveTaosxBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>pSchemas</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_TQ_TABLE_SCHEMA_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>withTbName</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name> <init>= <expr><name><name>pExec</name><operator>-&gt;</operator><name>pExecReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tqAddTbNameToRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>(</operator><name>SMqDataRsp</name><operator>*</operator><operator>)</operator><name>pRsp</name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>blockDataFreeRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>pSchemas</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSSchemaWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pBlocks</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pSchemas</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchMeta</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlk</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>     <name>schemaLen</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>pBlk</name><operator>-&gt;</operator><name>schemaLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableLen</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableReq</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>createReq</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>createReq</name></expr></argument>, <argument><expr><name><name>pBlk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableReq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableNum</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tqAddBlockDataToRsp</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>(</operator><name>SMqDataRsp</name><operator>*</operator><operator>)</operator><name>pRsp</name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>blockDataFreeRes</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSW</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pSchemas</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></while>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pExec</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STqReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><name><name>pExec</name><operator>-&gt;</operator><name>pExecReader</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tqReaderSetDataMsg</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>tqNextDataBlockFilterOut</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pExec</name><operator>-&gt;</operator><name>execDb</name><operator>.</operator><name>pFilterOutTbUid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="block">/*SSDataBlock block = {0};*/</comment>
      <comment type="block">/*if (tqRetrieveDataBlock(&amp;block, pReader) &lt; 0) {*/</comment>
      <comment type="block">/*if (terrno == TSDB_CODE_TQ_TABLE_SCHEMA_NOT_FOUND) continue;*/</comment>
      <comment type="block">/*}*/</comment>
      <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pSchemas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tqRetrieveTaosxBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>pSchemas</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_TQ_TABLE_SCHEMA_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>withTbName</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name> <init>= <expr><name><name>pExec</name><operator>-&gt;</operator><name>pExecReader</name><operator>-&gt;</operator><name>msgIter</name><operator>.</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tqAddTbNameToRsp</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>(</operator><name>SMqDataRsp</name><operator>*</operator><operator>)</operator><name>pRsp</name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>blockDataFreeRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>pSchemas</name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSSchemaWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pBlocks</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pSchemas</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pHandle</name><operator>-&gt;</operator><name>fetchMeta</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pBlk</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pBlock</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>     <name>schemaLen</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>pBlk</name><operator>-&gt;</operator><name>schemaLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableLen</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableReq</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>createReq</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>createReq</name></expr></argument>, <argument><expr><name><name>pBlk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableReq</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>createTableNum</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/*tqAddBlockDataToRsp(&amp;block, (SMqDataRsp*)pRsp, taosArrayGetSize(block.pDataBlock),*/</comment>
      <comment type="block">/*pTq-&gt;pVnode-&gt;config.tsdbCfg.precision);*/</comment>
      <comment type="block">/*blockDataFreeRes(&amp;block);*/</comment>
      <comment type="block">/*tqAddBlockSchemaToRsp(pExec, (SMqDataRsp*)pRsp);*/</comment>
      <comment type="block">/*pRsp-&gt;blockNum++;*/</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tqAddBlockDataToRsp</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>(</operator><name>SMqDataRsp</name><operator>*</operator><operator>)</operator><name>pRsp</name></expr></argument>, <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>blockDataFreeRes</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSW</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pSchemas</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pSchemas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
