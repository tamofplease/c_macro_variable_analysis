<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tq/tqSnapshot.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tq.h"</cpp:file></cpp:include>

<comment type="line">// STqSnapReader ========================================</comment>
<struct>struct <name>STqSnapReader</name> <block>{
  <decl_stmt><decl><type><name>STQ</name><modifier>*</modifier></type>    <name>pTq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TBC</name><modifier>*</modifier></type>    <name>pCur</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>tqSnapReaderOpen</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>STqSnapReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqSnapReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pReader</name> <operator>=</operator> <operator>(</operator><name>STqSnapReader</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqSnapReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTq</name></name> <operator>=</operator> <name>pTq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>

  <comment type="line">// impl</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pExecStore</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tdbTbcMoveToFirst</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tqInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tq reader opened"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>pReader</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tq reader open failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqSnapReaderClose</name><parameter_list>(<parameter><decl><type><name>STqSnapReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>ppReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqSnapRead</name><parameter_list>(<parameter><decl><type><name>STqSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>    <name>decoder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqHandle</name></type>   <name>handle</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecodeSTqHandle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>.</operator><name>snapshotVer</name></name> <operator>&lt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>.</operator><name>snapshotVer</name></name> <operator>&gt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pVal</name> <operator>&amp;&amp;</operator> <name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ppData</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNAP_DATA_TQ_HANDLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>vLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tqInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tq read data, version:%"</literal> <name>PRId64</name> <literal type="string">" subKey: %s vLen:%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name><name>handle</name><operator>.</operator><name>snapshotVer</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tq read data failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// STqSnapWriter ========================================</comment>
<struct>struct <name>STqSnapWriter</name> <block>{
  <decl_stmt><decl><type><name>STQ</name><modifier>*</modifier></type>    <name>pTq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TXN</name><modifier>*</modifier></type>    <name>txn</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>tqSnapWriterOpen</name><parameter_list>(<parameter><decl><type><name>STQ</name><modifier>*</modifier></type> <name>pTq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>STqSnapWriter</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pWriter</name> <operator>=</operator> <operator>(</operator><name>STqSnapWriter</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWriter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTq</name></name> <operator>=</operator> <name>pTq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbBegin</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pMetaDB</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>, <argument><expr><name>tdbDefaultMalloc</name></expr></argument>, <argument><expr><name>tdbDefaultFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>pWriter</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tq snapshot writer open failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqSnapWriterClose</name><parameter_list>(<parameter><decl><type><name>STqSnapWriter</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppWriter</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name> <init>= <expr><operator>*</operator><name>ppWriter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STQ</name><modifier>*</modifier></type>           <name>pTq</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTq</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rollback</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbAbort</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTq</name><operator>-&gt;</operator><name>pMetaDB</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tdbCommit</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTq</name><operator>-&gt;</operator><name>pMetaDB</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tdbPostCommit</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTq</name><operator>-&gt;</operator><name>pMetaDB</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// restore from metastore</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tqMetaRestoreHandle</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tq snapshot writer close failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tqSnapWrite</name><parameter_list>(<parameter><decl><type><name>STqSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STQ</name><modifier>*</modifier></type>      <name>pTq</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTq</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>  <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name><modifier>*</modifier></type> <name>pDecoder</name> <init>= <expr><operator>&amp;</operator><name>decoder</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqHandle</name></type> <name>handle</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pData</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nData</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSTqHandle</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqMetaSaveHandle</name><argument_list>(<argument><expr><name>pTq</name></expr></argument>, <argument><expr><name><name>handle</name><operator>.</operator><name>subKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tqError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tq write failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTq</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
