<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/meta/metaCache.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_CACHE_BASE_BUCKET</name></cpp:macro>  <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_CACHE_STATS_BUCKET</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<comment type="line">// (uid , suid) : child table</comment>
<comment type="line">// (uid,     0) : normal table</comment>
<comment type="line">// (suid, suid) : super table</comment>
<typedef>typedef <type><name><name>struct</name> <name>SMetaCacheEntry</name></name></type> <name>SMetaCacheEntry</name>;</typedef>
<struct>struct <name>SMetaCacheEntry</name> <block>{
  <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaInfo</name></type>        <name>info</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>SMetaStbStatsEntry</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>SMetaStbStatsEntry</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaStbStats</name></type>              <name>info</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMetaStbStatsEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>STagFilterResEntry</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name></decl>;</decl_stmt>    <comment type="line">// uid for super table</comment>
  <decl_stmt><decl><type><name>SList</name></type>    <name>list</name></decl>;</decl_stmt>    <comment type="line">// the linked list of md5 digest, extracted from the serialized tag query condition</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>qTimes</name></decl>;</decl_stmt>  <comment type="line">// queried times for current super table</comment>
}</block></struct></type> <name>STagFilterResEntry</name>;</typedef>

<struct>struct <name>SMetaCache</name> <block>{
  <comment type="line">// child, normal, super, table entry cache</comment>
  <struct>struct <name>SEntryCache</name> <block>{
    <decl_stmt><decl><type><name>int32_t</name></type>           <name>nEntry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>           <name>nBucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>aBucket</name></decl>;</decl_stmt>
  }</block> <decl><name>sEntryCache</name></decl>;</struct>

  <comment type="line">// stable stats cache</comment>
  <struct>struct <name>SStbStatsCache</name> <block>{
    <decl_stmt><decl><type><name>int32_t</name></type>              <name>nEntry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>              <name>nBucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>aBucket</name></decl>;</decl_stmt>
  }</block> <decl><name>sStbStatsCache</name></decl>;</struct>

  <comment type="line">// query cache</comment>
  <struct>struct <name>STagFilterResCache</name> <block>{
    <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>  <name>pTableEntry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type> <name>pUidResCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type>   <name><name>keyBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>sTagFilterResCache</name></decl>;</struct>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entryCacheClose</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// close entry cache</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBucket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBucket</name> <operator>&lt;</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name></expr>;</condition> <incr><expr><name>iBucket</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>pEntry</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier></type> <name>tEntry</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>tEntry</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>statsCacheClose</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// close entry cache</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBucket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBucket</name> <operator>&lt;</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name></expr>;</condition> <incr><expr><name>iBucket</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>pEntry</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier></type> <name>tEntry</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>tEntry</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeCacheEntryFp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STagFilterResEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdListEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaCacheOpen</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pCache</name> <operator>=</operator> <operator>(</operator><name>SMetaCache</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open entry cache</comment>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nEntry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name> <operator>=</operator> <name>META_CACHE_BASE_BUCKET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name></name> <operator>=</operator>
      <operator>(</operator><name>SMetaCacheEntry</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaCacheEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open stats cache</comment>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nEntry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name> <operator>=</operator> <name>META_CACHE_STATS_BUCKET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name></name> <operator>=</operator>
      <operator>(</operator><name>SMetaStbStatsEntry</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaStbStatsEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err2</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pUidResCache</name></name> <operator>=</operator> <call><name>taosLRUCacheInit</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pUidResCache</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err2</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pTableEntry</name></name> <operator>=</operator>
      <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pTableEntry</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err2</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pTableEntry</name></name></expr></argument>, <argument><expr><name>freeCacheEntryFp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name> <operator>=</operator> <name>pCache</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err2</name>:</label>
  <expr_stmt><expr><call><name>entryCacheClose</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, meta open cache failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>metaCacheClose</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>entryCacheClose</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>statsCacheClose</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pTableEntry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosLRUCacheCleanup</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pUidResCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>metaRehashCache</name><parameter_list>(<parameter><decl><type><name>SMetaCache</name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>expand</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBucket</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>expand</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nBucket</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nBucket</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>aBucket</name> <init>= <expr><operator>(</operator><name>SMetaCacheEntry</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>nBucket</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaCacheEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>aBucket</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// rehash</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBucket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBucket</name> <operator>&lt;</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name></expr>;</condition> <incr><expr><name>iBucket</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pEntry</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier></type> <name>pTEntry</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>aBucket</name><index>[<expr><call><name>TABS</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>nBucket</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aBucket</name><index>[<expr><call><name>TABS</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>nBucket</name></expr>]</index></name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>pTEntry</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <comment type="line">// final set</comment>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name> <operator>=</operator> <name>nBucket</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name></name> <operator>=</operator> <name>aBucket</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaCacheUpsert</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>SMetaInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// ASSERT(metaIsWLocked(pMeta));</comment>

  <comment type="line">// search</comment>
  <decl_stmt><decl><type><name>SMetaCache</name><modifier>*</modifier></type>       <name>pCache</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>iBucket</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name> <init>= <expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>ppEntry</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>uid</name></name></name> <operator>!=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ppEntry</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppEntry</name></expr>)</condition> <block>{<block_content>  <comment type="line">// update</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>suid</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>version</name></name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>version</name></name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>skmVer</name></name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>skmVer</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// insert</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nEntry</name></name> <operator>&gt;=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaRehashCache</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>iBucket</name> <operator>=</operator> <call><name>TABS</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier></type> <name>pEntryNew</name> <init>= <expr><operator>(</operator><name>SMetaCacheEntry</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pEntryNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pEntryNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pEntryNew</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>pInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEntryNew</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name> <operator>=</operator> <name>pEntryNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nEntry</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaCacheDrop</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMetaCache</name><modifier>*</modifier></type>       <name>pCache</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>iBucket</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name> <init>= <expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>ppEntry</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>uid</name></name></name> <operator>!=</operator> <name>uid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ppEntry</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>*</operator><name>ppEntry</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nEntry</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nEntry</name></name> <operator>&lt;</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
        <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name> <operator>&gt;</operator> <name>META_CACHE_BASE_BUCKET</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaRehashCache</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaCacheGet</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SMetaInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMetaCache</name><modifier>*</modifier></type>      <name>pCache</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>iBucket</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>nBucket</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaCacheEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>sEntryCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pEntry</name> <operator>&amp;&amp;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>uid</name></name> <operator>!=</operator> <name>uid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pEntry</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pInfo</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>metaRehashStatsCache</name><parameter_list>(<parameter><decl><type><name>SMetaCache</name><modifier>*</modifier></type> <name>pCache</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>expand</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBucket</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>expand</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nBucket</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nBucket</name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>aBucket</name> <init>= <expr><operator>(</operator><name>SMetaStbStatsEntry</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>nBucket</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMetaStbStatsEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>aBucket</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// rehash</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBucket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBucket</name> <operator>&lt;</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name></expr>;</condition> <incr><expr><name>iBucket</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pEntry</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier></type> <name>pTEntry</name> <init>= <expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>aBucket</name><index>[<expr><call><name>TABS</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>nBucket</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aBucket</name><index>[<expr><call><name>TABS</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>nBucket</name></expr>]</index></name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name>pTEntry</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <comment type="line">// final set</comment>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name> <operator>=</operator> <name>nBucket</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name></name> <operator>=</operator> <name>aBucket</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaStatsCacheUpsert</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>SMetaStbStats</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// ASSERT(metaIsWLocked(pMeta));</comment>

  <comment type="line">// search</comment>
  <decl_stmt><decl><type><name>SMetaCache</name><modifier>*</modifier></type>          <name>pCache</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>iBucket</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name> <init>= <expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>ppEntry</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>uid</name></name></name> <operator>!=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ppEntry</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppEntry</name></expr>)</condition> <block>{<block_content>  <comment type="line">// update</comment>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>ctbNum</name></name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>ctbNum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// insert</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nEntry</name></name> <operator>&gt;=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaRehashStatsCache</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>iBucket</name> <operator>=</operator> <call><name>TABS</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier></type> <name>pEntryNew</name> <init>= <expr><operator>(</operator><name>SMetaStbStatsEntry</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pEntryNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pEntryNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pEntryNew</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>*</operator><name>pInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEntryNew</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name> <operator>=</operator> <name>pEntryNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nEntry</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaStatsCacheDrop</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMetaCache</name><modifier>*</modifier></type>          <name>pCache</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>iBucket</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppEntry</name> <init>= <expr><operator>&amp;</operator><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>ppEntry</name> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>uid</name></name></name> <operator>!=</operator> <name>uid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ppEntry</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppEntry</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><operator>*</operator><name>ppEntry</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nEntry</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nEntry</name></name> <operator>&lt;</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
        <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name> <operator>&gt;</operator> <name>META_CACHE_STATS_BUCKET</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaRehashStatsCache</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaStatsCacheGet</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SMetaStbStats</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMetaCache</name><modifier>*</modifier></type>         <name>pCache</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>iBucket</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>nBucket</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaStbStatsEntry</name><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><name><name>pCache</name><operator>-&gt;</operator><name>sStbStatsCache</name><operator>.</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pEntry</name> <operator>&amp;&amp;</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>uid</name></name> <operator>!=</operator> <name>uid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>pEntry</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pInfo</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaGetCachedTableUidList</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList1</name></decl></parameter>,
                                  <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>acquireRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>keyBuf</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// generate the composed key for LRU cache</comment>
  <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pUidResCache</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>len</name> <init>= <expr><name>keyLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type> <name>pHandle</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>acquireRes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// do some book mark work after acquiring the filter result from cache</comment>
    <decl_stmt><decl><type><name>STagFilterResEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pTableEntry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>acquireRes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pUidResCache</name></name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>size</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayAddBatch</name><argument_list>(<argument><expr><name>pList1</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>qTimes</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// check if scanning all items are necessary or not</comment>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>qTimes</name></name> <operator>&gt;=</operator> <literal type="number">5000</literal> <operator>&amp;&amp;</operator> <call><name>TD_DLIST_NELES</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SListIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tdListInitIter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>TD_LIST_FORWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>tdListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check whether it is existed in LRU cache, and remove it from linked list if not.</comment>
        <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pRes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// remove the item in the linked list</comment>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>

      <comment type="line">// remove the keys, of which query uid lists have been replaced already.</comment>
      <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tdListPopNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>qTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// reset the query times</comment>

      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freePayload</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// check both the payload size and selectivity ratio</comment>
<function><type><name>int32_t</name></type> <name>metaUidFilterCachePut</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pPayload</name></decl></parameter>,
                              <parameter><decl><type><name>int32_t</name></type> <name>payloadLen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>selectivityRatio</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>selectivityRatio</name> <operator>&gt;</operator> <name>tsSelectivityRatio</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, suid:%"</literal> <name>PRIu64</name>
              <literal type="string">" failed to add to uid list cache, due to selectivity ratio %.2f less than threshold %.2f"</literal></expr></argument>,
              <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>selectivityRatio</name></expr></argument>, <argument><expr><name>tsSelectivityRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>payloadLen</name> <operator>&gt;</operator> <name>tsTagFilterResCacheSize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, suid:%"</literal> <name>PRIu64</name>
              <literal type="string">" failed to add to uid list cache, due to payload length %d greater than threshold %d"</literal></expr></argument>,
              <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>payloadLen</name></expr></argument>, <argument><expr><name>tsTagFilterResCacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pUidResCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>  <name>pTableEntry</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pTableEntry</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STagFilterResEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pTableEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STagFilterResEntry</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagFilterResEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>qTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdListInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pTableEntry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdListAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tdListAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>pBuf</name> <init>= <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>keyBuf</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>keyLen</name> <operator>==</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// add to cache.</comment>
  <expr_stmt><expr><call><name>taosLRUCacheInsert</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>keyLen</name></expr></argument>, <argument><expr><name>pPayload</name></expr></argument>, <argument><expr><name>payloadLen</name></expr></argument>, <argument><expr><name>freePayload</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                     <argument><expr><name>TAOS_LRU_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, suid:%"</literal> <name>PRIu64</name> <literal type="string">" list cache added into cache, total:%d, tables:%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>,
            <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosLRUCacheGetUsage</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pTableEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// remove the lru cache that are expired due to the tags value update, or creating, or dropping, of child tables</comment>
<function><type><name>int32_t</name></type> <name>metaUidCacheClear</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STagFilterResEntry</name><modifier>*</modifier><modifier>*</modifier></type> <name>pEntry</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pTableEntry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEntry</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>listNEles</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>  <name>keyLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SListIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdListInitIter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>TD_LIST_FORWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SListNode</name><modifier>*</modifier></type> <name>pNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pNode</name> <operator>=</operator> <call><name>tdListNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosLRUCacheErase</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name><operator>-&gt;</operator><name>sTagFilterResCache</name><operator>.</operator><name>pUidResCache</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>qTimes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdListEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pEntry</name><operator>)</operator><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
