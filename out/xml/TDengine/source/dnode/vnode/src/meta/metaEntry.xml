<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/meta/metaEntry.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>metaEncodeEntry</name><parameter_list>(<parameter><decl><type><name>SEncoder</name> <modifier>*</modifier></type><name>pCoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartEncode</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI8</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI8</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="line">// TODO: need refactor?</comment>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeSSchemaWrapper</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeSSchemaWrapper</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TABLE_IS_ROLLUP</name><argument_list>(<argument><expr><name><name>pME</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tEncodeSRSmaParam</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>rsmaParam</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>ctime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>ttlDays</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32v</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeTag</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>STag</name> <operator>*</operator><operator>)</operator><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>ctime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>ttlDays</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32v</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tEncodeCStr</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeI32v</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>ncid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeSSchemaWrapper</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_TSMA_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tEncodeTSma</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>smaEntry</name><operator>.</operator><name>tsma</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tEndEncode</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaDecodeEntry</name><parameter_list>(<parameter><decl><type><name>SDecoder</name> <modifier>*</modifier></type><name>pCoder</name></decl></parameter>, <parameter><decl><type><name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI8</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStr</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI8</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="line">// TODO: need refactor?</comment>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeSSchemaWrapperEx</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeSSchemaWrapperEx</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TABLE_IS_ROLLUP</name><argument_list>(<argument><expr><name><name>pME</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tDecodeSRSmaParam</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>rsmaParam</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>ctime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>ttlDays</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32v</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStr</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeTag</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>(</operator><name>STag</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="line">// (TODO)</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI64</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>ctime</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>ttlDays</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32v</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStr</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32v</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>ncid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeSSchemaWrapperEx</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_TSMA_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pME</name><operator>-&gt;</operator><name>smaEntry</name><operator>.</operator><name>tsma</name></name> <operator>=</operator> <call><name>tDecoderMalloc</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSma</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pME</name><operator>-&gt;</operator><name>smaEntry</name><operator>.</operator><name>tsma</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeTSma</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>smaEntry</name><operator>.</operator><name>tsma</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tEndDecode</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
