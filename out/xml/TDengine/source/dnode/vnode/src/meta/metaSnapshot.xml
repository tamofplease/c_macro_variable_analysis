<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/meta/metaSnapshot.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>

<comment type="line">// SMetaSnapReader ========================================</comment>
<struct>struct <name>SMetaSnapReader</name> <block>{
  <decl_stmt><decl><type><name>SMeta</name><modifier>*</modifier></type>  <name>pMeta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TBC</name><modifier>*</modifier></type>    <name>pTbc</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>metaSnapReaderOpen</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>SMetaSnapReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaSnapReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pReader</name> <operator>=</operator> <operator>(</operator><name>SMetaSnapReader</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>

  <comment type="line">// impl</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pTbc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <macro><name>tdbTbcMoveTo</name><argument_list>(<argument>pReader-&gt;pTbc</argument>, <argument>&amp;(STbDbKey){.version = sver</argument>, <argument>.uid = INT64_MIN}</argument>, <argument>sizeof(STbDbKey)</argument>, <argument>&amp;c</argument>)</argument_list></macro></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot meta reader opened"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>pReader</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot meta reader open failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaSnapReaderClose</name><parameter_list>(<parameter><decl><type><name>SMetaSnapReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>pTbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>ppReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaSnapRead</name><parameter_list>(<parameter><decl><type><name>SMetaSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbDbKey</name></type>    <name>key</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>STbDbKey</name><operator>*</operator><operator>)</operator><name>pKey</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pData</name> <operator>&amp;&amp;</operator> <name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ppData</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNAP_DATA_META</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>nData</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot meta read data, version:%"</literal> <name>PRId64</name> <literal type="string">" uid:%"</literal> <name>PRId64</name> <literal type="string">" nData:%d"</literal></expr></argument>,
           <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot meta read data failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SMetaSnapWriter ========================================</comment>
<struct>struct <name>SMetaSnapWriter</name> <block>{
  <decl_stmt><decl><type><name>SMeta</name><modifier>*</modifier></type>  <name>pMeta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>metaSnapWriterOpen</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>SMetaSnapWriter</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pWriter</name> <operator>=</operator> <operator>(</operator><name>SMetaSnapWriter</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWriter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaBegin</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>pWriter</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, meta snapshot writer open failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaSnapWriterClose</name><parameter_list>(<parameter><decl><type><name>SMetaSnapWriter</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppWriter</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name> <init>= <expr><operator>*</operator><name>ppWriter</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rollback</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaCommit</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaFinishCommit</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, meta snapshot writer close failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaSnapWrite</name><parameter_list>(<parameter><decl><type><name>SMetaSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMeta</name><modifier>*</modifier></type>     <name>pMeta</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>metaEntry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name><modifier>*</modifier></type>  <name>pDecoder</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SDecoder</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><name>pData</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nData</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaHandleEntry</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot meta write failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>STableInfoForChildTable</name> <block>{
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>           <name>tableName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>schemaRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>tagRow</name></decl>;</decl_stmt>
}</block></struct></type> <name>STableInfoForChildTable</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroySTableInfoForChildTable</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableInfoForChildTable</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><operator>(</operator><name>STableInfoForChildTable</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>tableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDeleteSSchemaWrapper</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDeleteSSchemaWrapper</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>tagRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MoveToSnapShotVersion</name><parameter_list>(<parameter><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STbDbKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>version</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>snapVersion</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>MoveToPosition</name><parameter_list>(<parameter><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STbDbKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>ver</name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uid</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MoveToFirst</name><parameter_list>(<parameter><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveToFirst</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>saveSuperTableInfoForChildTable</name><parameter_list>(<parameter><decl><type><name>SMetaEntry</name><modifier>*</modifier></type> <name>me</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>suidInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableInfoForChildTable</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>STableInfoForChildTable</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name>suidInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STableInfoForChildTable</name></type> <name>dataTmp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dataTmp</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>me</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dataTmp</name><operator>.</operator><name>schemaRow</name></name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dataTmp</name><operator>.</operator><name>tagRow</name></name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>suidInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataTmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableInfoForChildTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildSnapContext</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>snapVersion</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>subType</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withMeta</name></decl></parameter>,
                         <parameter><decl><type><name>SSnapContext</name><modifier>*</modifier><modifier>*</modifier></type> <name>ctxRet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnapContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ctxRet</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>snapVersion</name></name> <operator>=</operator> <name>snapVersion</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>=</operator> <name>subType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryMetaOrData</name></name> <operator>=</operator> <name>withMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>withMeta</name></name> <operator>=</operator> <name>withMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>suidInfo</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>suidInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>suidInfo</name></name></expr></argument>, <argument><expr><name>destroySTableInfoForChildTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap init snapVersion:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>snapVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MoveToFirst</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>tdbTbcNext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>STbDbKey</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>STbDbKey</name><operator>*</operator><operator>)</operator><name>pKey</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>snapVersion</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SIdInfo</name><modifier>*</modifier></type> <name>idData</name> <init>= <expr><operator>(</operator><name>SIdInfo</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>idData</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
        <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// check if table exist for now, need optimize later</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SDecoder</name></type>   <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>me</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>me</name><operator>.</operator><name>uid</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap init idlist name:%s, uid:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><name><name>me</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SIdInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIdInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>MoveToSnapShotVersion</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>tdbTbcPrev</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>STbDbKey</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>STbDbKey</name><operator>*</operator><operator>)</operator><name>pKey</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SIdInfo</name><modifier>*</modifier></type>  <name>idData</name> <init>= <expr><operator>(</operator><name>SIdInfo</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>idData</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SIdInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><operator>.</operator><name>version</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>version</name></name></expr>, <expr><operator>.</operator><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIdInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SDecoder</name></type>   <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>me</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>me</name><operator>.</operator><name>uid</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>suid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>saveSuperTableInfoForChildTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>me</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>suidInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>uid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SIdInfo</name><modifier>*</modifier></type> <name>idData</name> <init>= <expr><operator>(</operator><name>SIdInfo</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>idData</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap init idVersion uid:%"</literal> <name>PRIi64</name> <literal type="string">" version:%"</literal> <name>PRIi64</name> <literal type="string">" index:%d"</literal></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>, <argument><expr><name><name>idData</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
              <argument><expr><name><name>idData</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>destroySnapContext</name><parameter_list>(<parameter><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>suidInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildNormalChildTableInfo</name><parameter_list>(<parameter><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>contLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateTbBatchReq</name></type> <name>reqs</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>reqs</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SVCreateTbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>reqs</name><operator>.</operator><name>pArray</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>reqs</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reqs</name><operator>.</operator><name>nReqs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateTbBatchReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqs</name></expr></argument>, <argument><expr><operator>*</operator><name>contLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>contLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pBuf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><operator>*</operator><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pBuf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><operator>*</operator><name>pBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeSVCreateTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>reqs</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildSuperTableInfo</name><parameter_list>(<parameter><decl><type><name>SVCreateStbReq</name><modifier>*</modifier></type> <name>req</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>contLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateStbReq</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>*</operator><name>contLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>contLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pBuf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><operator>*</operator><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pBuf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><operator>*</operator><name>pBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tEncodeSVCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>setForSnapShot</name><parameter_list>(<parameter><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>c</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SIdInfo</name><modifier>*</modifier></type> <name>idInfo</name> <init>= <expr><operator>(</operator><name>SIdInfo</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>idInfo</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>idInfo</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getMetafromSnapShot</name><parameter_list>(<parameter><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>contLen</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap get meta end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queryMetaOrData</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>  <comment type="line">// change to get data</comment>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>uidTmp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idList</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SIdInfo</name><modifier>*</modifier></type> <name>idInfo</name> <init>= <expr><operator>(</operator><name>SIdInfo</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>, <argument><expr><name>uidTmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <operator>*</operator><name>uidTmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MoveToPosition</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>idInfo</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><operator>*</operator><name>uidTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap get meta not exist uid:%"</literal> <name>PRIi64</name> <literal type="string">" version:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>, <argument><expr><name><name>idInfo</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>   <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>me</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap get meta uid:%"</literal> <name>PRIi64</name> <literal type="string">" name:%s index:%d"</literal></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>, <argument><expr><name><name>me</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>suid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVCreateStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaRow</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaTag</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>buildSuperTableInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>TDMT_VND_CREATE_STB</name></expr>;</expr_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name><operator>)</operator> <operator>||</operator>
             <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>suid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableInfoForChildTable</name><modifier>*</modifier></type> <name>data</name> <init>=
        <expr><operator>(</operator><name>STableInfoForChildTable</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>suidInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SVCreateTbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_CHILD_TABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagNum</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>tagRow</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>stbName</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>tableName</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagNum</name></name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>nTag</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>tagRow</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tTagToValArray</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STag</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagVals</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>nCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>pTagVal</name> <init>= <expr><operator>(</operator><name>STagVal</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>tagRow</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>tagRow</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>schema</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">//    SIdInfo* sidInfo = (SIdInfo*)taosHashGet(ctx-&gt;idVersion, &amp;me.ctbEntry.suid, sizeof(tb_uid_t));</comment>
    <comment type="line">//    if(sidInfo-&gt;version &gt;= idInfo-&gt;version){</comment>
    <comment type="line">//      // need parse tag</comment>
    <comment type="line">//      STag* p = (STag*)me.ctbEntry.pTags;</comment>
    <comment type="line">//      SArray* pTagVals = NULL;</comment>
    <comment type="line">//      if (tTagToValArray((const STag*)p, &amp;pTagVals) != 0) {</comment>
    <comment type="line">//      }</comment>
    <comment type="line">//</comment>
    <comment type="line">//      int16_t nCols = taosArrayGetSize(pTagVals);</comment>
    <comment type="line">//      for (int j = 0; j &lt; nCols; ++j) {</comment>
    <comment type="line">//        STagVal* pTagVal = (STagVal*)taosArrayGet(pTagVals, j);</comment>
    <comment type="line">//      }</comment>
    <comment type="line">//    }else{</comment>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>pTag</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr>;</expr_stmt>
    <comment type="line">//    }</comment>

    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name> <operator>=</operator> <name>tagName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>buildNormalChildTableInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>TDMT_VND_CREATE_TABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVCreateTbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_NORMAL_TABLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>ntb</name><operator>.</operator><name>schemaRow</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>buildNormalChildTableInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>TDMT_VND_CREATE_TABLE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMetaTableInfo</name></type> <name>getUidfromSnapShot</name><parameter_list>(<parameter><decl><type><name>SSnapContext</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaTableInfo</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>          <name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>          <name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>            <name>vLen</name></decl>, <decl><type ref="prev"/><name>kLen</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idList</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap get uid info end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>uidTmp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idList</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SIdInfo</name><modifier>*</modifier></type> <name>idInfo</name> <init>= <expr><operator>(</operator><name>SIdInfo</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>idVersion</name></name></expr></argument>, <argument><expr><name>uidTmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>MoveToPosition</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>idInfo</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><operator>*</operator><name>uidTmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap getUidfromSnapShot not exist uid:%"</literal> <name>PRIi64</name> <literal type="string">" version:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><operator>*</operator><name>uidTmp</name></expr></argument>, <argument><expr><name><name>idInfo</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SDecoder</name></type>   <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>me</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap get uid info uid:%"</literal> <name>PRIi64</name> <literal type="string">" name:%s index:%d"</literal></expr></argument>, <argument><expr><name><name>me</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>me</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STableInfoForChildTable</name><modifier>*</modifier></type> <name>data</name> <init>=
          <expr><operator>(</operator><name>STableInfoForChildTable</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>suidInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>result</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>result</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>result</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__DB</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>result</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>result</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>result</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>subType</name></name> <operator>==</operator> <name>TOPIC_SUB_TYPE__TABLE</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name> <operator>&amp;&amp;</operator> <name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STableInfoForChildTable</name><modifier>*</modifier></type> <name>data</name> <init>=
          <expr><operator>(</operator><name>STableInfoForChildTable</name><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>suidInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>result</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>result</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>result</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"tmqsnap get uid continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
