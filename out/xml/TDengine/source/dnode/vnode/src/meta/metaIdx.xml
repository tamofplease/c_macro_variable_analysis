<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/meta/metaIdx.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_INVERTED_INDEX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"index.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>

<struct>struct <name>SMetaIdx</name> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_INVERTED_INDEX</name></cpp:ifdef>
  <decl_stmt><decl><type><name>SIndex</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* data */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>size_t</name></type> <name>avoidCompilationErrors</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<function><type><name>int</name></type> <name>metaOpenIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  char               idxDir[128];  <comment type="line">// TODO</comment>
  char *             err = NULL;
  rocksdb_options_t *options = rocksdb_options_create();

  <comment type="line">// TODO</comment>
  sprintf(idxDir, "%s/index", pMeta-&gt;path);

  if (pMeta-&gt;pCache) {
    rocksdb_options_set_row_cache(options, pMeta-&gt;pCache);
  }
  rocksdb_options_set_create_if_missing(options, 1);

  pMeta-&gt;pIdx = rocksdb_open(options, idxDir, &amp;err);
  if (pMeta-&gt;pIdx == NULL) {
    <comment type="line">// TODO: handle error</comment>
    rocksdb_options_destroy(options);
    return -1;
  }

  rocksdb_options_destroy(options);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_INVERTED_INDEX</name></cpp:ifdef>
  <comment type="line">// SIndexOpts opts;</comment>
  <comment type="line">// if (indexOpen(&amp;opts, pMeta-&gt;path, &amp;pMeta-&gt;pIdx-&gt;pIdx) != 0) {</comment>
  <comment type="line">//  return -1;</comment>
  <comment type="line">//}</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>metaCloseIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* TODO */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (pMeta-&gt;pIdx) {
    rocksdb_close(pMeta-&gt;pIdx);
    pMeta-&gt;pIdx = NULL;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_INVERTED_INDEX</name></cpp:ifdef>
  <comment type="line">// SIndexOpts opts;</comment>
  <comment type="line">// if (indexClose(pMeta-&gt;pIdx-&gt;pIdx) != 0) {</comment>
  <comment type="line">//  return -1;</comment>
  <comment type="line">//}</comment>
  <comment type="line">// return 0;</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaSaveTableToIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STbCfg</name> <modifier>*</modifier></type><name>pTbCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_INVERTED_INDEX</name></cpp:ifdef>
  <comment type="line">// if (pTbCfgs-&gt;type == META_CHILD_TABLE) {</comment>
  <comment type="line">//  char    buf[8] = {0};</comment>
  <comment type="line">//  int16_t colId = (kvRowColIdx(pTbCfg-&gt;ctbCfg.pTag))[0].colId;</comment>
  <comment type="line">//  sprintf(buf, "%d", colId);  // colname</comment>

  <comment type="line">//  char *pTagVal = (char *)tdGetKVRowValOfCol(pTbCfg-&gt;ctbCfg.pTag, (kvRowColIdx(pTbCfg-&gt;ctbCfg.pTag))[0].colId);</comment>

  <comment type="line">//  tb_uid_t         suid = pTbCfg-&gt;ctbCfg.suid;  // super id</comment>
  <comment type="line">//  tb_uid_t         tuid = 0;                    // child table uid</comment>
  <comment type="line">//  SIndexMultiTerm *terms = indexMultiTermCreate();</comment>
  <comment type="line">//  SIndexTerm      *term =</comment>
  <comment type="line">//      indexTermCreate(suid, ADD_VALUE, TSDB_DATA_TYPE_BINARY, buf, strlen(buf), pTagVal, strlen(pTagVal), tuid);</comment>
  <comment type="line">//  indexMultiTermAdd(terms, term);</comment>

  <comment type="line">//  int ret = indexPut(pMeta-&gt;pIdx-&gt;pIdx, terms);</comment>
  <comment type="line">//  indexMultiTermDestroy(terms);</comment>
  <comment type="line">//  return ret;</comment>
  <comment type="line">//} else {</comment>
  <comment type="line">//  return DB_DONOTINDEX;</comment>
  <comment type="line">//}</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// TODO</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaRemoveTableFromIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_INVERTED_INDEX</name></cpp:ifdef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// TODO</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
