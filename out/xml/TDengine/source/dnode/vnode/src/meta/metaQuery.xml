<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/meta/metaQuery.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>metaReaderInit</name><parameter_list>(<parameter><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>META_READER_NOLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>metaReaderReleaseLock</name><parameter_list>(<parameter><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>pReader</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>META_READER_NOLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>META_READER_NOLOCK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>metaReaderClear</name><parameter_list>(<parameter><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>pReader</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>META_READER_NOLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaGetTableEntryByVersion</name><parameter_list>(<parameter><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMeta</name>   <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbDbKey</name></type> <name>tbDbKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>version</name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uid</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// query table.db</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbDbKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbDbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>szBuf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// decode the entry</comment>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>szBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>coder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>me</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// int metaGetTableEntryByUidTest(void* meta, SArray *uidList) {</comment>
<comment type="line">//</comment>
<comment type="line">//   SArray* readerList = taosArrayInit(taosArrayGetSize(uidList), sizeof(SMetaReader));</comment>
<comment type="line">//   SArray* uidVersion = taosArrayInit(taosArrayGetSize(uidList), sizeof(STbDbKey));</comment>
<comment type="line">//   SMeta  *pMeta = meta;</comment>
<comment type="line">//   int64_t version;</comment>
<comment type="line">//   SHashObj *uHash = taosHashInit(32, taosGetDefaultHashFunction(TSDB_DATA_TYPE_BIGINT), false, HASH_NO_LOCK);</comment>
<comment type="line">//</comment>
<comment type="line">//   int64_t stt1 = taosGetTimestampUs();</comment>
<comment type="line">//   for(int i = 0; i &lt; taosArrayGetSize(uidList); i++) {</comment>
<comment type="line">//     void* ppVal = NULL;</comment>
<comment type="line">//     int vlen = 0;</comment>
<comment type="line">//     uint64_t *  uid = taosArrayGet(uidList, i);</comment>
<comment type="line">//     // query uid.idx</comment>
<comment type="line">//     if (tdbTbGet(pMeta-&gt;pUidIdx, uid, sizeof(*uid), &amp;ppVal, &amp;vlen) &lt; 0) {</comment>
<comment type="line">//       continue;</comment>
<comment type="line">//     }</comment>
<comment type="line">//     version = *(int64_t *)ppVal;</comment>
<comment type="line">//</comment>
<comment type="line">//     STbDbKey tbDbKey = {.version = version, .uid = *uid};</comment>
<comment type="line">//     taosArrayPush(uidVersion, &amp;tbDbKey);</comment>
<comment type="line">//     taosHashPut(uHash, uid, sizeof(int64_t), ppVal, sizeof(int64_t));</comment>
<comment type="line">//   }</comment>
<comment type="line">//   int64_t stt2 = taosGetTimestampUs();</comment>
<comment type="line">//   qDebug("metaGetTableEntryByUidTest1 rows:%d, cost:%ld us", taosArrayGetSize(uidList), stt2-stt1);</comment>
<comment type="line">//</comment>
<comment type="line">//   TBC        *pCur = NULL;</comment>
<comment type="line">//   tdbTbcOpen(pMeta-&gt;pTbDb, &amp;pCur, NULL);</comment>
<comment type="line">//   tdbTbcMoveToFirst(pCur);</comment>
<comment type="line">//   void *pKey = NULL;</comment>
<comment type="line">//   int   kLen = 0;</comment>
<comment type="line">//</comment>
<comment type="line">//   while(1){</comment>
<comment type="line">//     SMetaReader pReader = {0};</comment>
<comment type="line">//     int32_t ret = tdbTbcNext(pCur, &amp;pKey, &amp;kLen, &amp;pReader.pBuf, &amp;pReader.szBuf);</comment>
<comment type="line">//     if (ret &lt; 0) break;</comment>
<comment type="line">//     STbDbKey *tmp = (STbDbKey*)pKey;</comment>
<comment type="line">//     int64_t *ver = (int64_t*)taosHashGet(uHash, &amp;tmp-&gt;uid, sizeof(int64_t));</comment>
<comment type="line">//     if(ver == NULL || *ver != tmp-&gt;version) continue;</comment>
<comment type="line">//     taosArrayPush(readerList, &amp;pReader);</comment>
<comment type="line">//   }</comment>
<comment type="line">//   tdbTbcClose(pCur);</comment>
<comment type="line">//</comment>
<comment type="line">//   taosArrayClear(readerList);</comment>
<comment type="line">//   int64_t stt3 = taosGetTimestampUs();</comment>
<comment type="line">//   qDebug("metaGetTableEntryByUidTest2 rows:%d, cost:%ld us", taosArrayGetSize(uidList), stt3-stt2);</comment>
<comment type="line">//   for(int i = 0; i &lt; taosArrayGetSize(uidVersion); i++) {</comment>
<comment type="line">//     SMetaReader pReader = {0};</comment>
<comment type="line">//</comment>
<comment type="line">//     STbDbKey *tbDbKey = taosArrayGet(uidVersion, i);</comment>
<comment type="line">//     // query table.db</comment>
<comment type="line">//     if (tdbTbGet(pMeta-&gt;pTbDb, tbDbKey, sizeof(STbDbKey), &amp;pReader.pBuf, &amp;pReader.szBuf) &lt; 0) {</comment>
<comment type="line">//       continue;</comment>
<comment type="line">//     }</comment>
<comment type="line">//     taosArrayPush(readerList, &amp;pReader);</comment>
<comment type="line">//   }</comment>
<comment type="line">//   int64_t stt4 = taosGetTimestampUs();</comment>
<comment type="line">//   qDebug("metaGetTableEntryByUidTest3 rows:%d, cost:%ld us", taosArrayGetSize(uidList), stt4-stt3);</comment>
<comment type="line">//</comment>
<comment type="line">//   for(int i = 0; i &lt; taosArrayGetSize(readerList); i++){</comment>
<comment type="line">//     SMetaReader* pReader  = taosArrayGet(readerList, i);</comment>
<comment type="line">//     metaReaderInit(pReader, meta, 0);</comment>
<comment type="line">//     // decode the entry</comment>
<comment type="line">//     tDecoderInit(&amp;pReader-&gt;coder, pReader-&gt;pBuf, pReader-&gt;szBuf);</comment>
<comment type="line">//</comment>
<comment type="line">//     if (metaDecodeEntry(&amp;pReader-&gt;coder, &amp;pReader-&gt;me) &lt; 0) {</comment>
<comment type="line">//     }</comment>
<comment type="line">//     metaReaderClear(pReader);</comment>
<comment type="line">//   }</comment>
<comment type="line">//   int64_t stt5 = taosGetTimestampUs();</comment>
<comment type="line">//   qDebug("metaGetTableEntryByUidTest4 rows:%d, cost:%ld us", taosArrayGetSize(readerList), stt5-stt4);</comment>
<comment type="line">//   return 0;</comment>
<comment type="line">// }</comment>

<function><type><name>bool</name></type> <name>metaIsTableExist</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// query uid.idx</comment>
  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaGetTableEntryByUid</name><parameter_list>(<parameter><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>version1</name></decl>;</decl_stmt>

  <comment type="line">// query uid.idx</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>szBuf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>version1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name><name>pReader</name><operator>-&gt;</operator><name>pBuf</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr>;</expr_stmt>
  <return>return <expr><call><name>metaGetTableEntryByVersion</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>version1</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaGetTableEntryByUidCache</name><parameter_list>(<parameter><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMetaInfo</name></type> <name>info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaGetInfo</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>metaGetTableEntryByVersion</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaGetTableEntryByName</name><parameter_list>(<parameter><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMeta</name>   <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl>;</decl_stmt>

  <comment type="line">// query name.idx</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>szBuf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name><name>pReader</name><operator>-&gt;</operator><name>pBuf</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>tb_uid_t</name></type> <name>metaGetTableEntryUidByName</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>uid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaGetTableNameByUid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><operator>(</operator><name>SMeta</name> <operator>*</operator><operator>)</operator><name>meta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaGetTableSzNameByUid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><operator>(</operator><name>SMeta</name> <operator>*</operator><operator>)</operator><name>meta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>metaGetTableUidByName</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><operator>(</operator><name>SMeta</name> <operator>*</operator><operator>)</operator><name>meta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name> <init>= <expr><operator>&amp;</operator><name>mr</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// query name.idx</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>szBuf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name><name>pReader</name><operator>-&gt;</operator><name>pBuf</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaGetTableTypeByName</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>ETableType</name> <modifier>*</modifier></type><name>tbType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><operator>(</operator><name>SMeta</name> <operator>*</operator><operator>)</operator><name>meta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableEntryByName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>tbType</name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaReadNext</name><parameter_list>(<parameter><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// TODO</comment>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>  <comment type="line">// ===================================================</comment>
<function><type><name>SMTbCursor</name> <modifier>*</modifier></type><name>metaOpenTbCursor</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMTbCursor</name> <modifier>*</modifier></type><name>pTbCur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pTbCur</name> <operator>=</operator> <operator>(</operator><name>SMTbCursor</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pTbCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTbCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>mr</name></name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>pDbc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTbcMoveToFirst</name><argument_list>(<argument><expr><name><name>pTbCur</name><operator>-&gt;</operator><name>pDbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pTbCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>metaCloseTbCursor</name><parameter_list>(<parameter><decl><type><name>SMTbCursor</name> <modifier>*</modifier></type><name>pTbCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTbCur</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pTbCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pTbCur</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTbCur</name><operator>-&gt;</operator><name>pDbc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>pTbCur</name><operator>-&gt;</operator><name>pDbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTbCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaTbCursorNext</name><parameter_list>(<parameter><decl><type><name>SMTbCursor</name> <modifier>*</modifier></type><name>pTbCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>  <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbCfg</name></type> <name>tbCfg</name></decl>;</decl_stmt>

  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcNext</name><argument_list>(<argument><expr><name><name>pTbCur</name><operator>-&gt;</operator><name>pDbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>kLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>metaGetTableEntryByVersion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>mr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>pVal</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name><name>pTbCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTbCur</name><operator>-&gt;</operator><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <break>break;</break>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSchemaWrapper</name> <modifier>*</modifier></type><name>metaGetTableSchema</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>version</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name></type>  <name>schema</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>        <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>_query</name>:</label>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr>;</expr_stmt>

  <macro><name>tdbTbGet</name><argument_list>(<argument>pMeta-&gt;pTbDb</argument>, <argument>&amp;(STbDbKey){.uid = uid</argument>, <argument>.version = version}</argument>, <argument>sizeof(STbDbKey)</argument>, <argument>&amp;pData</argument>, <argument>&amp;nData</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>me</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>sver</name> <operator>==</operator> <name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pSchema</name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>  <comment type="line">// Traverse to find the previous qualified data</comment>
      <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STbDbKey</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>sver</name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>      <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>   <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>tdbTbcPrev</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>STbDbKey</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>STbDbKey</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name>uid</name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>SDecoder</name></type>   <name>dcNew</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>meNew</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dcNew</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dcNew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pSchema</name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meNew</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dcNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_query</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>sver</name> <operator>==</operator> <name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pSchema</name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// query from skm db</comment>
  <if_stmt><if>if <condition>(<expr><macro><name>tdbTbGet</name><argument_list>(<argument>pMeta-&gt;pSkmDb</argument>, <argument>&amp;(SSkmDbKey){.uid = uid</argument>, <argument>.sver = sver}</argument>, <argument>sizeof(SSkmDbKey)</argument>, <argument>&amp;pData</argument>, <argument>&amp;nData</argument>)</argument_list></macro> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeSSchemaWrapperEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pSchema</name> <operator>=</operator> <call><name>tCloneSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pSchema</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaTtlSmaller</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>uidList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>ret</name> <init>= <expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTtlIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCur</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STtlIdxKey</name></type> <name>ttlKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ttlKey</name><operator>.</operator><name>dtime</name></name> <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ttlKey</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttlKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ttlKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcPrev</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ttlKey</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>STtlIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ttlKey</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>SMCtbCursor</name> <block>{
  <decl_stmt><decl><type><name>SMeta</name>   <modifier>*</modifier></type><name>pMeta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TBC</name>     <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>kLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>vLen</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>SMCtbCursor</name> <modifier>*</modifier></type><name>metaOpenCtbCursor</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCtbCursor</name> <modifier>*</modifier></type><name>pCtbCur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtbIdxKey</name></type>   <name>ctbIdxKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pCtbCur</name> <operator>=</operator> <operator>(</operator><name>SMCtbCursor</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCtbCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCtbCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCtbCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// move to the suid</comment>
  <expr_stmt><expr><name><name>ctbIdxKey</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctbIdxKey</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbIdxKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctbIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pCtbCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>metaCloseCtbCursor</name><parameter_list>(<parameter><decl><type><name>SMCtbCursor</name> <modifier>*</modifier></type><name>pCtbCur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCtbCur</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>&amp;&amp;</operator> <name>lock</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCtbCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>tb_uid_t</name></type> <name>metaCtbCursorNext</name><parameter_list>(<parameter><decl><type><name>SMCtbCursor</name> <modifier>*</modifier></type><name>pCtbCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtbIdxKey</name> <modifier>*</modifier></type><name>pCtbIdxKey</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcNext</name><argument_list>(<argument><expr><name><name>pCtbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtbCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtbCur</name><operator>-&gt;</operator><name>kLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtbCur</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtbCur</name><operator>-&gt;</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pCtbIdxKey</name> <operator>=</operator> <name><name>pCtbCur</name><operator>-&gt;</operator><name>pKey</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCtbIdxKey</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <name><name>pCtbCur</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pCtbIdxKey</name><operator>-&gt;</operator><name>uid</name></name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>SMStbCursor</name> <block>{
  <decl_stmt><decl><type><name>SMeta</name>   <modifier>*</modifier></type><name>pMeta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TBC</name>     <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>kLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>vLen</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>SMStbCursor</name> <modifier>*</modifier></type><name>metaOpenStbCursor</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMStbCursor</name> <modifier>*</modifier></type><name>pStbCur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pStbCur</name> <operator>=</operator> <operator>(</operator><name>SMStbCursor</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pStbCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStbCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStbCur</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSuidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pStbCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// move to the suid</comment>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pStbCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>metaCloseStbCursor</name><parameter_list>(<parameter><decl><type><name>SMStbCursor</name> <modifier>*</modifier></type><name>pStbCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pStbCur</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pStbCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>tb_uid_t</name></type> <name>metaStbCursorNext</name><parameter_list>(<parameter><decl><type><name>SMStbCursor</name> <modifier>*</modifier></type><name>pStbCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcNext</name><argument_list>(<argument><expr><name><name>pStbCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStbCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStbCur</name><operator>-&gt;</operator><name>kLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStbCur</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStbCur</name><operator>-&gt;</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name><name>pStbCur</name><operator>-&gt;</operator><name>pKey</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSchema</name> <modifier>*</modifier></type><name>metaGetTbTSchema</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// SMetaReader     mr = {0};</comment>
  <decl_stmt><decl><type><name>STSchema</name>       <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name> <modifier>*</modifier></type><name>pSW</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSchemaBuilder</name></type> <name>sb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name>        <modifier>*</modifier></type><name>pSchema</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pSW</name> <operator>=</operator> <call><name>metaGetTableSchema</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>sver</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pSW</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tdInitTSchemaBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>pSW</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSW</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pSchema</name> <operator>=</operator> <name><name>pSW</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdAddColToSchema</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>pTSchema</name> <operator>=</operator> <call><name>tdGetSchemaFromBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdDestroyTSchemaBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSW</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pTSchema</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaGetTbTSchemaEx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkmDbKey</name></type> <name>skmDbKey</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMetaInfo</name></type> <name>info</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>metaGetInfo</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><ternary><condition><expr><name>suid</name></expr> ?</condition><then> <expr><name>suid</name></expr> </then><else>: <expr><name>uid</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sver</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>skmVer</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pSkmDbC</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>  <name>c</name></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>skmDbKey</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><name>suid</name></expr> ?</condition><then> <expr><name>suid</name></expr> </then><else>: <expr><name>uid</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>skmDbKey</name><operator>.</operator><name>sver</name></name> <operator>=</operator> <name>INT32_MAX</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSkmDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSkmDbC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name>pSkmDbC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skmDbKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skmDbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pSkmDbC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name>pSkmDbC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>     <name>nKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name>pSkmDbC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SSkmDbKey</name> <operator>*</operator><operator>)</operator><name>pKey</name><operator>)</operator><operator>-&gt;</operator><name>uid</name> <operator>!=</operator> <name><name>skmDbKey</name><operator>.</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pSkmDbC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>sver</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SSkmDbKey</name> <operator>*</operator><operator>)</operator><name>pKey</name><operator>)</operator><operator>-&gt;</operator><name>sver</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pSkmDbC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>sver</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>skmDbKey</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><name>suid</name></expr> ?</condition><then> <expr><name>suid</name></expr> </then><else>: <expr><name>uid</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>skmDbKey</name><operator>.</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSkmDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skmDbKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSkmDbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// decode</comment>
  <decl_stmt><decl><type><name>SDecoder</name></type>        <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name></type>  <name>schema</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name> <modifier>*</modifier></type><name>pSchemaWrapper</name> <init>= <expr><operator>&amp;</operator><name>schema</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tDecodeSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pSchemaWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// convert</comment>
  <decl_stmt><decl><type><name>STSchemaBuilder</name></type> <name>sb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdInitTSchemaBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdAddColToSchema</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><call><name>tdGetSchemaFromBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTSchema</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdDestroyTSchemaBuilder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTSchema</name> <operator>=</operator> <name>pTSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSchemaWrapper</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// N.B. Called by statusReq per second</comment>
<function><type><name>int64_t</name></type> <name>metaGetTbNum</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// num of child tables (excluding normal tables , stables and others)</comment>

  <comment type="block">/* int64_t num = 0; */</comment>
  <comment type="block">/* vnodeGetAllCtbNum(pMeta-&gt;pVnode, &amp;num); */</comment>

  <return>return <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfCTables</name></name> <operator>+</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfNTables</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// N.B. Called by statusReq per second</comment>
<function><type><name>int64_t</name></type> <name>metaGetTimeSeriesNum</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// sum of (number of columns of stable -  1) * number of ctables (excluding timestamp column)</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfTimeSeries</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
      <operator>++</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>itvTimeSeries</name></name> <operator>%</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vnodeGetTimeSeriesNum</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfTimeSeries</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>itvTimeSeries</name></name> <operator>=</operator> <operator>(</operator><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfTimeSeries</name></name> <operator>+</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfNTimeSeries</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>metaGetNtbNum</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfNTables</name></name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SMeta</name>   <modifier>*</modifier></type><name>pMeta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TBC</name>     <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>kLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>vLen</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMSmaCursor</name>;</typedef>

<function><type><name>SMSmaCursor</name> <modifier>*</modifier></type><name>metaOpenSmaCursor</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMSmaCursor</name> <modifier>*</modifier></type><name>pSmaCur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaIdxKey</name></type>   <name>smaIdxKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>c</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pSmaCur</name> <operator>=</operator> <operator>(</operator><name>SMSmaCursor</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pSmaCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSmaCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSmaIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSmaCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSmaCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// move to the suid</comment>
  <expr_stmt><expr><name><name>smaIdxKey</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>smaIdxKey</name><operator>.</operator><name>smaUid</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smaIdxKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>smaIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pSmaCur</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>metaCloseSmaCursor</name><parameter_list>(<parameter><decl><type><name>SMSmaCursor</name> <modifier>*</modifier></type><name>pSmaCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSmaCur</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pCur</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSmaCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>tb_uid_t</name></type> <name>metaSmaCursorNext</name><parameter_list>(<parameter><decl><type><name>SMSmaCursor</name> <modifier>*</modifier></type><name>pSmaCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaIdxKey</name> <modifier>*</modifier></type><name>pSmaIdxKey</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcNext</name><argument_list>(<argument><expr><name><name>pSmaCur</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSmaCur</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSmaCur</name><operator>-&gt;</operator><name>kLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSmaCur</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSmaCur</name><operator>-&gt;</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pSmaIdxKey</name> <operator>=</operator> <name><name>pSmaCur</name><operator>-&gt;</operator><name>pKey</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSmaIdxKey</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pSmaCur</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pSmaIdxKey</name><operator>-&gt;</operator><name>uid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSmaWrapper</name> <modifier>*</modifier></type><name>metaGetSmaInfoByTable</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>deepCopy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSmaWrapper</name> <modifier>*</modifier></type><name>pSW</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>       <modifier>*</modifier></type><name>pSmaIds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pSmaIds</name> <operator>=</operator> <call><name>metaGetSmaIdsByTable</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pSW</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pSW</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pSW</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSW</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pSmaIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSW</name><operator>-&gt;</operator><name>tSma</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pSW</name><operator>-&gt;</operator><name>number</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSma</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pSW</name><operator>-&gt;</operator><name>tSma</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>smaId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>smaIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSma</name>  <modifier>*</modifier></type><name>pTSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSW</name><operator>-&gt;</operator><name>number</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>smaId</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pSmaIds</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>smaId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no entry for tbId:%"</literal> <name>PRIi64</name> <literal type="string">", smaId:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>smaId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTSma</name> <operator>=</operator> <name><name>pSW</name><operator>-&gt;</operator><name>tSma</name></name> <operator>+</operator> <name>smaIdx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTSma</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>smaEntry</name><operator>.</operator><name>tsma</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSma</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>deepCopy</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTSma</name><operator>-&gt;</operator><name>exprLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pTSma</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pTSma</name><operator>-&gt;</operator><name>exprLen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <goto>goto <name>_err</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pTSma</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>smaEntry</name><operator>.</operator><name>tsma</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name><name>pTSma</name><operator>-&gt;</operator><name>exprLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTSma</name><operator>-&gt;</operator><name>tagsFilterLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pTSma</name><operator>-&gt;</operator><name>tagsFilter</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pTSma</name><operator>-&gt;</operator><name>tagsFilterLen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <goto>goto <name>_err</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pTSma</name><operator>-&gt;</operator><name>tagsFilter</name></name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>smaEntry</name><operator>.</operator><name>tsma</name><operator>-&gt;</operator><name>tagsFilter</name></name></expr></argument>, <argument><expr><name><name>pTSma</name><operator>-&gt;</operator><name>tagsFilterLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pTSma</name><operator>-&gt;</operator><name>exprLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTSma</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTSma</name><operator>-&gt;</operator><name>tagsFilterLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTSma</name><operator>-&gt;</operator><name>tagsFilter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>++</operator><name>smaIdx</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>smaIdx</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pSW</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>smaIdx</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pSmaIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pSW</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pSmaIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeTSmaWrapper</name><argument_list>(<argument><expr><name>pSW</name></expr></argument>, <argument><expr><name>deepCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSma</name> <modifier>*</modifier></type><name>metaGetSmaInfoByIndex</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>indexUid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSma</name>      <modifier>*</modifier></type><name>pTSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>indexUid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get table entry for smaId:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indexUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pTSma</name> <operator>=</operator> <operator>(</operator><name>STSma</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSma</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTSma</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTSma</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>smaEntry</name><operator>.</operator><name>tsma</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSma</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pTSma</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name> <modifier>*</modifier></type><name>metaGetSmaIdsByTable</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name>     <modifier>*</modifier></type><name>pUids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaIdxKey</name> <modifier>*</modifier></type><name>pSmaIdxKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMSmaCursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><call><name>metaOpenSmaCursor</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>id</name> <init>= <expr><call><name>metaSmaCursorNext</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pUids</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pUids</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pUids</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaCloseSmaCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pSmaIdxKey</name> <operator>=</operator> <operator>(</operator><name>SSmaIdxKey</name> <operator>*</operator><operator>)</operator><name><name>pCur</name><operator>-&gt;</operator><name>pKey</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSmaIdxKey</name><operator>-&gt;</operator><name>smaUid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaCloseSmaCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pUids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>metaCloseSmaCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pUids</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name> <modifier>*</modifier></type><name>metaGetSmaTbUids</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name>     <modifier>*</modifier></type><name>pUids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaIdxKey</name> <modifier>*</modifier></type><name>pSmaIdxKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>    <name>lastUid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMSmaCursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><call><name>metaOpenSmaCursor</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid</name> <init>= <expr><call><name>metaSmaCursorNext</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>lastUid</name> <operator>==</operator> <name>uid</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>lastUid</name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pUids</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pUids</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pUids</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaCloseSmaCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaCloseSmaCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pUids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>metaCloseSmaCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pUids</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>metaGetTableTagVal</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pTag</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>STagVal</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STag</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><operator>(</operator><name>STag</name> <operator>*</operator><operator>)</operator><name>pTag</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>tag</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>find</name> <init>= <expr><call><name>tTagGet</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>find</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TAG_FILTER_DEBUG</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>nData</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"metaTag table val varchar index:%d cid:%d type:%d value:%s"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>dval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>dval</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"metaTag table val number index:%d cid:%d type:%d value:%f"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>dval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pTagVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tTagToValArray</name><argument_list>(<argument><expr><operator>(</operator><name>STag</name> <operator>*</operator><operator>)</operator><name>pTag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STagVal</name> <modifier>*</modifier></type><name>pTagVal</name> <init>= <expr><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"metaTag table varchar index:%d cid:%d type:%d value:%s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>dval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>dval</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"metaTag table number index:%d cid:%d type:%d value:%f"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>dval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SMeta</name>   <modifier>*</modifier></type><name>pMeta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TBC</name>     <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>cid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>kLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>vLen</name></decl>;</decl_stmt>
}</block></struct></type> <name>SIdxCursor</name>;</typedef>

<function><type><name>int32_t</name></type> <name>metaFilterCreateTime</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>SMetaFltParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pUids</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIdxCursor</name> <modifier>*</modifier></type><name>pCursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pCursor</name> <operator>=</operator> <operator>(</operator><name>SIdxCursor</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIdxCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>cid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtimeIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>uidLimit</name> <init>= <expr><ternary><condition><expr><name><name>param</name><operator>-&gt;</operator><name>reverse</name></name></expr> ?</condition><then> <expr><name>INT64_MAX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCtimeIdxKey</name></type>  <name>ctimeKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>ctime</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uidLimit</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtimeIdxKey</name> <modifier>*</modifier></type><name>pCtimeKey</name> <init>= <expr><operator>&amp;</operator><name>ctimeKey</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctimeKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctimeKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>entryKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nEntryKey</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>entryKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nEntryKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SCtimeIdxKey</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>entryKey</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>cmp</name> <init>= <expr><call>(<modifier>*</modifier><name><name>param</name><operator>-&gt;</operator><name>filterFunc</name></name>)<argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ctime</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCtimeKey</name><operator>-&gt;</operator><name>ctime</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>reverse</name></name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>reverse</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>valid</name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>-&gt;</operator><name>reverse</name></name></expr> ?</condition><then> <expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

<label><name>END</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaFilterTableName</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>SMetaFltParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pUids</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STagIdxKey</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIdxCursor</name> <modifier>*</modifier></type><name>pCursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pCursor</name> <operator>=</operator> <operator>(</operator><name>SIdxCursor</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIdxCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>cid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pName</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pEntryKey</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pEntryVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nEntryKey</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nEntryVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pEntryKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nEntryKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pEntryVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nEntryVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pTableKey</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pEntryKey</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>param</name><operator>-&gt;</operator><name>filterFunc</name></name>)<argument_list>(<argument><expr><name>pTableKey</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>tuid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pEntryVal</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// next</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>valid</name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>-&gt;</operator><name>reverse</name></name></expr> ?</condition><then> <expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

<label><name>END</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>metaFilterTtl</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>SMetaFltParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pUids</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STtlIdxKey</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIdxCursor</name> <modifier>*</modifier></type><name>pCursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pCursor</name> <operator>=</operator> <operator>(</operator><name>SIdxCursor</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIdxCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>cid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTtlIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>END</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
  <comment type="line">// impl later</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>metaFilterTableIds</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>SMetaFltParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pUids</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STagIdxKey</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SIdxCursor</name> <modifier>*</modifier></type><name>pCursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pCursor</name> <operator>=</operator> <operator>(</operator><name>SIdxCursor</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SIdxCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>cid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtimeIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nTagData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>tagData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to filter NULL data"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tagData</name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nTagData</name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>maxSize</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>nTagData</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>maxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>false</name> <operator>==</operator> <call><name>taosMbsToUcs4</name><argument_list>(<argument><expr><name>tagData</name></expr></argument>, <argument><expr><name>nTagData</name></expr></argument>, <argument><expr><operator>(</operator><name>TdUcs4</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>maxSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <goto>goto <name>END</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>tagData</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nTagData</name> <operator>=</operator> <name>maxSize</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>tagData</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nTagData</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>param</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>metaCreateTagIdxKey</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name>tagData</name></expr></argument>, <argument><expr><name>nTagData</name></expr></argument>, <argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
                            <argument><expr><ternary><condition><expr><name><name>param</name><operator>-&gt;</operator><name>reverse</name></name></expr> ?</condition><then> <expr><name>INT64_MAX</name></expr> </then><else>: <expr><name>INT64_MIN</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>valid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>entryKey</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>entryVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nEntryKey</name></decl>, <decl><type ref="prev"/><name>nEntryVal</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>tdbTbcGet</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>entryKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nEntryKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>entryVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nEntryVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>entryVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>STagIdxKey</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>entryKey</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>pCursor</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>valid</name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>-&gt;</operator><name>reverse</name></name></expr> ?</condition><then> <expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>cmp</name> <init>= <expr><call>(<modifier>*</modifier><name><name>param</name><operator>-&gt;</operator><name>filterFunc</name></name>)<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// match</comment>
      <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>tuid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tuid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>tuid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pCursor</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// not match but should continue to iter</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// not match and no more result</comment>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>valid</name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>-&gt;</operator><name>reverse</name></name></expr> ?</condition><then> <expr><call><name>tdbTbcMoveToPrev</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tdbTbcMoveToNext</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>valid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

<label><name>END</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pCur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>metaGetTableTagByUid</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCtbIdxKey</name></type> <name>ctbIdxKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name>suid</name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uid</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbIdxKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtbIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>metaGetTableTagsByUids</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>uidList</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>LIMIT</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>isLock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><ternary><condition><expr><name>uidList</name></expr> ?</condition><then> <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <name>LIMIT</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isLock</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>isLock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>metaGetTableTagByUid</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to table IDs, suid: %"</literal> <name>PRId64</name> <literal type="string">", uid: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>,
                  <argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>isLock</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaGetTableTags</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>uidList</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCtbCursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><call><name>metaOpenCtbCursor</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>uHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>    <name>len</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// len &gt; 0 means there already have uids</comment>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>uHash</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>uid</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>uHash</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>id</name> <init>= <expr><call><name>metaCtbCursorNext</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name>uHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>uidList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>vLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>uHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaCloseCtbCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int32_t</name></type> <name>metaCacheGet</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SMetaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>metaGetInfo</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SMetaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SMetaReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>lock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// search cache</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaCacheGet</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// search TDB</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// not found</comment>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><operator>-&gt;</operator><name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><operator>-&gt;</operator><name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>skmVer</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><operator>-&gt;</operator><name>skmVer</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lock</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>pReader</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>META_READER_NOLOCK</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// metaReaderReleaseLock(pReader);</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// upsert the cache</comment>
  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaCacheUpsert</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaGetStbStats</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SMetaStbStats</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>metaRLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// fast path: search cache</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaStatsCacheGet</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// slow path: search TDB</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ctbNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vnodeGetCtbNum</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ctbNum</name></name> <operator>=</operator> <name>ctbNum</name></expr>;</expr_stmt>

  <comment type="line">// upsert the cache</comment>
  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaStatsCacheUpsert</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>metaUpdateStbStats</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaStbStats</name></type> <name>stats</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaStatsCacheGet</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>ctbNum</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>metaStatsCacheUpsert</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
