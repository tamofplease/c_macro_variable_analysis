<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/meta/metaOpen.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tbDbKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>skmDbKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ctbIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tagIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ttlIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>uidIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>smaIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>taskIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ctimeIdxCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ncolIdxCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>metaInitLock</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>metaDestroyLock</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>metaOpen</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppMeta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>slen</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppMeta</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// create handle</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>VNODE_META_DIR</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>VNODE_META_DIR</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pMeta</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pMeta</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>slen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaInitLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pMeta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>,
            <argument><expr><name>VNODE_META_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>VNODE_META_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosRealPath</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>

  <comment type="line">// create path if not created yet</comment>
  <expr_stmt><expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// open env</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szPage</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta env since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open pTbDb</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"table.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STbDbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>tbDbKeyCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta table db since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open pSkmDb</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"schema.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSkmDbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>skmDbKeyCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pSkmDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta schema db since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open pUidIdx</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"uid.idx"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SUidIdxVal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>uidIdxKeyCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta uid idx since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open pNameIdx</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"name.idx"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta name index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open pCtbIdx</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"ctb.idx"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtbIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ctbIdxKeyCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta child table index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open pSuidIdx</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"suid.idx"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uidIdxKeyCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pSuidIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta super table index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>indexFullPath</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>indexFullPath</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"invert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name>indexFullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SIndexOpts</name></type> <name>opts</name> <init>= <expr><block>{<expr><operator>.</operator><name>cacheSize</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>indexOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>indexFullPath</name></expr></argument>, <argument><expr><operator>(</operator><name>SIndex</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta tag index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"tag.idx"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tagIdxKeyCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta tag index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open pTtlIdx</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"ttl.idx"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STtlIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ttlIdxKeyCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pTtlIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta ttl index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open pSmaIdx</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"sma.idx"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>smaIdxKeyCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pSmaIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta sma index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// idx table create time</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"ctime.idx"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCtimeIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctimeIdxCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pCtimeIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta ctime index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// idx num of col, normal table only</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"ncol.idx"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SNcolIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ncolIdxCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pNcolIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta ncol index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbOpen</name><argument_list>(<argument><expr><literal type="string">"stream.task.db"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>taskIdxKeyCmpr</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pStreamDb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta stream task index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open index</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaOpenIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta index since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>metaCacheOpen</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open meta cache since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, meta is opened"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppMeta</name> <operator>=</operator> <name>pMeta</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaCloseIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pStreamDb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pStreamDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNcolIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNcolIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtimeIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtimeIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSmaIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSmaIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTtlIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTtlIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>indexClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSuidIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSuidIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSkmDb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSkmDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>metaDestroyLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaClose</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMeta</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCache</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaCacheClose</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaCloseIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pStreamDb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pStreamDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNcolIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNcolIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtimeIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtimeIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSmaIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSmaIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTtlIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTtlIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>indexClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSuidIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSuidIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSkmDb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSkmDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbTbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbClose</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>metaDestroyLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaAlterCache</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nPage</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbAlter</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>nPage</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaRLock</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>metaTrace</name><argument_list>(<argument><expr><literal type="string">"meta rlock %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaWLock</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>metaTrace</name><argument_list>(<argument><expr><literal type="string">"meta wlock %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaULock</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>metaTrace</name><argument_list>(<argument><expr><literal type="string">"meta ulock %p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tbDbKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STbDbKey</name> <modifier>*</modifier></type><name>pTbDbKey1</name> <init>= <expr><operator>(</operator><name>STbDbKey</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbDbKey</name> <modifier>*</modifier></type><name>pTbDbKey2</name> <init>= <expr><operator>(</operator><name>STbDbKey</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTbDbKey1</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <name><name>pTbDbKey2</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTbDbKey1</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <name><name>pTbDbKey2</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTbDbKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pTbDbKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTbDbKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pTbDbKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skmDbKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSkmDbKey</name> <modifier>*</modifier></type><name>pSkmDbKey1</name> <init>= <expr><operator>(</operator><name>SSkmDbKey</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkmDbKey</name> <modifier>*</modifier></type><name>pSkmDbKey2</name> <init>= <expr><operator>(</operator><name>SSkmDbKey</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSkmDbKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pSkmDbKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSkmDbKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pSkmDbKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSkmDbKey1</name><operator>-&gt;</operator><name>sver</name></name> <operator>&gt;</operator> <name><name>pSkmDbKey2</name><operator>-&gt;</operator><name>sver</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSkmDbKey1</name><operator>-&gt;</operator><name>sver</name></name> <operator>&lt;</operator> <name><name>pSkmDbKey2</name><operator>-&gt;</operator><name>sver</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>uidIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>uid1</name> <operator>&gt;</operator> <name>uid2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uid1</name> <operator>&lt;</operator> <name>uid2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ctbIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtbIdxKey</name> <modifier>*</modifier></type><name>pCtbIdxKey1</name> <init>= <expr><operator>(</operator><name>SCtbIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtbIdxKey</name> <modifier>*</modifier></type><name>pCtbIdxKey2</name> <init>= <expr><operator>(</operator><name>SCtbIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtbIdxKey1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <name><name>pCtbIdxKey2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCtbIdxKey1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&lt;</operator> <name><name>pCtbIdxKey2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtbIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pCtbIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCtbIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pCtbIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tagIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STagIdxKey</name> <modifier>*</modifier></type><name>pTagIdxKey1</name> <init>= <expr><operator>(</operator><name>STagIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STagIdxKey</name> <modifier>*</modifier></type><name>pTagIdxKey2</name> <init>= <expr><operator>(</operator><name>STagIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>    <name>uid1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uid2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>c</name></decl>;</decl_stmt>

  <comment type="line">// compare suid</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&lt;</operator> <name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// compare column id</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>cid</name></name> <operator>&lt;</operator> <name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// check NULL, NULL is always the smallest</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>isNull</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>isNull</name></name> <operator>&amp;&amp;</operator> <name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>isNull</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// all not NULL, compr tag vals</comment>
    <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>func</name> <init>= <expr><call><name>getComparFunc</name><argument_list>(<argument><expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// both null or tag values are equal, then continue to compare uids</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>uid1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>uid2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>uid1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pTagIdxKey1</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>uid2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pTagIdxKey2</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// compare uid</comment>
  <if_stmt><if>if <condition>(<expr><name>uid1</name> <operator>&lt;</operator> <name>uid2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uid1</name> <operator>&gt;</operator> <name>uid2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ttlIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STtlIdxKey</name> <modifier>*</modifier></type><name>pTtlIdxKey1</name> <init>= <expr><operator>(</operator><name>STtlIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STtlIdxKey</name> <modifier>*</modifier></type><name>pTtlIdxKey2</name> <init>= <expr><operator>(</operator><name>STtlIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTtlIdxKey1</name><operator>-&gt;</operator><name>dtime</name></name> <operator>&gt;</operator> <name><name>pTtlIdxKey2</name><operator>-&gt;</operator><name>dtime</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTtlIdxKey1</name><operator>-&gt;</operator><name>dtime</name></name> <operator>&lt;</operator> <name><name>pTtlIdxKey2</name><operator>-&gt;</operator><name>dtime</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTtlIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pTtlIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTtlIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pTtlIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ctimeIdxCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtimeIdxKey</name> <modifier>*</modifier></type><name>pCtimeIdxKey1</name> <init>= <expr><operator>(</operator><name>SCtimeIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCtimeIdxKey</name> <modifier>*</modifier></type><name>pCtimeIdxKey2</name> <init>= <expr><operator>(</operator><name>SCtimeIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCtimeIdxKey1</name><operator>-&gt;</operator><name>ctime</name></name> <operator>&gt;</operator> <name><name>pCtimeIdxKey2</name><operator>-&gt;</operator><name>ctime</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCtimeIdxKey1</name><operator>-&gt;</operator><name>ctime</name></name> <operator>&lt;</operator> <name><name>pCtimeIdxKey2</name><operator>-&gt;</operator><name>ctime</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCtimeIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pCtimeIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCtimeIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pCtimeIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ncolIdxCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNcolIdxKey</name> <modifier>*</modifier></type><name>pNcolIdxKey1</name> <init>= <expr><operator>(</operator><name>SNcolIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SNcolIdxKey</name> <modifier>*</modifier></type><name>pNcolIdxKey2</name> <init>= <expr><operator>(</operator><name>SNcolIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pNcolIdxKey1</name><operator>-&gt;</operator><name>ncol</name></name> <operator>&gt;</operator> <name><name>pNcolIdxKey2</name><operator>-&gt;</operator><name>ncol</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pNcolIdxKey1</name><operator>-&gt;</operator><name>ncol</name></name> <operator>&lt;</operator> <name><name>pNcolIdxKey2</name><operator>-&gt;</operator><name>ncol</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pNcolIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pNcolIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pNcolIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pNcolIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>smaIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaIdxKey</name> <modifier>*</modifier></type><name>pSmaIdxKey1</name> <init>= <expr><operator>(</operator><name>SSmaIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaIdxKey</name> <modifier>*</modifier></type><name>pSmaIdxKey2</name> <init>= <expr><operator>(</operator><name>SSmaIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSmaIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pSmaIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSmaIdxKey1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pSmaIdxKey2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSmaIdxKey1</name><operator>-&gt;</operator><name>smaUid</name></name> <operator>&gt;</operator> <name><name>pSmaIdxKey2</name><operator>-&gt;</operator><name>smaUid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSmaIdxKey1</name><operator>-&gt;</operator><name>smaUid</name></name> <operator>&lt;</operator> <name><name>pSmaIdxKey2</name><operator>-&gt;</operator><name>smaUid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>taskIdxKeyCmpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kLen2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>uid1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>uid2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>uid1</name> <operator>&gt;</operator> <name>uid2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uid1</name> <operator>&lt;</operator> <name>uid2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
