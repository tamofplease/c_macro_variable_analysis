<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/meta/metaTable.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaSaveJsonVarToIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pCtbEntry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaDelJsonVarFromIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pCtbEntry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaSaveToTbDb</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaUpdateUidIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaUpdateNameIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaUpdateTtlIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaSaveToSkmDb</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaUpdateCtbIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaUpdateSuidIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaUpdateTagIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pCtbEntry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>  <name>metaDropTableByUid</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>metaDestroyTagIdxKey</name><parameter_list>(<parameter><decl><type><name>STagIdxKey</name> <modifier>*</modifier></type><name>pTagIdxKey</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// opt ins_tables query</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateCtimeIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>metaDeleteCtimeIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateNcolIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>metaDeleteNcolIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>metaGetEntryInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>, <parameter><decl><type><name>SMetaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>skmVer</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>skmVer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pEntry</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>skmVer</name></name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateMetaRsp</name><parameter_list>(<parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>, <parameter><decl><type><name>SSchemaWrapper</name> <modifier>*</modifier></type><name>pSchema</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pMetaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>pSchemas</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pMetaRsp</name><operator>-&gt;</operator><name>pSchemas</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name>TSDB_NORMAL_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>tuid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaSaveJsonVarToIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pCtbEntry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_INVERTED_INDEX</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pCtbEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tagName</name> <init>= <expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tb_uid_t</name></type>    <name>suid</name> <init>= <expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>    <name>tuid</name> <init>= <expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pTagData</name> <init>= <expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nTagData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pTagVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tTagToValArray</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STag</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagVals</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SIndexMultiTerm</name> <modifier>*</modifier></type><name>terms</name> <init>= <expr><call><name>indexMultiTermCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>          <name>nCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nCols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STagVal</name> <modifier>*</modifier></type><name>pTagVal</name> <init>= <expr><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>     <name>type</name> <init>= <expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pKey</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nKey</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SIndexTerm</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>ADD_VALUE</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name> <operator>*</operator><operator>)</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><name>val</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>ADD_VALUE</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>ADD_VALUE</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>ADD_VALUE</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>ADD_VALUE</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BOOL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>indexMultiTermAdd</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>indexJsonPut</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name></expr></argument>, <argument><expr><name>terms</name></expr></argument>, <argument><expr><name>tuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>indexMultiTermDestroy</name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>metaDelJsonVarFromIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pCtbEntry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSchema</name> <modifier>*</modifier></type><name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_INVERTED_INDEX</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pCtbEntry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tagName</name> <init>= <expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tb_uid_t</name></type>    <name>suid</name> <init>= <expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>    <name>tuid</name> <init>= <expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pTagData</name> <init>= <expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nTagData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pTagVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tTagToValArray</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STag</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagVals</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SIndexMultiTerm</name> <modifier>*</modifier></type><name>terms</name> <init>= <expr><call><name>indexMultiTermCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>          <name>nCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nCols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STagVal</name> <modifier>*</modifier></type><name>pTagVal</name> <init>= <expr><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>     <name>type</name> <init>= <expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pKey</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nKey</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SIndexTerm</name> <modifier>*</modifier></type><name>term</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>DEL_VALUE</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name> <operator>*</operator><operator>)</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><name>val</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>DEL_VALUE</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>DEL_VALUE</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>DEL_VALUE</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>term</name> <operator>=</operator> <call><name>indexTermCreate</name><argument_list>(<argument><expr><name>suid</name></expr></argument>, <argument><expr><name>DEL_VALUE</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BOOL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>term</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>indexMultiTermAdd</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>indexJsonPut</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name></expr></argument>, <argument><expr><name>terms</name></expr></argument>, <argument><expr><name>tuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>indexMultiTermDestroy</name><argument_list>(<argument><expr><name>terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaCreateSTable</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SVCreateStbReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaEntry</name></type>  <name>me</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>szBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// validate req</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SMetaInfo</name></type> <name>info</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaGetInfo</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>info</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_TABLE_ALREADY_EXIST</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set structs</comment>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_SUPER_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>schemaRow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>schemaTag</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>rollup</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TABLE_SET_ROLLUP</name><argument_list>(<argument><expr><name><name>me</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>rsmaParam</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>rsmaParam</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaHandleEntry</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><operator>++</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfSTables</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, stb:%s is created, suid:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create stb:%s uid:%"</literal> <name>PRId64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>,
            <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaDropSTable</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>verison</name></decl></parameter>, <parameter><decl><type><name>SVDropStbReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tbUidList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>nKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// check if super table exists</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pData</name> <operator>!=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_STB_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// drop all child tables</comment>
  <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pCtbIdxc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCtbIdxc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <macro><name>tdbTbcMoveTo</name><argument_list>(<argument>pCtbIdxc</argument>, <argument>&amp;(SCtbIdxKey){.suid = pReq-&gt;suid</argument>, <argument>.uid = INT64_MIN}</argument>, <argument>sizeof(SCtbIdxKey)</argument>, <argument>&amp;c</argument>)</argument_list></macro></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pCtbIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_drop_super_table</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tdbTbcNext</name><argument_list>(<argument><expr><name>pCtbIdxc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SCtbIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey</name><operator>)</operator><operator>-&gt;</operator><name>suid</name> <operator>&lt;</operator> <name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>SCtbIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey</name><operator>)</operator><operator>-&gt;</operator><name>suid</name> <operator>&gt;</operator> <name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>SCtbIdxKey</name> <operator>*</operator><operator>)</operator><name>pKey</name><operator>)</operator><operator>-&gt;</operator><name>uid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pCtbIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iChild</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iChild</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iChild</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>iChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaDropTableByUid</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// drop super table</comment>
<label><name>_drop_super_table</name>:</label>
  <expr_stmt><expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>tdbTbDelete</name><argument_list>(<argument>pMeta-&gt;pTbDb</argument>, <argument>&amp;(STbDbKey){.version = ((SUidIdxVal *)pData)[<literal type="number">0</literal>].version</argument>, <argument>.uid = pReq-&gt;suid}</argument>,
              <argument>sizeof(STbDbKey)</argument>, <argument>pMeta-&gt;txn</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSuidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, super table %s uid:%"</literal> <name>PRId64</name> <literal type="string">" is dropped"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaAlterSTable</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SVCreateStbReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaEntry</name></type>  <name>oStbEntry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaEntry</name></type>  <name>nStbEntry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TBC</name>        <modifier>*</modifier></type><name>pUidIdxc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TBC</name>        <modifier>*</modifier></type><name>pTbDbc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>oversion</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>    <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>c</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pUidIdxc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_STB_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcGet</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_STB_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>oversion</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTbDbc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <macro><name>tdbTbcMoveTo</name><argument_list>(<argument>pTbDbc</argument>, <argument>&amp;((STbDbKey){.uid = pReq-&gt;suid, .version = oversion})</argument>, <argument>sizeof(STbDbKey)</argument>, <argument>&amp;c</argument>)</argument_list></macro></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbcGet</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>oStbEntry</name><operator>.</operator><name>pBuf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>oStbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name><name>oStbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oStbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>nStbEntry</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nStbEntry</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_SUPER_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nStbEntry</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nStbEntry</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nStbEntry</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>schemaRow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nStbEntry</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>schemaTag</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// compare two entry</comment>
  <if_stmt><if>if <condition>(<expr><name><name>oStbEntry</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>schemaRow</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaSaveToSkmDb</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nStbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update table.db</comment>
  <expr_stmt><expr><call><name>metaSaveToTbDb</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nStbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update uid index</comment>
  <expr_stmt><expr><call><name>metaUpdateUidIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nStbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// metaStatsCacheDrop(pMeta, nStbEntry.uid);</comment>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>oStbEntry</name><operator>.</operator><name>pBuf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>oStbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaCreateTable</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SVCreateTbReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier><modifier>*</modifier></type><name>pMetaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaEntry</name></type>  <name>me</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// validate message</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_CHILD_TABLE</name> <operator>&amp;&amp;</operator> <name><name>pReq</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>suid</name> <init>= <expr><call><name>metaGetTableEntryUidByName</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>suid</name> <operator>!=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// validate req</comment>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name> <operator>&amp;&amp;</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>suid</name></name> <operator>!=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_TABLE_IN_OTHER_STABLE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_TABLE_ALREADY_EXIST</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// build SMetaEntry</comment>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>ctime</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ctime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>ttlDays</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>commentLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>comment</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>pTag</name></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TAG_FILTER_DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pTagVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tTagToValArray</name><argument_list>(<argument><expr><operator>(</operator><name>STag</name> <operator>*</operator><operator>)</operator><name><name>pReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>pTag</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagVals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STagVal</name> <modifier>*</modifier></type><name>pTagVal</name> <init>= <expr><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"metaTag table:%s varchar index:%d cid:%d type:%d value:%s"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>,
                  <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"metaTag table:%s number index:%d cid:%d type:%d value:%f"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>,
                  <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><operator>++</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfCTables</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaUpdateStbStats</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaUidCacheClear</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ctime</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ctime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ttlDays</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>commentLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>comment</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ntb</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ncid</name></name> <operator>=</operator> <name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name><index>[<expr><name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>colId</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>++</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfNTables</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfNTimeSeries</name></name> <operator>+=</operator> <name><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaHandleEntry</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMetaRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pMetaRsp</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableMetaRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pMetaRsp</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pMetaRsp</name><operator>)</operator><operator>-&gt;</operator><name>tableType</name></name> <operator>=</operator> <name>TSDB_CHILD_TABLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pMetaRsp</name><operator>)</operator><operator>-&gt;</operator><name>tuid</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pMetaRsp</name><operator>)</operator><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pMetaRsp</name><operator>)</operator><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>metaUpdateMetaRsp</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>ntb</name><operator>.</operator><name>schemaRow</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pMetaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, table:%s uid %"</literal> <name>PRId64</name> <literal type="string">" is created, type:%"</literal> <name>PRId8</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
            <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create table:%s type:%s since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>pReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr> ?</condition><then> <expr><literal type="string">"child table"</literal></expr> </then><else>: <expr><literal type="string">"normal table"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaDropTable</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SVDropTbReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tbUids</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name> <modifier>*</modifier></type><name>tbUid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>type</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDropTableByUid</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>tbUids</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>tbUid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tbUid</name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaTtlDropTable</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tbUids</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>metaTtlSmaller</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>tbUids</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name> <modifier>*</modifier></type><name>uid</name> <init>= <expr><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaDropTableByUid</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"ttl drop table:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>metaBuildTtlIdxKey</name><parameter_list>(<parameter><decl><type><name>STtlIdxKey</name> <modifier>*</modifier></type><name>ttlKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ttlDays</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ctime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ctime</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>ctime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ttlDays</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>ttlDays</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ctime</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>ctime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ttlDays</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>ttlDays</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ttlDays</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>ttlKey</name><operator>-&gt;</operator><name>dtime</name></name> <operator>=</operator> <name>ctime</name> <operator>/</operator> <literal type="number">1000</literal> <operator>+</operator> <name>ttlDays</name> <operator>*</operator> <name>tsTtlUnit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ttlKey</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>metaBuildCtimeIdxKey</name><parameter_list>(<parameter><decl><type><name>SCtimeIdxKey</name> <modifier>*</modifier></type><name>ctimeKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ctime</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ctime</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>ctime</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ctime</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>ctime</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>ctimeKey</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <name>ctime</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctimeKey</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaBuildNColIdxKey</name><parameter_list>(<parameter><decl><type><name>SNcolIdxKey</name> <modifier>*</modifier></type><name>ncolKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ncolKey</name><operator>-&gt;</operator><name>ncol</name></name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ncolKey</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaDeleteTtlIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STtlIdxKey</name></type> <name>ttlKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaBuildTtlIdxKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttlKey</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ttlKey</name><operator>.</operator><name>dtime</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTtlIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttlKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ttlKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaDropTableByUid</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>      <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>e</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>   <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>version</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr></init></decl>;</decl_stmt>

  <macro><name>tdbTbGet</name><argument_list>(<argument>pMeta-&gt;pTbDb</argument>, <argument>&amp;(STbDbKey){.version = version</argument>, <argument>.uid = uid}</argument>, <argument>sizeof(STbDbKey)</argument>, <argument>&amp;pData</argument>, <argument>&amp;nData</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>tLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>tData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>tData</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STbDbKey</name></type> <name>tbDbKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>version</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbDbKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbDbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>tData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDecoder</name></type>   <name>tdc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>stbEntry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdc</name></expr></argument>, <argument><expr><name>tData</name></expr></argument>, <argument><expr><name>tLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>SSchema</name> <modifier>*</modifier></type><name>pTagColumn</name> <init>= <expr><operator>&amp;</operator><name><name>stbEntry</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>metaDelJsonVarFromIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>pTagColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>STagIdxKey</name> <modifier>*</modifier></type><name>pTagIdxKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type>     <name>nTagIdxKey</name></decl>;</decl_stmt>

          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pTagData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type>     <name>nTagData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pTagColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tTagGet</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STag</name> <operator>*</operator><operator>)</operator><name><name>e</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>pTagData</name> <operator>=</operator> <name><name>tagVal</name><operator>.</operator><name>pData</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nTagData</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>pTagData</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>nTagData</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <if_stmt><if>if <condition>(<expr><call><name>metaCreateTagIdxKey</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name>pTagData</name></expr></argument>, <argument><expr><name>nTagData</name></expr></argument>, <argument><expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name>pTagIdxKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTagIdxKey</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIdx</name></name></expr></argument>, <argument><expr><name>pTagIdxKey</name></expr></argument>, <argument><expr><name>nTagIdxKey</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>metaDestroyTagIdxKey</name><argument_list>(<argument><expr><name>pTagIdxKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>tData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <macro><name>tdbTbDelete</name><argument_list>(<argument>pMeta-&gt;pTbDb</argument>, <argument>&amp;(STbDbKey){.version = version</argument>, <argument>.uid = uid}</argument>, <argument>sizeof(STbDbKey)</argument>, <argument>pMeta-&gt;txn</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name> <operator>||</operator> <name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaDeleteCtimeIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaDeleteNcolIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>metaDeleteTtlIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <macro><name>tdbTbDelete</name><argument_list>(<argument>pMeta-&gt;pCtbIdx</argument>, <argument>&amp;(SCtbIdxKey){.suid = e.ctbEntry.suid</argument>, <argument>.uid = uid}</argument>, <argument>sizeof(SCtbIdxKey)</argument>, <argument>pMeta-&gt;txn</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><operator>--</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfCTables</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>metaUpdateStbStats</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaUidCacheClear</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// drop schema.db (todo)</comment>

    <expr_stmt><expr><operator>--</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfNTables</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfNTimeSeries</name></name> <operator>-=</operator> <name><name>e</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>e</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSuidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>e</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// drop schema.db (todo)</comment>

    <expr_stmt><expr><call><name>metaStatsCacheDrop</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaUidCacheClear</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfSTables</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaCacheDrop</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="line">// opt ins_tables</comment>
<function><type><name>int</name></type> <name>metaUpdateCtimeIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtimeIdxKey</name></type> <name>ctimeKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaBuildCtimeIdxKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctimeKey</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtimeIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctimeKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctimeKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaDeleteCtimeIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtimeIdxKey</name></type> <name>ctimeKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaBuildCtimeIdxKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctimeKey</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtimeIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctimeKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctimeKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>metaUpdateNcolIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNcolIdxKey</name></type> <name>ncolKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaBuildNColIdxKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ncolKey</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNcolIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncolKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ncolKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaDeleteNcolIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SNcolIdxKey</name></type> <name>ncolKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaBuildNColIdxKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ncolKey</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tdbTbDelete</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNcolIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncolKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ncolKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaAlterTableColumn</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SVAlterTbReq</name> <modifier>*</modifier></type><name>pAlterTbReq</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pMetaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>nVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name>     <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>        <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>oversion</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name>        <modifier>*</modifier></type><name>pColumn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaEntry</name></type>      <name>entry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name> <modifier>*</modifier></type><name>pSchema</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>c</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>colName</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// search name index</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pVal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// search uid index</comment>
  <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pUidIdxc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pUidIdxc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>oversion</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr>;</expr_stmt>

  <comment type="line">// search table.db</comment>
  <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbDbc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTbDbc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>tdbTbcMoveTo</name><argument_list>(<argument>pTbDbc</argument>, <argument>&amp;((STbDbKey){.uid = uid, .version = oversion})</argument>, <argument>sizeof(STbDbKey)</argument>, <argument>&amp;c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// get table entry</comment>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_INVALID_TABLE_ACTION</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// search the column to add/drop/update</comment>
  <expr_stmt><expr><name>pSchema</name> <operator>=</operator> <operator>&amp;</operator><name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>

  <comment type="line">// save old entry</comment>
  <decl_stmt><decl><type><name>SMetaEntry</name></type> <name>oldEntry</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>TSDB_NORMAL_TABLE</name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>oldEntry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pColumn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>iCol</name> <operator>&gt;=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>pSchema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iCol</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>tlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pNewSchema</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_COLUMN</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>pColumn</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_COL_ALREADY_EXISTS</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>version</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pNewSchema</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pNewSchema</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name>pNewSchema</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>colId</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ncid</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>++</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfNTimeSeries</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_COLUMN</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>pColumn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_COL_NOT_EXISTS</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_INVALID_TABLE_ACTION</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tqCheckColModifiable</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_COL_SUBSCRIBED</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>version</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tlen</name> <operator>=</operator> <operator>(</operator><name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name> <operator>-</operator> <name>iCol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tlen</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pColumn</name></expr></argument>, <argument><expr><name>pColumn</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>nCols</name></name><operator>--</operator></expr>;</expr_stmt>

      <expr_stmt><expr><operator>--</operator><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vndStats</name><operator>.</operator><name>numOfNTimeSeries</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>pColumn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_COL_NOT_EXISTS</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pColumn</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>colModBytes</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_INVALID_TABLE_ACTION</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tqCheckColModifiable</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_COL_SUBSCRIBED</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>version</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>colModBytes</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_NAME</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>colNewName</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>pColumn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_COL_NOT_EXISTS</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tqCheckColModifiable</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_COL_SUBSCRIBED</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>version</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>colNewName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaDeleteNcolIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaUpdateNcolIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// do actual write</comment>
  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save to table db</comment>
  <expr_stmt><expr><call><name>metaSaveToTbDb</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaUpdateUidIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaSaveToSkmDb</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaUpdateMetaRsp</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>pMetaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNewSchema</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNewSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateTableTagVal</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SVAlterTbReq</name> <modifier>*</modifier></type><name>pAlterTbReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMetaEntry</name></type>  <name>ctbEntry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaEntry</name></type>  <name>stbEntry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>    <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>oversion</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>tagName</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// search name index</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pVal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// search uid index</comment>
  <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pUidIdxc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pUidIdxc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>oversion</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr>;</expr_stmt>

  <comment type="line">// search table.db</comment>
  <decl_stmt><decl><type><name>TBC</name>     <modifier>*</modifier></type><name>pTbDbc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>dc1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>dc2</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* get ctbEntry */</comment>
  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTbDbc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>tdbTbcMoveTo</name><argument_list>(<argument>pTbDbc</argument>, <argument>&amp;((STbDbKey){.uid = uid, .version = oversion})</argument>, <argument>sizeof(STbDbKey)</argument>, <argument>&amp;c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctbEntry</name><operator>.</operator><name>pBuf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc1</name></expr></argument>, <argument><expr><name><name>ctbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* get stbEntry*/</comment>
  <expr_stmt><expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pVal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <macro><name>tdbTbGet</name><argument_list>(<argument>pMeta-&gt;pTbDb</argument>, <argument>&amp;((STbDbKey){.uid = ctbEntry.ctbEntry.suid, .version = ((SUidIdxVal *)pVal)[<literal type="number">0</literal>].version})</argument>,
           <argument>sizeof(STbDbKey)</argument>, <argument>(void **)&amp;stbEntry.pBuf</argument>, <argument>&amp;nVal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc2</name></expr></argument>, <argument><expr><name><name>stbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSchemaWrapper</name> <modifier>*</modifier></type><name>pTagSchema</name> <init>= <expr><operator>&amp;</operator><name><name>stbEntry</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchema</name>        <modifier>*</modifier></type><name>pColumn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pColumn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>iCol</name> <operator>&gt;=</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>nCols</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>pTagSchema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>tagName</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iCol</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>pColumn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_COL_NOT_EXISTS</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctbEntry</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>nCols</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>nTagVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>pTagVal</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>nTagVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STag</name> <modifier>*</modifier></type><name>pOldTag</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>STag</name> <operator>*</operator><operator>)</operator><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STag</name>       <modifier>*</modifier></type><name>pNewTag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name>     <modifier>*</modifier></type><name>pTagArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>nCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTagArray</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTagSchema</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pTagSchema</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>iCol</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>STagVal</name></type> <name>val</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>val</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>val</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>pTagVal</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>val</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>nTagVal</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>val</name><operator>.</operator><name>i64</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>pTagVal</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>nTagVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>STagVal</name></type> <name>val</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tTagGet</name><argument_list>(<argument><expr><name>pOldTag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>tTagNew</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>, <argument><expr><name><name>pTagSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNewTag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>pNewTag</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save to table.db</comment>
  <expr_stmt><expr><call><name>metaSaveToTbDb</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save to uid.idx</comment>
  <expr_stmt><expr><call><name>metaUpdateUidIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>iCol</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaUpdateTagIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCtbIdxKey</name></type> <name>ctbIdxKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uid</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdbTbUpsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbIdxKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctbIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>,
              <argument><expr><operator>(</operator><operator>(</operator><name>STag</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>len</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaUidCacheClear</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ctbEntry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctbEntry</name><operator>.</operator><name>pBuf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>ctbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stbEntry</name><operator>.</operator><name>pBuf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>stbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctbEntry</name><operator>.</operator><name>pBuf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>ctbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stbEntry</name><operator>.</operator><name>pBuf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name><name>stbEntry</name><operator>.</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateTableOptions</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SVAlterTbReq</name> <modifier>*</modifier></type><name>pAlterTbReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>    <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>oversion</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaEntry</name></type>  <name>entry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// search name index</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>tbName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><name>pVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pVal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// search uid index</comment>
  <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pUidIdxc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pUidIdxc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcMoveTo</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>oversion</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr>;</expr_stmt>

  <comment type="line">// search table.db</comment>
  <decl_stmt><decl><type><name>TBC</name> <modifier>*</modifier></type><name>pTbDbc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tdbTbcOpen</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTbDbc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>tdbTbcMoveTo</name><argument_list>(<argument>pTbDbc</argument>, <argument>&amp;((STbDbKey){.uid = uid, .version = oversion})</argument>, <argument>sizeof(STbDbKey)</argument>, <argument>&amp;c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcGet</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// get table entry</comment>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// build SMetaEntry</comment>
  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>updateTTL</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaDeleteTtlIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>ttlDays</name></name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>newTTL</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaUpdateTtlIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>newCommentLen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>newCommentLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>newComment</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>updateTTL</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>metaDeleteTtlIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ttlDays</name></name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>newTTL</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaUpdateTtlIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAlterTbReq</name><operator>-&gt;</operator><name>newCommentLen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>newCommentLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <name><name>pAlterTbReq</name><operator>-&gt;</operator><name>newComment</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// save to table db</comment>
  <expr_stmt><expr><call><name>metaSaveToTbDb</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaUpdateUidIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pTbDbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbcClose</name><argument_list>(<argument><expr><name>pUidIdxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaAlterTable</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SVAlterTbReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pMetaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>pReq</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_COLUMN</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_COLUMN</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_NAME</name></expr>:</case>
      <return>return <expr><call><name>metaAlterTableColumn</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>pMetaRsp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_VAL</name></expr>:</case>
      <return>return <expr><call><name>metaUpdateTableTagVal</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_OPTIONS</name></expr>:</case>
      <return>return <expr><call><name>metaUpdateTableOptions</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_INVALID_TABLE_ACTION</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaSaveToTbDb</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STbDbKey</name></type> <name>tbDbKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// set key and value</comment>
  <expr_stmt><expr><name><name>tbDbKey</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tbDbKey</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to save table version:%"</literal> <name>PRId64</name> <literal type="string">" uid:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
            <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pKey</name> <operator>=</operator> <operator>&amp;</operator><name>tbDbKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>kLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tbDbKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>metaEncodeEntry</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaEncodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// write to table.db</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to save table version:%"</literal> <name>PRId64</name> <literal type="string">"uid:%"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
            <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateUidIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// upsert cache</comment>
  <decl_stmt><decl><type><name>SMetaInfo</name></type> <name>info</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaGetEntryInfo</name><argument_list>(<argument><expr><name>pME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaCacheUpsert</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUidIdxVal</name></type> <name>uidIdxVal</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>version</name></name></expr>, <expr><operator>.</operator><name>skmVer</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>skmVer</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tdbTbUpsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidIdxVal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uidIdxVal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateSuidIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSuidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateNameIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pME</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateTtlIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STtlIdxKey</name></type> <name>ttlKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaBuildTtlIdxKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttlKey</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ttlKey</name><operator>.</operator><name>dtime</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTtlIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttlKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ttlKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateCtbIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCtbIdxKey</name></type> <name>ctbIdxKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pCtbIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbIdxKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctbIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>,
                     <argument><expr><operator>(</operator><operator>(</operator><name>STag</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pME</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>len</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaCreateTagIdxKey</name><parameter_list>(<parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pTagData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nTagData</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>,
                        <parameter><decl><type><name>STagIdxKey</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTagIdxKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>nTagIdxKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>nTagIdxKey</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STagIdxKey</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nTagData</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>nTagIdxKey</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STagIdxKey</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nTagData</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTagIdxKey</name> <operator>=</operator> <operator>(</operator><name>STagIdxKey</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><operator>*</operator><name>nTagIdxKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppTagIdxKey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTagIdxKey</name><operator>)</operator><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTagIdxKey</name><operator>)</operator><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name>cid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTagIdxKey</name><operator>)</operator><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pTagData</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTagIdxKey</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <comment type="line">// refactor</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppTagIdxKey</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nTagData</name></expr></argument>, <argument><expr><name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppTagIdxKey</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>, <argument><expr><name>pTagData</name></expr></argument>, <argument><expr><name>nTagData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppTagIdxKey</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>nTagData</name><operator>)</operator> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppTagIdxKey</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pTagData</name></expr></argument>, <argument><expr><name>nTagData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppTagIdxKey</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>nTagData</name><operator>)</operator> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>metaDestroyTagIdxKey</name><parameter_list>(<parameter><decl><type><name>STagIdxKey</name> <modifier>*</modifier></type><name>pTagIdxKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTagIdxKey</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTagIdxKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateTagIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pCtbEntry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>          <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>            <name>nData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbDbKey</name></type>       <name>tbDbKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaEntry</name></type>     <name>stbEntry</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STagIdxKey</name>    <modifier>*</modifier></type><name>pTagIdxKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>nTagIdxKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSchema</name> <modifier>*</modifier></type><name>pTagColumn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name>    <modifier>*</modifier></type><name>pTagData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>nTagData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>       <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// get super table</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>tbDbKey</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tbDbKey</name><operator>.</operator><name>version</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SUidIdxVal</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbDbKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbDbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>metaDecodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>stbEntry</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pTagColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>stbEntry</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pTagColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTagGet</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>STag</name> <operator>*</operator><operator>)</operator><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pTagData</name> <operator>=</operator> <name><name>tagVal</name><operator>.</operator><name>pData</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nTagData</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pTagData</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>nTagData</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// pTagData = pCtbEntry-&gt;ctbEntry.pTags;</comment>
    <comment type="line">// nTagData = ((const STag *)pCtbEntry-&gt;ctbEntry.pTags)-&gt;len;</comment>
    <expr_stmt><expr><name>pTagData</name> <operator>=</operator> <name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nTagData</name> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>STag</name> <operator>*</operator><operator>)</operator><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>metaSaveJsonVarToIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pCtbEntry</name></expr></argument>, <argument><expr><name>pTagColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTagData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>metaCreateTagIdxKey</name><argument_list>(<argument><expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name>pTagData</name></expr></argument>, <argument><expr><name>nTagData</name></expr></argument>, <argument><expr><name><name>pTagColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
                            <argument><expr><name><name>pCtbEntry</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagIdxKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTagIdxKey</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tdbTbUpsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIdx</name></name></expr></argument>, <argument><expr><name>pTagIdxKey</name></expr></argument>, <argument><expr><name>nTagIdxKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>metaDestroyTagIdxKey</name><argument_list>(<argument><expr><name>pTagIdxKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdbFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaSaveToSkmDb</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEncoder</name></type>              <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>                 <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                   <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                   <name>rcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkmDbKey</name></type>             <name>skmDbKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSchemaWrapper</name> <modifier>*</modifier></type><name>pSW</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pSW</name> <operator>=</operator> <operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pSW</name> <operator>=</operator> <operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>skmDbKey</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>skmDbKey</name><operator>.</operator><name>sver</name></name> <operator>=</operator> <name><name>pSW</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

  <comment type="line">// if receive tmq meta message is: create stable1 then delete stable1 then create stable1 with multi vgroups</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbGet</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSkmDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skmDbKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skmDbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>rcode</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// encode schema</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSSchemaWrapper</name></expr></argument>, <argument><expr><name>pSW</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSSchemaWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pSW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSkmDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skmDbKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skmDbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, set schema:(%"</literal> <name>PRId64</name> <literal type="string">") sver:%d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pSW</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
            <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rcode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>metaHandleEntry</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save to table.db</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaSaveToTbDb</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update uid.idx</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaUpdateUidIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update name.idx</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaUpdateNameIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// update ctb.idx</comment>
    <if_stmt><if>if <condition>(<expr><call><name>metaUpdateCtbIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// update tag.idx</comment>
    <if_stmt><if>if <condition>(<expr><call><name>metaUpdateTagIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// update schema.db</comment>
    <if_stmt><if>if <condition>(<expr><call><name>metaSaveToSkmDb</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>metaUpdateSuidIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaUpdateCtimeIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>metaUpdateNcolIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pME</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>metaUpdateTtlIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<comment type="line">// refactor later</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>metaGetIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIdx</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>metaGetIvtIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTagIvtIdx</name></name></expr>;</return> </block_content>}</block></function>
</unit>
