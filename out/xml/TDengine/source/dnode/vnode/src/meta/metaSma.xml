<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/meta/metaSma.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>metaHandleSmaEntry</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>metaSaveSmaToDB</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>metaCreateTSma</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SSmaCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: Validate the cfg</comment>
  <comment type="line">// The table uid should exists and be super table or normal table.</comment>
  <comment type="line">// Check other cfg value</comment>

  <decl_stmt><decl><type><name>SMetaEntry</name></type>  <name>me</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>szBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// validate req</comment>
  <comment type="line">// save smaIndex</comment>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>indexUid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSMA_ALREADY_EXIST</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>  <comment type="line">// don't goto _err;</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// set structs</comment>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_TSMA_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>indexUid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>indexName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>me</name><operator>.</operator><name>smaEntry</name><operator>.</operator><name>tsma</name></name> <operator>=</operator> <name>pCfg</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaHandleSmaEntry</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>metaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsma is created, name:%s uid:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>indexName</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>indexUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create tsma:%s uid:%"</literal> <name>PRId64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>indexName</name></name></expr></argument>,
            <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>indexUid</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>metaDropTSma</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>indexUid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: Validate the cfg</comment>
  <comment type="line">// TODO: add atomicity</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>META_REFACT</name></cpp:ifdef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><call><name>metaRemoveSmaFromDb</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>indexUid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO: handle error</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaSaveSmaToDB</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STbDbKey</name></type> <name>tbDbKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>kLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>vLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// set key and value</comment>
  <expr_stmt><expr><name><name>tbDbKey</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tbDbKey</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pKey</name> <operator>=</operator> <operator>&amp;</operator><name>tbDbKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>kLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tbDbKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>metaEncodeEntry</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaEncodeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// write to table.db</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pTbDb</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>kLen</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>vLen</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateUidIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUidIdxVal</name></type> <name>uidIdxVal</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>smaEntry</name><operator>.</operator><name>tsma</name><operator>-&gt;</operator><name>indexUid</name></name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>version</name></name></expr>, <expr><operator>.</operator><name>skmVer</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pUidIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidIdxVal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uidIdxVal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateNameIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pNameIdx</name></name></expr></argument>, <argument><expr><name><name>pME</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pME</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pME</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaUpdateSmaIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaIdxKey</name></type> <name>smaIdxKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>smaEntry</name><operator>.</operator><name>tsma</name><operator>-&gt;</operator><name>tableUid</name></name></expr>, <expr><operator>.</operator><name>smaUid</name> <operator>=</operator> <name><name>pME</name><operator>-&gt;</operator><name>smaEntry</name><operator>.</operator><name>tsma</name><operator>-&gt;</operator><name>indexUid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tdbTbInsert</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pSmaIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>smaIdxKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>smaIdxKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metaHandleSmaEntry</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMetaEntry</name> <modifier>*</modifier></type><name>pME</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>metaWLock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save to table.db</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaSaveSmaToDB</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update uid.idx</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaUpdateUidIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update name.idx</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaUpdateNameIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update sma.idx</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaUpdateSmaIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pME</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaULock</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
