<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/meta/metaCommit.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"meta.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name> <modifier>*</modifier></type><name>metaMalloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>vnodeBufPoolMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>SVBufPool</name> <operator>*</operator><operator>)</operator><name>pPool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type>  <name>metaFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>vnodeBufPoolFree</name><argument_list>(<argument><expr><operator>(</operator><name>SVBufPool</name> <operator>*</operator><operator>)</operator><name>pPool</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<comment type="line">// begin a meta txn</comment>
<function><type><name>int</name></type> <name>metaBegin</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>fromSys</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xMalloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>xArg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>fromSys</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>xMalloc</name> <operator>=</operator> <name>tdbDefaultMalloc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xFree</name> <operator>=</operator> <name>tdbDefaultFree</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>xMalloc</name> <operator>=</operator> <name>metaMalloc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xFree</name> <operator>=</operator> <name>metaFree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xArg</name> <operator>=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdbBegin</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>, <argument><expr><name>xMalloc</name></expr></argument>, <argument><expr><name>xFree</name></expr></argument>, <argument><expr><name>xArg</name></expr></argument>, <argument><expr><name>TDB_TXN_WRITE</name> <operator>|</operator> <name>TDB_TXN_READ_UNCOMMITTED</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// commit the meta txn</comment>
<function><type><name>TXN</name> <modifier>*</modifier></type><name>metaGetTxn</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type>  <name>metaCommit</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbCommit</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type>  <name>metaFinishCommit</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>TXN</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbPostCommit</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type>  <name>metaPrepareAsyncCommit</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
   <comment type="line">// return tdbPrepareAsyncCommit(pMeta-&gt;pEnv, pMeta-&gt;txn);</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tdbCommit</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// abort the meta txn</comment>
<function><type><name>int</name></type> <name>metaAbort</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdbAbort</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</unit>
