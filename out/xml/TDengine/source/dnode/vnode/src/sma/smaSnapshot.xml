<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/sma/smaSnapshot.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sma.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>rsmaSnapReadQTaskInfo</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>rsmaSnapWriteQTaskInfo</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>rsmaQTaskInfSnapReaderOpen</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>rsmaQTaskInfSnapReaderClose</name><parameter_list>(<parameter><decl><type><name>SQTaskFReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// SRSmaSnapReader ========================================</comment>
<struct>struct <name>SRSmaSnapReader</name> <block>{
  <decl_stmt><decl><type><name>SSma</name><modifier>*</modifier></type>   <name>pSma</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>

  <comment type="line">// for data file</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>           <name><name>rsmaDataDone</name><index>[<expr><name>TSDB_RETENTION_L2</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name><name>pDataReader</name><index>[<expr><name>TSDB_RETENTION_L2</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// for qtaskinfo file</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>         <name>qTaskDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQTaskFReader</name><modifier>*</modifier></type> <name>pQTaskFReader</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>rsmaSnapReaderOpen</name><parameter_list>(<parameter><decl><type><name>SSma</name><modifier>*</modifier></type> <name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>SRSmaSnapReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name><modifier>*</modifier></type>          <name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaSnapReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pReader</name> <operator>=</operator> <operator>(</operator><name>SRSmaSnapReader</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name> <operator>=</operator> <name>pSma</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>

  <comment type="line">// open rsma1/rsma2</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>pRSmaTsdb</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapReaderOpen</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pRSmaTsdb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sver</name></expr></argument>, <argument><expr><name>ever</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>SNAP_DATA_RSMA1</name></expr> </then><else>: <expr><name>SNAP_DATA_RSMA2</name></expr></else></ternary></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDataReader</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// open qtaskinfo</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>rsmaQTaskInfSnapReaderOpen</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>ever</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>pReader</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pReader</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rsmaSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader open failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rsmaQTaskInfSnapReaderOpen</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSma</name><modifier>*</modifier></type>      <name>pSma</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name><modifier>*</modifier></type>    <name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaEnv</name><modifier>*</modifier></type>   <name>pEnv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaStat</name><modifier>*</modifier></type> <name>pStat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pEnv</name> <operator>=</operator> <call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader for qtaskinfo version %"</literal> <name>PRIi64</name> <literal type="string">" not need as env is NULL"</literal></expr></argument>,
            <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pStat</name> <operator>=</operator> <operator>(</operator><name>SRSmaStat</name><operator>*</operator><operator>)</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ref</name> <init>= <expr><call><name>tdRSmaFSRef</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name>pStat</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader for qtaskinfo version %"</literal> <name>PRIi64</name> <literal type="string">" not need as ref is %d"</literal></expr></argument>,
            <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>qTaskInfoFullName</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdRSmaQTaskInfoGetFullName</name><argument_list>(<argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdRSmaFSUnRef</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pStat</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader for qtaskinfo version %"</literal> <name>PRIi64</name> <literal type="string">" not need as %s not exist"</literal></expr></argument>,
            <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pQTaskFReader</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQTaskFReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>pQTaskFReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>fp</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>qTaskInfoFullName</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pQTaskFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pQTaskFReader</name><operator>-&gt;</operator><name>pReadH</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pQTaskFReader</name><operator>-&gt;</operator><name>pSma</name></name> <operator>=</operator> <name>pSma</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pQTaskFReader</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr>;</expr_stmt>

<label><name>_end</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdRSmaFSUnRef</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pStat</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader open %s succeed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader open %s succeed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rsmaQTaskInfSnapReaderClose</name><parameter_list>(<parameter><decl><type><name>SQTaskFReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSma</name><modifier>*</modifier></type>      <name>pSma</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>pSma</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaStat</name><modifier>*</modifier></type> <name>pStat</name> <init>= <expr><call><name>SMA_RSMA_STAT</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>version</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>version</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>pReadH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdRSmaFSUnRef</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pStat</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>ppReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader closed for qTaskInfo version %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rsmaSnapReadQTaskInfo</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSma</name><modifier>*</modifier></type>          <name>pSma</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>       <name>pBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQTaskFReader</name><modifier>*</modifier></type> <name>qReader</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pQTaskFReader</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qReader</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppBuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader qtaskinfo, qTaskReader is NULL"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qReader</name><operator>-&gt;</operator><name>pReadH</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppBuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader qtaskinfo, readh is NULL"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosFStatFile</name><argument_list>(<argument><expr><name><name>qReader</name><operator>-&gt;</operator><name>pReadH</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// seek</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>qReader</name><operator>-&gt;</operator><name>pReadH</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ppBuf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// alloc</comment>
  <expr_stmt><expr><operator>*</operator><name>ppBuf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ppBuf</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>qReader</name><operator>-&gt;</operator><name>pReadH</name></name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><operator>*</operator><name>ppBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma read qtaskinfo, size:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ppBuf</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNAP_DATA_QTASK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma read qtaskinfo succeed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>ppBuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma read qtaskinfo failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>rsmaSnapRead</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma read entry"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// read rsma1/rsma2 file</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pTsdbSnapReader</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataReader</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTsdbSnapReader</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>rsmaDataDone</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma read level %d not done"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapRead</name><argument_list>(<argument><expr><name>pTsdbSnapReader</name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>_exit</name>;</goto>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>rsmaDataDone</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma read level %d is done"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// read qtaskinfo file</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>qTaskDone</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma qtaskinfo not done"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rsmaSnapReadQTaskInfo</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>qTaskDone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma read succeed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma read failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>rsmaSnapReaderClose</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaSnapReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><operator>*</operator><name>ppReader</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataReader</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDataReader</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>rsmaQTaskInfSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pQTaskFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma reader closed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>ppReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SRSmaSnapWriter ========================================</comment>
<struct>struct <name>SRSmaSnapWriter</name> <block>{
  <decl_stmt><decl><type><name>SSma</name><modifier>*</modifier></type>   <name>pSma</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>

  <comment type="line">// config</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>commitID</name></decl>;</decl_stmt>

  <comment type="line">// for data file</comment>
  <decl_stmt><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name><name>pDataWriter</name><index>[<expr><name>TSDB_RETENTION_L2</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// for qtaskinfo file</comment>
  <decl_stmt><decl><type><name>SQTaskFReader</name><modifier>*</modifier></type> <name>pQTaskFReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQTaskFWriter</name><modifier>*</modifier></type> <name>pQTaskFWriter</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>rsmaSnapWriterOpen</name><parameter_list>(<parameter><decl><type><name>SSma</name><modifier>*</modifier></type> <name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>SRSmaSnapWriter</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name><modifier>*</modifier></type>          <name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pWriter</name> <operator>=</operator> <operator>(</operator><name>SRSmaSnapWriter</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWriter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name> <operator>=</operator> <name>pSma</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>

  <comment type="line">// rsma1/rsma2</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>pRSmaTsdb</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriterOpen</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pRSmaTsdb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sver</name></expr></argument>, <argument><expr><name>ever</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pDataWriter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// qtaskinfo</comment>
  <decl_stmt><decl><type><name>SQTaskFWriter</name><modifier>*</modifier></type> <name>qWriter</name> <init>= <expr><operator>(</operator><name>SQTaskFWriter</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQTaskFWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>qWriter</name><operator>-&gt;</operator><name>pSma</name></name> <operator>=</operator> <name>pSma</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>qTaskInfoFullName</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdRSmaQTaskInfoGetFullName</name><argument_list>(<argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>qTaskF</name> <init>= <expr><call><name>taosCreateFile</name><argument_list>(<argument><expr><name>qTaskInfoFullName</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qTaskF</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>qWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma snapshot writer open %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>,
             <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>qWriter</name><operator>-&gt;</operator><name>pWriteH</name></name> <operator>=</operator> <name>qTaskF</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>fnameLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>qWriter</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fnameLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>qWriter</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>, <argument><expr><name>fnameLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pQTaskFWriter</name></name> <operator>=</operator> <name>qWriter</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma snapshot writer open succeed for %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// snapWriter</comment>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>pWriter</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma snapshot writer open succeed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma snapshot writer open failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWriter</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rsmaSnapWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pWriter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>rsmaSnapWriterClose</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapWriter</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppWriter</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name> <init>= <expr><operator>*</operator><name>ppWriter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name><modifier>*</modifier></type>          <name>pVnode</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rollback</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO: rsma1/rsma2</comment>
    <comment type="line">// qtaskinfo</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pQTaskFWriter</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pQTaskFWriter</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma writer failed to remove %s since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pQTaskFWriter</name><operator>-&gt;</operator><name>fname</name></name></expr> ?</condition><then> <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pQTaskFWriter</name><operator>-&gt;</operator><name>fname</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>,
                <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// rsma1/rsma2</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDataWriter</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pDataWriter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// qtaskinfo</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pQTaskFWriter</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>qTaskInfoFullName</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tdRSmaQTaskInfoGetFullName</name><argument_list>(<argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosRenameFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pQTaskFWriter</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma writer rename %s to %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pQTaskFWriter</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// rsma restore</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>tdRSmaRestore</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name>RSMA_RESTORE_SYNC</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma writer restore from %s succeed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma writer close succeed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma writer close failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>rsmaSnapWrite</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// rsma1/rsma2</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNAP_DATA_RSMA1</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNAP_DATA_TSDB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWrite</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDataWriter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNAP_DATA_RSMA2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNAP_DATA_TSDB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWrite</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDataWriter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNAP_DATA_QTASK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rsmaSnapWriteQTaskInfo</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma snapshot write for data type %"</literal> <name>PRIi8</name> <literal type="string">" succeed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma snapshot write for data type %"</literal> <name>PRIi8</name> <literal type="string">" failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
           <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>rsmaSnapWriteQTaskInfo</name><parameter_list>(<parameter><decl><type><name>SRSmaSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQTaskFWriter</name><modifier>*</modifier></type> <name>qWriter</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pQTaskFWriter</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>qWriter</name> <operator>&amp;&amp;</operator> <name><name>qWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>       <name>size</name> <init>= <expr><name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <operator>(</operator><name>nData</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>contLen</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>qWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>contLen</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma write qtaskinfo %s succeed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>qWriter</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma write qtaskinfo is not needed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot rsma write qtaskinfo failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
