<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/sma/smaFS.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sma.h"</cpp:file></cpp:include>

<comment type="line">// =================================================================================================</comment>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdFetchQTaskInfoFiles</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdQTaskInfCmprFn1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdQTaskInfCmprFn2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
 * @brief Open RSma FS from qTaskInfo files
 *
 * @param pSma
 * @param version
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>tdRSmaFSOpen</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>    <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>commitID</name> <init>= <expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitID</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaEnv</name>   <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>    <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pEnv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdFetchQTaskInfoFiles</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pStat</name> <operator>=</operator> <operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>vid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>version</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"v%dqinf.v%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SQTaskFile</name></type> <name>qTaskFile</name> <init>= <expr><block>{<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>version</name></expr>, <expr><operator>.</operator><name>nRef</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>tdRSmaFSUpsertQTaskFile</name><argument_list>(<argument><expr><call><name>RSMA_FS</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>qTaskFile</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, open fs, version:%"</literal> <name>PRIi64</name> <literal type="string">", ref:%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>qTaskFile</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>qTaskFile</name><operator>.</operator><name>nRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_end</name>:</label>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, open rsma fs failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdRSmaFSClose</name><parameter_list>(<parameter><decl><type><name>SRSmaFS</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdQTaskInfCmprFn1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>p1</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SQTaskFile</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>version</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>p1</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SQTaskFile</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>version</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdRSmaFSRef</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name>     <modifier>*</modifier></type><name>aQTaskInf</name> <init>= <expr><call><name>RSMA_FS</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>aQTaskInf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQTaskFile</name> <modifier>*</modifier></type><name>pTaskF</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>oldVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><call><name>RSMA_FS_LOCK</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pTaskF</name> <operator>=</operator> <call><name>taosArraySearch</name><argument_list>(<argument><expr><name>aQTaskInf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><name>tdQTaskInfCmprFn1</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>oldVal</name> <operator>=</operator> <call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>oldVal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><call><name>RSMA_FS_LOCK</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>oldVal</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>tdRSmaFSMaxVer</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aQTaskInf</name> <init>= <expr><call><name>RSMA_FS</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>aQTaskInf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>version</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><call><name>RSMA_FS_LOCK</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aQTaskInf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SQTaskFile</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name>aQTaskInf</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>version</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><call><name>RSMA_FS_LOCK</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>version</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdRSmaFSUnRef</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>     <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>     <modifier>*</modifier></type><name>aQTaskInf</name> <init>= <expr><call><name>RSMA_FS</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>aQTaskInf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>qTaskFullName</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQTaskFile</name> <modifier>*</modifier></type><name>pTaskF</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><call><name>RSMA_FS_LOCK</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>taosArraySearchIdx</name><argument_list>(<argument><expr><name>aQTaskInf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><name>tdQTaskInfCmprFn1</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aQTaskInf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTaskF</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aQTaskInf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdRSmaQTaskInfoGetFullName</name><argument_list>(<argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTaskF</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>qTaskFullName</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to remove %s since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskFullName</name></expr></argument>,
                <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, success to remove %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name>aQTaskInf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><call><name>RSMA_FS_LOCK</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Fetch qtaskfiles LE than version
 *
 * @param pSma
 * @param version
 * @param output
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdFetchQTaskInfoFiles</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>       <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdDirPtr</name></type>      <name>pDir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdDirEntryPtr</name></type> <name>pDirEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>dir</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>   <modifier>*</modifier></type><name>pattern</name> <init>= <expr><literal type="string">"v[0-9]+qinf\\.v([0-9]+)?$"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>regex_t</name></type>       <name>regex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdGetVndDirName</name><argument_list>(<argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VNODE_RSMA_DIR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, fetch qtask files, no need as dir %s not exist"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Resource allocation and init</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_REGEX_MATCH</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, fetch qtask files, regcomp for %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pDir</name> <operator>=</operator> <call><name>taosOpenDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, fetch qtask files, open dir %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>dirLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>      <modifier>*</modifier></type><name>dirEnd</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dirLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>regMatch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pDirEntry</name> <operator>=</operator> <call><name>taosReadDir</name><argument_list>(<argument><expr><name>pDir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entryName</name> <init>= <expr><call><name>taosGetDirEntryName</name><argument_list>(<argument><expr><name>pDirEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>entryName</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>entryName</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>regMatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// match</comment>
      <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, fetch qtask files, max ver:%"</literal> <name>PRIi64</name> <literal type="string">", %s found"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>entryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>ver</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>entryName</name></expr></argument>, <argument><expr><name><name>regMatch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ver</name> <operator>&lt;=</operator> <name>version</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ver</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>output</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>output</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <goto>goto <name>_end</name>;</goto>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entryDup</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>entryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>entryDup</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <goto>goto <name>_end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entryDup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <goto>goto <name>_end</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>REG_NOMATCH</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// not match</comment>
      <expr_stmt><expr><call><name>smaTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, fetch qtask files, not match %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>entryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// has other error</comment>
      <decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, fetch qtask files, regexec failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_REGEX_MATCH</name></expr>;</expr_stmt>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
<label><name>_end</name>:</label>
  <expr_stmt><expr><call><name>taosCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>terrno</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TSDB_CODE_SUCCESS</name></expr> </then><else>: <expr><name>TSDB_CODE_FAILED</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdQTaskFileCmprFn2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SQTaskFile</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><operator>-&gt;</operator><name>version</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SQTaskFile</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>version</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>SQTaskFile</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><operator>-&gt;</operator><name>version</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SQTaskFile</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>version</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdRSmaFSUpsertQTaskFile</name><parameter_list>(<parameter><decl><type><name>SRSmaFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>, <parameter><decl><type><name>SQTaskFile</name> <modifier>*</modifier></type><name>qTaskFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><call><name>taosArraySearchIdx</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>, <argument><expr><name>qTaskFile</name></expr></argument>, <argument><expr><name>tdQTaskFileCmprFn2</name></expr></argument>, <argument><expr><name>TD_GE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SQTaskFile</name> <modifier>*</modifier></type><name>pTaskF</name> <init>= <expr><operator>(</operator><name>SQTaskFile</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>c</name> <init>= <expr><call><name>tdQTaskFileCmprFn2</name><argument_list>(<argument><expr><name>pTaskF</name></expr></argument>, <argument><expr><name>qTaskFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTaskF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <name><name>qTaskFile</name><operator>-&gt;</operator><name>nRef</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskF</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>qTaskFile</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTaskF</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>qTaskFile</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>qTaskFile</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function></unit>
