<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/sma/smaTimeRange.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMA_STORAGE_MINUTES_MAX</name></cpp:macro>  <cpp:value>86400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMA_STORAGE_MINUTES_DAY</name></cpp:macro>  <cpp:value>1440</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMA_STORAGE_SPLIT_FACTOR</name></cpp:macro> <cpp:value>14400</cpp:value></cpp:define>  <comment type="line">// least records in tsma file</comment>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessTSmaCreateImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessTSmaInsertImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>indexUid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessTSmaGetDaysImpl</name><parameter_list>(<parameter><decl><type><name>SVnodeCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCont</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>contLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>days</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// TODO: Who is responsible for resource allocate and release?</comment>
<function><type><name>int32_t</name></type> <name>tdProcessTSmaInsert</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>indexUid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>tdProcessTSmaInsertImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>indexUid</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, insert tsma data failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// TODO: destroy SSDataBlocks(msg)</comment>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdProcessTSmaCreate</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>tdProcessTSmaCreateImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, create tsma failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// TODO: destroy SSDataBlocks(msg)</comment>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>smaGetTSmaDays</name><parameter_list>(<parameter><decl><type><name>SVnodeCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCont</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>contLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>days</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>tdProcessTSmaGetDaysImpl</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>days</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, get tsma days failed since %s"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, get tsma days %d"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><operator>*</operator><name>days</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Judge the tsma file split days
 *
 * @param pCfg
 * @param pCont
 * @param contLen
 * @param days unit is minute
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessTSmaGetDaysImpl</name><parameter_list>(<parameter><decl><type><name>SVnodeCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCont</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>contLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>days</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STSma</name></type> <name>tsma</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateTSmaReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsma</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MSG_DECODE_ERROR</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STsdbCfg</name> <modifier>*</modifier></type><name>pTsdbCfg</name> <init>= <expr><operator>&amp;</operator><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>sInterval</name> <init>= <expr><call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><name><name>tsma</name><operator>.</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pTsdbCfg</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>TIME_UNIT_SECOND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sInterval</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>days</name> <operator>=</operator> <name><name>pTsdbCfg</name><operator>-&gt;</operator><name>days</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>records</name> <init>= <expr><name><name>pTsdbCfg</name><operator>-&gt;</operator><name>days</name></name> <operator>*</operator> <literal type="number">60</literal> <operator>/</operator> <name>sInterval</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>records</name> <operator>&gt;=</operator> <name>SMA_STORAGE_SPLIT_FACTOR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>days</name> <operator>=</operator> <name><name>pTsdbCfg</name><operator>-&gt;</operator><name>days</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>mInterval</name> <init>= <expr><call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><name><name>tsma</name><operator>.</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pTsdbCfg</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>TIME_UNIT_MINUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>daysPerFile</name> <init>= <expr><name>mInterval</name> <operator>*</operator> <name>SMA_STORAGE_MINUTES_DAY</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>daysPerFile</name> <operator>&gt;</operator> <name>SMA_STORAGE_MINUTES_MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>days</name> <operator>=</operator> <name>SMA_STORAGE_MINUTES_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>days</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>daysPerFile</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>days</name> <operator>&lt;</operator> <name><name>pTsdbCfg</name><operator>-&gt;</operator><name>days</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>days</name> <operator>=</operator> <name><name>pTsdbCfg</name><operator>-&gt;</operator><name>days</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief create tsma meta and result stable
 *
 * @param pSma
 * @param version
 * @param pMsg
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessTSmaCreateImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaCfg</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><operator>(</operator><name>SSmaCfg</name> <operator>*</operator><operator>)</operator><name>pMsg</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>dstVgId</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// create tsma meta in dstVgId</comment>
    <if_stmt><if>if <condition>(<expr><call><name>metaCreateTSma</name><argument_list>(<argument><expr><call><name>SMA_META</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pCfg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// create stable to save tsma result in dstVgId</comment>
    <decl_stmt><decl><type><name>SName</name></type> <name>stbFullName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbFullName</name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dstTbName</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SVCreateStbReq</name></type> <name>pReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tNameGetTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stbFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>dstTbUid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>schemaRow</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>schemaRow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>schemaTag</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>schemaTag</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>metaCreateSTable</name><argument_list>(<argument><expr><call><name>SMA_META</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, success to create sma index %s %"</literal> <name>PRIi64</name> <literal type="string">" on stb:%"</literal> <name>PRIi64</name> <literal type="string">", dstSuid:%"</literal> <name>PRIi64</name>
             <literal type="string">" dstTb:%s dstVg:%d"</literal></expr></argument>,
             <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>indexName</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>indexUid</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tableUid</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dstTbUid</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dstVgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Insert/Update Time-range-wise SMA data.
 *
 * @param pSma
 * @param msg
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessTSmaInsertImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>indexUid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SArray</name> <modifier>*</modifier></type><name>pDataBlocks</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SArray</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// TODO: destroy SSDataBlocks(msg)</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pDataBlocks</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSMA_INVALID_PTR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, insert tsma data failed since pDataBlocks is NULL"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDataBlocks</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSMA_INVALID_PARA</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, insert tsma data failed since pDataBlocks is empty"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdCheckAndInitSmaEnv</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>TSDB_SMA_TYPE_TIME_RANGE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSMA_INIT_FAILED</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSmaEnv</name>   <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_TSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaStat</name>  <modifier>*</modifier></type><name>pStat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSmaStat</name> <modifier>*</modifier></type><name>pTsmaStat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pEnv</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>pStat</name> <operator>=</operator> <call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSMA_INVALID_STAT</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pTsmaStat</name> <operator>=</operator> <call><name>SMA_STAT_TSMA</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSma</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STSma</name> <modifier>*</modifier></type><name>pTSma</name> <init>= <expr><call><name>metaGetSmaInfoByIndex</name><argument_list>(<argument><expr><call><name>SMA_META</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indexUid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTSma</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get STSma while tsma insert for smaIndex %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>indexUid</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSma</name></name> <operator>=</operator> <name>pTSma</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSchema</name></name> <operator>=</operator> <call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><call><name>SMA_META</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTSma</name><operator>-&gt;</operator><name>dstTbUid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSchema</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get STSchema while tsma insert for smaIndex %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>indexUid</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSma</name><operator>-&gt;</operator><name>indexUid</name></name> <operator>!=</operator> <name>indexUid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsma insert for smaIndex %"</literal> <name>PRIi64</name> <literal type="string">"(!=%"</literal> <name>PRIi64</name> <literal type="string">") failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indexUid</name></expr></argument>,
             <argument><expr><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSma</name><operator>-&gt;</operator><name>indexUid</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SBatchDeleteReq</name></type> <name>deleteReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitReq</name>     <modifier>*</modifier></type><name>pSubmitReq</name> <init>=
      <expr><call><name>tqBlockToSubmit</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>SArray</name> <operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSma</name><operator>-&gt;</operator><name>schemaTag</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                      <argument><expr><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSma</name><operator>-&gt;</operator><name>dstTbUid</name></name></expr></argument>, <argument><expr><name><name>pTsmaStat</name><operator>-&gt;</operator><name>pTSma</name><operator>-&gt;</operator><name>dstTbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deleteReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// TODO deleteReq</comment>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>deleteReq</name><operator>.</operator><name>deleteReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pSubmitReq</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to gen submit blk while tsma insert for smaIndex %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>indexUid</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
   ASSERT(!strncasecmp("td.tsma.rst.tb", pTsmaStat-&gt;pTSma-&gt;dstTbName, 14));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>submitReqMsg</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>,
      <expr><operator>.</operator><name>pCont</name> <operator>=</operator> <name>pSubmitReq</name></expr>,
      <expr><operator>.</operator><name>contLen</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>pSubmitReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>WRITE_QUEUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>submitReqMsg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to put SubmitReq msg while tsma insert for smaIndex %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>indexUid</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>
</unit>
